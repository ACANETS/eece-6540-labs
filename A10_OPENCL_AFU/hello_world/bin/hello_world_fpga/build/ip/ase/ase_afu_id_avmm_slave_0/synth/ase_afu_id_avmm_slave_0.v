// ase_afu_id_avmm_slave_0.v

// Generated using ACDS version 19.2 57

`timescale 1 ps / 1 ps
module ase_afu_id_avmm_slave_0 (
		input  wire        clk,            //         clock.clk
		input  wire        reset,          //         reset.reset
		output wire [63:0] avmm_readdata,  // afu_cfg_slave.readdata
		input  wire [63:0] avmm_writedata, //              .writedata
		input  wire [2:0]  avmm_address,   //              .address
		input  wire        avmm_write,     //              .write
		input  wire        avmm_read       //              .read
	);

	afu_id_avmm_slave #(
		.AFU_ID_H           (64'b0111001000110100011101010011011101111000001000010100000100100101),
		.AFU_ID_L           (64'b0100010000101010010001110010110101001011011000010101000001100100),
		.DFH_FEATURE_TYPE   (4'b0010),
		.DFH_AFU_MINOR_REV  (4'b0000),
		.DFH_AFU_MAJOR_REV  (4'b0000),
		.DFH_END_OF_LIST    (1'b0),
		.DFH_NEXT_OFFSET    (24'b000000010000000000000000),
		.DFH_FEATURE_ID     (12'b000000000000),
		.NEXT_AFU_OFFSET    (24'b000000000000000000000000),
		.CREATE_SCRATCH_REG (1'b0)
	) afu_id_avmm_slave_0 (
		.clk            (clk),            //   input,   width = 1,         clock.clk
		.reset          (reset),          //   input,   width = 1,         reset.reset
		.avmm_readdata  (avmm_readdata),  //  output,  width = 64, afu_cfg_slave.readdata
		.avmm_writedata (avmm_writedata), //   input,  width = 64,              .writedata
		.avmm_address   (avmm_address),   //   input,   width = 3,              .address
		.avmm_write     (avmm_write),     //   input,   width = 1,              .write
		.avmm_read      (avmm_read)       //   input,   width = 1,              .read
	);

endmodule
