// board_irq_ctrl_0.v

// Generated using ACDS version 19.2 57

`timescale 1 ps / 1 ps
module board_irq_ctrl_0 (
		input  wire        IrqRead_i,         //     IRQ_Read_Slave.read
		output wire [31:0] IrqReadData_o,     //                   .readdata
		input  wire        MaskWrite_i,       //     IRQ_Mask_Slave.write
		input  wire [31:0] MaskWritedata_i,   //                   .writedata
		input  wire [3:0]  MaskByteenable_i,  //                   .byteenable
		input  wire        MaskRead_i,        //                   .read
		output wire [31:0] MaskReaddata_o,    //                   .readdata
		output wire        MaskWaitrequest_o, //                   .waitrequest
		input  wire        Clk_i,             //              Clock.clk
		input  wire        Rstn_i,            //             Resetn.reset_n
		input  wire [31:0] Irq_i,             // interrupt_receiver.irq
		output wire        Irq_o              //   interrupt_sender.irq
	);

	irq_ctrl board_irq_ctrl_0 (
		.IrqRead_i         (IrqRead_i),         //   input,   width = 1,     IRQ_Read_Slave.read
		.IrqReadData_o     (IrqReadData_o),     //  output,  width = 32,                   .readdata
		.MaskWrite_i       (MaskWrite_i),       //   input,   width = 1,     IRQ_Mask_Slave.write
		.MaskWritedata_i   (MaskWritedata_i),   //   input,  width = 32,                   .writedata
		.MaskByteenable_i  (MaskByteenable_i),  //   input,   width = 4,                   .byteenable
		.MaskRead_i        (MaskRead_i),        //   input,   width = 1,                   .read
		.MaskReaddata_o    (MaskReaddata_o),    //  output,  width = 32,                   .readdata
		.MaskWaitrequest_o (MaskWaitrequest_o), //  output,   width = 1,                   .waitrequest
		.Clk_i             (Clk_i),             //   input,   width = 1,              Clock.clk
		.Rstn_i            (Rstn_i),            //   input,   width = 1,             Resetn.reset_n
		.Irq_i             (Irq_i),             //   input,  width = 32, interrupt_receiver.irq
		.Irq_o             (Irq_o)              //  output,   width = 1,   interrupt_sender.irq
	);

endmodule
