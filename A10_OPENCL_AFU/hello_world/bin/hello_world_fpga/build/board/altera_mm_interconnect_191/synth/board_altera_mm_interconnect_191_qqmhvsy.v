// board_altera_mm_interconnect_191_qqmhvsy.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 19.2 57

`timescale 1 ps / 1 ps
module board_altera_mm_interconnect_191_qqmhvsy (
		input  wire [17:0] pipe_stage_host_ctrl_m0_address,                        //                          pipe_stage_host_ctrl_m0.address
		output wire        pipe_stage_host_ctrl_m0_waitrequest,                    //                                                 .waitrequest
		input  wire [0:0]  pipe_stage_host_ctrl_m0_burstcount,                     //                                                 .burstcount
		input  wire [7:0]  pipe_stage_host_ctrl_m0_byteenable,                     //                                                 .byteenable
		input  wire        pipe_stage_host_ctrl_m0_read,                           //                                                 .read
		output wire [63:0] pipe_stage_host_ctrl_m0_readdata,                       //                                                 .readdata
		output wire        pipe_stage_host_ctrl_m0_readdatavalid,                  //                                                 .readdatavalid
		input  wire        pipe_stage_host_ctrl_m0_write,                          //                                                 .write
		input  wire [63:0] pipe_stage_host_ctrl_m0_writedata,                      //                                                 .writedata
		input  wire        pipe_stage_host_ctrl_m0_debugaccess,                    //                                                 .debugaccess
		output wire        board_irq_ctrl_0_IRQ_Mask_Slave_write,                  //                  board_irq_ctrl_0_IRQ_Mask_Slave.write
		output wire        board_irq_ctrl_0_IRQ_Mask_Slave_read,                   //                                                 .read
		input  wire [31:0] board_irq_ctrl_0_IRQ_Mask_Slave_readdata,               //                                                 .readdata
		output wire [31:0] board_irq_ctrl_0_IRQ_Mask_Slave_writedata,              //                                                 .writedata
		output wire [3:0]  board_irq_ctrl_0_IRQ_Mask_Slave_byteenable,             //                                                 .byteenable
		input  wire        board_irq_ctrl_0_IRQ_Mask_Slave_waitrequest,            //                                                 .waitrequest
		output wire        board_irq_ctrl_0_IRQ_Read_Slave_read,                   //                  board_irq_ctrl_0_IRQ_Read_Slave.read
		input  wire [31:0] board_irq_ctrl_0_IRQ_Read_Slave_readdata,               //                                                 .readdata
		output wire [2:0]  board_afu_id_avmm_slave_0_afu_cfg_slave_address,        //          board_afu_id_avmm_slave_0_afu_cfg_slave.address
		output wire        board_afu_id_avmm_slave_0_afu_cfg_slave_write,          //                                                 .write
		output wire        board_afu_id_avmm_slave_0_afu_cfg_slave_read,           //                                                 .read
		input  wire [63:0] board_afu_id_avmm_slave_0_afu_cfg_slave_readdata,       //                                                 .readdata
		output wire [63:0] board_afu_id_avmm_slave_0_afu_cfg_slave_writedata,      //                                                 .writedata
		output wire [12:0] ddr_board_ase_0_avmm_pipe_slave_address,                //                  ddr_board_ase_0_avmm_pipe_slave.address
		output wire        ddr_board_ase_0_avmm_pipe_slave_write,                  //                                                 .write
		output wire        ddr_board_ase_0_avmm_pipe_slave_read,                   //                                                 .read
		input  wire [63:0] ddr_board_ase_0_avmm_pipe_slave_readdata,               //                                                 .readdata
		output wire [63:0] ddr_board_ase_0_avmm_pipe_slave_writedata,              //                                                 .writedata
		output wire [0:0]  ddr_board_ase_0_avmm_pipe_slave_burstcount,             //                                                 .burstcount
		output wire [7:0]  ddr_board_ase_0_avmm_pipe_slave_byteenable,             //                                                 .byteenable
		input  wire        ddr_board_ase_0_avmm_pipe_slave_readdatavalid,          //                                                 .readdatavalid
		input  wire        ddr_board_ase_0_avmm_pipe_slave_waitrequest,            //                                                 .waitrequest
		output wire        ddr_board_ase_0_avmm_pipe_slave_debugaccess,            //                                                 .debugaccess
		output wire [13:0] kernel_interface_ctrl_address,                          //                            kernel_interface_ctrl.address
		output wire        kernel_interface_ctrl_write,                            //                                                 .write
		output wire        kernel_interface_ctrl_read,                             //                                                 .read
		input  wire [31:0] kernel_interface_ctrl_readdata,                         //                                                 .readdata
		output wire [31:0] kernel_interface_ctrl_writedata,                        //                                                 .writedata
		output wire [0:0]  kernel_interface_ctrl_burstcount,                       //                                                 .burstcount
		output wire [3:0]  kernel_interface_ctrl_byteenable,                       //                                                 .byteenable
		input  wire        kernel_interface_ctrl_readdatavalid,                    //                                                 .readdatavalid
		input  wire        kernel_interface_ctrl_waitrequest,                      //                                                 .waitrequest
		output wire        kernel_interface_ctrl_debugaccess,                      //                                                 .debugaccess
		output wire [6:0]  ddr_board_msgdma_bbb_0_csr_address,                     //                       ddr_board_msgdma_bbb_0_csr.address
		output wire        ddr_board_msgdma_bbb_0_csr_write,                       //                                                 .write
		output wire        ddr_board_msgdma_bbb_0_csr_read,                        //                                                 .read
		input  wire [63:0] ddr_board_msgdma_bbb_0_csr_readdata,                    //                                                 .readdata
		output wire [63:0] ddr_board_msgdma_bbb_0_csr_writedata,                   //                                                 .writedata
		output wire [0:0]  ddr_board_msgdma_bbb_0_csr_burstcount,                  //                                                 .burstcount
		output wire [7:0]  ddr_board_msgdma_bbb_0_csr_byteenable,                  //                                                 .byteenable
		input  wire        ddr_board_msgdma_bbb_0_csr_readdatavalid,               //                                                 .readdatavalid
		input  wire        ddr_board_msgdma_bbb_0_csr_waitrequest,                 //                                                 .waitrequest
		output wire        ddr_board_msgdma_bbb_0_csr_debugaccess,                 //                                                 .debugaccess
		output wire [6:0]  ddr_board_msgdma_bbb_1_csr_address,                     //                       ddr_board_msgdma_bbb_1_csr.address
		output wire        ddr_board_msgdma_bbb_1_csr_write,                       //                                                 .write
		output wire        ddr_board_msgdma_bbb_1_csr_read,                        //                                                 .read
		input  wire [63:0] ddr_board_msgdma_bbb_1_csr_readdata,                    //                                                 .readdata
		output wire [63:0] ddr_board_msgdma_bbb_1_csr_writedata,                   //                                                 .writedata
		output wire [0:0]  ddr_board_msgdma_bbb_1_csr_burstcount,                  //                                                 .burstcount
		output wire [7:0]  ddr_board_msgdma_bbb_1_csr_byteenable,                  //                                                 .byteenable
		input  wire        ddr_board_msgdma_bbb_1_csr_readdatavalid,               //                                                 .readdatavalid
		input  wire        ddr_board_msgdma_bbb_1_csr_waitrequest,                 //                                                 .waitrequest
		output wire        ddr_board_msgdma_bbb_1_csr_debugaccess,                 //                                                 .debugaccess
		output wire [2:0]  ddr_board_null_dfh_afu_id_address,                      //                        ddr_board_null_dfh_afu_id.address
		output wire        ddr_board_null_dfh_afu_id_write,                        //                                                 .write
		output wire        ddr_board_null_dfh_afu_id_read,                         //                                                 .read
		input  wire [63:0] ddr_board_null_dfh_afu_id_readdata,                     //                                                 .readdata
		output wire [63:0] ddr_board_null_dfh_afu_id_writedata,                    //                                                 .writedata
		input  wire        pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset, // pipe_stage_host_ctrl_reset_reset_bridge_in_reset.reset
		input  wire        clk_200_out_clk_clk                                     //                                  clk_200_out_clk.clk
	);

	wire          pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_waitrequest;   // pipe_stage_host_ctrl_m0_agent:av_waitrequest -> pipe_stage_host_ctrl_m0_translator:uav_waitrequest
	wire   [63:0] pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_readdata;      // pipe_stage_host_ctrl_m0_agent:av_readdata -> pipe_stage_host_ctrl_m0_translator:uav_readdata
	wire          pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_debugaccess;   // pipe_stage_host_ctrl_m0_translator:uav_debugaccess -> pipe_stage_host_ctrl_m0_agent:av_debugaccess
	wire   [17:0] pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_address;       // pipe_stage_host_ctrl_m0_translator:uav_address -> pipe_stage_host_ctrl_m0_agent:av_address
	wire          pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_read;          // pipe_stage_host_ctrl_m0_translator:uav_read -> pipe_stage_host_ctrl_m0_agent:av_read
	wire    [7:0] pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_byteenable;    // pipe_stage_host_ctrl_m0_translator:uav_byteenable -> pipe_stage_host_ctrl_m0_agent:av_byteenable
	wire          pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_readdatavalid; // pipe_stage_host_ctrl_m0_agent:av_readdatavalid -> pipe_stage_host_ctrl_m0_translator:uav_readdatavalid
	wire          pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_lock;          // pipe_stage_host_ctrl_m0_translator:uav_lock -> pipe_stage_host_ctrl_m0_agent:av_lock
	wire          pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_write;         // pipe_stage_host_ctrl_m0_translator:uav_write -> pipe_stage_host_ctrl_m0_agent:av_write
	wire   [63:0] pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_writedata;     // pipe_stage_host_ctrl_m0_translator:uav_writedata -> pipe_stage_host_ctrl_m0_agent:av_writedata
	wire    [3:0] pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_burstcount;    // pipe_stage_host_ctrl_m0_translator:uav_burstcount -> pipe_stage_host_ctrl_m0_agent:av_burstcount
	wire   [31:0] board_irq_ctrl_0_irq_mask_slave_agent_m0_readdata;                          // board_irq_ctrl_0_IRQ_Mask_Slave_translator:uav_readdata -> board_irq_ctrl_0_IRQ_Mask_Slave_agent:m0_readdata
	wire          board_irq_ctrl_0_irq_mask_slave_agent_m0_waitrequest;                       // board_irq_ctrl_0_IRQ_Mask_Slave_translator:uav_waitrequest -> board_irq_ctrl_0_IRQ_Mask_Slave_agent:m0_waitrequest
	wire          board_irq_ctrl_0_irq_mask_slave_agent_m0_debugaccess;                       // board_irq_ctrl_0_IRQ_Mask_Slave_agent:m0_debugaccess -> board_irq_ctrl_0_IRQ_Mask_Slave_translator:uav_debugaccess
	wire   [17:0] board_irq_ctrl_0_irq_mask_slave_agent_m0_address;                           // board_irq_ctrl_0_IRQ_Mask_Slave_agent:m0_address -> board_irq_ctrl_0_IRQ_Mask_Slave_translator:uav_address
	wire    [3:0] board_irq_ctrl_0_irq_mask_slave_agent_m0_byteenable;                        // board_irq_ctrl_0_IRQ_Mask_Slave_agent:m0_byteenable -> board_irq_ctrl_0_IRQ_Mask_Slave_translator:uav_byteenable
	wire          board_irq_ctrl_0_irq_mask_slave_agent_m0_read;                              // board_irq_ctrl_0_IRQ_Mask_Slave_agent:m0_read -> board_irq_ctrl_0_IRQ_Mask_Slave_translator:uav_read
	wire          board_irq_ctrl_0_irq_mask_slave_agent_m0_readdatavalid;                     // board_irq_ctrl_0_IRQ_Mask_Slave_translator:uav_readdatavalid -> board_irq_ctrl_0_IRQ_Mask_Slave_agent:m0_readdatavalid
	wire          board_irq_ctrl_0_irq_mask_slave_agent_m0_lock;                              // board_irq_ctrl_0_IRQ_Mask_Slave_agent:m0_lock -> board_irq_ctrl_0_IRQ_Mask_Slave_translator:uav_lock
	wire   [31:0] board_irq_ctrl_0_irq_mask_slave_agent_m0_writedata;                         // board_irq_ctrl_0_IRQ_Mask_Slave_agent:m0_writedata -> board_irq_ctrl_0_IRQ_Mask_Slave_translator:uav_writedata
	wire          board_irq_ctrl_0_irq_mask_slave_agent_m0_write;                             // board_irq_ctrl_0_IRQ_Mask_Slave_agent:m0_write -> board_irq_ctrl_0_IRQ_Mask_Slave_translator:uav_write
	wire    [2:0] board_irq_ctrl_0_irq_mask_slave_agent_m0_burstcount;                        // board_irq_ctrl_0_IRQ_Mask_Slave_agent:m0_burstcount -> board_irq_ctrl_0_IRQ_Mask_Slave_translator:uav_burstcount
	wire          board_irq_ctrl_0_irq_mask_slave_agent_rf_source_valid;                      // board_irq_ctrl_0_IRQ_Mask_Slave_agent:rf_source_valid -> board_irq_ctrl_0_IRQ_Mask_Slave_agent_rsp_fifo:in_valid
	wire  [102:0] board_irq_ctrl_0_irq_mask_slave_agent_rf_source_data;                       // board_irq_ctrl_0_IRQ_Mask_Slave_agent:rf_source_data -> board_irq_ctrl_0_IRQ_Mask_Slave_agent_rsp_fifo:in_data
	wire          board_irq_ctrl_0_irq_mask_slave_agent_rf_source_ready;                      // board_irq_ctrl_0_IRQ_Mask_Slave_agent_rsp_fifo:in_ready -> board_irq_ctrl_0_IRQ_Mask_Slave_agent:rf_source_ready
	wire          board_irq_ctrl_0_irq_mask_slave_agent_rf_source_startofpacket;              // board_irq_ctrl_0_IRQ_Mask_Slave_agent:rf_source_startofpacket -> board_irq_ctrl_0_IRQ_Mask_Slave_agent_rsp_fifo:in_startofpacket
	wire          board_irq_ctrl_0_irq_mask_slave_agent_rf_source_endofpacket;                // board_irq_ctrl_0_IRQ_Mask_Slave_agent:rf_source_endofpacket -> board_irq_ctrl_0_IRQ_Mask_Slave_agent_rsp_fifo:in_endofpacket
	wire          board_irq_ctrl_0_irq_mask_slave_agent_rsp_fifo_out_valid;                   // board_irq_ctrl_0_IRQ_Mask_Slave_agent_rsp_fifo:out_valid -> board_irq_ctrl_0_IRQ_Mask_Slave_agent:rf_sink_valid
	wire  [102:0] board_irq_ctrl_0_irq_mask_slave_agent_rsp_fifo_out_data;                    // board_irq_ctrl_0_IRQ_Mask_Slave_agent_rsp_fifo:out_data -> board_irq_ctrl_0_IRQ_Mask_Slave_agent:rf_sink_data
	wire          board_irq_ctrl_0_irq_mask_slave_agent_rsp_fifo_out_ready;                   // board_irq_ctrl_0_IRQ_Mask_Slave_agent:rf_sink_ready -> board_irq_ctrl_0_IRQ_Mask_Slave_agent_rsp_fifo:out_ready
	wire          board_irq_ctrl_0_irq_mask_slave_agent_rsp_fifo_out_startofpacket;           // board_irq_ctrl_0_IRQ_Mask_Slave_agent_rsp_fifo:out_startofpacket -> board_irq_ctrl_0_IRQ_Mask_Slave_agent:rf_sink_startofpacket
	wire          board_irq_ctrl_0_irq_mask_slave_agent_rsp_fifo_out_endofpacket;             // board_irq_ctrl_0_IRQ_Mask_Slave_agent_rsp_fifo:out_endofpacket -> board_irq_ctrl_0_IRQ_Mask_Slave_agent:rf_sink_endofpacket
	wire          board_irq_ctrl_0_irq_mask_slave_agent_rdata_fifo_src_valid;                 // board_irq_ctrl_0_IRQ_Mask_Slave_agent:rdata_fifo_src_valid -> board_irq_ctrl_0_IRQ_Mask_Slave_agent:rdata_fifo_sink_valid
	wire   [33:0] board_irq_ctrl_0_irq_mask_slave_agent_rdata_fifo_src_data;                  // board_irq_ctrl_0_IRQ_Mask_Slave_agent:rdata_fifo_src_data -> board_irq_ctrl_0_IRQ_Mask_Slave_agent:rdata_fifo_sink_data
	wire          board_irq_ctrl_0_irq_mask_slave_agent_rdata_fifo_src_ready;                 // board_irq_ctrl_0_IRQ_Mask_Slave_agent:rdata_fifo_sink_ready -> board_irq_ctrl_0_IRQ_Mask_Slave_agent:rdata_fifo_src_ready
	wire   [31:0] board_irq_ctrl_0_irq_read_slave_agent_m0_readdata;                          // board_irq_ctrl_0_IRQ_Read_Slave_translator:uav_readdata -> board_irq_ctrl_0_IRQ_Read_Slave_agent:m0_readdata
	wire          board_irq_ctrl_0_irq_read_slave_agent_m0_waitrequest;                       // board_irq_ctrl_0_IRQ_Read_Slave_translator:uav_waitrequest -> board_irq_ctrl_0_IRQ_Read_Slave_agent:m0_waitrequest
	wire          board_irq_ctrl_0_irq_read_slave_agent_m0_debugaccess;                       // board_irq_ctrl_0_IRQ_Read_Slave_agent:m0_debugaccess -> board_irq_ctrl_0_IRQ_Read_Slave_translator:uav_debugaccess
	wire   [17:0] board_irq_ctrl_0_irq_read_slave_agent_m0_address;                           // board_irq_ctrl_0_IRQ_Read_Slave_agent:m0_address -> board_irq_ctrl_0_IRQ_Read_Slave_translator:uav_address
	wire    [3:0] board_irq_ctrl_0_irq_read_slave_agent_m0_byteenable;                        // board_irq_ctrl_0_IRQ_Read_Slave_agent:m0_byteenable -> board_irq_ctrl_0_IRQ_Read_Slave_translator:uav_byteenable
	wire          board_irq_ctrl_0_irq_read_slave_agent_m0_read;                              // board_irq_ctrl_0_IRQ_Read_Slave_agent:m0_read -> board_irq_ctrl_0_IRQ_Read_Slave_translator:uav_read
	wire          board_irq_ctrl_0_irq_read_slave_agent_m0_readdatavalid;                     // board_irq_ctrl_0_IRQ_Read_Slave_translator:uav_readdatavalid -> board_irq_ctrl_0_IRQ_Read_Slave_agent:m0_readdatavalid
	wire          board_irq_ctrl_0_irq_read_slave_agent_m0_lock;                              // board_irq_ctrl_0_IRQ_Read_Slave_agent:m0_lock -> board_irq_ctrl_0_IRQ_Read_Slave_translator:uav_lock
	wire   [31:0] board_irq_ctrl_0_irq_read_slave_agent_m0_writedata;                         // board_irq_ctrl_0_IRQ_Read_Slave_agent:m0_writedata -> board_irq_ctrl_0_IRQ_Read_Slave_translator:uav_writedata
	wire          board_irq_ctrl_0_irq_read_slave_agent_m0_write;                             // board_irq_ctrl_0_IRQ_Read_Slave_agent:m0_write -> board_irq_ctrl_0_IRQ_Read_Slave_translator:uav_write
	wire    [2:0] board_irq_ctrl_0_irq_read_slave_agent_m0_burstcount;                        // board_irq_ctrl_0_IRQ_Read_Slave_agent:m0_burstcount -> board_irq_ctrl_0_IRQ_Read_Slave_translator:uav_burstcount
	wire          board_irq_ctrl_0_irq_read_slave_agent_rf_source_valid;                      // board_irq_ctrl_0_IRQ_Read_Slave_agent:rf_source_valid -> board_irq_ctrl_0_IRQ_Read_Slave_agent_rsp_fifo:in_valid
	wire  [102:0] board_irq_ctrl_0_irq_read_slave_agent_rf_source_data;                       // board_irq_ctrl_0_IRQ_Read_Slave_agent:rf_source_data -> board_irq_ctrl_0_IRQ_Read_Slave_agent_rsp_fifo:in_data
	wire          board_irq_ctrl_0_irq_read_slave_agent_rf_source_ready;                      // board_irq_ctrl_0_IRQ_Read_Slave_agent_rsp_fifo:in_ready -> board_irq_ctrl_0_IRQ_Read_Slave_agent:rf_source_ready
	wire          board_irq_ctrl_0_irq_read_slave_agent_rf_source_startofpacket;              // board_irq_ctrl_0_IRQ_Read_Slave_agent:rf_source_startofpacket -> board_irq_ctrl_0_IRQ_Read_Slave_agent_rsp_fifo:in_startofpacket
	wire          board_irq_ctrl_0_irq_read_slave_agent_rf_source_endofpacket;                // board_irq_ctrl_0_IRQ_Read_Slave_agent:rf_source_endofpacket -> board_irq_ctrl_0_IRQ_Read_Slave_agent_rsp_fifo:in_endofpacket
	wire          board_irq_ctrl_0_irq_read_slave_agent_rsp_fifo_out_valid;                   // board_irq_ctrl_0_IRQ_Read_Slave_agent_rsp_fifo:out_valid -> board_irq_ctrl_0_IRQ_Read_Slave_agent:rf_sink_valid
	wire  [102:0] board_irq_ctrl_0_irq_read_slave_agent_rsp_fifo_out_data;                    // board_irq_ctrl_0_IRQ_Read_Slave_agent_rsp_fifo:out_data -> board_irq_ctrl_0_IRQ_Read_Slave_agent:rf_sink_data
	wire          board_irq_ctrl_0_irq_read_slave_agent_rsp_fifo_out_ready;                   // board_irq_ctrl_0_IRQ_Read_Slave_agent:rf_sink_ready -> board_irq_ctrl_0_IRQ_Read_Slave_agent_rsp_fifo:out_ready
	wire          board_irq_ctrl_0_irq_read_slave_agent_rsp_fifo_out_startofpacket;           // board_irq_ctrl_0_IRQ_Read_Slave_agent_rsp_fifo:out_startofpacket -> board_irq_ctrl_0_IRQ_Read_Slave_agent:rf_sink_startofpacket
	wire          board_irq_ctrl_0_irq_read_slave_agent_rsp_fifo_out_endofpacket;             // board_irq_ctrl_0_IRQ_Read_Slave_agent_rsp_fifo:out_endofpacket -> board_irq_ctrl_0_IRQ_Read_Slave_agent:rf_sink_endofpacket
	wire          board_irq_ctrl_0_irq_read_slave_agent_rdata_fifo_src_valid;                 // board_irq_ctrl_0_IRQ_Read_Slave_agent:rdata_fifo_src_valid -> board_irq_ctrl_0_IRQ_Read_Slave_agent:rdata_fifo_sink_valid
	wire   [33:0] board_irq_ctrl_0_irq_read_slave_agent_rdata_fifo_src_data;                  // board_irq_ctrl_0_IRQ_Read_Slave_agent:rdata_fifo_src_data -> board_irq_ctrl_0_IRQ_Read_Slave_agent:rdata_fifo_sink_data
	wire          board_irq_ctrl_0_irq_read_slave_agent_rdata_fifo_src_ready;                 // board_irq_ctrl_0_IRQ_Read_Slave_agent:rdata_fifo_sink_ready -> board_irq_ctrl_0_IRQ_Read_Slave_agent:rdata_fifo_src_ready
	wire   [63:0] board_afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_readdata;                  // board_afu_id_avmm_slave_0_afu_cfg_slave_translator:uav_readdata -> board_afu_id_avmm_slave_0_afu_cfg_slave_agent:m0_readdata
	wire          board_afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_waitrequest;               // board_afu_id_avmm_slave_0_afu_cfg_slave_translator:uav_waitrequest -> board_afu_id_avmm_slave_0_afu_cfg_slave_agent:m0_waitrequest
	wire          board_afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_debugaccess;               // board_afu_id_avmm_slave_0_afu_cfg_slave_agent:m0_debugaccess -> board_afu_id_avmm_slave_0_afu_cfg_slave_translator:uav_debugaccess
	wire   [17:0] board_afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_address;                   // board_afu_id_avmm_slave_0_afu_cfg_slave_agent:m0_address -> board_afu_id_avmm_slave_0_afu_cfg_slave_translator:uav_address
	wire    [7:0] board_afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_byteenable;                // board_afu_id_avmm_slave_0_afu_cfg_slave_agent:m0_byteenable -> board_afu_id_avmm_slave_0_afu_cfg_slave_translator:uav_byteenable
	wire          board_afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_read;                      // board_afu_id_avmm_slave_0_afu_cfg_slave_agent:m0_read -> board_afu_id_avmm_slave_0_afu_cfg_slave_translator:uav_read
	wire          board_afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_readdatavalid;             // board_afu_id_avmm_slave_0_afu_cfg_slave_translator:uav_readdatavalid -> board_afu_id_avmm_slave_0_afu_cfg_slave_agent:m0_readdatavalid
	wire          board_afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_lock;                      // board_afu_id_avmm_slave_0_afu_cfg_slave_agent:m0_lock -> board_afu_id_avmm_slave_0_afu_cfg_slave_translator:uav_lock
	wire   [63:0] board_afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_writedata;                 // board_afu_id_avmm_slave_0_afu_cfg_slave_agent:m0_writedata -> board_afu_id_avmm_slave_0_afu_cfg_slave_translator:uav_writedata
	wire          board_afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_write;                     // board_afu_id_avmm_slave_0_afu_cfg_slave_agent:m0_write -> board_afu_id_avmm_slave_0_afu_cfg_slave_translator:uav_write
	wire    [3:0] board_afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_burstcount;                // board_afu_id_avmm_slave_0_afu_cfg_slave_agent:m0_burstcount -> board_afu_id_avmm_slave_0_afu_cfg_slave_translator:uav_burstcount
	wire          board_afu_id_avmm_slave_0_afu_cfg_slave_agent_rf_source_valid;              // board_afu_id_avmm_slave_0_afu_cfg_slave_agent:rf_source_valid -> board_afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo:in_valid
	wire  [138:0] board_afu_id_avmm_slave_0_afu_cfg_slave_agent_rf_source_data;               // board_afu_id_avmm_slave_0_afu_cfg_slave_agent:rf_source_data -> board_afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo:in_data
	wire          board_afu_id_avmm_slave_0_afu_cfg_slave_agent_rf_source_ready;              // board_afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo:in_ready -> board_afu_id_avmm_slave_0_afu_cfg_slave_agent:rf_source_ready
	wire          board_afu_id_avmm_slave_0_afu_cfg_slave_agent_rf_source_startofpacket;      // board_afu_id_avmm_slave_0_afu_cfg_slave_agent:rf_source_startofpacket -> board_afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo:in_startofpacket
	wire          board_afu_id_avmm_slave_0_afu_cfg_slave_agent_rf_source_endofpacket;        // board_afu_id_avmm_slave_0_afu_cfg_slave_agent:rf_source_endofpacket -> board_afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo:in_endofpacket
	wire          board_afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo_out_valid;           // board_afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo:out_valid -> board_afu_id_avmm_slave_0_afu_cfg_slave_agent:rf_sink_valid
	wire  [138:0] board_afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo_out_data;            // board_afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo:out_data -> board_afu_id_avmm_slave_0_afu_cfg_slave_agent:rf_sink_data
	wire          board_afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo_out_ready;           // board_afu_id_avmm_slave_0_afu_cfg_slave_agent:rf_sink_ready -> board_afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo:out_ready
	wire          board_afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo_out_startofpacket;   // board_afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo:out_startofpacket -> board_afu_id_avmm_slave_0_afu_cfg_slave_agent:rf_sink_startofpacket
	wire          board_afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo_out_endofpacket;     // board_afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo:out_endofpacket -> board_afu_id_avmm_slave_0_afu_cfg_slave_agent:rf_sink_endofpacket
	wire          board_afu_id_avmm_slave_0_afu_cfg_slave_agent_rdata_fifo_src_valid;         // board_afu_id_avmm_slave_0_afu_cfg_slave_agent:rdata_fifo_src_valid -> board_afu_id_avmm_slave_0_afu_cfg_slave_agent:rdata_fifo_sink_valid
	wire   [65:0] board_afu_id_avmm_slave_0_afu_cfg_slave_agent_rdata_fifo_src_data;          // board_afu_id_avmm_slave_0_afu_cfg_slave_agent:rdata_fifo_src_data -> board_afu_id_avmm_slave_0_afu_cfg_slave_agent:rdata_fifo_sink_data
	wire          board_afu_id_avmm_slave_0_afu_cfg_slave_agent_rdata_fifo_src_ready;         // board_afu_id_avmm_slave_0_afu_cfg_slave_agent:rdata_fifo_sink_ready -> board_afu_id_avmm_slave_0_afu_cfg_slave_agent:rdata_fifo_src_ready
	wire   [63:0] ddr_board_ase_0_avmm_pipe_slave_agent_m0_readdata;                          // ddr_board_ase_0_avmm_pipe_slave_translator:uav_readdata -> ddr_board_ase_0_avmm_pipe_slave_agent:m0_readdata
	wire          ddr_board_ase_0_avmm_pipe_slave_agent_m0_waitrequest;                       // ddr_board_ase_0_avmm_pipe_slave_translator:uav_waitrequest -> ddr_board_ase_0_avmm_pipe_slave_agent:m0_waitrequest
	wire          ddr_board_ase_0_avmm_pipe_slave_agent_m0_debugaccess;                       // ddr_board_ase_0_avmm_pipe_slave_agent:m0_debugaccess -> ddr_board_ase_0_avmm_pipe_slave_translator:uav_debugaccess
	wire   [17:0] ddr_board_ase_0_avmm_pipe_slave_agent_m0_address;                           // ddr_board_ase_0_avmm_pipe_slave_agent:m0_address -> ddr_board_ase_0_avmm_pipe_slave_translator:uav_address
	wire    [7:0] ddr_board_ase_0_avmm_pipe_slave_agent_m0_byteenable;                        // ddr_board_ase_0_avmm_pipe_slave_agent:m0_byteenable -> ddr_board_ase_0_avmm_pipe_slave_translator:uav_byteenable
	wire          ddr_board_ase_0_avmm_pipe_slave_agent_m0_read;                              // ddr_board_ase_0_avmm_pipe_slave_agent:m0_read -> ddr_board_ase_0_avmm_pipe_slave_translator:uav_read
	wire          ddr_board_ase_0_avmm_pipe_slave_agent_m0_readdatavalid;                     // ddr_board_ase_0_avmm_pipe_slave_translator:uav_readdatavalid -> ddr_board_ase_0_avmm_pipe_slave_agent:m0_readdatavalid
	wire          ddr_board_ase_0_avmm_pipe_slave_agent_m0_lock;                              // ddr_board_ase_0_avmm_pipe_slave_agent:m0_lock -> ddr_board_ase_0_avmm_pipe_slave_translator:uav_lock
	wire   [63:0] ddr_board_ase_0_avmm_pipe_slave_agent_m0_writedata;                         // ddr_board_ase_0_avmm_pipe_slave_agent:m0_writedata -> ddr_board_ase_0_avmm_pipe_slave_translator:uav_writedata
	wire          ddr_board_ase_0_avmm_pipe_slave_agent_m0_write;                             // ddr_board_ase_0_avmm_pipe_slave_agent:m0_write -> ddr_board_ase_0_avmm_pipe_slave_translator:uav_write
	wire    [3:0] ddr_board_ase_0_avmm_pipe_slave_agent_m0_burstcount;                        // ddr_board_ase_0_avmm_pipe_slave_agent:m0_burstcount -> ddr_board_ase_0_avmm_pipe_slave_translator:uav_burstcount
	wire          ddr_board_ase_0_avmm_pipe_slave_agent_rf_source_valid;                      // ddr_board_ase_0_avmm_pipe_slave_agent:rf_source_valid -> ddr_board_ase_0_avmm_pipe_slave_agent_rsp_fifo:in_valid
	wire  [138:0] ddr_board_ase_0_avmm_pipe_slave_agent_rf_source_data;                       // ddr_board_ase_0_avmm_pipe_slave_agent:rf_source_data -> ddr_board_ase_0_avmm_pipe_slave_agent_rsp_fifo:in_data
	wire          ddr_board_ase_0_avmm_pipe_slave_agent_rf_source_ready;                      // ddr_board_ase_0_avmm_pipe_slave_agent_rsp_fifo:in_ready -> ddr_board_ase_0_avmm_pipe_slave_agent:rf_source_ready
	wire          ddr_board_ase_0_avmm_pipe_slave_agent_rf_source_startofpacket;              // ddr_board_ase_0_avmm_pipe_slave_agent:rf_source_startofpacket -> ddr_board_ase_0_avmm_pipe_slave_agent_rsp_fifo:in_startofpacket
	wire          ddr_board_ase_0_avmm_pipe_slave_agent_rf_source_endofpacket;                // ddr_board_ase_0_avmm_pipe_slave_agent:rf_source_endofpacket -> ddr_board_ase_0_avmm_pipe_slave_agent_rsp_fifo:in_endofpacket
	wire          ddr_board_ase_0_avmm_pipe_slave_agent_rsp_fifo_out_valid;                   // ddr_board_ase_0_avmm_pipe_slave_agent_rsp_fifo:out_valid -> ddr_board_ase_0_avmm_pipe_slave_agent:rf_sink_valid
	wire  [138:0] ddr_board_ase_0_avmm_pipe_slave_agent_rsp_fifo_out_data;                    // ddr_board_ase_0_avmm_pipe_slave_agent_rsp_fifo:out_data -> ddr_board_ase_0_avmm_pipe_slave_agent:rf_sink_data
	wire          ddr_board_ase_0_avmm_pipe_slave_agent_rsp_fifo_out_ready;                   // ddr_board_ase_0_avmm_pipe_slave_agent:rf_sink_ready -> ddr_board_ase_0_avmm_pipe_slave_agent_rsp_fifo:out_ready
	wire          ddr_board_ase_0_avmm_pipe_slave_agent_rsp_fifo_out_startofpacket;           // ddr_board_ase_0_avmm_pipe_slave_agent_rsp_fifo:out_startofpacket -> ddr_board_ase_0_avmm_pipe_slave_agent:rf_sink_startofpacket
	wire          ddr_board_ase_0_avmm_pipe_slave_agent_rsp_fifo_out_endofpacket;             // ddr_board_ase_0_avmm_pipe_slave_agent_rsp_fifo:out_endofpacket -> ddr_board_ase_0_avmm_pipe_slave_agent:rf_sink_endofpacket
	wire          ddr_board_ase_0_avmm_pipe_slave_agent_rdata_fifo_src_valid;                 // ddr_board_ase_0_avmm_pipe_slave_agent:rdata_fifo_src_valid -> ddr_board_ase_0_avmm_pipe_slave_agent:rdata_fifo_sink_valid
	wire   [65:0] ddr_board_ase_0_avmm_pipe_slave_agent_rdata_fifo_src_data;                  // ddr_board_ase_0_avmm_pipe_slave_agent:rdata_fifo_src_data -> ddr_board_ase_0_avmm_pipe_slave_agent:rdata_fifo_sink_data
	wire          ddr_board_ase_0_avmm_pipe_slave_agent_rdata_fifo_src_ready;                 // ddr_board_ase_0_avmm_pipe_slave_agent:rdata_fifo_sink_ready -> ddr_board_ase_0_avmm_pipe_slave_agent:rdata_fifo_src_ready
	wire   [31:0] kernel_interface_ctrl_agent_m0_readdata;                                    // kernel_interface_ctrl_translator:uav_readdata -> kernel_interface_ctrl_agent:m0_readdata
	wire          kernel_interface_ctrl_agent_m0_waitrequest;                                 // kernel_interface_ctrl_translator:uav_waitrequest -> kernel_interface_ctrl_agent:m0_waitrequest
	wire          kernel_interface_ctrl_agent_m0_debugaccess;                                 // kernel_interface_ctrl_agent:m0_debugaccess -> kernel_interface_ctrl_translator:uav_debugaccess
	wire   [17:0] kernel_interface_ctrl_agent_m0_address;                                     // kernel_interface_ctrl_agent:m0_address -> kernel_interface_ctrl_translator:uav_address
	wire    [3:0] kernel_interface_ctrl_agent_m0_byteenable;                                  // kernel_interface_ctrl_agent:m0_byteenable -> kernel_interface_ctrl_translator:uav_byteenable
	wire          kernel_interface_ctrl_agent_m0_read;                                        // kernel_interface_ctrl_agent:m0_read -> kernel_interface_ctrl_translator:uav_read
	wire          kernel_interface_ctrl_agent_m0_readdatavalid;                               // kernel_interface_ctrl_translator:uav_readdatavalid -> kernel_interface_ctrl_agent:m0_readdatavalid
	wire          kernel_interface_ctrl_agent_m0_lock;                                        // kernel_interface_ctrl_agent:m0_lock -> kernel_interface_ctrl_translator:uav_lock
	wire   [31:0] kernel_interface_ctrl_agent_m0_writedata;                                   // kernel_interface_ctrl_agent:m0_writedata -> kernel_interface_ctrl_translator:uav_writedata
	wire          kernel_interface_ctrl_agent_m0_write;                                       // kernel_interface_ctrl_agent:m0_write -> kernel_interface_ctrl_translator:uav_write
	wire    [2:0] kernel_interface_ctrl_agent_m0_burstcount;                                  // kernel_interface_ctrl_agent:m0_burstcount -> kernel_interface_ctrl_translator:uav_burstcount
	wire          kernel_interface_ctrl_agent_rf_source_valid;                                // kernel_interface_ctrl_agent:rf_source_valid -> kernel_interface_ctrl_agent_rsp_fifo:in_valid
	wire  [102:0] kernel_interface_ctrl_agent_rf_source_data;                                 // kernel_interface_ctrl_agent:rf_source_data -> kernel_interface_ctrl_agent_rsp_fifo:in_data
	wire          kernel_interface_ctrl_agent_rf_source_ready;                                // kernel_interface_ctrl_agent_rsp_fifo:in_ready -> kernel_interface_ctrl_agent:rf_source_ready
	wire          kernel_interface_ctrl_agent_rf_source_startofpacket;                        // kernel_interface_ctrl_agent:rf_source_startofpacket -> kernel_interface_ctrl_agent_rsp_fifo:in_startofpacket
	wire          kernel_interface_ctrl_agent_rf_source_endofpacket;                          // kernel_interface_ctrl_agent:rf_source_endofpacket -> kernel_interface_ctrl_agent_rsp_fifo:in_endofpacket
	wire          kernel_interface_ctrl_agent_rsp_fifo_out_valid;                             // kernel_interface_ctrl_agent_rsp_fifo:out_valid -> kernel_interface_ctrl_agent:rf_sink_valid
	wire  [102:0] kernel_interface_ctrl_agent_rsp_fifo_out_data;                              // kernel_interface_ctrl_agent_rsp_fifo:out_data -> kernel_interface_ctrl_agent:rf_sink_data
	wire          kernel_interface_ctrl_agent_rsp_fifo_out_ready;                             // kernel_interface_ctrl_agent:rf_sink_ready -> kernel_interface_ctrl_agent_rsp_fifo:out_ready
	wire          kernel_interface_ctrl_agent_rsp_fifo_out_startofpacket;                     // kernel_interface_ctrl_agent_rsp_fifo:out_startofpacket -> kernel_interface_ctrl_agent:rf_sink_startofpacket
	wire          kernel_interface_ctrl_agent_rsp_fifo_out_endofpacket;                       // kernel_interface_ctrl_agent_rsp_fifo:out_endofpacket -> kernel_interface_ctrl_agent:rf_sink_endofpacket
	wire          kernel_interface_ctrl_agent_rdata_fifo_src_valid;                           // kernel_interface_ctrl_agent:rdata_fifo_src_valid -> kernel_interface_ctrl_agent:rdata_fifo_sink_valid
	wire   [33:0] kernel_interface_ctrl_agent_rdata_fifo_src_data;                            // kernel_interface_ctrl_agent:rdata_fifo_src_data -> kernel_interface_ctrl_agent:rdata_fifo_sink_data
	wire          kernel_interface_ctrl_agent_rdata_fifo_src_ready;                           // kernel_interface_ctrl_agent:rdata_fifo_sink_ready -> kernel_interface_ctrl_agent:rdata_fifo_src_ready
	wire   [63:0] ddr_board_msgdma_bbb_0_csr_agent_m0_readdata;                               // ddr_board_msgdma_bbb_0_csr_translator:uav_readdata -> ddr_board_msgdma_bbb_0_csr_agent:m0_readdata
	wire          ddr_board_msgdma_bbb_0_csr_agent_m0_waitrequest;                            // ddr_board_msgdma_bbb_0_csr_translator:uav_waitrequest -> ddr_board_msgdma_bbb_0_csr_agent:m0_waitrequest
	wire          ddr_board_msgdma_bbb_0_csr_agent_m0_debugaccess;                            // ddr_board_msgdma_bbb_0_csr_agent:m0_debugaccess -> ddr_board_msgdma_bbb_0_csr_translator:uav_debugaccess
	wire   [17:0] ddr_board_msgdma_bbb_0_csr_agent_m0_address;                                // ddr_board_msgdma_bbb_0_csr_agent:m0_address -> ddr_board_msgdma_bbb_0_csr_translator:uav_address
	wire    [7:0] ddr_board_msgdma_bbb_0_csr_agent_m0_byteenable;                             // ddr_board_msgdma_bbb_0_csr_agent:m0_byteenable -> ddr_board_msgdma_bbb_0_csr_translator:uav_byteenable
	wire          ddr_board_msgdma_bbb_0_csr_agent_m0_read;                                   // ddr_board_msgdma_bbb_0_csr_agent:m0_read -> ddr_board_msgdma_bbb_0_csr_translator:uav_read
	wire          ddr_board_msgdma_bbb_0_csr_agent_m0_readdatavalid;                          // ddr_board_msgdma_bbb_0_csr_translator:uav_readdatavalid -> ddr_board_msgdma_bbb_0_csr_agent:m0_readdatavalid
	wire          ddr_board_msgdma_bbb_0_csr_agent_m0_lock;                                   // ddr_board_msgdma_bbb_0_csr_agent:m0_lock -> ddr_board_msgdma_bbb_0_csr_translator:uav_lock
	wire   [63:0] ddr_board_msgdma_bbb_0_csr_agent_m0_writedata;                              // ddr_board_msgdma_bbb_0_csr_agent:m0_writedata -> ddr_board_msgdma_bbb_0_csr_translator:uav_writedata
	wire          ddr_board_msgdma_bbb_0_csr_agent_m0_write;                                  // ddr_board_msgdma_bbb_0_csr_agent:m0_write -> ddr_board_msgdma_bbb_0_csr_translator:uav_write
	wire    [3:0] ddr_board_msgdma_bbb_0_csr_agent_m0_burstcount;                             // ddr_board_msgdma_bbb_0_csr_agent:m0_burstcount -> ddr_board_msgdma_bbb_0_csr_translator:uav_burstcount
	wire          ddr_board_msgdma_bbb_0_csr_agent_rf_source_valid;                           // ddr_board_msgdma_bbb_0_csr_agent:rf_source_valid -> ddr_board_msgdma_bbb_0_csr_agent_rsp_fifo:in_valid
	wire  [138:0] ddr_board_msgdma_bbb_0_csr_agent_rf_source_data;                            // ddr_board_msgdma_bbb_0_csr_agent:rf_source_data -> ddr_board_msgdma_bbb_0_csr_agent_rsp_fifo:in_data
	wire          ddr_board_msgdma_bbb_0_csr_agent_rf_source_ready;                           // ddr_board_msgdma_bbb_0_csr_agent_rsp_fifo:in_ready -> ddr_board_msgdma_bbb_0_csr_agent:rf_source_ready
	wire          ddr_board_msgdma_bbb_0_csr_agent_rf_source_startofpacket;                   // ddr_board_msgdma_bbb_0_csr_agent:rf_source_startofpacket -> ddr_board_msgdma_bbb_0_csr_agent_rsp_fifo:in_startofpacket
	wire          ddr_board_msgdma_bbb_0_csr_agent_rf_source_endofpacket;                     // ddr_board_msgdma_bbb_0_csr_agent:rf_source_endofpacket -> ddr_board_msgdma_bbb_0_csr_agent_rsp_fifo:in_endofpacket
	wire          ddr_board_msgdma_bbb_0_csr_agent_rsp_fifo_out_valid;                        // ddr_board_msgdma_bbb_0_csr_agent_rsp_fifo:out_valid -> ddr_board_msgdma_bbb_0_csr_agent:rf_sink_valid
	wire  [138:0] ddr_board_msgdma_bbb_0_csr_agent_rsp_fifo_out_data;                         // ddr_board_msgdma_bbb_0_csr_agent_rsp_fifo:out_data -> ddr_board_msgdma_bbb_0_csr_agent:rf_sink_data
	wire          ddr_board_msgdma_bbb_0_csr_agent_rsp_fifo_out_ready;                        // ddr_board_msgdma_bbb_0_csr_agent:rf_sink_ready -> ddr_board_msgdma_bbb_0_csr_agent_rsp_fifo:out_ready
	wire          ddr_board_msgdma_bbb_0_csr_agent_rsp_fifo_out_startofpacket;                // ddr_board_msgdma_bbb_0_csr_agent_rsp_fifo:out_startofpacket -> ddr_board_msgdma_bbb_0_csr_agent:rf_sink_startofpacket
	wire          ddr_board_msgdma_bbb_0_csr_agent_rsp_fifo_out_endofpacket;                  // ddr_board_msgdma_bbb_0_csr_agent_rsp_fifo:out_endofpacket -> ddr_board_msgdma_bbb_0_csr_agent:rf_sink_endofpacket
	wire          ddr_board_msgdma_bbb_0_csr_agent_rdata_fifo_src_valid;                      // ddr_board_msgdma_bbb_0_csr_agent:rdata_fifo_src_valid -> ddr_board_msgdma_bbb_0_csr_agent:rdata_fifo_sink_valid
	wire   [65:0] ddr_board_msgdma_bbb_0_csr_agent_rdata_fifo_src_data;                       // ddr_board_msgdma_bbb_0_csr_agent:rdata_fifo_src_data -> ddr_board_msgdma_bbb_0_csr_agent:rdata_fifo_sink_data
	wire          ddr_board_msgdma_bbb_0_csr_agent_rdata_fifo_src_ready;                      // ddr_board_msgdma_bbb_0_csr_agent:rdata_fifo_sink_ready -> ddr_board_msgdma_bbb_0_csr_agent:rdata_fifo_src_ready
	wire   [63:0] ddr_board_msgdma_bbb_1_csr_agent_m0_readdata;                               // ddr_board_msgdma_bbb_1_csr_translator:uav_readdata -> ddr_board_msgdma_bbb_1_csr_agent:m0_readdata
	wire          ddr_board_msgdma_bbb_1_csr_agent_m0_waitrequest;                            // ddr_board_msgdma_bbb_1_csr_translator:uav_waitrequest -> ddr_board_msgdma_bbb_1_csr_agent:m0_waitrequest
	wire          ddr_board_msgdma_bbb_1_csr_agent_m0_debugaccess;                            // ddr_board_msgdma_bbb_1_csr_agent:m0_debugaccess -> ddr_board_msgdma_bbb_1_csr_translator:uav_debugaccess
	wire   [17:0] ddr_board_msgdma_bbb_1_csr_agent_m0_address;                                // ddr_board_msgdma_bbb_1_csr_agent:m0_address -> ddr_board_msgdma_bbb_1_csr_translator:uav_address
	wire    [7:0] ddr_board_msgdma_bbb_1_csr_agent_m0_byteenable;                             // ddr_board_msgdma_bbb_1_csr_agent:m0_byteenable -> ddr_board_msgdma_bbb_1_csr_translator:uav_byteenable
	wire          ddr_board_msgdma_bbb_1_csr_agent_m0_read;                                   // ddr_board_msgdma_bbb_1_csr_agent:m0_read -> ddr_board_msgdma_bbb_1_csr_translator:uav_read
	wire          ddr_board_msgdma_bbb_1_csr_agent_m0_readdatavalid;                          // ddr_board_msgdma_bbb_1_csr_translator:uav_readdatavalid -> ddr_board_msgdma_bbb_1_csr_agent:m0_readdatavalid
	wire          ddr_board_msgdma_bbb_1_csr_agent_m0_lock;                                   // ddr_board_msgdma_bbb_1_csr_agent:m0_lock -> ddr_board_msgdma_bbb_1_csr_translator:uav_lock
	wire   [63:0] ddr_board_msgdma_bbb_1_csr_agent_m0_writedata;                              // ddr_board_msgdma_bbb_1_csr_agent:m0_writedata -> ddr_board_msgdma_bbb_1_csr_translator:uav_writedata
	wire          ddr_board_msgdma_bbb_1_csr_agent_m0_write;                                  // ddr_board_msgdma_bbb_1_csr_agent:m0_write -> ddr_board_msgdma_bbb_1_csr_translator:uav_write
	wire    [3:0] ddr_board_msgdma_bbb_1_csr_agent_m0_burstcount;                             // ddr_board_msgdma_bbb_1_csr_agent:m0_burstcount -> ddr_board_msgdma_bbb_1_csr_translator:uav_burstcount
	wire          ddr_board_msgdma_bbb_1_csr_agent_rf_source_valid;                           // ddr_board_msgdma_bbb_1_csr_agent:rf_source_valid -> ddr_board_msgdma_bbb_1_csr_agent_rsp_fifo:in_valid
	wire  [138:0] ddr_board_msgdma_bbb_1_csr_agent_rf_source_data;                            // ddr_board_msgdma_bbb_1_csr_agent:rf_source_data -> ddr_board_msgdma_bbb_1_csr_agent_rsp_fifo:in_data
	wire          ddr_board_msgdma_bbb_1_csr_agent_rf_source_ready;                           // ddr_board_msgdma_bbb_1_csr_agent_rsp_fifo:in_ready -> ddr_board_msgdma_bbb_1_csr_agent:rf_source_ready
	wire          ddr_board_msgdma_bbb_1_csr_agent_rf_source_startofpacket;                   // ddr_board_msgdma_bbb_1_csr_agent:rf_source_startofpacket -> ddr_board_msgdma_bbb_1_csr_agent_rsp_fifo:in_startofpacket
	wire          ddr_board_msgdma_bbb_1_csr_agent_rf_source_endofpacket;                     // ddr_board_msgdma_bbb_1_csr_agent:rf_source_endofpacket -> ddr_board_msgdma_bbb_1_csr_agent_rsp_fifo:in_endofpacket
	wire          ddr_board_msgdma_bbb_1_csr_agent_rsp_fifo_out_valid;                        // ddr_board_msgdma_bbb_1_csr_agent_rsp_fifo:out_valid -> ddr_board_msgdma_bbb_1_csr_agent:rf_sink_valid
	wire  [138:0] ddr_board_msgdma_bbb_1_csr_agent_rsp_fifo_out_data;                         // ddr_board_msgdma_bbb_1_csr_agent_rsp_fifo:out_data -> ddr_board_msgdma_bbb_1_csr_agent:rf_sink_data
	wire          ddr_board_msgdma_bbb_1_csr_agent_rsp_fifo_out_ready;                        // ddr_board_msgdma_bbb_1_csr_agent:rf_sink_ready -> ddr_board_msgdma_bbb_1_csr_agent_rsp_fifo:out_ready
	wire          ddr_board_msgdma_bbb_1_csr_agent_rsp_fifo_out_startofpacket;                // ddr_board_msgdma_bbb_1_csr_agent_rsp_fifo:out_startofpacket -> ddr_board_msgdma_bbb_1_csr_agent:rf_sink_startofpacket
	wire          ddr_board_msgdma_bbb_1_csr_agent_rsp_fifo_out_endofpacket;                  // ddr_board_msgdma_bbb_1_csr_agent_rsp_fifo:out_endofpacket -> ddr_board_msgdma_bbb_1_csr_agent:rf_sink_endofpacket
	wire          ddr_board_msgdma_bbb_1_csr_agent_rdata_fifo_src_valid;                      // ddr_board_msgdma_bbb_1_csr_agent:rdata_fifo_src_valid -> ddr_board_msgdma_bbb_1_csr_agent:rdata_fifo_sink_valid
	wire   [65:0] ddr_board_msgdma_bbb_1_csr_agent_rdata_fifo_src_data;                       // ddr_board_msgdma_bbb_1_csr_agent:rdata_fifo_src_data -> ddr_board_msgdma_bbb_1_csr_agent:rdata_fifo_sink_data
	wire          ddr_board_msgdma_bbb_1_csr_agent_rdata_fifo_src_ready;                      // ddr_board_msgdma_bbb_1_csr_agent:rdata_fifo_sink_ready -> ddr_board_msgdma_bbb_1_csr_agent:rdata_fifo_src_ready
	wire   [63:0] ddr_board_null_dfh_afu_id_agent_m0_readdata;                                // ddr_board_null_dfh_afu_id_translator:uav_readdata -> ddr_board_null_dfh_afu_id_agent:m0_readdata
	wire          ddr_board_null_dfh_afu_id_agent_m0_waitrequest;                             // ddr_board_null_dfh_afu_id_translator:uav_waitrequest -> ddr_board_null_dfh_afu_id_agent:m0_waitrequest
	wire          ddr_board_null_dfh_afu_id_agent_m0_debugaccess;                             // ddr_board_null_dfh_afu_id_agent:m0_debugaccess -> ddr_board_null_dfh_afu_id_translator:uav_debugaccess
	wire   [17:0] ddr_board_null_dfh_afu_id_agent_m0_address;                                 // ddr_board_null_dfh_afu_id_agent:m0_address -> ddr_board_null_dfh_afu_id_translator:uav_address
	wire    [7:0] ddr_board_null_dfh_afu_id_agent_m0_byteenable;                              // ddr_board_null_dfh_afu_id_agent:m0_byteenable -> ddr_board_null_dfh_afu_id_translator:uav_byteenable
	wire          ddr_board_null_dfh_afu_id_agent_m0_read;                                    // ddr_board_null_dfh_afu_id_agent:m0_read -> ddr_board_null_dfh_afu_id_translator:uav_read
	wire          ddr_board_null_dfh_afu_id_agent_m0_readdatavalid;                           // ddr_board_null_dfh_afu_id_translator:uav_readdatavalid -> ddr_board_null_dfh_afu_id_agent:m0_readdatavalid
	wire          ddr_board_null_dfh_afu_id_agent_m0_lock;                                    // ddr_board_null_dfh_afu_id_agent:m0_lock -> ddr_board_null_dfh_afu_id_translator:uav_lock
	wire   [63:0] ddr_board_null_dfh_afu_id_agent_m0_writedata;                               // ddr_board_null_dfh_afu_id_agent:m0_writedata -> ddr_board_null_dfh_afu_id_translator:uav_writedata
	wire          ddr_board_null_dfh_afu_id_agent_m0_write;                                   // ddr_board_null_dfh_afu_id_agent:m0_write -> ddr_board_null_dfh_afu_id_translator:uav_write
	wire    [3:0] ddr_board_null_dfh_afu_id_agent_m0_burstcount;                              // ddr_board_null_dfh_afu_id_agent:m0_burstcount -> ddr_board_null_dfh_afu_id_translator:uav_burstcount
	wire          ddr_board_null_dfh_afu_id_agent_rf_source_valid;                            // ddr_board_null_dfh_afu_id_agent:rf_source_valid -> ddr_board_null_dfh_afu_id_agent_rsp_fifo:in_valid
	wire  [138:0] ddr_board_null_dfh_afu_id_agent_rf_source_data;                             // ddr_board_null_dfh_afu_id_agent:rf_source_data -> ddr_board_null_dfh_afu_id_agent_rsp_fifo:in_data
	wire          ddr_board_null_dfh_afu_id_agent_rf_source_ready;                            // ddr_board_null_dfh_afu_id_agent_rsp_fifo:in_ready -> ddr_board_null_dfh_afu_id_agent:rf_source_ready
	wire          ddr_board_null_dfh_afu_id_agent_rf_source_startofpacket;                    // ddr_board_null_dfh_afu_id_agent:rf_source_startofpacket -> ddr_board_null_dfh_afu_id_agent_rsp_fifo:in_startofpacket
	wire          ddr_board_null_dfh_afu_id_agent_rf_source_endofpacket;                      // ddr_board_null_dfh_afu_id_agent:rf_source_endofpacket -> ddr_board_null_dfh_afu_id_agent_rsp_fifo:in_endofpacket
	wire          ddr_board_null_dfh_afu_id_agent_rsp_fifo_out_valid;                         // ddr_board_null_dfh_afu_id_agent_rsp_fifo:out_valid -> ddr_board_null_dfh_afu_id_agent:rf_sink_valid
	wire  [138:0] ddr_board_null_dfh_afu_id_agent_rsp_fifo_out_data;                          // ddr_board_null_dfh_afu_id_agent_rsp_fifo:out_data -> ddr_board_null_dfh_afu_id_agent:rf_sink_data
	wire          ddr_board_null_dfh_afu_id_agent_rsp_fifo_out_ready;                         // ddr_board_null_dfh_afu_id_agent:rf_sink_ready -> ddr_board_null_dfh_afu_id_agent_rsp_fifo:out_ready
	wire          ddr_board_null_dfh_afu_id_agent_rsp_fifo_out_startofpacket;                 // ddr_board_null_dfh_afu_id_agent_rsp_fifo:out_startofpacket -> ddr_board_null_dfh_afu_id_agent:rf_sink_startofpacket
	wire          ddr_board_null_dfh_afu_id_agent_rsp_fifo_out_endofpacket;                   // ddr_board_null_dfh_afu_id_agent_rsp_fifo:out_endofpacket -> ddr_board_null_dfh_afu_id_agent:rf_sink_endofpacket
	wire          ddr_board_null_dfh_afu_id_agent_rdata_fifo_src_valid;                       // ddr_board_null_dfh_afu_id_agent:rdata_fifo_src_valid -> ddr_board_null_dfh_afu_id_agent:rdata_fifo_sink_valid
	wire   [65:0] ddr_board_null_dfh_afu_id_agent_rdata_fifo_src_data;                        // ddr_board_null_dfh_afu_id_agent:rdata_fifo_src_data -> ddr_board_null_dfh_afu_id_agent:rdata_fifo_sink_data
	wire          ddr_board_null_dfh_afu_id_agent_rdata_fifo_src_ready;                       // ddr_board_null_dfh_afu_id_agent:rdata_fifo_sink_ready -> ddr_board_null_dfh_afu_id_agent:rdata_fifo_src_ready
	wire          pipe_stage_host_ctrl_m0_agent_cp_valid;                                     // pipe_stage_host_ctrl_m0_agent:cp_valid -> router:sink_valid
	wire  [137:0] pipe_stage_host_ctrl_m0_agent_cp_data;                                      // pipe_stage_host_ctrl_m0_agent:cp_data -> router:sink_data
	wire          pipe_stage_host_ctrl_m0_agent_cp_ready;                                     // router:sink_ready -> pipe_stage_host_ctrl_m0_agent:cp_ready
	wire          pipe_stage_host_ctrl_m0_agent_cp_startofpacket;                             // pipe_stage_host_ctrl_m0_agent:cp_startofpacket -> router:sink_startofpacket
	wire          pipe_stage_host_ctrl_m0_agent_cp_endofpacket;                               // pipe_stage_host_ctrl_m0_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_003_src_valid;                                                       // router_003:src_valid -> rsp_demux_002:sink_valid
	wire  [137:0] router_003_src_data;                                                        // router_003:src_data -> rsp_demux_002:sink_data
	wire          router_003_src_ready;                                                       // rsp_demux_002:sink_ready -> router_003:src_ready
	wire    [7:0] router_003_src_channel;                                                     // router_003:src_channel -> rsp_demux_002:sink_channel
	wire          router_003_src_startofpacket;                                               // router_003:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_003_src_endofpacket;                                                 // router_003:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          router_004_src_valid;                                                       // router_004:src_valid -> rsp_demux_003:sink_valid
	wire  [137:0] router_004_src_data;                                                        // router_004:src_data -> rsp_demux_003:sink_data
	wire          router_004_src_ready;                                                       // rsp_demux_003:sink_ready -> router_004:src_ready
	wire    [7:0] router_004_src_channel;                                                     // router_004:src_channel -> rsp_demux_003:sink_channel
	wire          router_004_src_startofpacket;                                               // router_004:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_004_src_endofpacket;                                                 // router_004:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          router_006_src_valid;                                                       // router_006:src_valid -> rsp_demux_005:sink_valid
	wire  [137:0] router_006_src_data;                                                        // router_006:src_data -> rsp_demux_005:sink_data
	wire          router_006_src_ready;                                                       // rsp_demux_005:sink_ready -> router_006:src_ready
	wire    [7:0] router_006_src_channel;                                                     // router_006:src_channel -> rsp_demux_005:sink_channel
	wire          router_006_src_startofpacket;                                               // router_006:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_006_src_endofpacket;                                                 // router_006:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          router_007_src_valid;                                                       // router_007:src_valid -> rsp_demux_006:sink_valid
	wire  [137:0] router_007_src_data;                                                        // router_007:src_data -> rsp_demux_006:sink_data
	wire          router_007_src_ready;                                                       // rsp_demux_006:sink_ready -> router_007:src_ready
	wire    [7:0] router_007_src_channel;                                                     // router_007:src_channel -> rsp_demux_006:sink_channel
	wire          router_007_src_startofpacket;                                               // router_007:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_007_src_endofpacket;                                                 // router_007:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          router_008_src_valid;                                                       // router_008:src_valid -> rsp_demux_007:sink_valid
	wire  [137:0] router_008_src_data;                                                        // router_008:src_data -> rsp_demux_007:sink_data
	wire          router_008_src_ready;                                                       // rsp_demux_007:sink_ready -> router_008:src_ready
	wire    [7:0] router_008_src_channel;                                                     // router_008:src_channel -> rsp_demux_007:sink_channel
	wire          router_008_src_startofpacket;                                               // router_008:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_008_src_endofpacket;                                                 // router_008:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          router_src_valid;                                                           // router:src_valid -> pipe_stage_host_ctrl_m0_limiter:cmd_sink_valid
	wire  [137:0] router_src_data;                                                            // router:src_data -> pipe_stage_host_ctrl_m0_limiter:cmd_sink_data
	wire          router_src_ready;                                                           // pipe_stage_host_ctrl_m0_limiter:cmd_sink_ready -> router:src_ready
	wire    [7:0] router_src_channel;                                                         // router:src_channel -> pipe_stage_host_ctrl_m0_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                   // router:src_startofpacket -> pipe_stage_host_ctrl_m0_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                     // router:src_endofpacket -> pipe_stage_host_ctrl_m0_limiter:cmd_sink_endofpacket
	wire          pipe_stage_host_ctrl_m0_limiter_rsp_src_valid;                              // pipe_stage_host_ctrl_m0_limiter:rsp_src_valid -> pipe_stage_host_ctrl_m0_agent:rp_valid
	wire  [137:0] pipe_stage_host_ctrl_m0_limiter_rsp_src_data;                               // pipe_stage_host_ctrl_m0_limiter:rsp_src_data -> pipe_stage_host_ctrl_m0_agent:rp_data
	wire          pipe_stage_host_ctrl_m0_limiter_rsp_src_ready;                              // pipe_stage_host_ctrl_m0_agent:rp_ready -> pipe_stage_host_ctrl_m0_limiter:rsp_src_ready
	wire    [7:0] pipe_stage_host_ctrl_m0_limiter_rsp_src_channel;                            // pipe_stage_host_ctrl_m0_limiter:rsp_src_channel -> pipe_stage_host_ctrl_m0_agent:rp_channel
	wire          pipe_stage_host_ctrl_m0_limiter_rsp_src_startofpacket;                      // pipe_stage_host_ctrl_m0_limiter:rsp_src_startofpacket -> pipe_stage_host_ctrl_m0_agent:rp_startofpacket
	wire          pipe_stage_host_ctrl_m0_limiter_rsp_src_endofpacket;                        // pipe_stage_host_ctrl_m0_limiter:rsp_src_endofpacket -> pipe_stage_host_ctrl_m0_agent:rp_endofpacket
	wire          router_001_src_valid;                                                       // router_001:src_valid -> board_irq_ctrl_0_IRQ_Mask_Slave_rsp_width_adapter:in_valid
	wire  [101:0] router_001_src_data;                                                        // router_001:src_data -> board_irq_ctrl_0_IRQ_Mask_Slave_rsp_width_adapter:in_data
	wire          router_001_src_ready;                                                       // board_irq_ctrl_0_IRQ_Mask_Slave_rsp_width_adapter:in_ready -> router_001:src_ready
	wire    [7:0] router_001_src_channel;                                                     // router_001:src_channel -> board_irq_ctrl_0_IRQ_Mask_Slave_rsp_width_adapter:in_channel
	wire          router_001_src_startofpacket;                                               // router_001:src_startofpacket -> board_irq_ctrl_0_IRQ_Mask_Slave_rsp_width_adapter:in_startofpacket
	wire          router_001_src_endofpacket;                                                 // router_001:src_endofpacket -> board_irq_ctrl_0_IRQ_Mask_Slave_rsp_width_adapter:in_endofpacket
	wire          board_irq_ctrl_0_irq_mask_slave_rsp_width_adapter_src_valid;                // board_irq_ctrl_0_IRQ_Mask_Slave_rsp_width_adapter:out_valid -> rsp_demux:sink_valid
	wire  [137:0] board_irq_ctrl_0_irq_mask_slave_rsp_width_adapter_src_data;                 // board_irq_ctrl_0_IRQ_Mask_Slave_rsp_width_adapter:out_data -> rsp_demux:sink_data
	wire          board_irq_ctrl_0_irq_mask_slave_rsp_width_adapter_src_ready;                // rsp_demux:sink_ready -> board_irq_ctrl_0_IRQ_Mask_Slave_rsp_width_adapter:out_ready
	wire    [7:0] board_irq_ctrl_0_irq_mask_slave_rsp_width_adapter_src_channel;              // board_irq_ctrl_0_IRQ_Mask_Slave_rsp_width_adapter:out_channel -> rsp_demux:sink_channel
	wire          board_irq_ctrl_0_irq_mask_slave_rsp_width_adapter_src_startofpacket;        // board_irq_ctrl_0_IRQ_Mask_Slave_rsp_width_adapter:out_startofpacket -> rsp_demux:sink_startofpacket
	wire          board_irq_ctrl_0_irq_mask_slave_rsp_width_adapter_src_endofpacket;          // board_irq_ctrl_0_IRQ_Mask_Slave_rsp_width_adapter:out_endofpacket -> rsp_demux:sink_endofpacket
	wire          router_002_src_valid;                                                       // router_002:src_valid -> board_irq_ctrl_0_IRQ_Read_Slave_rsp_width_adapter:in_valid
	wire  [101:0] router_002_src_data;                                                        // router_002:src_data -> board_irq_ctrl_0_IRQ_Read_Slave_rsp_width_adapter:in_data
	wire          router_002_src_ready;                                                       // board_irq_ctrl_0_IRQ_Read_Slave_rsp_width_adapter:in_ready -> router_002:src_ready
	wire    [7:0] router_002_src_channel;                                                     // router_002:src_channel -> board_irq_ctrl_0_IRQ_Read_Slave_rsp_width_adapter:in_channel
	wire          router_002_src_startofpacket;                                               // router_002:src_startofpacket -> board_irq_ctrl_0_IRQ_Read_Slave_rsp_width_adapter:in_startofpacket
	wire          router_002_src_endofpacket;                                                 // router_002:src_endofpacket -> board_irq_ctrl_0_IRQ_Read_Slave_rsp_width_adapter:in_endofpacket
	wire          board_irq_ctrl_0_irq_read_slave_rsp_width_adapter_src_valid;                // board_irq_ctrl_0_IRQ_Read_Slave_rsp_width_adapter:out_valid -> rsp_demux_001:sink_valid
	wire  [137:0] board_irq_ctrl_0_irq_read_slave_rsp_width_adapter_src_data;                 // board_irq_ctrl_0_IRQ_Read_Slave_rsp_width_adapter:out_data -> rsp_demux_001:sink_data
	wire          board_irq_ctrl_0_irq_read_slave_rsp_width_adapter_src_ready;                // rsp_demux_001:sink_ready -> board_irq_ctrl_0_IRQ_Read_Slave_rsp_width_adapter:out_ready
	wire    [7:0] board_irq_ctrl_0_irq_read_slave_rsp_width_adapter_src_channel;              // board_irq_ctrl_0_IRQ_Read_Slave_rsp_width_adapter:out_channel -> rsp_demux_001:sink_channel
	wire          board_irq_ctrl_0_irq_read_slave_rsp_width_adapter_src_startofpacket;        // board_irq_ctrl_0_IRQ_Read_Slave_rsp_width_adapter:out_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          board_irq_ctrl_0_irq_read_slave_rsp_width_adapter_src_endofpacket;          // board_irq_ctrl_0_IRQ_Read_Slave_rsp_width_adapter:out_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          router_005_src_valid;                                                       // router_005:src_valid -> kernel_interface_ctrl_rsp_width_adapter:in_valid
	wire  [101:0] router_005_src_data;                                                        // router_005:src_data -> kernel_interface_ctrl_rsp_width_adapter:in_data
	wire          router_005_src_ready;                                                       // kernel_interface_ctrl_rsp_width_adapter:in_ready -> router_005:src_ready
	wire    [7:0] router_005_src_channel;                                                     // router_005:src_channel -> kernel_interface_ctrl_rsp_width_adapter:in_channel
	wire          router_005_src_startofpacket;                                               // router_005:src_startofpacket -> kernel_interface_ctrl_rsp_width_adapter:in_startofpacket
	wire          router_005_src_endofpacket;                                                 // router_005:src_endofpacket -> kernel_interface_ctrl_rsp_width_adapter:in_endofpacket
	wire          kernel_interface_ctrl_rsp_width_adapter_src_valid;                          // kernel_interface_ctrl_rsp_width_adapter:out_valid -> rsp_demux_004:sink_valid
	wire  [137:0] kernel_interface_ctrl_rsp_width_adapter_src_data;                           // kernel_interface_ctrl_rsp_width_adapter:out_data -> rsp_demux_004:sink_data
	wire          kernel_interface_ctrl_rsp_width_adapter_src_ready;                          // rsp_demux_004:sink_ready -> kernel_interface_ctrl_rsp_width_adapter:out_ready
	wire    [7:0] kernel_interface_ctrl_rsp_width_adapter_src_channel;                        // kernel_interface_ctrl_rsp_width_adapter:out_channel -> rsp_demux_004:sink_channel
	wire          kernel_interface_ctrl_rsp_width_adapter_src_startofpacket;                  // kernel_interface_ctrl_rsp_width_adapter:out_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          kernel_interface_ctrl_rsp_width_adapter_src_endofpacket;                    // kernel_interface_ctrl_rsp_width_adapter:out_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          cmd_mux_src_valid;                                                          // cmd_mux:src_valid -> board_irq_ctrl_0_IRQ_Mask_Slave_cmd_width_adapter:in_valid
	wire  [137:0] cmd_mux_src_data;                                                           // cmd_mux:src_data -> board_irq_ctrl_0_IRQ_Mask_Slave_cmd_width_adapter:in_data
	wire          cmd_mux_src_ready;                                                          // board_irq_ctrl_0_IRQ_Mask_Slave_cmd_width_adapter:in_ready -> cmd_mux:src_ready
	wire    [7:0] cmd_mux_src_channel;                                                        // cmd_mux:src_channel -> board_irq_ctrl_0_IRQ_Mask_Slave_cmd_width_adapter:in_channel
	wire          cmd_mux_src_startofpacket;                                                  // cmd_mux:src_startofpacket -> board_irq_ctrl_0_IRQ_Mask_Slave_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_src_endofpacket;                                                    // cmd_mux:src_endofpacket -> board_irq_ctrl_0_IRQ_Mask_Slave_cmd_width_adapter:in_endofpacket
	wire          board_irq_ctrl_0_irq_mask_slave_cmd_width_adapter_src_valid;                // board_irq_ctrl_0_IRQ_Mask_Slave_cmd_width_adapter:out_valid -> board_irq_ctrl_0_IRQ_Mask_Slave_burst_adapter:sink0_valid
	wire  [101:0] board_irq_ctrl_0_irq_mask_slave_cmd_width_adapter_src_data;                 // board_irq_ctrl_0_IRQ_Mask_Slave_cmd_width_adapter:out_data -> board_irq_ctrl_0_IRQ_Mask_Slave_burst_adapter:sink0_data
	wire          board_irq_ctrl_0_irq_mask_slave_cmd_width_adapter_src_ready;                // board_irq_ctrl_0_IRQ_Mask_Slave_burst_adapter:sink0_ready -> board_irq_ctrl_0_IRQ_Mask_Slave_cmd_width_adapter:out_ready
	wire    [7:0] board_irq_ctrl_0_irq_mask_slave_cmd_width_adapter_src_channel;              // board_irq_ctrl_0_IRQ_Mask_Slave_cmd_width_adapter:out_channel -> board_irq_ctrl_0_IRQ_Mask_Slave_burst_adapter:sink0_channel
	wire          board_irq_ctrl_0_irq_mask_slave_cmd_width_adapter_src_startofpacket;        // board_irq_ctrl_0_IRQ_Mask_Slave_cmd_width_adapter:out_startofpacket -> board_irq_ctrl_0_IRQ_Mask_Slave_burst_adapter:sink0_startofpacket
	wire          board_irq_ctrl_0_irq_mask_slave_cmd_width_adapter_src_endofpacket;          // board_irq_ctrl_0_IRQ_Mask_Slave_cmd_width_adapter:out_endofpacket -> board_irq_ctrl_0_IRQ_Mask_Slave_burst_adapter:sink0_endofpacket
	wire          cmd_mux_001_src_valid;                                                      // cmd_mux_001:src_valid -> board_irq_ctrl_0_IRQ_Read_Slave_cmd_width_adapter:in_valid
	wire  [137:0] cmd_mux_001_src_data;                                                       // cmd_mux_001:src_data -> board_irq_ctrl_0_IRQ_Read_Slave_cmd_width_adapter:in_data
	wire          cmd_mux_001_src_ready;                                                      // board_irq_ctrl_0_IRQ_Read_Slave_cmd_width_adapter:in_ready -> cmd_mux_001:src_ready
	wire    [7:0] cmd_mux_001_src_channel;                                                    // cmd_mux_001:src_channel -> board_irq_ctrl_0_IRQ_Read_Slave_cmd_width_adapter:in_channel
	wire          cmd_mux_001_src_startofpacket;                                              // cmd_mux_001:src_startofpacket -> board_irq_ctrl_0_IRQ_Read_Slave_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                // cmd_mux_001:src_endofpacket -> board_irq_ctrl_0_IRQ_Read_Slave_cmd_width_adapter:in_endofpacket
	wire          board_irq_ctrl_0_irq_read_slave_cmd_width_adapter_src_valid;                // board_irq_ctrl_0_IRQ_Read_Slave_cmd_width_adapter:out_valid -> board_irq_ctrl_0_IRQ_Read_Slave_burst_adapter:sink0_valid
	wire  [101:0] board_irq_ctrl_0_irq_read_slave_cmd_width_adapter_src_data;                 // board_irq_ctrl_0_IRQ_Read_Slave_cmd_width_adapter:out_data -> board_irq_ctrl_0_IRQ_Read_Slave_burst_adapter:sink0_data
	wire          board_irq_ctrl_0_irq_read_slave_cmd_width_adapter_src_ready;                // board_irq_ctrl_0_IRQ_Read_Slave_burst_adapter:sink0_ready -> board_irq_ctrl_0_IRQ_Read_Slave_cmd_width_adapter:out_ready
	wire    [7:0] board_irq_ctrl_0_irq_read_slave_cmd_width_adapter_src_channel;              // board_irq_ctrl_0_IRQ_Read_Slave_cmd_width_adapter:out_channel -> board_irq_ctrl_0_IRQ_Read_Slave_burst_adapter:sink0_channel
	wire          board_irq_ctrl_0_irq_read_slave_cmd_width_adapter_src_startofpacket;        // board_irq_ctrl_0_IRQ_Read_Slave_cmd_width_adapter:out_startofpacket -> board_irq_ctrl_0_IRQ_Read_Slave_burst_adapter:sink0_startofpacket
	wire          board_irq_ctrl_0_irq_read_slave_cmd_width_adapter_src_endofpacket;          // board_irq_ctrl_0_IRQ_Read_Slave_cmd_width_adapter:out_endofpacket -> board_irq_ctrl_0_IRQ_Read_Slave_burst_adapter:sink0_endofpacket
	wire          cmd_mux_004_src_valid;                                                      // cmd_mux_004:src_valid -> kernel_interface_ctrl_cmd_width_adapter:in_valid
	wire  [137:0] cmd_mux_004_src_data;                                                       // cmd_mux_004:src_data -> kernel_interface_ctrl_cmd_width_adapter:in_data
	wire          cmd_mux_004_src_ready;                                                      // kernel_interface_ctrl_cmd_width_adapter:in_ready -> cmd_mux_004:src_ready
	wire    [7:0] cmd_mux_004_src_channel;                                                    // cmd_mux_004:src_channel -> kernel_interface_ctrl_cmd_width_adapter:in_channel
	wire          cmd_mux_004_src_startofpacket;                                              // cmd_mux_004:src_startofpacket -> kernel_interface_ctrl_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                // cmd_mux_004:src_endofpacket -> kernel_interface_ctrl_cmd_width_adapter:in_endofpacket
	wire          kernel_interface_ctrl_cmd_width_adapter_src_valid;                          // kernel_interface_ctrl_cmd_width_adapter:out_valid -> kernel_interface_ctrl_burst_adapter:sink0_valid
	wire  [101:0] kernel_interface_ctrl_cmd_width_adapter_src_data;                           // kernel_interface_ctrl_cmd_width_adapter:out_data -> kernel_interface_ctrl_burst_adapter:sink0_data
	wire          kernel_interface_ctrl_cmd_width_adapter_src_ready;                          // kernel_interface_ctrl_burst_adapter:sink0_ready -> kernel_interface_ctrl_cmd_width_adapter:out_ready
	wire    [7:0] kernel_interface_ctrl_cmd_width_adapter_src_channel;                        // kernel_interface_ctrl_cmd_width_adapter:out_channel -> kernel_interface_ctrl_burst_adapter:sink0_channel
	wire          kernel_interface_ctrl_cmd_width_adapter_src_startofpacket;                  // kernel_interface_ctrl_cmd_width_adapter:out_startofpacket -> kernel_interface_ctrl_burst_adapter:sink0_startofpacket
	wire          kernel_interface_ctrl_cmd_width_adapter_src_endofpacket;                    // kernel_interface_ctrl_cmd_width_adapter:out_endofpacket -> kernel_interface_ctrl_burst_adapter:sink0_endofpacket
	wire    [0:0] pipe_stage_host_ctrl_m0_limiter_cmd_src_valid;                              // pipe_stage_host_ctrl_m0_limiter:cmd_src_valid -> limiter_pipeline:in_valid
	wire  [137:0] pipe_stage_host_ctrl_m0_limiter_cmd_src_data;                               // pipe_stage_host_ctrl_m0_limiter:cmd_src_data -> limiter_pipeline:in_data
	wire          pipe_stage_host_ctrl_m0_limiter_cmd_src_ready;                              // limiter_pipeline:in_ready -> pipe_stage_host_ctrl_m0_limiter:cmd_src_ready
	wire    [7:0] pipe_stage_host_ctrl_m0_limiter_cmd_src_channel;                            // pipe_stage_host_ctrl_m0_limiter:cmd_src_channel -> limiter_pipeline:in_channel
	wire          pipe_stage_host_ctrl_m0_limiter_cmd_src_startofpacket;                      // pipe_stage_host_ctrl_m0_limiter:cmd_src_startofpacket -> limiter_pipeline:in_startofpacket
	wire          pipe_stage_host_ctrl_m0_limiter_cmd_src_endofpacket;                        // pipe_stage_host_ctrl_m0_limiter:cmd_src_endofpacket -> limiter_pipeline:in_endofpacket
	wire          limiter_pipeline_source0_valid;                                             // limiter_pipeline:out_valid -> cmd_demux:sink_valid
	wire  [137:0] limiter_pipeline_source0_data;                                              // limiter_pipeline:out_data -> cmd_demux:sink_data
	wire          limiter_pipeline_source0_ready;                                             // cmd_demux:sink_ready -> limiter_pipeline:out_ready
	wire    [7:0] limiter_pipeline_source0_channel;                                           // limiter_pipeline:out_channel -> cmd_demux:sink_channel
	wire          limiter_pipeline_source0_startofpacket;                                     // limiter_pipeline:out_startofpacket -> cmd_demux:sink_startofpacket
	wire          limiter_pipeline_source0_endofpacket;                                       // limiter_pipeline:out_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                          // rsp_mux:src_valid -> limiter_pipeline_001:in_valid
	wire  [137:0] rsp_mux_src_data;                                                           // rsp_mux:src_data -> limiter_pipeline_001:in_data
	wire          rsp_mux_src_ready;                                                          // limiter_pipeline_001:in_ready -> rsp_mux:src_ready
	wire    [7:0] rsp_mux_src_channel;                                                        // rsp_mux:src_channel -> limiter_pipeline_001:in_channel
	wire          rsp_mux_src_startofpacket;                                                  // rsp_mux:src_startofpacket -> limiter_pipeline_001:in_startofpacket
	wire          rsp_mux_src_endofpacket;                                                    // rsp_mux:src_endofpacket -> limiter_pipeline_001:in_endofpacket
	wire          limiter_pipeline_001_source0_valid;                                         // limiter_pipeline_001:out_valid -> pipe_stage_host_ctrl_m0_limiter:rsp_sink_valid
	wire  [137:0] limiter_pipeline_001_source0_data;                                          // limiter_pipeline_001:out_data -> pipe_stage_host_ctrl_m0_limiter:rsp_sink_data
	wire          limiter_pipeline_001_source0_ready;                                         // pipe_stage_host_ctrl_m0_limiter:rsp_sink_ready -> limiter_pipeline_001:out_ready
	wire    [7:0] limiter_pipeline_001_source0_channel;                                       // limiter_pipeline_001:out_channel -> pipe_stage_host_ctrl_m0_limiter:rsp_sink_channel
	wire          limiter_pipeline_001_source0_startofpacket;                                 // limiter_pipeline_001:out_startofpacket -> pipe_stage_host_ctrl_m0_limiter:rsp_sink_startofpacket
	wire          limiter_pipeline_001_source0_endofpacket;                                   // limiter_pipeline_001:out_endofpacket -> pipe_stage_host_ctrl_m0_limiter:rsp_sink_endofpacket
	wire          board_irq_ctrl_0_irq_mask_slave_burst_adapter_source0_valid;                // board_irq_ctrl_0_IRQ_Mask_Slave_burst_adapter:source0_valid -> agent_pipeline:in_valid
	wire  [101:0] board_irq_ctrl_0_irq_mask_slave_burst_adapter_source0_data;                 // board_irq_ctrl_0_IRQ_Mask_Slave_burst_adapter:source0_data -> agent_pipeline:in_data
	wire          board_irq_ctrl_0_irq_mask_slave_burst_adapter_source0_ready;                // agent_pipeline:in_ready -> board_irq_ctrl_0_IRQ_Mask_Slave_burst_adapter:source0_ready
	wire    [7:0] board_irq_ctrl_0_irq_mask_slave_burst_adapter_source0_channel;              // board_irq_ctrl_0_IRQ_Mask_Slave_burst_adapter:source0_channel -> agent_pipeline:in_channel
	wire          board_irq_ctrl_0_irq_mask_slave_burst_adapter_source0_startofpacket;        // board_irq_ctrl_0_IRQ_Mask_Slave_burst_adapter:source0_startofpacket -> agent_pipeline:in_startofpacket
	wire          board_irq_ctrl_0_irq_mask_slave_burst_adapter_source0_endofpacket;          // board_irq_ctrl_0_IRQ_Mask_Slave_burst_adapter:source0_endofpacket -> agent_pipeline:in_endofpacket
	wire          agent_pipeline_source0_valid;                                               // agent_pipeline:out_valid -> board_irq_ctrl_0_IRQ_Mask_Slave_agent:cp_valid
	wire  [101:0] agent_pipeline_source0_data;                                                // agent_pipeline:out_data -> board_irq_ctrl_0_IRQ_Mask_Slave_agent:cp_data
	wire          agent_pipeline_source0_ready;                                               // board_irq_ctrl_0_IRQ_Mask_Slave_agent:cp_ready -> agent_pipeline:out_ready
	wire    [7:0] agent_pipeline_source0_channel;                                             // agent_pipeline:out_channel -> board_irq_ctrl_0_IRQ_Mask_Slave_agent:cp_channel
	wire          agent_pipeline_source0_startofpacket;                                       // agent_pipeline:out_startofpacket -> board_irq_ctrl_0_IRQ_Mask_Slave_agent:cp_startofpacket
	wire          agent_pipeline_source0_endofpacket;                                         // agent_pipeline:out_endofpacket -> board_irq_ctrl_0_IRQ_Mask_Slave_agent:cp_endofpacket
	wire          board_irq_ctrl_0_irq_mask_slave_agent_rp_valid;                             // board_irq_ctrl_0_IRQ_Mask_Slave_agent:rp_valid -> agent_pipeline_001:in_valid
	wire  [101:0] board_irq_ctrl_0_irq_mask_slave_agent_rp_data;                              // board_irq_ctrl_0_IRQ_Mask_Slave_agent:rp_data -> agent_pipeline_001:in_data
	wire          board_irq_ctrl_0_irq_mask_slave_agent_rp_ready;                             // agent_pipeline_001:in_ready -> board_irq_ctrl_0_IRQ_Mask_Slave_agent:rp_ready
	wire          board_irq_ctrl_0_irq_mask_slave_agent_rp_startofpacket;                     // board_irq_ctrl_0_IRQ_Mask_Slave_agent:rp_startofpacket -> agent_pipeline_001:in_startofpacket
	wire          board_irq_ctrl_0_irq_mask_slave_agent_rp_endofpacket;                       // board_irq_ctrl_0_IRQ_Mask_Slave_agent:rp_endofpacket -> agent_pipeline_001:in_endofpacket
	wire          agent_pipeline_001_source0_valid;                                           // agent_pipeline_001:out_valid -> router_001:sink_valid
	wire  [101:0] agent_pipeline_001_source0_data;                                            // agent_pipeline_001:out_data -> router_001:sink_data
	wire          agent_pipeline_001_source0_ready;                                           // router_001:sink_ready -> agent_pipeline_001:out_ready
	wire          agent_pipeline_001_source0_startofpacket;                                   // agent_pipeline_001:out_startofpacket -> router_001:sink_startofpacket
	wire          agent_pipeline_001_source0_endofpacket;                                     // agent_pipeline_001:out_endofpacket -> router_001:sink_endofpacket
	wire          board_irq_ctrl_0_irq_read_slave_burst_adapter_source0_valid;                // board_irq_ctrl_0_IRQ_Read_Slave_burst_adapter:source0_valid -> agent_pipeline_002:in_valid
	wire  [101:0] board_irq_ctrl_0_irq_read_slave_burst_adapter_source0_data;                 // board_irq_ctrl_0_IRQ_Read_Slave_burst_adapter:source0_data -> agent_pipeline_002:in_data
	wire          board_irq_ctrl_0_irq_read_slave_burst_adapter_source0_ready;                // agent_pipeline_002:in_ready -> board_irq_ctrl_0_IRQ_Read_Slave_burst_adapter:source0_ready
	wire    [7:0] board_irq_ctrl_0_irq_read_slave_burst_adapter_source0_channel;              // board_irq_ctrl_0_IRQ_Read_Slave_burst_adapter:source0_channel -> agent_pipeline_002:in_channel
	wire          board_irq_ctrl_0_irq_read_slave_burst_adapter_source0_startofpacket;        // board_irq_ctrl_0_IRQ_Read_Slave_burst_adapter:source0_startofpacket -> agent_pipeline_002:in_startofpacket
	wire          board_irq_ctrl_0_irq_read_slave_burst_adapter_source0_endofpacket;          // board_irq_ctrl_0_IRQ_Read_Slave_burst_adapter:source0_endofpacket -> agent_pipeline_002:in_endofpacket
	wire          agent_pipeline_002_source0_valid;                                           // agent_pipeline_002:out_valid -> board_irq_ctrl_0_IRQ_Read_Slave_agent:cp_valid
	wire  [101:0] agent_pipeline_002_source0_data;                                            // agent_pipeline_002:out_data -> board_irq_ctrl_0_IRQ_Read_Slave_agent:cp_data
	wire          agent_pipeline_002_source0_ready;                                           // board_irq_ctrl_0_IRQ_Read_Slave_agent:cp_ready -> agent_pipeline_002:out_ready
	wire    [7:0] agent_pipeline_002_source0_channel;                                         // agent_pipeline_002:out_channel -> board_irq_ctrl_0_IRQ_Read_Slave_agent:cp_channel
	wire          agent_pipeline_002_source0_startofpacket;                                   // agent_pipeline_002:out_startofpacket -> board_irq_ctrl_0_IRQ_Read_Slave_agent:cp_startofpacket
	wire          agent_pipeline_002_source0_endofpacket;                                     // agent_pipeline_002:out_endofpacket -> board_irq_ctrl_0_IRQ_Read_Slave_agent:cp_endofpacket
	wire          board_irq_ctrl_0_irq_read_slave_agent_rp_valid;                             // board_irq_ctrl_0_IRQ_Read_Slave_agent:rp_valid -> agent_pipeline_003:in_valid
	wire  [101:0] board_irq_ctrl_0_irq_read_slave_agent_rp_data;                              // board_irq_ctrl_0_IRQ_Read_Slave_agent:rp_data -> agent_pipeline_003:in_data
	wire          board_irq_ctrl_0_irq_read_slave_agent_rp_ready;                             // agent_pipeline_003:in_ready -> board_irq_ctrl_0_IRQ_Read_Slave_agent:rp_ready
	wire          board_irq_ctrl_0_irq_read_slave_agent_rp_startofpacket;                     // board_irq_ctrl_0_IRQ_Read_Slave_agent:rp_startofpacket -> agent_pipeline_003:in_startofpacket
	wire          board_irq_ctrl_0_irq_read_slave_agent_rp_endofpacket;                       // board_irq_ctrl_0_IRQ_Read_Slave_agent:rp_endofpacket -> agent_pipeline_003:in_endofpacket
	wire          agent_pipeline_003_source0_valid;                                           // agent_pipeline_003:out_valid -> router_002:sink_valid
	wire  [101:0] agent_pipeline_003_source0_data;                                            // agent_pipeline_003:out_data -> router_002:sink_data
	wire          agent_pipeline_003_source0_ready;                                           // router_002:sink_ready -> agent_pipeline_003:out_ready
	wire          agent_pipeline_003_source0_startofpacket;                                   // agent_pipeline_003:out_startofpacket -> router_002:sink_startofpacket
	wire          agent_pipeline_003_source0_endofpacket;                                     // agent_pipeline_003:out_endofpacket -> router_002:sink_endofpacket
	wire          cmd_mux_002_src_valid;                                                      // cmd_mux_002:src_valid -> agent_pipeline_004:in_valid
	wire  [137:0] cmd_mux_002_src_data;                                                       // cmd_mux_002:src_data -> agent_pipeline_004:in_data
	wire          cmd_mux_002_src_ready;                                                      // agent_pipeline_004:in_ready -> cmd_mux_002:src_ready
	wire    [7:0] cmd_mux_002_src_channel;                                                    // cmd_mux_002:src_channel -> agent_pipeline_004:in_channel
	wire          cmd_mux_002_src_startofpacket;                                              // cmd_mux_002:src_startofpacket -> agent_pipeline_004:in_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                // cmd_mux_002:src_endofpacket -> agent_pipeline_004:in_endofpacket
	wire          agent_pipeline_004_source0_valid;                                           // agent_pipeline_004:out_valid -> board_afu_id_avmm_slave_0_afu_cfg_slave_agent:cp_valid
	wire  [137:0] agent_pipeline_004_source0_data;                                            // agent_pipeline_004:out_data -> board_afu_id_avmm_slave_0_afu_cfg_slave_agent:cp_data
	wire          agent_pipeline_004_source0_ready;                                           // board_afu_id_avmm_slave_0_afu_cfg_slave_agent:cp_ready -> agent_pipeline_004:out_ready
	wire    [7:0] agent_pipeline_004_source0_channel;                                         // agent_pipeline_004:out_channel -> board_afu_id_avmm_slave_0_afu_cfg_slave_agent:cp_channel
	wire          agent_pipeline_004_source0_startofpacket;                                   // agent_pipeline_004:out_startofpacket -> board_afu_id_avmm_slave_0_afu_cfg_slave_agent:cp_startofpacket
	wire          agent_pipeline_004_source0_endofpacket;                                     // agent_pipeline_004:out_endofpacket -> board_afu_id_avmm_slave_0_afu_cfg_slave_agent:cp_endofpacket
	wire          board_afu_id_avmm_slave_0_afu_cfg_slave_agent_rp_valid;                     // board_afu_id_avmm_slave_0_afu_cfg_slave_agent:rp_valid -> agent_pipeline_005:in_valid
	wire  [137:0] board_afu_id_avmm_slave_0_afu_cfg_slave_agent_rp_data;                      // board_afu_id_avmm_slave_0_afu_cfg_slave_agent:rp_data -> agent_pipeline_005:in_data
	wire          board_afu_id_avmm_slave_0_afu_cfg_slave_agent_rp_ready;                     // agent_pipeline_005:in_ready -> board_afu_id_avmm_slave_0_afu_cfg_slave_agent:rp_ready
	wire          board_afu_id_avmm_slave_0_afu_cfg_slave_agent_rp_startofpacket;             // board_afu_id_avmm_slave_0_afu_cfg_slave_agent:rp_startofpacket -> agent_pipeline_005:in_startofpacket
	wire          board_afu_id_avmm_slave_0_afu_cfg_slave_agent_rp_endofpacket;               // board_afu_id_avmm_slave_0_afu_cfg_slave_agent:rp_endofpacket -> agent_pipeline_005:in_endofpacket
	wire          agent_pipeline_005_source0_valid;                                           // agent_pipeline_005:out_valid -> router_003:sink_valid
	wire  [137:0] agent_pipeline_005_source0_data;                                            // agent_pipeline_005:out_data -> router_003:sink_data
	wire          agent_pipeline_005_source0_ready;                                           // router_003:sink_ready -> agent_pipeline_005:out_ready
	wire          agent_pipeline_005_source0_startofpacket;                                   // agent_pipeline_005:out_startofpacket -> router_003:sink_startofpacket
	wire          agent_pipeline_005_source0_endofpacket;                                     // agent_pipeline_005:out_endofpacket -> router_003:sink_endofpacket
	wire          cmd_mux_003_src_valid;                                                      // cmd_mux_003:src_valid -> agent_pipeline_006:in_valid
	wire  [137:0] cmd_mux_003_src_data;                                                       // cmd_mux_003:src_data -> agent_pipeline_006:in_data
	wire          cmd_mux_003_src_ready;                                                      // agent_pipeline_006:in_ready -> cmd_mux_003:src_ready
	wire    [7:0] cmd_mux_003_src_channel;                                                    // cmd_mux_003:src_channel -> agent_pipeline_006:in_channel
	wire          cmd_mux_003_src_startofpacket;                                              // cmd_mux_003:src_startofpacket -> agent_pipeline_006:in_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                // cmd_mux_003:src_endofpacket -> agent_pipeline_006:in_endofpacket
	wire          agent_pipeline_006_source0_valid;                                           // agent_pipeline_006:out_valid -> ddr_board_ase_0_avmm_pipe_slave_agent:cp_valid
	wire  [137:0] agent_pipeline_006_source0_data;                                            // agent_pipeline_006:out_data -> ddr_board_ase_0_avmm_pipe_slave_agent:cp_data
	wire          agent_pipeline_006_source0_ready;                                           // ddr_board_ase_0_avmm_pipe_slave_agent:cp_ready -> agent_pipeline_006:out_ready
	wire    [7:0] agent_pipeline_006_source0_channel;                                         // agent_pipeline_006:out_channel -> ddr_board_ase_0_avmm_pipe_slave_agent:cp_channel
	wire          agent_pipeline_006_source0_startofpacket;                                   // agent_pipeline_006:out_startofpacket -> ddr_board_ase_0_avmm_pipe_slave_agent:cp_startofpacket
	wire          agent_pipeline_006_source0_endofpacket;                                     // agent_pipeline_006:out_endofpacket -> ddr_board_ase_0_avmm_pipe_slave_agent:cp_endofpacket
	wire          ddr_board_ase_0_avmm_pipe_slave_agent_rp_valid;                             // ddr_board_ase_0_avmm_pipe_slave_agent:rp_valid -> agent_pipeline_007:in_valid
	wire  [137:0] ddr_board_ase_0_avmm_pipe_slave_agent_rp_data;                              // ddr_board_ase_0_avmm_pipe_slave_agent:rp_data -> agent_pipeline_007:in_data
	wire          ddr_board_ase_0_avmm_pipe_slave_agent_rp_ready;                             // agent_pipeline_007:in_ready -> ddr_board_ase_0_avmm_pipe_slave_agent:rp_ready
	wire          ddr_board_ase_0_avmm_pipe_slave_agent_rp_startofpacket;                     // ddr_board_ase_0_avmm_pipe_slave_agent:rp_startofpacket -> agent_pipeline_007:in_startofpacket
	wire          ddr_board_ase_0_avmm_pipe_slave_agent_rp_endofpacket;                       // ddr_board_ase_0_avmm_pipe_slave_agent:rp_endofpacket -> agent_pipeline_007:in_endofpacket
	wire          agent_pipeline_007_source0_valid;                                           // agent_pipeline_007:out_valid -> router_004:sink_valid
	wire  [137:0] agent_pipeline_007_source0_data;                                            // agent_pipeline_007:out_data -> router_004:sink_data
	wire          agent_pipeline_007_source0_ready;                                           // router_004:sink_ready -> agent_pipeline_007:out_ready
	wire          agent_pipeline_007_source0_startofpacket;                                   // agent_pipeline_007:out_startofpacket -> router_004:sink_startofpacket
	wire          agent_pipeline_007_source0_endofpacket;                                     // agent_pipeline_007:out_endofpacket -> router_004:sink_endofpacket
	wire          kernel_interface_ctrl_burst_adapter_source0_valid;                          // kernel_interface_ctrl_burst_adapter:source0_valid -> agent_pipeline_008:in_valid
	wire  [101:0] kernel_interface_ctrl_burst_adapter_source0_data;                           // kernel_interface_ctrl_burst_adapter:source0_data -> agent_pipeline_008:in_data
	wire          kernel_interface_ctrl_burst_adapter_source0_ready;                          // agent_pipeline_008:in_ready -> kernel_interface_ctrl_burst_adapter:source0_ready
	wire    [7:0] kernel_interface_ctrl_burst_adapter_source0_channel;                        // kernel_interface_ctrl_burst_adapter:source0_channel -> agent_pipeline_008:in_channel
	wire          kernel_interface_ctrl_burst_adapter_source0_startofpacket;                  // kernel_interface_ctrl_burst_adapter:source0_startofpacket -> agent_pipeline_008:in_startofpacket
	wire          kernel_interface_ctrl_burst_adapter_source0_endofpacket;                    // kernel_interface_ctrl_burst_adapter:source0_endofpacket -> agent_pipeline_008:in_endofpacket
	wire          agent_pipeline_008_source0_valid;                                           // agent_pipeline_008:out_valid -> kernel_interface_ctrl_agent:cp_valid
	wire  [101:0] agent_pipeline_008_source0_data;                                            // agent_pipeline_008:out_data -> kernel_interface_ctrl_agent:cp_data
	wire          agent_pipeline_008_source0_ready;                                           // kernel_interface_ctrl_agent:cp_ready -> agent_pipeline_008:out_ready
	wire    [7:0] agent_pipeline_008_source0_channel;                                         // agent_pipeline_008:out_channel -> kernel_interface_ctrl_agent:cp_channel
	wire          agent_pipeline_008_source0_startofpacket;                                   // agent_pipeline_008:out_startofpacket -> kernel_interface_ctrl_agent:cp_startofpacket
	wire          agent_pipeline_008_source0_endofpacket;                                     // agent_pipeline_008:out_endofpacket -> kernel_interface_ctrl_agent:cp_endofpacket
	wire          kernel_interface_ctrl_agent_rp_valid;                                       // kernel_interface_ctrl_agent:rp_valid -> agent_pipeline_009:in_valid
	wire  [101:0] kernel_interface_ctrl_agent_rp_data;                                        // kernel_interface_ctrl_agent:rp_data -> agent_pipeline_009:in_data
	wire          kernel_interface_ctrl_agent_rp_ready;                                       // agent_pipeline_009:in_ready -> kernel_interface_ctrl_agent:rp_ready
	wire          kernel_interface_ctrl_agent_rp_startofpacket;                               // kernel_interface_ctrl_agent:rp_startofpacket -> agent_pipeline_009:in_startofpacket
	wire          kernel_interface_ctrl_agent_rp_endofpacket;                                 // kernel_interface_ctrl_agent:rp_endofpacket -> agent_pipeline_009:in_endofpacket
	wire          agent_pipeline_009_source0_valid;                                           // agent_pipeline_009:out_valid -> router_005:sink_valid
	wire  [101:0] agent_pipeline_009_source0_data;                                            // agent_pipeline_009:out_data -> router_005:sink_data
	wire          agent_pipeline_009_source0_ready;                                           // router_005:sink_ready -> agent_pipeline_009:out_ready
	wire          agent_pipeline_009_source0_startofpacket;                                   // agent_pipeline_009:out_startofpacket -> router_005:sink_startofpacket
	wire          agent_pipeline_009_source0_endofpacket;                                     // agent_pipeline_009:out_endofpacket -> router_005:sink_endofpacket
	wire          cmd_mux_005_src_valid;                                                      // cmd_mux_005:src_valid -> agent_pipeline_010:in_valid
	wire  [137:0] cmd_mux_005_src_data;                                                       // cmd_mux_005:src_data -> agent_pipeline_010:in_data
	wire          cmd_mux_005_src_ready;                                                      // agent_pipeline_010:in_ready -> cmd_mux_005:src_ready
	wire    [7:0] cmd_mux_005_src_channel;                                                    // cmd_mux_005:src_channel -> agent_pipeline_010:in_channel
	wire          cmd_mux_005_src_startofpacket;                                              // cmd_mux_005:src_startofpacket -> agent_pipeline_010:in_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                // cmd_mux_005:src_endofpacket -> agent_pipeline_010:in_endofpacket
	wire          agent_pipeline_010_source0_valid;                                           // agent_pipeline_010:out_valid -> ddr_board_msgdma_bbb_0_csr_agent:cp_valid
	wire  [137:0] agent_pipeline_010_source0_data;                                            // agent_pipeline_010:out_data -> ddr_board_msgdma_bbb_0_csr_agent:cp_data
	wire          agent_pipeline_010_source0_ready;                                           // ddr_board_msgdma_bbb_0_csr_agent:cp_ready -> agent_pipeline_010:out_ready
	wire    [7:0] agent_pipeline_010_source0_channel;                                         // agent_pipeline_010:out_channel -> ddr_board_msgdma_bbb_0_csr_agent:cp_channel
	wire          agent_pipeline_010_source0_startofpacket;                                   // agent_pipeline_010:out_startofpacket -> ddr_board_msgdma_bbb_0_csr_agent:cp_startofpacket
	wire          agent_pipeline_010_source0_endofpacket;                                     // agent_pipeline_010:out_endofpacket -> ddr_board_msgdma_bbb_0_csr_agent:cp_endofpacket
	wire          ddr_board_msgdma_bbb_0_csr_agent_rp_valid;                                  // ddr_board_msgdma_bbb_0_csr_agent:rp_valid -> agent_pipeline_011:in_valid
	wire  [137:0] ddr_board_msgdma_bbb_0_csr_agent_rp_data;                                   // ddr_board_msgdma_bbb_0_csr_agent:rp_data -> agent_pipeline_011:in_data
	wire          ddr_board_msgdma_bbb_0_csr_agent_rp_ready;                                  // agent_pipeline_011:in_ready -> ddr_board_msgdma_bbb_0_csr_agent:rp_ready
	wire          ddr_board_msgdma_bbb_0_csr_agent_rp_startofpacket;                          // ddr_board_msgdma_bbb_0_csr_agent:rp_startofpacket -> agent_pipeline_011:in_startofpacket
	wire          ddr_board_msgdma_bbb_0_csr_agent_rp_endofpacket;                            // ddr_board_msgdma_bbb_0_csr_agent:rp_endofpacket -> agent_pipeline_011:in_endofpacket
	wire          agent_pipeline_011_source0_valid;                                           // agent_pipeline_011:out_valid -> router_006:sink_valid
	wire  [137:0] agent_pipeline_011_source0_data;                                            // agent_pipeline_011:out_data -> router_006:sink_data
	wire          agent_pipeline_011_source0_ready;                                           // router_006:sink_ready -> agent_pipeline_011:out_ready
	wire          agent_pipeline_011_source0_startofpacket;                                   // agent_pipeline_011:out_startofpacket -> router_006:sink_startofpacket
	wire          agent_pipeline_011_source0_endofpacket;                                     // agent_pipeline_011:out_endofpacket -> router_006:sink_endofpacket
	wire          cmd_mux_006_src_valid;                                                      // cmd_mux_006:src_valid -> agent_pipeline_012:in_valid
	wire  [137:0] cmd_mux_006_src_data;                                                       // cmd_mux_006:src_data -> agent_pipeline_012:in_data
	wire          cmd_mux_006_src_ready;                                                      // agent_pipeline_012:in_ready -> cmd_mux_006:src_ready
	wire    [7:0] cmd_mux_006_src_channel;                                                    // cmd_mux_006:src_channel -> agent_pipeline_012:in_channel
	wire          cmd_mux_006_src_startofpacket;                                              // cmd_mux_006:src_startofpacket -> agent_pipeline_012:in_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                // cmd_mux_006:src_endofpacket -> agent_pipeline_012:in_endofpacket
	wire          agent_pipeline_012_source0_valid;                                           // agent_pipeline_012:out_valid -> ddr_board_msgdma_bbb_1_csr_agent:cp_valid
	wire  [137:0] agent_pipeline_012_source0_data;                                            // agent_pipeline_012:out_data -> ddr_board_msgdma_bbb_1_csr_agent:cp_data
	wire          agent_pipeline_012_source0_ready;                                           // ddr_board_msgdma_bbb_1_csr_agent:cp_ready -> agent_pipeline_012:out_ready
	wire    [7:0] agent_pipeline_012_source0_channel;                                         // agent_pipeline_012:out_channel -> ddr_board_msgdma_bbb_1_csr_agent:cp_channel
	wire          agent_pipeline_012_source0_startofpacket;                                   // agent_pipeline_012:out_startofpacket -> ddr_board_msgdma_bbb_1_csr_agent:cp_startofpacket
	wire          agent_pipeline_012_source0_endofpacket;                                     // agent_pipeline_012:out_endofpacket -> ddr_board_msgdma_bbb_1_csr_agent:cp_endofpacket
	wire          ddr_board_msgdma_bbb_1_csr_agent_rp_valid;                                  // ddr_board_msgdma_bbb_1_csr_agent:rp_valid -> agent_pipeline_013:in_valid
	wire  [137:0] ddr_board_msgdma_bbb_1_csr_agent_rp_data;                                   // ddr_board_msgdma_bbb_1_csr_agent:rp_data -> agent_pipeline_013:in_data
	wire          ddr_board_msgdma_bbb_1_csr_agent_rp_ready;                                  // agent_pipeline_013:in_ready -> ddr_board_msgdma_bbb_1_csr_agent:rp_ready
	wire          ddr_board_msgdma_bbb_1_csr_agent_rp_startofpacket;                          // ddr_board_msgdma_bbb_1_csr_agent:rp_startofpacket -> agent_pipeline_013:in_startofpacket
	wire          ddr_board_msgdma_bbb_1_csr_agent_rp_endofpacket;                            // ddr_board_msgdma_bbb_1_csr_agent:rp_endofpacket -> agent_pipeline_013:in_endofpacket
	wire          agent_pipeline_013_source0_valid;                                           // agent_pipeline_013:out_valid -> router_007:sink_valid
	wire  [137:0] agent_pipeline_013_source0_data;                                            // agent_pipeline_013:out_data -> router_007:sink_data
	wire          agent_pipeline_013_source0_ready;                                           // router_007:sink_ready -> agent_pipeline_013:out_ready
	wire          agent_pipeline_013_source0_startofpacket;                                   // agent_pipeline_013:out_startofpacket -> router_007:sink_startofpacket
	wire          agent_pipeline_013_source0_endofpacket;                                     // agent_pipeline_013:out_endofpacket -> router_007:sink_endofpacket
	wire          cmd_mux_007_src_valid;                                                      // cmd_mux_007:src_valid -> agent_pipeline_014:in_valid
	wire  [137:0] cmd_mux_007_src_data;                                                       // cmd_mux_007:src_data -> agent_pipeline_014:in_data
	wire          cmd_mux_007_src_ready;                                                      // agent_pipeline_014:in_ready -> cmd_mux_007:src_ready
	wire    [7:0] cmd_mux_007_src_channel;                                                    // cmd_mux_007:src_channel -> agent_pipeline_014:in_channel
	wire          cmd_mux_007_src_startofpacket;                                              // cmd_mux_007:src_startofpacket -> agent_pipeline_014:in_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                // cmd_mux_007:src_endofpacket -> agent_pipeline_014:in_endofpacket
	wire          agent_pipeline_014_source0_valid;                                           // agent_pipeline_014:out_valid -> ddr_board_null_dfh_afu_id_agent:cp_valid
	wire  [137:0] agent_pipeline_014_source0_data;                                            // agent_pipeline_014:out_data -> ddr_board_null_dfh_afu_id_agent:cp_data
	wire          agent_pipeline_014_source0_ready;                                           // ddr_board_null_dfh_afu_id_agent:cp_ready -> agent_pipeline_014:out_ready
	wire    [7:0] agent_pipeline_014_source0_channel;                                         // agent_pipeline_014:out_channel -> ddr_board_null_dfh_afu_id_agent:cp_channel
	wire          agent_pipeline_014_source0_startofpacket;                                   // agent_pipeline_014:out_startofpacket -> ddr_board_null_dfh_afu_id_agent:cp_startofpacket
	wire          agent_pipeline_014_source0_endofpacket;                                     // agent_pipeline_014:out_endofpacket -> ddr_board_null_dfh_afu_id_agent:cp_endofpacket
	wire          ddr_board_null_dfh_afu_id_agent_rp_valid;                                   // ddr_board_null_dfh_afu_id_agent:rp_valid -> agent_pipeline_015:in_valid
	wire  [137:0] ddr_board_null_dfh_afu_id_agent_rp_data;                                    // ddr_board_null_dfh_afu_id_agent:rp_data -> agent_pipeline_015:in_data
	wire          ddr_board_null_dfh_afu_id_agent_rp_ready;                                   // agent_pipeline_015:in_ready -> ddr_board_null_dfh_afu_id_agent:rp_ready
	wire          ddr_board_null_dfh_afu_id_agent_rp_startofpacket;                           // ddr_board_null_dfh_afu_id_agent:rp_startofpacket -> agent_pipeline_015:in_startofpacket
	wire          ddr_board_null_dfh_afu_id_agent_rp_endofpacket;                             // ddr_board_null_dfh_afu_id_agent:rp_endofpacket -> agent_pipeline_015:in_endofpacket
	wire          agent_pipeline_015_source0_valid;                                           // agent_pipeline_015:out_valid -> router_008:sink_valid
	wire  [137:0] agent_pipeline_015_source0_data;                                            // agent_pipeline_015:out_data -> router_008:sink_data
	wire          agent_pipeline_015_source0_ready;                                           // router_008:sink_ready -> agent_pipeline_015:out_ready
	wire          agent_pipeline_015_source0_startofpacket;                                   // agent_pipeline_015:out_startofpacket -> router_008:sink_startofpacket
	wire          agent_pipeline_015_source0_endofpacket;                                     // agent_pipeline_015:out_endofpacket -> router_008:sink_endofpacket
	wire          cmd_demux_src0_valid;                                                       // cmd_demux:src0_valid -> mux_pipeline:in_valid
	wire  [137:0] cmd_demux_src0_data;                                                        // cmd_demux:src0_data -> mux_pipeline:in_data
	wire          cmd_demux_src0_ready;                                                       // mux_pipeline:in_ready -> cmd_demux:src0_ready
	wire    [7:0] cmd_demux_src0_channel;                                                     // cmd_demux:src0_channel -> mux_pipeline:in_channel
	wire          cmd_demux_src0_startofpacket;                                               // cmd_demux:src0_startofpacket -> mux_pipeline:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                 // cmd_demux:src0_endofpacket -> mux_pipeline:in_endofpacket
	wire          mux_pipeline_source0_valid;                                                 // mux_pipeline:out_valid -> cmd_mux:sink0_valid
	wire  [137:0] mux_pipeline_source0_data;                                                  // mux_pipeline:out_data -> cmd_mux:sink0_data
	wire          mux_pipeline_source0_ready;                                                 // cmd_mux:sink0_ready -> mux_pipeline:out_ready
	wire    [7:0] mux_pipeline_source0_channel;                                               // mux_pipeline:out_channel -> cmd_mux:sink0_channel
	wire          mux_pipeline_source0_startofpacket;                                         // mux_pipeline:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          mux_pipeline_source0_endofpacket;                                           // mux_pipeline:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                       // cmd_demux:src1_valid -> mux_pipeline_001:in_valid
	wire  [137:0] cmd_demux_src1_data;                                                        // cmd_demux:src1_data -> mux_pipeline_001:in_data
	wire          cmd_demux_src1_ready;                                                       // mux_pipeline_001:in_ready -> cmd_demux:src1_ready
	wire    [7:0] cmd_demux_src1_channel;                                                     // cmd_demux:src1_channel -> mux_pipeline_001:in_channel
	wire          cmd_demux_src1_startofpacket;                                               // cmd_demux:src1_startofpacket -> mux_pipeline_001:in_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                 // cmd_demux:src1_endofpacket -> mux_pipeline_001:in_endofpacket
	wire          mux_pipeline_001_source0_valid;                                             // mux_pipeline_001:out_valid -> cmd_mux_001:sink0_valid
	wire  [137:0] mux_pipeline_001_source0_data;                                              // mux_pipeline_001:out_data -> cmd_mux_001:sink0_data
	wire          mux_pipeline_001_source0_ready;                                             // cmd_mux_001:sink0_ready -> mux_pipeline_001:out_ready
	wire    [7:0] mux_pipeline_001_source0_channel;                                           // mux_pipeline_001:out_channel -> cmd_mux_001:sink0_channel
	wire          mux_pipeline_001_source0_startofpacket;                                     // mux_pipeline_001:out_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          mux_pipeline_001_source0_endofpacket;                                       // mux_pipeline_001:out_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                       // cmd_demux:src2_valid -> mux_pipeline_002:in_valid
	wire  [137:0] cmd_demux_src2_data;                                                        // cmd_demux:src2_data -> mux_pipeline_002:in_data
	wire          cmd_demux_src2_ready;                                                       // mux_pipeline_002:in_ready -> cmd_demux:src2_ready
	wire    [7:0] cmd_demux_src2_channel;                                                     // cmd_demux:src2_channel -> mux_pipeline_002:in_channel
	wire          cmd_demux_src2_startofpacket;                                               // cmd_demux:src2_startofpacket -> mux_pipeline_002:in_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                 // cmd_demux:src2_endofpacket -> mux_pipeline_002:in_endofpacket
	wire          mux_pipeline_002_source0_valid;                                             // mux_pipeline_002:out_valid -> cmd_mux_002:sink0_valid
	wire  [137:0] mux_pipeline_002_source0_data;                                              // mux_pipeline_002:out_data -> cmd_mux_002:sink0_data
	wire          mux_pipeline_002_source0_ready;                                             // cmd_mux_002:sink0_ready -> mux_pipeline_002:out_ready
	wire    [7:0] mux_pipeline_002_source0_channel;                                           // mux_pipeline_002:out_channel -> cmd_mux_002:sink0_channel
	wire          mux_pipeline_002_source0_startofpacket;                                     // mux_pipeline_002:out_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          mux_pipeline_002_source0_endofpacket;                                       // mux_pipeline_002:out_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                       // cmd_demux:src3_valid -> mux_pipeline_003:in_valid
	wire  [137:0] cmd_demux_src3_data;                                                        // cmd_demux:src3_data -> mux_pipeline_003:in_data
	wire          cmd_demux_src3_ready;                                                       // mux_pipeline_003:in_ready -> cmd_demux:src3_ready
	wire    [7:0] cmd_demux_src3_channel;                                                     // cmd_demux:src3_channel -> mux_pipeline_003:in_channel
	wire          cmd_demux_src3_startofpacket;                                               // cmd_demux:src3_startofpacket -> mux_pipeline_003:in_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                 // cmd_demux:src3_endofpacket -> mux_pipeline_003:in_endofpacket
	wire          mux_pipeline_003_source0_valid;                                             // mux_pipeline_003:out_valid -> cmd_mux_003:sink0_valid
	wire  [137:0] mux_pipeline_003_source0_data;                                              // mux_pipeline_003:out_data -> cmd_mux_003:sink0_data
	wire          mux_pipeline_003_source0_ready;                                             // cmd_mux_003:sink0_ready -> mux_pipeline_003:out_ready
	wire    [7:0] mux_pipeline_003_source0_channel;                                           // mux_pipeline_003:out_channel -> cmd_mux_003:sink0_channel
	wire          mux_pipeline_003_source0_startofpacket;                                     // mux_pipeline_003:out_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          mux_pipeline_003_source0_endofpacket;                                       // mux_pipeline_003:out_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                       // cmd_demux:src4_valid -> mux_pipeline_004:in_valid
	wire  [137:0] cmd_demux_src4_data;                                                        // cmd_demux:src4_data -> mux_pipeline_004:in_data
	wire          cmd_demux_src4_ready;                                                       // mux_pipeline_004:in_ready -> cmd_demux:src4_ready
	wire    [7:0] cmd_demux_src4_channel;                                                     // cmd_demux:src4_channel -> mux_pipeline_004:in_channel
	wire          cmd_demux_src4_startofpacket;                                               // cmd_demux:src4_startofpacket -> mux_pipeline_004:in_startofpacket
	wire          cmd_demux_src4_endofpacket;                                                 // cmd_demux:src4_endofpacket -> mux_pipeline_004:in_endofpacket
	wire          mux_pipeline_004_source0_valid;                                             // mux_pipeline_004:out_valid -> cmd_mux_004:sink0_valid
	wire  [137:0] mux_pipeline_004_source0_data;                                              // mux_pipeline_004:out_data -> cmd_mux_004:sink0_data
	wire          mux_pipeline_004_source0_ready;                                             // cmd_mux_004:sink0_ready -> mux_pipeline_004:out_ready
	wire    [7:0] mux_pipeline_004_source0_channel;                                           // mux_pipeline_004:out_channel -> cmd_mux_004:sink0_channel
	wire          mux_pipeline_004_source0_startofpacket;                                     // mux_pipeline_004:out_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          mux_pipeline_004_source0_endofpacket;                                       // mux_pipeline_004:out_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                       // cmd_demux:src5_valid -> mux_pipeline_005:in_valid
	wire  [137:0] cmd_demux_src5_data;                                                        // cmd_demux:src5_data -> mux_pipeline_005:in_data
	wire          cmd_demux_src5_ready;                                                       // mux_pipeline_005:in_ready -> cmd_demux:src5_ready
	wire    [7:0] cmd_demux_src5_channel;                                                     // cmd_demux:src5_channel -> mux_pipeline_005:in_channel
	wire          cmd_demux_src5_startofpacket;                                               // cmd_demux:src5_startofpacket -> mux_pipeline_005:in_startofpacket
	wire          cmd_demux_src5_endofpacket;                                                 // cmd_demux:src5_endofpacket -> mux_pipeline_005:in_endofpacket
	wire          mux_pipeline_005_source0_valid;                                             // mux_pipeline_005:out_valid -> cmd_mux_005:sink0_valid
	wire  [137:0] mux_pipeline_005_source0_data;                                              // mux_pipeline_005:out_data -> cmd_mux_005:sink0_data
	wire          mux_pipeline_005_source0_ready;                                             // cmd_mux_005:sink0_ready -> mux_pipeline_005:out_ready
	wire    [7:0] mux_pipeline_005_source0_channel;                                           // mux_pipeline_005:out_channel -> cmd_mux_005:sink0_channel
	wire          mux_pipeline_005_source0_startofpacket;                                     // mux_pipeline_005:out_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          mux_pipeline_005_source0_endofpacket;                                       // mux_pipeline_005:out_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                                       // cmd_demux:src6_valid -> mux_pipeline_006:in_valid
	wire  [137:0] cmd_demux_src6_data;                                                        // cmd_demux:src6_data -> mux_pipeline_006:in_data
	wire          cmd_demux_src6_ready;                                                       // mux_pipeline_006:in_ready -> cmd_demux:src6_ready
	wire    [7:0] cmd_demux_src6_channel;                                                     // cmd_demux:src6_channel -> mux_pipeline_006:in_channel
	wire          cmd_demux_src6_startofpacket;                                               // cmd_demux:src6_startofpacket -> mux_pipeline_006:in_startofpacket
	wire          cmd_demux_src6_endofpacket;                                                 // cmd_demux:src6_endofpacket -> mux_pipeline_006:in_endofpacket
	wire          mux_pipeline_006_source0_valid;                                             // mux_pipeline_006:out_valid -> cmd_mux_006:sink0_valid
	wire  [137:0] mux_pipeline_006_source0_data;                                              // mux_pipeline_006:out_data -> cmd_mux_006:sink0_data
	wire          mux_pipeline_006_source0_ready;                                             // cmd_mux_006:sink0_ready -> mux_pipeline_006:out_ready
	wire    [7:0] mux_pipeline_006_source0_channel;                                           // mux_pipeline_006:out_channel -> cmd_mux_006:sink0_channel
	wire          mux_pipeline_006_source0_startofpacket;                                     // mux_pipeline_006:out_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          mux_pipeline_006_source0_endofpacket;                                       // mux_pipeline_006:out_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                                       // cmd_demux:src7_valid -> mux_pipeline_007:in_valid
	wire  [137:0] cmd_demux_src7_data;                                                        // cmd_demux:src7_data -> mux_pipeline_007:in_data
	wire          cmd_demux_src7_ready;                                                       // mux_pipeline_007:in_ready -> cmd_demux:src7_ready
	wire    [7:0] cmd_demux_src7_channel;                                                     // cmd_demux:src7_channel -> mux_pipeline_007:in_channel
	wire          cmd_demux_src7_startofpacket;                                               // cmd_demux:src7_startofpacket -> mux_pipeline_007:in_startofpacket
	wire          cmd_demux_src7_endofpacket;                                                 // cmd_demux:src7_endofpacket -> mux_pipeline_007:in_endofpacket
	wire          mux_pipeline_007_source0_valid;                                             // mux_pipeline_007:out_valid -> cmd_mux_007:sink0_valid
	wire  [137:0] mux_pipeline_007_source0_data;                                              // mux_pipeline_007:out_data -> cmd_mux_007:sink0_data
	wire          mux_pipeline_007_source0_ready;                                             // cmd_mux_007:sink0_ready -> mux_pipeline_007:out_ready
	wire    [7:0] mux_pipeline_007_source0_channel;                                           // mux_pipeline_007:out_channel -> cmd_mux_007:sink0_channel
	wire          mux_pipeline_007_source0_startofpacket;                                     // mux_pipeline_007:out_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          mux_pipeline_007_source0_endofpacket;                                       // mux_pipeline_007:out_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                                       // rsp_demux:src0_valid -> mux_pipeline_008:in_valid
	wire  [137:0] rsp_demux_src0_data;                                                        // rsp_demux:src0_data -> mux_pipeline_008:in_data
	wire          rsp_demux_src0_ready;                                                       // mux_pipeline_008:in_ready -> rsp_demux:src0_ready
	wire    [7:0] rsp_demux_src0_channel;                                                     // rsp_demux:src0_channel -> mux_pipeline_008:in_channel
	wire          rsp_demux_src0_startofpacket;                                               // rsp_demux:src0_startofpacket -> mux_pipeline_008:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                 // rsp_demux:src0_endofpacket -> mux_pipeline_008:in_endofpacket
	wire          mux_pipeline_008_source0_valid;                                             // mux_pipeline_008:out_valid -> rsp_mux:sink0_valid
	wire  [137:0] mux_pipeline_008_source0_data;                                              // mux_pipeline_008:out_data -> rsp_mux:sink0_data
	wire          mux_pipeline_008_source0_ready;                                             // rsp_mux:sink0_ready -> mux_pipeline_008:out_ready
	wire    [7:0] mux_pipeline_008_source0_channel;                                           // mux_pipeline_008:out_channel -> rsp_mux:sink0_channel
	wire          mux_pipeline_008_source0_startofpacket;                                     // mux_pipeline_008:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          mux_pipeline_008_source0_endofpacket;                                       // mux_pipeline_008:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                   // rsp_demux_001:src0_valid -> mux_pipeline_009:in_valid
	wire  [137:0] rsp_demux_001_src0_data;                                                    // rsp_demux_001:src0_data -> mux_pipeline_009:in_data
	wire          rsp_demux_001_src0_ready;                                                   // mux_pipeline_009:in_ready -> rsp_demux_001:src0_ready
	wire    [7:0] rsp_demux_001_src0_channel;                                                 // rsp_demux_001:src0_channel -> mux_pipeline_009:in_channel
	wire          rsp_demux_001_src0_startofpacket;                                           // rsp_demux_001:src0_startofpacket -> mux_pipeline_009:in_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                             // rsp_demux_001:src0_endofpacket -> mux_pipeline_009:in_endofpacket
	wire          mux_pipeline_009_source0_valid;                                             // mux_pipeline_009:out_valid -> rsp_mux:sink1_valid
	wire  [137:0] mux_pipeline_009_source0_data;                                              // mux_pipeline_009:out_data -> rsp_mux:sink1_data
	wire          mux_pipeline_009_source0_ready;                                             // rsp_mux:sink1_ready -> mux_pipeline_009:out_ready
	wire    [7:0] mux_pipeline_009_source0_channel;                                           // mux_pipeline_009:out_channel -> rsp_mux:sink1_channel
	wire          mux_pipeline_009_source0_startofpacket;                                     // mux_pipeline_009:out_startofpacket -> rsp_mux:sink1_startofpacket
	wire          mux_pipeline_009_source0_endofpacket;                                       // mux_pipeline_009:out_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                   // rsp_demux_002:src0_valid -> mux_pipeline_010:in_valid
	wire  [137:0] rsp_demux_002_src0_data;                                                    // rsp_demux_002:src0_data -> mux_pipeline_010:in_data
	wire          rsp_demux_002_src0_ready;                                                   // mux_pipeline_010:in_ready -> rsp_demux_002:src0_ready
	wire    [7:0] rsp_demux_002_src0_channel;                                                 // rsp_demux_002:src0_channel -> mux_pipeline_010:in_channel
	wire          rsp_demux_002_src0_startofpacket;                                           // rsp_demux_002:src0_startofpacket -> mux_pipeline_010:in_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                             // rsp_demux_002:src0_endofpacket -> mux_pipeline_010:in_endofpacket
	wire          mux_pipeline_010_source0_valid;                                             // mux_pipeline_010:out_valid -> rsp_mux:sink2_valid
	wire  [137:0] mux_pipeline_010_source0_data;                                              // mux_pipeline_010:out_data -> rsp_mux:sink2_data
	wire          mux_pipeline_010_source0_ready;                                             // rsp_mux:sink2_ready -> mux_pipeline_010:out_ready
	wire    [7:0] mux_pipeline_010_source0_channel;                                           // mux_pipeline_010:out_channel -> rsp_mux:sink2_channel
	wire          mux_pipeline_010_source0_startofpacket;                                     // mux_pipeline_010:out_startofpacket -> rsp_mux:sink2_startofpacket
	wire          mux_pipeline_010_source0_endofpacket;                                       // mux_pipeline_010:out_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                   // rsp_demux_003:src0_valid -> mux_pipeline_011:in_valid
	wire  [137:0] rsp_demux_003_src0_data;                                                    // rsp_demux_003:src0_data -> mux_pipeline_011:in_data
	wire          rsp_demux_003_src0_ready;                                                   // mux_pipeline_011:in_ready -> rsp_demux_003:src0_ready
	wire    [7:0] rsp_demux_003_src0_channel;                                                 // rsp_demux_003:src0_channel -> mux_pipeline_011:in_channel
	wire          rsp_demux_003_src0_startofpacket;                                           // rsp_demux_003:src0_startofpacket -> mux_pipeline_011:in_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                             // rsp_demux_003:src0_endofpacket -> mux_pipeline_011:in_endofpacket
	wire          mux_pipeline_011_source0_valid;                                             // mux_pipeline_011:out_valid -> rsp_mux:sink3_valid
	wire  [137:0] mux_pipeline_011_source0_data;                                              // mux_pipeline_011:out_data -> rsp_mux:sink3_data
	wire          mux_pipeline_011_source0_ready;                                             // rsp_mux:sink3_ready -> mux_pipeline_011:out_ready
	wire    [7:0] mux_pipeline_011_source0_channel;                                           // mux_pipeline_011:out_channel -> rsp_mux:sink3_channel
	wire          mux_pipeline_011_source0_startofpacket;                                     // mux_pipeline_011:out_startofpacket -> rsp_mux:sink3_startofpacket
	wire          mux_pipeline_011_source0_endofpacket;                                       // mux_pipeline_011:out_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                                   // rsp_demux_004:src0_valid -> mux_pipeline_012:in_valid
	wire  [137:0] rsp_demux_004_src0_data;                                                    // rsp_demux_004:src0_data -> mux_pipeline_012:in_data
	wire          rsp_demux_004_src0_ready;                                                   // mux_pipeline_012:in_ready -> rsp_demux_004:src0_ready
	wire    [7:0] rsp_demux_004_src0_channel;                                                 // rsp_demux_004:src0_channel -> mux_pipeline_012:in_channel
	wire          rsp_demux_004_src0_startofpacket;                                           // rsp_demux_004:src0_startofpacket -> mux_pipeline_012:in_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                             // rsp_demux_004:src0_endofpacket -> mux_pipeline_012:in_endofpacket
	wire          mux_pipeline_012_source0_valid;                                             // mux_pipeline_012:out_valid -> rsp_mux:sink4_valid
	wire  [137:0] mux_pipeline_012_source0_data;                                              // mux_pipeline_012:out_data -> rsp_mux:sink4_data
	wire          mux_pipeline_012_source0_ready;                                             // rsp_mux:sink4_ready -> mux_pipeline_012:out_ready
	wire    [7:0] mux_pipeline_012_source0_channel;                                           // mux_pipeline_012:out_channel -> rsp_mux:sink4_channel
	wire          mux_pipeline_012_source0_startofpacket;                                     // mux_pipeline_012:out_startofpacket -> rsp_mux:sink4_startofpacket
	wire          mux_pipeline_012_source0_endofpacket;                                       // mux_pipeline_012:out_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_005_src0_valid;                                                   // rsp_demux_005:src0_valid -> mux_pipeline_013:in_valid
	wire  [137:0] rsp_demux_005_src0_data;                                                    // rsp_demux_005:src0_data -> mux_pipeline_013:in_data
	wire          rsp_demux_005_src0_ready;                                                   // mux_pipeline_013:in_ready -> rsp_demux_005:src0_ready
	wire    [7:0] rsp_demux_005_src0_channel;                                                 // rsp_demux_005:src0_channel -> mux_pipeline_013:in_channel
	wire          rsp_demux_005_src0_startofpacket;                                           // rsp_demux_005:src0_startofpacket -> mux_pipeline_013:in_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                             // rsp_demux_005:src0_endofpacket -> mux_pipeline_013:in_endofpacket
	wire          mux_pipeline_013_source0_valid;                                             // mux_pipeline_013:out_valid -> rsp_mux:sink5_valid
	wire  [137:0] mux_pipeline_013_source0_data;                                              // mux_pipeline_013:out_data -> rsp_mux:sink5_data
	wire          mux_pipeline_013_source0_ready;                                             // rsp_mux:sink5_ready -> mux_pipeline_013:out_ready
	wire    [7:0] mux_pipeline_013_source0_channel;                                           // mux_pipeline_013:out_channel -> rsp_mux:sink5_channel
	wire          mux_pipeline_013_source0_startofpacket;                                     // mux_pipeline_013:out_startofpacket -> rsp_mux:sink5_startofpacket
	wire          mux_pipeline_013_source0_endofpacket;                                       // mux_pipeline_013:out_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_006_src0_valid;                                                   // rsp_demux_006:src0_valid -> mux_pipeline_014:in_valid
	wire  [137:0] rsp_demux_006_src0_data;                                                    // rsp_demux_006:src0_data -> mux_pipeline_014:in_data
	wire          rsp_demux_006_src0_ready;                                                   // mux_pipeline_014:in_ready -> rsp_demux_006:src0_ready
	wire    [7:0] rsp_demux_006_src0_channel;                                                 // rsp_demux_006:src0_channel -> mux_pipeline_014:in_channel
	wire          rsp_demux_006_src0_startofpacket;                                           // rsp_demux_006:src0_startofpacket -> mux_pipeline_014:in_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                             // rsp_demux_006:src0_endofpacket -> mux_pipeline_014:in_endofpacket
	wire          mux_pipeline_014_source0_valid;                                             // mux_pipeline_014:out_valid -> rsp_mux:sink6_valid
	wire  [137:0] mux_pipeline_014_source0_data;                                              // mux_pipeline_014:out_data -> rsp_mux:sink6_data
	wire          mux_pipeline_014_source0_ready;                                             // rsp_mux:sink6_ready -> mux_pipeline_014:out_ready
	wire    [7:0] mux_pipeline_014_source0_channel;                                           // mux_pipeline_014:out_channel -> rsp_mux:sink6_channel
	wire          mux_pipeline_014_source0_startofpacket;                                     // mux_pipeline_014:out_startofpacket -> rsp_mux:sink6_startofpacket
	wire          mux_pipeline_014_source0_endofpacket;                                       // mux_pipeline_014:out_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_007_src0_valid;                                                   // rsp_demux_007:src0_valid -> mux_pipeline_015:in_valid
	wire  [137:0] rsp_demux_007_src0_data;                                                    // rsp_demux_007:src0_data -> mux_pipeline_015:in_data
	wire          rsp_demux_007_src0_ready;                                                   // mux_pipeline_015:in_ready -> rsp_demux_007:src0_ready
	wire    [7:0] rsp_demux_007_src0_channel;                                                 // rsp_demux_007:src0_channel -> mux_pipeline_015:in_channel
	wire          rsp_demux_007_src0_startofpacket;                                           // rsp_demux_007:src0_startofpacket -> mux_pipeline_015:in_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                             // rsp_demux_007:src0_endofpacket -> mux_pipeline_015:in_endofpacket
	wire          mux_pipeline_015_source0_valid;                                             // mux_pipeline_015:out_valid -> rsp_mux:sink7_valid
	wire  [137:0] mux_pipeline_015_source0_data;                                              // mux_pipeline_015:out_data -> rsp_mux:sink7_data
	wire          mux_pipeline_015_source0_ready;                                             // rsp_mux:sink7_ready -> mux_pipeline_015:out_ready
	wire    [7:0] mux_pipeline_015_source0_channel;                                           // mux_pipeline_015:out_channel -> rsp_mux:sink7_channel
	wire          mux_pipeline_015_source0_startofpacket;                                     // mux_pipeline_015:out_startofpacket -> rsp_mux:sink7_startofpacket
	wire          mux_pipeline_015_source0_endofpacket;                                       // mux_pipeline_015:out_endofpacket -> rsp_mux:sink7_endofpacket

	board_altera_merlin_master_translator_191_g7h47bq #(
		.AV_ADDRESS_W                (18),
		.AV_DATA_W                   (64),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (8),
		.UAV_ADDRESS_W               (18),
		.UAV_BURSTCOUNT_W            (4),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (8),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (0),
		.WAITREQUEST_ALLOWANCE       (0)
	) pipe_stage_host_ctrl_m0_translator (
		.clk                    (clk_200_out_clk_clk),                                                        //   input,   width = 1,                       clk.clk
		.reset                  (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),                     //   input,   width = 1,                     reset.reset
		.uav_address            (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_address),       //  output,  width = 18, avalon_universal_master_0.address
		.uav_burstcount         (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_burstcount),    //  output,   width = 4,                          .burstcount
		.uav_read               (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_byteenable),    //  output,   width = 8,                          .byteenable
		.uav_readdata           (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_readdata),      //   input,  width = 64,                          .readdata
		.uav_writedata          (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_writedata),     //  output,  width = 64,                          .writedata
		.uav_lock               (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (pipe_stage_host_ctrl_m0_address),                                            //   input,  width = 18,      avalon_anti_master_0.address
		.av_waitrequest         (pipe_stage_host_ctrl_m0_waitrequest),                                        //  output,   width = 1,                          .waitrequest
		.av_burstcount          (pipe_stage_host_ctrl_m0_burstcount),                                         //   input,   width = 1,                          .burstcount
		.av_byteenable          (pipe_stage_host_ctrl_m0_byteenable),                                         //   input,   width = 8,                          .byteenable
		.av_read                (pipe_stage_host_ctrl_m0_read),                                               //   input,   width = 1,                          .read
		.av_readdata            (pipe_stage_host_ctrl_m0_readdata),                                           //  output,  width = 64,                          .readdata
		.av_readdatavalid       (pipe_stage_host_ctrl_m0_readdatavalid),                                      //  output,   width = 1,                          .readdatavalid
		.av_write               (pipe_stage_host_ctrl_m0_write),                                              //   input,   width = 1,                          .write
		.av_writedata           (pipe_stage_host_ctrl_m0_writedata),                                          //   input,  width = 64,                          .writedata
		.av_debugaccess         (pipe_stage_host_ctrl_m0_debugaccess),                                        //   input,   width = 1,                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                       // (terminated),                                        
		.av_begintransfer       (1'b0),                                                                       // (terminated),                                        
		.av_chipselect          (1'b0),                                                                       // (terminated),                                        
		.av_lock                (1'b0),                                                                       // (terminated),                                        
		.uav_clken              (),                                                                           // (terminated),                                        
		.av_clken               (1'b1),                                                                       // (terminated),                                        
		.uav_response           (2'b00),                                                                      // (terminated),                                        
		.av_response            (),                                                                           // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                                       // (terminated),                                        
		.av_writeresponsevalid  ()                                                                            // (terminated),                                        
	);

	board_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (18),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) board_irq_ctrl_0_irq_mask_slave_translator (
		.clk                    (clk_200_out_clk_clk),                                    //   input,   width = 1,                      clk.clk
		.reset                  (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (board_irq_ctrl_0_irq_mask_slave_agent_m0_address),       //   input,  width = 18, avalon_universal_slave_0.address
		.uav_burstcount         (board_irq_ctrl_0_irq_mask_slave_agent_m0_burstcount),    //   input,   width = 3,                         .burstcount
		.uav_read               (board_irq_ctrl_0_irq_mask_slave_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (board_irq_ctrl_0_irq_mask_slave_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (board_irq_ctrl_0_irq_mask_slave_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (board_irq_ctrl_0_irq_mask_slave_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (board_irq_ctrl_0_irq_mask_slave_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (board_irq_ctrl_0_irq_mask_slave_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (board_irq_ctrl_0_irq_mask_slave_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (board_irq_ctrl_0_irq_mask_slave_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (board_irq_ctrl_0_irq_mask_slave_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_write               (board_irq_ctrl_0_IRQ_Mask_Slave_write),                  //  output,   width = 1,      avalon_anti_slave_0.write
		.av_read                (board_irq_ctrl_0_IRQ_Mask_Slave_read),                   //  output,   width = 1,                         .read
		.av_readdata            (board_irq_ctrl_0_IRQ_Mask_Slave_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (board_irq_ctrl_0_IRQ_Mask_Slave_writedata),              //  output,  width = 32,                         .writedata
		.av_byteenable          (board_irq_ctrl_0_IRQ_Mask_Slave_byteenable),             //  output,   width = 4,                         .byteenable
		.av_waitrequest         (board_irq_ctrl_0_IRQ_Mask_Slave_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_address             (),                                                       // (terminated),                                       
		.av_begintransfer       (),                                                       // (terminated),                                       
		.av_beginbursttransfer  (),                                                       // (terminated),                                       
		.av_burstcount          (),                                                       // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                   // (terminated),                                       
		.av_writebyteenable     (),                                                       // (terminated),                                       
		.av_lock                (),                                                       // (terminated),                                       
		.av_chipselect          (),                                                       // (terminated),                                       
		.av_clken               (),                                                       // (terminated),                                       
		.uav_clken              (1'b0),                                                   // (terminated),                                       
		.av_debugaccess         (),                                                       // (terminated),                                       
		.av_outputenable        (),                                                       // (terminated),                                       
		.uav_response           (),                                                       // (terminated),                                       
		.av_response            (2'b00),                                                  // (terminated),                                       
		.uav_writeresponsevalid (),                                                       // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                    // (terminated),                                       
	);

	board_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (18),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) board_irq_ctrl_0_irq_read_slave_translator (
		.clk                    (clk_200_out_clk_clk),                                    //   input,   width = 1,                      clk.clk
		.reset                  (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (board_irq_ctrl_0_irq_read_slave_agent_m0_address),       //   input,  width = 18, avalon_universal_slave_0.address
		.uav_burstcount         (board_irq_ctrl_0_irq_read_slave_agent_m0_burstcount),    //   input,   width = 3,                         .burstcount
		.uav_read               (board_irq_ctrl_0_irq_read_slave_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (board_irq_ctrl_0_irq_read_slave_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (board_irq_ctrl_0_irq_read_slave_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (board_irq_ctrl_0_irq_read_slave_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (board_irq_ctrl_0_irq_read_slave_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (board_irq_ctrl_0_irq_read_slave_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (board_irq_ctrl_0_irq_read_slave_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (board_irq_ctrl_0_irq_read_slave_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (board_irq_ctrl_0_irq_read_slave_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_read                (board_irq_ctrl_0_IRQ_Read_Slave_read),                   //  output,   width = 1,      avalon_anti_slave_0.read
		.av_readdata            (board_irq_ctrl_0_IRQ_Read_Slave_readdata),               //   input,  width = 32,                         .readdata
		.av_address             (),                                                       // (terminated),                                       
		.av_write               (),                                                       // (terminated),                                       
		.av_writedata           (),                                                       // (terminated),                                       
		.av_begintransfer       (),                                                       // (terminated),                                       
		.av_beginbursttransfer  (),                                                       // (terminated),                                       
		.av_burstcount          (),                                                       // (terminated),                                       
		.av_byteenable          (),                                                       // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                   // (terminated),                                       
		.av_waitrequest         (1'b0),                                                   // (terminated),                                       
		.av_writebyteenable     (),                                                       // (terminated),                                       
		.av_lock                (),                                                       // (terminated),                                       
		.av_chipselect          (),                                                       // (terminated),                                       
		.av_clken               (),                                                       // (terminated),                                       
		.uav_clken              (1'b0),                                                   // (terminated),                                       
		.av_debugaccess         (),                                                       // (terminated),                                       
		.av_outputenable        (),                                                       // (terminated),                                       
		.uav_response           (),                                                       // (terminated),                                       
		.av_response            (2'b00),                                                  // (terminated),                                       
		.uav_writeresponsevalid (),                                                       // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                    // (terminated),                                       
	);

	board_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (64),
		.UAV_DATA_W                     (64),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (8),
		.UAV_BYTEENABLE_W               (8),
		.UAV_ADDRESS_W                  (18),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (8),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) board_afu_id_avmm_slave_0_afu_cfg_slave_translator (
		.clk                    (clk_200_out_clk_clk),                                            //   input,   width = 1,                      clk.clk
		.reset                  (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),         //   input,   width = 1,                    reset.reset
		.uav_address            (board_afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_address),       //   input,  width = 18, avalon_universal_slave_0.address
		.uav_burstcount         (board_afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_burstcount),    //   input,   width = 4,                         .burstcount
		.uav_read               (board_afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (board_afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (board_afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (board_afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (board_afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_byteenable),    //   input,   width = 8,                         .byteenable
		.uav_readdata           (board_afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_readdata),      //  output,  width = 64,                         .readdata
		.uav_writedata          (board_afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_writedata),     //   input,  width = 64,                         .writedata
		.uav_lock               (board_afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (board_afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (board_afu_id_avmm_slave_0_afu_cfg_slave_address),                //  output,   width = 3,      avalon_anti_slave_0.address
		.av_write               (board_afu_id_avmm_slave_0_afu_cfg_slave_write),                  //  output,   width = 1,                         .write
		.av_read                (board_afu_id_avmm_slave_0_afu_cfg_slave_read),                   //  output,   width = 1,                         .read
		.av_readdata            (board_afu_id_avmm_slave_0_afu_cfg_slave_readdata),               //   input,  width = 64,                         .readdata
		.av_writedata           (board_afu_id_avmm_slave_0_afu_cfg_slave_writedata),              //  output,  width = 64,                         .writedata
		.av_begintransfer       (),                                                               // (terminated),                                       
		.av_beginbursttransfer  (),                                                               // (terminated),                                       
		.av_burstcount          (),                                                               // (terminated),                                       
		.av_byteenable          (),                                                               // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                           // (terminated),                                       
		.av_waitrequest         (1'b0),                                                           // (terminated),                                       
		.av_writebyteenable     (),                                                               // (terminated),                                       
		.av_lock                (),                                                               // (terminated),                                       
		.av_chipselect          (),                                                               // (terminated),                                       
		.av_clken               (),                                                               // (terminated),                                       
		.uav_clken              (1'b0),                                                           // (terminated),                                       
		.av_debugaccess         (),                                                               // (terminated),                                       
		.av_outputenable        (),                                                               // (terminated),                                       
		.uav_response           (),                                                               // (terminated),                                       
		.av_response            (2'b00),                                                          // (terminated),                                       
		.uav_writeresponsevalid (),                                                               // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                            // (terminated),                                       
	);

	board_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (13),
		.AV_DATA_W                      (64),
		.UAV_DATA_W                     (64),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (8),
		.UAV_BYTEENABLE_W               (8),
		.UAV_ADDRESS_W                  (18),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (8),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) ddr_board_ase_0_avmm_pipe_slave_translator (
		.clk                    (clk_200_out_clk_clk),                                    //   input,   width = 1,                      clk.clk
		.reset                  (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (ddr_board_ase_0_avmm_pipe_slave_agent_m0_address),       //   input,  width = 18, avalon_universal_slave_0.address
		.uav_burstcount         (ddr_board_ase_0_avmm_pipe_slave_agent_m0_burstcount),    //   input,   width = 4,                         .burstcount
		.uav_read               (ddr_board_ase_0_avmm_pipe_slave_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (ddr_board_ase_0_avmm_pipe_slave_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (ddr_board_ase_0_avmm_pipe_slave_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (ddr_board_ase_0_avmm_pipe_slave_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (ddr_board_ase_0_avmm_pipe_slave_agent_m0_byteenable),    //   input,   width = 8,                         .byteenable
		.uav_readdata           (ddr_board_ase_0_avmm_pipe_slave_agent_m0_readdata),      //  output,  width = 64,                         .readdata
		.uav_writedata          (ddr_board_ase_0_avmm_pipe_slave_agent_m0_writedata),     //   input,  width = 64,                         .writedata
		.uav_lock               (ddr_board_ase_0_avmm_pipe_slave_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (ddr_board_ase_0_avmm_pipe_slave_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (ddr_board_ase_0_avmm_pipe_slave_address),                //  output,  width = 13,      avalon_anti_slave_0.address
		.av_write               (ddr_board_ase_0_avmm_pipe_slave_write),                  //  output,   width = 1,                         .write
		.av_read                (ddr_board_ase_0_avmm_pipe_slave_read),                   //  output,   width = 1,                         .read
		.av_readdata            (ddr_board_ase_0_avmm_pipe_slave_readdata),               //   input,  width = 64,                         .readdata
		.av_writedata           (ddr_board_ase_0_avmm_pipe_slave_writedata),              //  output,  width = 64,                         .writedata
		.av_burstcount          (ddr_board_ase_0_avmm_pipe_slave_burstcount),             //  output,   width = 1,                         .burstcount
		.av_byteenable          (ddr_board_ase_0_avmm_pipe_slave_byteenable),             //  output,   width = 8,                         .byteenable
		.av_readdatavalid       (ddr_board_ase_0_avmm_pipe_slave_readdatavalid),          //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (ddr_board_ase_0_avmm_pipe_slave_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_debugaccess         (ddr_board_ase_0_avmm_pipe_slave_debugaccess),            //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                       // (terminated),                                       
		.av_beginbursttransfer  (),                                                       // (terminated),                                       
		.av_writebyteenable     (),                                                       // (terminated),                                       
		.av_lock                (),                                                       // (terminated),                                       
		.av_chipselect          (),                                                       // (terminated),                                       
		.av_clken               (),                                                       // (terminated),                                       
		.uav_clken              (1'b0),                                                   // (terminated),                                       
		.av_outputenable        (),                                                       // (terminated),                                       
		.uav_response           (),                                                       // (terminated),                                       
		.av_response            (2'b00),                                                  // (terminated),                                       
		.uav_writeresponsevalid (),                                                       // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                    // (terminated),                                       
	);

	board_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (14),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (18),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) kernel_interface_ctrl_translator (
		.clk                    (clk_200_out_clk_clk),                                    //   input,   width = 1,                      clk.clk
		.reset                  (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (kernel_interface_ctrl_agent_m0_address),                 //   input,  width = 18, avalon_universal_slave_0.address
		.uav_burstcount         (kernel_interface_ctrl_agent_m0_burstcount),              //   input,   width = 3,                         .burstcount
		.uav_read               (kernel_interface_ctrl_agent_m0_read),                    //   input,   width = 1,                         .read
		.uav_write              (kernel_interface_ctrl_agent_m0_write),                   //   input,   width = 1,                         .write
		.uav_waitrequest        (kernel_interface_ctrl_agent_m0_waitrequest),             //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (kernel_interface_ctrl_agent_m0_readdatavalid),           //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (kernel_interface_ctrl_agent_m0_byteenable),              //   input,   width = 4,                         .byteenable
		.uav_readdata           (kernel_interface_ctrl_agent_m0_readdata),                //  output,  width = 32,                         .readdata
		.uav_writedata          (kernel_interface_ctrl_agent_m0_writedata),               //   input,  width = 32,                         .writedata
		.uav_lock               (kernel_interface_ctrl_agent_m0_lock),                    //   input,   width = 1,                         .lock
		.uav_debugaccess        (kernel_interface_ctrl_agent_m0_debugaccess),             //   input,   width = 1,                         .debugaccess
		.av_address             (kernel_interface_ctrl_address),                          //  output,  width = 14,      avalon_anti_slave_0.address
		.av_write               (kernel_interface_ctrl_write),                            //  output,   width = 1,                         .write
		.av_read                (kernel_interface_ctrl_read),                             //  output,   width = 1,                         .read
		.av_readdata            (kernel_interface_ctrl_readdata),                         //   input,  width = 32,                         .readdata
		.av_writedata           (kernel_interface_ctrl_writedata),                        //  output,  width = 32,                         .writedata
		.av_burstcount          (kernel_interface_ctrl_burstcount),                       //  output,   width = 1,                         .burstcount
		.av_byteenable          (kernel_interface_ctrl_byteenable),                       //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (kernel_interface_ctrl_readdatavalid),                    //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (kernel_interface_ctrl_waitrequest),                      //   input,   width = 1,                         .waitrequest
		.av_debugaccess         (kernel_interface_ctrl_debugaccess),                      //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                       // (terminated),                                       
		.av_beginbursttransfer  (),                                                       // (terminated),                                       
		.av_writebyteenable     (),                                                       // (terminated),                                       
		.av_lock                (),                                                       // (terminated),                                       
		.av_chipselect          (),                                                       // (terminated),                                       
		.av_clken               (),                                                       // (terminated),                                       
		.uav_clken              (1'b0),                                                   // (terminated),                                       
		.av_outputenable        (),                                                       // (terminated),                                       
		.uav_response           (),                                                       // (terminated),                                       
		.av_response            (2'b00),                                                  // (terminated),                                       
		.uav_writeresponsevalid (),                                                       // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                    // (terminated),                                       
	);

	board_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (7),
		.AV_DATA_W                      (64),
		.UAV_DATA_W                     (64),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (8),
		.UAV_BYTEENABLE_W               (8),
		.UAV_ADDRESS_W                  (18),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (8),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) ddr_board_msgdma_bbb_0_csr_translator (
		.clk                    (clk_200_out_clk_clk),                                    //   input,   width = 1,                      clk.clk
		.reset                  (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (ddr_board_msgdma_bbb_0_csr_agent_m0_address),            //   input,  width = 18, avalon_universal_slave_0.address
		.uav_burstcount         (ddr_board_msgdma_bbb_0_csr_agent_m0_burstcount),         //   input,   width = 4,                         .burstcount
		.uav_read               (ddr_board_msgdma_bbb_0_csr_agent_m0_read),               //   input,   width = 1,                         .read
		.uav_write              (ddr_board_msgdma_bbb_0_csr_agent_m0_write),              //   input,   width = 1,                         .write
		.uav_waitrequest        (ddr_board_msgdma_bbb_0_csr_agent_m0_waitrequest),        //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (ddr_board_msgdma_bbb_0_csr_agent_m0_readdatavalid),      //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (ddr_board_msgdma_bbb_0_csr_agent_m0_byteenable),         //   input,   width = 8,                         .byteenable
		.uav_readdata           (ddr_board_msgdma_bbb_0_csr_agent_m0_readdata),           //  output,  width = 64,                         .readdata
		.uav_writedata          (ddr_board_msgdma_bbb_0_csr_agent_m0_writedata),          //   input,  width = 64,                         .writedata
		.uav_lock               (ddr_board_msgdma_bbb_0_csr_agent_m0_lock),               //   input,   width = 1,                         .lock
		.uav_debugaccess        (ddr_board_msgdma_bbb_0_csr_agent_m0_debugaccess),        //   input,   width = 1,                         .debugaccess
		.av_address             (ddr_board_msgdma_bbb_0_csr_address),                     //  output,   width = 7,      avalon_anti_slave_0.address
		.av_write               (ddr_board_msgdma_bbb_0_csr_write),                       //  output,   width = 1,                         .write
		.av_read                (ddr_board_msgdma_bbb_0_csr_read),                        //  output,   width = 1,                         .read
		.av_readdata            (ddr_board_msgdma_bbb_0_csr_readdata),                    //   input,  width = 64,                         .readdata
		.av_writedata           (ddr_board_msgdma_bbb_0_csr_writedata),                   //  output,  width = 64,                         .writedata
		.av_burstcount          (ddr_board_msgdma_bbb_0_csr_burstcount),                  //  output,   width = 1,                         .burstcount
		.av_byteenable          (ddr_board_msgdma_bbb_0_csr_byteenable),                  //  output,   width = 8,                         .byteenable
		.av_readdatavalid       (ddr_board_msgdma_bbb_0_csr_readdatavalid),               //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (ddr_board_msgdma_bbb_0_csr_waitrequest),                 //   input,   width = 1,                         .waitrequest
		.av_debugaccess         (ddr_board_msgdma_bbb_0_csr_debugaccess),                 //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                       // (terminated),                                       
		.av_beginbursttransfer  (),                                                       // (terminated),                                       
		.av_writebyteenable     (),                                                       // (terminated),                                       
		.av_lock                (),                                                       // (terminated),                                       
		.av_chipselect          (),                                                       // (terminated),                                       
		.av_clken               (),                                                       // (terminated),                                       
		.uav_clken              (1'b0),                                                   // (terminated),                                       
		.av_outputenable        (),                                                       // (terminated),                                       
		.uav_response           (),                                                       // (terminated),                                       
		.av_response            (2'b00),                                                  // (terminated),                                       
		.uav_writeresponsevalid (),                                                       // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                    // (terminated),                                       
	);

	board_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (7),
		.AV_DATA_W                      (64),
		.UAV_DATA_W                     (64),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (8),
		.UAV_BYTEENABLE_W               (8),
		.UAV_ADDRESS_W                  (18),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (8),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) ddr_board_msgdma_bbb_1_csr_translator (
		.clk                    (clk_200_out_clk_clk),                                    //   input,   width = 1,                      clk.clk
		.reset                  (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (ddr_board_msgdma_bbb_1_csr_agent_m0_address),            //   input,  width = 18, avalon_universal_slave_0.address
		.uav_burstcount         (ddr_board_msgdma_bbb_1_csr_agent_m0_burstcount),         //   input,   width = 4,                         .burstcount
		.uav_read               (ddr_board_msgdma_bbb_1_csr_agent_m0_read),               //   input,   width = 1,                         .read
		.uav_write              (ddr_board_msgdma_bbb_1_csr_agent_m0_write),              //   input,   width = 1,                         .write
		.uav_waitrequest        (ddr_board_msgdma_bbb_1_csr_agent_m0_waitrequest),        //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (ddr_board_msgdma_bbb_1_csr_agent_m0_readdatavalid),      //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (ddr_board_msgdma_bbb_1_csr_agent_m0_byteenable),         //   input,   width = 8,                         .byteenable
		.uav_readdata           (ddr_board_msgdma_bbb_1_csr_agent_m0_readdata),           //  output,  width = 64,                         .readdata
		.uav_writedata          (ddr_board_msgdma_bbb_1_csr_agent_m0_writedata),          //   input,  width = 64,                         .writedata
		.uav_lock               (ddr_board_msgdma_bbb_1_csr_agent_m0_lock),               //   input,   width = 1,                         .lock
		.uav_debugaccess        (ddr_board_msgdma_bbb_1_csr_agent_m0_debugaccess),        //   input,   width = 1,                         .debugaccess
		.av_address             (ddr_board_msgdma_bbb_1_csr_address),                     //  output,   width = 7,      avalon_anti_slave_0.address
		.av_write               (ddr_board_msgdma_bbb_1_csr_write),                       //  output,   width = 1,                         .write
		.av_read                (ddr_board_msgdma_bbb_1_csr_read),                        //  output,   width = 1,                         .read
		.av_readdata            (ddr_board_msgdma_bbb_1_csr_readdata),                    //   input,  width = 64,                         .readdata
		.av_writedata           (ddr_board_msgdma_bbb_1_csr_writedata),                   //  output,  width = 64,                         .writedata
		.av_burstcount          (ddr_board_msgdma_bbb_1_csr_burstcount),                  //  output,   width = 1,                         .burstcount
		.av_byteenable          (ddr_board_msgdma_bbb_1_csr_byteenable),                  //  output,   width = 8,                         .byteenable
		.av_readdatavalid       (ddr_board_msgdma_bbb_1_csr_readdatavalid),               //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (ddr_board_msgdma_bbb_1_csr_waitrequest),                 //   input,   width = 1,                         .waitrequest
		.av_debugaccess         (ddr_board_msgdma_bbb_1_csr_debugaccess),                 //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                       // (terminated),                                       
		.av_beginbursttransfer  (),                                                       // (terminated),                                       
		.av_writebyteenable     (),                                                       // (terminated),                                       
		.av_lock                (),                                                       // (terminated),                                       
		.av_chipselect          (),                                                       // (terminated),                                       
		.av_clken               (),                                                       // (terminated),                                       
		.uav_clken              (1'b0),                                                   // (terminated),                                       
		.av_outputenable        (),                                                       // (terminated),                                       
		.uav_response           (),                                                       // (terminated),                                       
		.av_response            (2'b00),                                                  // (terminated),                                       
		.uav_writeresponsevalid (),                                                       // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                    // (terminated),                                       
	);

	board_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (64),
		.UAV_DATA_W                     (64),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (8),
		.UAV_BYTEENABLE_W               (8),
		.UAV_ADDRESS_W                  (18),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (8),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) ddr_board_null_dfh_afu_id_translator (
		.clk                    (clk_200_out_clk_clk),                                    //   input,   width = 1,                      clk.clk
		.reset                  (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (ddr_board_null_dfh_afu_id_agent_m0_address),             //   input,  width = 18, avalon_universal_slave_0.address
		.uav_burstcount         (ddr_board_null_dfh_afu_id_agent_m0_burstcount),          //   input,   width = 4,                         .burstcount
		.uav_read               (ddr_board_null_dfh_afu_id_agent_m0_read),                //   input,   width = 1,                         .read
		.uav_write              (ddr_board_null_dfh_afu_id_agent_m0_write),               //   input,   width = 1,                         .write
		.uav_waitrequest        (ddr_board_null_dfh_afu_id_agent_m0_waitrequest),         //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (ddr_board_null_dfh_afu_id_agent_m0_readdatavalid),       //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (ddr_board_null_dfh_afu_id_agent_m0_byteenable),          //   input,   width = 8,                         .byteenable
		.uav_readdata           (ddr_board_null_dfh_afu_id_agent_m0_readdata),            //  output,  width = 64,                         .readdata
		.uav_writedata          (ddr_board_null_dfh_afu_id_agent_m0_writedata),           //   input,  width = 64,                         .writedata
		.uav_lock               (ddr_board_null_dfh_afu_id_agent_m0_lock),                //   input,   width = 1,                         .lock
		.uav_debugaccess        (ddr_board_null_dfh_afu_id_agent_m0_debugaccess),         //   input,   width = 1,                         .debugaccess
		.av_address             (ddr_board_null_dfh_afu_id_address),                      //  output,   width = 3,      avalon_anti_slave_0.address
		.av_write               (ddr_board_null_dfh_afu_id_write),                        //  output,   width = 1,                         .write
		.av_read                (ddr_board_null_dfh_afu_id_read),                         //  output,   width = 1,                         .read
		.av_readdata            (ddr_board_null_dfh_afu_id_readdata),                     //   input,  width = 64,                         .readdata
		.av_writedata           (ddr_board_null_dfh_afu_id_writedata),                    //  output,  width = 64,                         .writedata
		.av_begintransfer       (),                                                       // (terminated),                                       
		.av_beginbursttransfer  (),                                                       // (terminated),                                       
		.av_burstcount          (),                                                       // (terminated),                                       
		.av_byteenable          (),                                                       // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                   // (terminated),                                       
		.av_waitrequest         (1'b0),                                                   // (terminated),                                       
		.av_writebyteenable     (),                                                       // (terminated),                                       
		.av_lock                (),                                                       // (terminated),                                       
		.av_chipselect          (),                                                       // (terminated),                                       
		.av_clken               (),                                                       // (terminated),                                       
		.uav_clken              (1'b0),                                                   // (terminated),                                       
		.av_debugaccess         (),                                                       // (terminated),                                       
		.av_outputenable        (),                                                       // (terminated),                                       
		.uav_response           (),                                                       // (terminated),                                       
		.av_response            (2'b00),                                                  // (terminated),                                       
		.uav_writeresponsevalid (),                                                       // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                    // (terminated),                                       
	);

	board_altera_merlin_master_agent_191_mpbm6tq #(
		.PKT_WUNIQUE               (137),
		.PKT_DOMAIN_H              (136),
		.PKT_DOMAIN_L              (135),
		.PKT_SNOOP_H               (134),
		.PKT_SNOOP_L               (131),
		.PKT_BARRIER_H             (130),
		.PKT_BARRIER_L             (129),
		.PKT_ORI_BURST_SIZE_H      (128),
		.PKT_ORI_BURST_SIZE_L      (126),
		.PKT_RESPONSE_STATUS_H     (125),
		.PKT_RESPONSE_STATUS_L     (124),
		.PKT_QOS_H                 (109),
		.PKT_QOS_L                 (109),
		.PKT_DATA_SIDEBAND_H       (107),
		.PKT_DATA_SIDEBAND_L       (107),
		.PKT_ADDR_SIDEBAND_H       (106),
		.PKT_ADDR_SIDEBAND_L       (106),
		.PKT_BURST_TYPE_H          (105),
		.PKT_BURST_TYPE_L          (104),
		.PKT_CACHE_H               (123),
		.PKT_CACHE_L               (120),
		.PKT_THREAD_ID_H           (116),
		.PKT_THREAD_ID_L           (116),
		.PKT_BURST_SIZE_H          (103),
		.PKT_BURST_SIZE_L          (101),
		.PKT_TRANS_EXCLUSIVE       (95),
		.PKT_TRANS_LOCK            (94),
		.PKT_BEGIN_BURST           (108),
		.PKT_PROTECTION_H          (119),
		.PKT_PROTECTION_L          (117),
		.PKT_BURSTWRAP_H           (100),
		.PKT_BURSTWRAP_L           (100),
		.PKT_BYTE_CNT_H            (99),
		.PKT_BYTE_CNT_L            (96),
		.PKT_ADDR_H                (89),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (90),
		.PKT_TRANS_POSTED          (91),
		.PKT_TRANS_WRITE           (92),
		.PKT_TRANS_READ            (93),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (112),
		.PKT_SRC_ID_L              (110),
		.PKT_DEST_ID_H             (115),
		.PKT_DEST_ID_L             (113),
		.ST_DATA_W                 (138),
		.ST_CHANNEL_W              (8),
		.AV_BURSTCOUNT_W           (4),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (0)
	) pipe_stage_host_ctrl_m0_agent (
		.clk                   (clk_200_out_clk_clk),                                                        //   input,    width = 1,       clk.clk
		.reset                 (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),                     //   input,    width = 1, clk_reset.reset
		.av_address            (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_address),       //   input,   width = 18,        av.address
		.av_write              (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_writedata),     //   input,   width = 64,          .writedata
		.av_readdata           (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_readdata),      //  output,   width = 64,          .readdata
		.av_waitrequest        (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_byteenable),    //   input,    width = 8,          .byteenable
		.av_burstcount         (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_burstcount),    //   input,    width = 4,          .burstcount
		.av_debugaccess        (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (pipe_stage_host_ctrl_m0_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (pipe_stage_host_ctrl_m0_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (pipe_stage_host_ctrl_m0_agent_cp_data),                                      //  output,  width = 138,          .data
		.cp_startofpacket      (pipe_stage_host_ctrl_m0_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (pipe_stage_host_ctrl_m0_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (pipe_stage_host_ctrl_m0_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (pipe_stage_host_ctrl_m0_limiter_rsp_src_valid),                              //   input,    width = 1,        rp.valid
		.rp_data               (pipe_stage_host_ctrl_m0_limiter_rsp_src_data),                               //   input,  width = 138,          .data
		.rp_channel            (pipe_stage_host_ctrl_m0_limiter_rsp_src_channel),                            //   input,    width = 8,          .channel
		.rp_startofpacket      (pipe_stage_host_ctrl_m0_limiter_rsp_src_startofpacket),                      //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (pipe_stage_host_ctrl_m0_limiter_rsp_src_endofpacket),                        //   input,    width = 1,          .endofpacket
		.rp_ready              (pipe_stage_host_ctrl_m0_limiter_rsp_src_ready),                              //  output,    width = 1,          .ready
		.av_response           (),                                                                           // (terminated),                         
		.av_writeresponsevalid ()                                                                            // (terminated),                         
	);

	board_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (92),
		.PKT_ORI_BURST_SIZE_L      (90),
		.PKT_RESPONSE_STATUS_H     (89),
		.PKT_RESPONSE_STATUS_L     (88),
		.PKT_BURST_SIZE_H          (67),
		.PKT_BURST_SIZE_L          (65),
		.PKT_TRANS_LOCK            (58),
		.PKT_BEGIN_BURST           (72),
		.PKT_PROTECTION_H          (83),
		.PKT_PROTECTION_L          (81),
		.PKT_BURSTWRAP_H           (64),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (60),
		.PKT_ADDR_H                (53),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (54),
		.PKT_TRANS_POSTED          (55),
		.PKT_TRANS_WRITE           (56),
		.PKT_TRANS_READ            (57),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (76),
		.PKT_SRC_ID_L              (74),
		.PKT_DEST_ID_H             (79),
		.PKT_DEST_ID_L             (77),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (102),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) board_irq_ctrl_0_irq_mask_slave_agent (
		.clk                     (clk_200_out_clk_clk),                                              //   input,    width = 1,             clk.clk
		.reset                   (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),           //   input,    width = 1,       clk_reset.reset
		.m0_address              (board_irq_ctrl_0_irq_mask_slave_agent_m0_address),                 //  output,   width = 18,              m0.address
		.m0_burstcount           (board_irq_ctrl_0_irq_mask_slave_agent_m0_burstcount),              //  output,    width = 3,                .burstcount
		.m0_byteenable           (board_irq_ctrl_0_irq_mask_slave_agent_m0_byteenable),              //  output,    width = 4,                .byteenable
		.m0_debugaccess          (board_irq_ctrl_0_irq_mask_slave_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (board_irq_ctrl_0_irq_mask_slave_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (board_irq_ctrl_0_irq_mask_slave_agent_m0_readdata),                //   input,   width = 32,                .readdata
		.m0_readdatavalid        (board_irq_ctrl_0_irq_mask_slave_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (board_irq_ctrl_0_irq_mask_slave_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (board_irq_ctrl_0_irq_mask_slave_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (board_irq_ctrl_0_irq_mask_slave_agent_m0_writedata),               //  output,   width = 32,                .writedata
		.m0_write                (board_irq_ctrl_0_irq_mask_slave_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (board_irq_ctrl_0_irq_mask_slave_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (board_irq_ctrl_0_irq_mask_slave_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (board_irq_ctrl_0_irq_mask_slave_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (board_irq_ctrl_0_irq_mask_slave_agent_rp_data),                    //  output,  width = 102,                .data
		.rp_startofpacket        (board_irq_ctrl_0_irq_mask_slave_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (agent_pipeline_source0_ready),                                     //  output,    width = 1,              cp.ready
		.cp_valid                (agent_pipeline_source0_valid),                                     //   input,    width = 1,                .valid
		.cp_data                 (agent_pipeline_source0_data),                                      //   input,  width = 102,                .data
		.cp_startofpacket        (agent_pipeline_source0_startofpacket),                             //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (agent_pipeline_source0_endofpacket),                               //   input,    width = 1,                .endofpacket
		.cp_channel              (agent_pipeline_source0_channel),                                   //   input,    width = 8,                .channel
		.rf_sink_ready           (board_irq_ctrl_0_irq_mask_slave_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (board_irq_ctrl_0_irq_mask_slave_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (board_irq_ctrl_0_irq_mask_slave_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (board_irq_ctrl_0_irq_mask_slave_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (board_irq_ctrl_0_irq_mask_slave_agent_rsp_fifo_out_data),          //   input,  width = 103,                .data
		.rf_source_ready         (board_irq_ctrl_0_irq_mask_slave_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (board_irq_ctrl_0_irq_mask_slave_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (board_irq_ctrl_0_irq_mask_slave_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (board_irq_ctrl_0_irq_mask_slave_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (board_irq_ctrl_0_irq_mask_slave_agent_rf_source_data),             //  output,  width = 103,                .data
		.rdata_fifo_sink_ready   (board_irq_ctrl_0_irq_mask_slave_agent_rdata_fifo_src_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (board_irq_ctrl_0_irq_mask_slave_agent_rdata_fifo_src_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (board_irq_ctrl_0_irq_mask_slave_agent_rdata_fifo_src_data),        //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (board_irq_ctrl_0_irq_mask_slave_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (board_irq_ctrl_0_irq_mask_slave_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (board_irq_ctrl_0_irq_mask_slave_agent_rdata_fifo_src_data),        //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                            // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                             // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                              // (terminated),                               
	);

	board_altera_avalon_sc_fifo_191_e5eqkcq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (103),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) board_irq_ctrl_0_irq_mask_slave_agent_rsp_fifo (
		.clk               (clk_200_out_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset             (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),           //   input,    width = 1, clk_reset.reset
		.in_data           (board_irq_ctrl_0_irq_mask_slave_agent_rf_source_data),             //   input,  width = 103,        in.data
		.in_valid          (board_irq_ctrl_0_irq_mask_slave_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (board_irq_ctrl_0_irq_mask_slave_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (board_irq_ctrl_0_irq_mask_slave_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (board_irq_ctrl_0_irq_mask_slave_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (board_irq_ctrl_0_irq_mask_slave_agent_rsp_fifo_out_data),          //  output,  width = 103,       out.data
		.out_valid         (board_irq_ctrl_0_irq_mask_slave_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (board_irq_ctrl_0_irq_mask_slave_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (board_irq_ctrl_0_irq_mask_slave_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (board_irq_ctrl_0_irq_mask_slave_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                            // (terminated),                         
		.csr_read          (1'b0),                                                             // (terminated),                         
		.csr_write         (1'b0),                                                             // (terminated),                         
		.csr_readdata      (),                                                                 // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                             // (terminated),                         
		.almost_full_data  (),                                                                 // (terminated),                         
		.almost_empty_data (),                                                                 // (terminated),                         
		.in_empty          (1'b0),                                                             // (terminated),                         
		.out_empty         (),                                                                 // (terminated),                         
		.in_error          (1'b0),                                                             // (terminated),                         
		.out_error         (),                                                                 // (terminated),                         
		.in_channel        (1'b0),                                                             // (terminated),                         
		.out_channel       ()                                                                  // (terminated),                         
	);

	board_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (92),
		.PKT_ORI_BURST_SIZE_L      (90),
		.PKT_RESPONSE_STATUS_H     (89),
		.PKT_RESPONSE_STATUS_L     (88),
		.PKT_BURST_SIZE_H          (67),
		.PKT_BURST_SIZE_L          (65),
		.PKT_TRANS_LOCK            (58),
		.PKT_BEGIN_BURST           (72),
		.PKT_PROTECTION_H          (83),
		.PKT_PROTECTION_L          (81),
		.PKT_BURSTWRAP_H           (64),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (60),
		.PKT_ADDR_H                (53),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (54),
		.PKT_TRANS_POSTED          (55),
		.PKT_TRANS_WRITE           (56),
		.PKT_TRANS_READ            (57),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (76),
		.PKT_SRC_ID_L              (74),
		.PKT_DEST_ID_H             (79),
		.PKT_DEST_ID_L             (77),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (102),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) board_irq_ctrl_0_irq_read_slave_agent (
		.clk                     (clk_200_out_clk_clk),                                              //   input,    width = 1,             clk.clk
		.reset                   (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),           //   input,    width = 1,       clk_reset.reset
		.m0_address              (board_irq_ctrl_0_irq_read_slave_agent_m0_address),                 //  output,   width = 18,              m0.address
		.m0_burstcount           (board_irq_ctrl_0_irq_read_slave_agent_m0_burstcount),              //  output,    width = 3,                .burstcount
		.m0_byteenable           (board_irq_ctrl_0_irq_read_slave_agent_m0_byteenable),              //  output,    width = 4,                .byteenable
		.m0_debugaccess          (board_irq_ctrl_0_irq_read_slave_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (board_irq_ctrl_0_irq_read_slave_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (board_irq_ctrl_0_irq_read_slave_agent_m0_readdata),                //   input,   width = 32,                .readdata
		.m0_readdatavalid        (board_irq_ctrl_0_irq_read_slave_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (board_irq_ctrl_0_irq_read_slave_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (board_irq_ctrl_0_irq_read_slave_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (board_irq_ctrl_0_irq_read_slave_agent_m0_writedata),               //  output,   width = 32,                .writedata
		.m0_write                (board_irq_ctrl_0_irq_read_slave_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (board_irq_ctrl_0_irq_read_slave_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (board_irq_ctrl_0_irq_read_slave_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (board_irq_ctrl_0_irq_read_slave_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (board_irq_ctrl_0_irq_read_slave_agent_rp_data),                    //  output,  width = 102,                .data
		.rp_startofpacket        (board_irq_ctrl_0_irq_read_slave_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (agent_pipeline_002_source0_ready),                                 //  output,    width = 1,              cp.ready
		.cp_valid                (agent_pipeline_002_source0_valid),                                 //   input,    width = 1,                .valid
		.cp_data                 (agent_pipeline_002_source0_data),                                  //   input,  width = 102,                .data
		.cp_startofpacket        (agent_pipeline_002_source0_startofpacket),                         //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (agent_pipeline_002_source0_endofpacket),                           //   input,    width = 1,                .endofpacket
		.cp_channel              (agent_pipeline_002_source0_channel),                               //   input,    width = 8,                .channel
		.rf_sink_ready           (board_irq_ctrl_0_irq_read_slave_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (board_irq_ctrl_0_irq_read_slave_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (board_irq_ctrl_0_irq_read_slave_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (board_irq_ctrl_0_irq_read_slave_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (board_irq_ctrl_0_irq_read_slave_agent_rsp_fifo_out_data),          //   input,  width = 103,                .data
		.rf_source_ready         (board_irq_ctrl_0_irq_read_slave_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (board_irq_ctrl_0_irq_read_slave_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (board_irq_ctrl_0_irq_read_slave_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (board_irq_ctrl_0_irq_read_slave_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (board_irq_ctrl_0_irq_read_slave_agent_rf_source_data),             //  output,  width = 103,                .data
		.rdata_fifo_sink_ready   (board_irq_ctrl_0_irq_read_slave_agent_rdata_fifo_src_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (board_irq_ctrl_0_irq_read_slave_agent_rdata_fifo_src_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (board_irq_ctrl_0_irq_read_slave_agent_rdata_fifo_src_data),        //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (board_irq_ctrl_0_irq_read_slave_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (board_irq_ctrl_0_irq_read_slave_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (board_irq_ctrl_0_irq_read_slave_agent_rdata_fifo_src_data),        //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                            // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                             // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                              // (terminated),                               
	);

	board_altera_avalon_sc_fifo_191_e5eqkcq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (103),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) board_irq_ctrl_0_irq_read_slave_agent_rsp_fifo (
		.clk               (clk_200_out_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset             (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),           //   input,    width = 1, clk_reset.reset
		.in_data           (board_irq_ctrl_0_irq_read_slave_agent_rf_source_data),             //   input,  width = 103,        in.data
		.in_valid          (board_irq_ctrl_0_irq_read_slave_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (board_irq_ctrl_0_irq_read_slave_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (board_irq_ctrl_0_irq_read_slave_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (board_irq_ctrl_0_irq_read_slave_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (board_irq_ctrl_0_irq_read_slave_agent_rsp_fifo_out_data),          //  output,  width = 103,       out.data
		.out_valid         (board_irq_ctrl_0_irq_read_slave_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (board_irq_ctrl_0_irq_read_slave_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (board_irq_ctrl_0_irq_read_slave_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (board_irq_ctrl_0_irq_read_slave_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                            // (terminated),                         
		.csr_read          (1'b0),                                                             // (terminated),                         
		.csr_write         (1'b0),                                                             // (terminated),                         
		.csr_readdata      (),                                                                 // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                             // (terminated),                         
		.almost_full_data  (),                                                                 // (terminated),                         
		.almost_empty_data (),                                                                 // (terminated),                         
		.in_empty          (1'b0),                                                             // (terminated),                         
		.out_empty         (),                                                                 // (terminated),                         
		.in_error          (1'b0),                                                             // (terminated),                         
		.out_error         (),                                                                 // (terminated),                         
		.in_channel        (1'b0),                                                             // (terminated),                         
		.out_channel       ()                                                                  // (terminated),                         
	);

	board_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (128),
		.PKT_ORI_BURST_SIZE_L      (126),
		.PKT_RESPONSE_STATUS_H     (125),
		.PKT_RESPONSE_STATUS_L     (124),
		.PKT_BURST_SIZE_H          (103),
		.PKT_BURST_SIZE_L          (101),
		.PKT_TRANS_LOCK            (94),
		.PKT_BEGIN_BURST           (108),
		.PKT_PROTECTION_H          (119),
		.PKT_PROTECTION_L          (117),
		.PKT_BURSTWRAP_H           (100),
		.PKT_BURSTWRAP_L           (100),
		.PKT_BYTE_CNT_H            (99),
		.PKT_BYTE_CNT_L            (96),
		.PKT_ADDR_H                (89),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (90),
		.PKT_TRANS_POSTED          (91),
		.PKT_TRANS_WRITE           (92),
		.PKT_TRANS_READ            (93),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (112),
		.PKT_SRC_ID_L              (110),
		.PKT_DEST_ID_H             (115),
		.PKT_DEST_ID_L             (113),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (138),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) board_afu_id_avmm_slave_0_afu_cfg_slave_agent (
		.clk                     (clk_200_out_clk_clk),                                                      //   input,    width = 1,             clk.clk
		.reset                   (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),                   //   input,    width = 1,       clk_reset.reset
		.m0_address              (board_afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_address),                 //  output,   width = 18,              m0.address
		.m0_burstcount           (board_afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_burstcount),              //  output,    width = 4,                .burstcount
		.m0_byteenable           (board_afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_byteenable),              //  output,    width = 8,                .byteenable
		.m0_debugaccess          (board_afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (board_afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (board_afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_readdata),                //   input,   width = 64,                .readdata
		.m0_readdatavalid        (board_afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (board_afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (board_afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (board_afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_writedata),               //  output,   width = 64,                .writedata
		.m0_write                (board_afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (board_afu_id_avmm_slave_0_afu_cfg_slave_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (board_afu_id_avmm_slave_0_afu_cfg_slave_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (board_afu_id_avmm_slave_0_afu_cfg_slave_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (board_afu_id_avmm_slave_0_afu_cfg_slave_agent_rp_data),                    //  output,  width = 138,                .data
		.rp_startofpacket        (board_afu_id_avmm_slave_0_afu_cfg_slave_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (agent_pipeline_004_source0_ready),                                         //  output,    width = 1,              cp.ready
		.cp_valid                (agent_pipeline_004_source0_valid),                                         //   input,    width = 1,                .valid
		.cp_data                 (agent_pipeline_004_source0_data),                                          //   input,  width = 138,                .data
		.cp_startofpacket        (agent_pipeline_004_source0_startofpacket),                                 //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (agent_pipeline_004_source0_endofpacket),                                   //   input,    width = 1,                .endofpacket
		.cp_channel              (agent_pipeline_004_source0_channel),                                       //   input,    width = 8,                .channel
		.rf_sink_ready           (board_afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (board_afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (board_afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (board_afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (board_afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo_out_data),          //   input,  width = 139,                .data
		.rf_source_ready         (board_afu_id_avmm_slave_0_afu_cfg_slave_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (board_afu_id_avmm_slave_0_afu_cfg_slave_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (board_afu_id_avmm_slave_0_afu_cfg_slave_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (board_afu_id_avmm_slave_0_afu_cfg_slave_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (board_afu_id_avmm_slave_0_afu_cfg_slave_agent_rf_source_data),             //  output,  width = 139,                .data
		.rdata_fifo_sink_ready   (board_afu_id_avmm_slave_0_afu_cfg_slave_agent_rdata_fifo_src_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (board_afu_id_avmm_slave_0_afu_cfg_slave_agent_rdata_fifo_src_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (board_afu_id_avmm_slave_0_afu_cfg_slave_agent_rdata_fifo_src_data),        //   input,   width = 66,                .data
		.rdata_fifo_src_ready    (board_afu_id_avmm_slave_0_afu_cfg_slave_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (board_afu_id_avmm_slave_0_afu_cfg_slave_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (board_afu_id_avmm_slave_0_afu_cfg_slave_agent_rdata_fifo_src_data),        //  output,   width = 66,                .data
		.m0_response             (2'b00),                                                                    // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                     // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                      // (terminated),                               
	);

	board_altera_avalon_sc_fifo_191_e5eqkcq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (139),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) board_afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo (
		.clk               (clk_200_out_clk_clk),                                                      //   input,    width = 1,       clk.clk
		.reset             (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),                   //   input,    width = 1, clk_reset.reset
		.in_data           (board_afu_id_avmm_slave_0_afu_cfg_slave_agent_rf_source_data),             //   input,  width = 139,        in.data
		.in_valid          (board_afu_id_avmm_slave_0_afu_cfg_slave_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (board_afu_id_avmm_slave_0_afu_cfg_slave_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (board_afu_id_avmm_slave_0_afu_cfg_slave_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (board_afu_id_avmm_slave_0_afu_cfg_slave_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (board_afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo_out_data),          //  output,  width = 139,       out.data
		.out_valid         (board_afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (board_afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (board_afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (board_afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                    // (terminated),                         
		.csr_read          (1'b0),                                                                     // (terminated),                         
		.csr_write         (1'b0),                                                                     // (terminated),                         
		.csr_readdata      (),                                                                         // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated),                         
		.almost_full_data  (),                                                                         // (terminated),                         
		.almost_empty_data (),                                                                         // (terminated),                         
		.in_empty          (1'b0),                                                                     // (terminated),                         
		.out_empty         (),                                                                         // (terminated),                         
		.in_error          (1'b0),                                                                     // (terminated),                         
		.out_error         (),                                                                         // (terminated),                         
		.in_channel        (1'b0),                                                                     // (terminated),                         
		.out_channel       ()                                                                          // (terminated),                         
	);

	board_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (128),
		.PKT_ORI_BURST_SIZE_L      (126),
		.PKT_RESPONSE_STATUS_H     (125),
		.PKT_RESPONSE_STATUS_L     (124),
		.PKT_BURST_SIZE_H          (103),
		.PKT_BURST_SIZE_L          (101),
		.PKT_TRANS_LOCK            (94),
		.PKT_BEGIN_BURST           (108),
		.PKT_PROTECTION_H          (119),
		.PKT_PROTECTION_L          (117),
		.PKT_BURSTWRAP_H           (100),
		.PKT_BURSTWRAP_L           (100),
		.PKT_BYTE_CNT_H            (99),
		.PKT_BYTE_CNT_L            (96),
		.PKT_ADDR_H                (89),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (90),
		.PKT_TRANS_POSTED          (91),
		.PKT_TRANS_WRITE           (92),
		.PKT_TRANS_READ            (93),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (112),
		.PKT_SRC_ID_L              (110),
		.PKT_DEST_ID_H             (115),
		.PKT_DEST_ID_L             (113),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (138),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) ddr_board_ase_0_avmm_pipe_slave_agent (
		.clk                     (clk_200_out_clk_clk),                                              //   input,    width = 1,             clk.clk
		.reset                   (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),           //   input,    width = 1,       clk_reset.reset
		.m0_address              (ddr_board_ase_0_avmm_pipe_slave_agent_m0_address),                 //  output,   width = 18,              m0.address
		.m0_burstcount           (ddr_board_ase_0_avmm_pipe_slave_agent_m0_burstcount),              //  output,    width = 4,                .burstcount
		.m0_byteenable           (ddr_board_ase_0_avmm_pipe_slave_agent_m0_byteenable),              //  output,    width = 8,                .byteenable
		.m0_debugaccess          (ddr_board_ase_0_avmm_pipe_slave_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (ddr_board_ase_0_avmm_pipe_slave_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (ddr_board_ase_0_avmm_pipe_slave_agent_m0_readdata),                //   input,   width = 64,                .readdata
		.m0_readdatavalid        (ddr_board_ase_0_avmm_pipe_slave_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (ddr_board_ase_0_avmm_pipe_slave_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (ddr_board_ase_0_avmm_pipe_slave_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (ddr_board_ase_0_avmm_pipe_slave_agent_m0_writedata),               //  output,   width = 64,                .writedata
		.m0_write                (ddr_board_ase_0_avmm_pipe_slave_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (ddr_board_ase_0_avmm_pipe_slave_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (ddr_board_ase_0_avmm_pipe_slave_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (ddr_board_ase_0_avmm_pipe_slave_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (ddr_board_ase_0_avmm_pipe_slave_agent_rp_data),                    //  output,  width = 138,                .data
		.rp_startofpacket        (ddr_board_ase_0_avmm_pipe_slave_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (agent_pipeline_006_source0_ready),                                 //  output,    width = 1,              cp.ready
		.cp_valid                (agent_pipeline_006_source0_valid),                                 //   input,    width = 1,                .valid
		.cp_data                 (agent_pipeline_006_source0_data),                                  //   input,  width = 138,                .data
		.cp_startofpacket        (agent_pipeline_006_source0_startofpacket),                         //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (agent_pipeline_006_source0_endofpacket),                           //   input,    width = 1,                .endofpacket
		.cp_channel              (agent_pipeline_006_source0_channel),                               //   input,    width = 8,                .channel
		.rf_sink_ready           (ddr_board_ase_0_avmm_pipe_slave_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (ddr_board_ase_0_avmm_pipe_slave_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (ddr_board_ase_0_avmm_pipe_slave_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (ddr_board_ase_0_avmm_pipe_slave_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (ddr_board_ase_0_avmm_pipe_slave_agent_rsp_fifo_out_data),          //   input,  width = 139,                .data
		.rf_source_ready         (ddr_board_ase_0_avmm_pipe_slave_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (ddr_board_ase_0_avmm_pipe_slave_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (ddr_board_ase_0_avmm_pipe_slave_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (ddr_board_ase_0_avmm_pipe_slave_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (ddr_board_ase_0_avmm_pipe_slave_agent_rf_source_data),             //  output,  width = 139,                .data
		.rdata_fifo_sink_ready   (ddr_board_ase_0_avmm_pipe_slave_agent_rdata_fifo_src_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (ddr_board_ase_0_avmm_pipe_slave_agent_rdata_fifo_src_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (ddr_board_ase_0_avmm_pipe_slave_agent_rdata_fifo_src_data),        //   input,   width = 66,                .data
		.rdata_fifo_src_ready    (ddr_board_ase_0_avmm_pipe_slave_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ddr_board_ase_0_avmm_pipe_slave_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (ddr_board_ase_0_avmm_pipe_slave_agent_rdata_fifo_src_data),        //  output,   width = 66,                .data
		.m0_response             (2'b00),                                                            // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                             // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                              // (terminated),                               
	);

	board_altera_avalon_sc_fifo_191_e5eqkcq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (139),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) ddr_board_ase_0_avmm_pipe_slave_agent_rsp_fifo (
		.clk               (clk_200_out_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset             (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),           //   input,    width = 1, clk_reset.reset
		.in_data           (ddr_board_ase_0_avmm_pipe_slave_agent_rf_source_data),             //   input,  width = 139,        in.data
		.in_valid          (ddr_board_ase_0_avmm_pipe_slave_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (ddr_board_ase_0_avmm_pipe_slave_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (ddr_board_ase_0_avmm_pipe_slave_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (ddr_board_ase_0_avmm_pipe_slave_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (ddr_board_ase_0_avmm_pipe_slave_agent_rsp_fifo_out_data),          //  output,  width = 139,       out.data
		.out_valid         (ddr_board_ase_0_avmm_pipe_slave_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (ddr_board_ase_0_avmm_pipe_slave_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (ddr_board_ase_0_avmm_pipe_slave_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (ddr_board_ase_0_avmm_pipe_slave_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                            // (terminated),                         
		.csr_read          (1'b0),                                                             // (terminated),                         
		.csr_write         (1'b0),                                                             // (terminated),                         
		.csr_readdata      (),                                                                 // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                             // (terminated),                         
		.almost_full_data  (),                                                                 // (terminated),                         
		.almost_empty_data (),                                                                 // (terminated),                         
		.in_empty          (1'b0),                                                             // (terminated),                         
		.out_empty         (),                                                                 // (terminated),                         
		.in_error          (1'b0),                                                             // (terminated),                         
		.out_error         (),                                                                 // (terminated),                         
		.in_channel        (1'b0),                                                             // (terminated),                         
		.out_channel       ()                                                                  // (terminated),                         
	);

	board_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (92),
		.PKT_ORI_BURST_SIZE_L      (90),
		.PKT_RESPONSE_STATUS_H     (89),
		.PKT_RESPONSE_STATUS_L     (88),
		.PKT_BURST_SIZE_H          (67),
		.PKT_BURST_SIZE_L          (65),
		.PKT_TRANS_LOCK            (58),
		.PKT_BEGIN_BURST           (72),
		.PKT_PROTECTION_H          (83),
		.PKT_PROTECTION_L          (81),
		.PKT_BURSTWRAP_H           (64),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (60),
		.PKT_ADDR_H                (53),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (54),
		.PKT_TRANS_POSTED          (55),
		.PKT_TRANS_WRITE           (56),
		.PKT_TRANS_READ            (57),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (76),
		.PKT_SRC_ID_L              (74),
		.PKT_DEST_ID_H             (79),
		.PKT_DEST_ID_L             (77),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (102),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) kernel_interface_ctrl_agent (
		.clk                     (clk_200_out_clk_clk),                                    //   input,    width = 1,             clk.clk
		.reset                   (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (kernel_interface_ctrl_agent_m0_address),                 //  output,   width = 18,              m0.address
		.m0_burstcount           (kernel_interface_ctrl_agent_m0_burstcount),              //  output,    width = 3,                .burstcount
		.m0_byteenable           (kernel_interface_ctrl_agent_m0_byteenable),              //  output,    width = 4,                .byteenable
		.m0_debugaccess          (kernel_interface_ctrl_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (kernel_interface_ctrl_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (kernel_interface_ctrl_agent_m0_readdata),                //   input,   width = 32,                .readdata
		.m0_readdatavalid        (kernel_interface_ctrl_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (kernel_interface_ctrl_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (kernel_interface_ctrl_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (kernel_interface_ctrl_agent_m0_writedata),               //  output,   width = 32,                .writedata
		.m0_write                (kernel_interface_ctrl_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (kernel_interface_ctrl_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (kernel_interface_ctrl_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (kernel_interface_ctrl_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (kernel_interface_ctrl_agent_rp_data),                    //  output,  width = 102,                .data
		.rp_startofpacket        (kernel_interface_ctrl_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (agent_pipeline_008_source0_ready),                       //  output,    width = 1,              cp.ready
		.cp_valid                (agent_pipeline_008_source0_valid),                       //   input,    width = 1,                .valid
		.cp_data                 (agent_pipeline_008_source0_data),                        //   input,  width = 102,                .data
		.cp_startofpacket        (agent_pipeline_008_source0_startofpacket),               //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (agent_pipeline_008_source0_endofpacket),                 //   input,    width = 1,                .endofpacket
		.cp_channel              (agent_pipeline_008_source0_channel),                     //   input,    width = 8,                .channel
		.rf_sink_ready           (kernel_interface_ctrl_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (kernel_interface_ctrl_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (kernel_interface_ctrl_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (kernel_interface_ctrl_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (kernel_interface_ctrl_agent_rsp_fifo_out_data),          //   input,  width = 103,                .data
		.rf_source_ready         (kernel_interface_ctrl_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (kernel_interface_ctrl_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (kernel_interface_ctrl_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (kernel_interface_ctrl_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (kernel_interface_ctrl_agent_rf_source_data),             //  output,  width = 103,                .data
		.rdata_fifo_sink_ready   (kernel_interface_ctrl_agent_rdata_fifo_src_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (kernel_interface_ctrl_agent_rdata_fifo_src_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (kernel_interface_ctrl_agent_rdata_fifo_src_data),        //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (kernel_interface_ctrl_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (kernel_interface_ctrl_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (kernel_interface_ctrl_agent_rdata_fifo_src_data),        //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                  // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                   // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                    // (terminated),                               
	);

	board_altera_avalon_sc_fifo_191_e5eqkcq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (103),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) kernel_interface_ctrl_agent_rsp_fifo (
		.clk               (clk_200_out_clk_clk),                                    //   input,    width = 1,       clk.clk
		.reset             (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (kernel_interface_ctrl_agent_rf_source_data),             //   input,  width = 103,        in.data
		.in_valid          (kernel_interface_ctrl_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (kernel_interface_ctrl_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (kernel_interface_ctrl_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (kernel_interface_ctrl_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (kernel_interface_ctrl_agent_rsp_fifo_out_data),          //  output,  width = 103,       out.data
		.out_valid         (kernel_interface_ctrl_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (kernel_interface_ctrl_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (kernel_interface_ctrl_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (kernel_interface_ctrl_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated),                         
		.csr_read          (1'b0),                                                   // (terminated),                         
		.csr_write         (1'b0),                                                   // (terminated),                         
		.csr_readdata      (),                                                       // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated),                         
		.almost_full_data  (),                                                       // (terminated),                         
		.almost_empty_data (),                                                       // (terminated),                         
		.in_empty          (1'b0),                                                   // (terminated),                         
		.out_empty         (),                                                       // (terminated),                         
		.in_error          (1'b0),                                                   // (terminated),                         
		.out_error         (),                                                       // (terminated),                         
		.in_channel        (1'b0),                                                   // (terminated),                         
		.out_channel       ()                                                        // (terminated),                         
	);

	board_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (128),
		.PKT_ORI_BURST_SIZE_L      (126),
		.PKT_RESPONSE_STATUS_H     (125),
		.PKT_RESPONSE_STATUS_L     (124),
		.PKT_BURST_SIZE_H          (103),
		.PKT_BURST_SIZE_L          (101),
		.PKT_TRANS_LOCK            (94),
		.PKT_BEGIN_BURST           (108),
		.PKT_PROTECTION_H          (119),
		.PKT_PROTECTION_L          (117),
		.PKT_BURSTWRAP_H           (100),
		.PKT_BURSTWRAP_L           (100),
		.PKT_BYTE_CNT_H            (99),
		.PKT_BYTE_CNT_L            (96),
		.PKT_ADDR_H                (89),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (90),
		.PKT_TRANS_POSTED          (91),
		.PKT_TRANS_WRITE           (92),
		.PKT_TRANS_READ            (93),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (112),
		.PKT_SRC_ID_L              (110),
		.PKT_DEST_ID_H             (115),
		.PKT_DEST_ID_L             (113),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (138),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) ddr_board_msgdma_bbb_0_csr_agent (
		.clk                     (clk_200_out_clk_clk),                                         //   input,    width = 1,             clk.clk
		.reset                   (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),      //   input,    width = 1,       clk_reset.reset
		.m0_address              (ddr_board_msgdma_bbb_0_csr_agent_m0_address),                 //  output,   width = 18,              m0.address
		.m0_burstcount           (ddr_board_msgdma_bbb_0_csr_agent_m0_burstcount),              //  output,    width = 4,                .burstcount
		.m0_byteenable           (ddr_board_msgdma_bbb_0_csr_agent_m0_byteenable),              //  output,    width = 8,                .byteenable
		.m0_debugaccess          (ddr_board_msgdma_bbb_0_csr_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (ddr_board_msgdma_bbb_0_csr_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (ddr_board_msgdma_bbb_0_csr_agent_m0_readdata),                //   input,   width = 64,                .readdata
		.m0_readdatavalid        (ddr_board_msgdma_bbb_0_csr_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (ddr_board_msgdma_bbb_0_csr_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (ddr_board_msgdma_bbb_0_csr_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (ddr_board_msgdma_bbb_0_csr_agent_m0_writedata),               //  output,   width = 64,                .writedata
		.m0_write                (ddr_board_msgdma_bbb_0_csr_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (ddr_board_msgdma_bbb_0_csr_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (ddr_board_msgdma_bbb_0_csr_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (ddr_board_msgdma_bbb_0_csr_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (ddr_board_msgdma_bbb_0_csr_agent_rp_data),                    //  output,  width = 138,                .data
		.rp_startofpacket        (ddr_board_msgdma_bbb_0_csr_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (agent_pipeline_010_source0_ready),                            //  output,    width = 1,              cp.ready
		.cp_valid                (agent_pipeline_010_source0_valid),                            //   input,    width = 1,                .valid
		.cp_data                 (agent_pipeline_010_source0_data),                             //   input,  width = 138,                .data
		.cp_startofpacket        (agent_pipeline_010_source0_startofpacket),                    //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (agent_pipeline_010_source0_endofpacket),                      //   input,    width = 1,                .endofpacket
		.cp_channel              (agent_pipeline_010_source0_channel),                          //   input,    width = 8,                .channel
		.rf_sink_ready           (ddr_board_msgdma_bbb_0_csr_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (ddr_board_msgdma_bbb_0_csr_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (ddr_board_msgdma_bbb_0_csr_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (ddr_board_msgdma_bbb_0_csr_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (ddr_board_msgdma_bbb_0_csr_agent_rsp_fifo_out_data),          //   input,  width = 139,                .data
		.rf_source_ready         (ddr_board_msgdma_bbb_0_csr_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (ddr_board_msgdma_bbb_0_csr_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (ddr_board_msgdma_bbb_0_csr_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (ddr_board_msgdma_bbb_0_csr_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (ddr_board_msgdma_bbb_0_csr_agent_rf_source_data),             //  output,  width = 139,                .data
		.rdata_fifo_sink_ready   (ddr_board_msgdma_bbb_0_csr_agent_rdata_fifo_src_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (ddr_board_msgdma_bbb_0_csr_agent_rdata_fifo_src_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (ddr_board_msgdma_bbb_0_csr_agent_rdata_fifo_src_data),        //   input,   width = 66,                .data
		.rdata_fifo_src_ready    (ddr_board_msgdma_bbb_0_csr_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ddr_board_msgdma_bbb_0_csr_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (ddr_board_msgdma_bbb_0_csr_agent_rdata_fifo_src_data),        //  output,   width = 66,                .data
		.m0_response             (2'b00),                                                       // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                        // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                         // (terminated),                               
	);

	board_altera_avalon_sc_fifo_191_e5eqkcq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (139),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) ddr_board_msgdma_bbb_0_csr_agent_rsp_fifo (
		.clk               (clk_200_out_clk_clk),                                         //   input,    width = 1,       clk.clk
		.reset             (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),      //   input,    width = 1, clk_reset.reset
		.in_data           (ddr_board_msgdma_bbb_0_csr_agent_rf_source_data),             //   input,  width = 139,        in.data
		.in_valid          (ddr_board_msgdma_bbb_0_csr_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (ddr_board_msgdma_bbb_0_csr_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (ddr_board_msgdma_bbb_0_csr_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (ddr_board_msgdma_bbb_0_csr_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (ddr_board_msgdma_bbb_0_csr_agent_rsp_fifo_out_data),          //  output,  width = 139,       out.data
		.out_valid         (ddr_board_msgdma_bbb_0_csr_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (ddr_board_msgdma_bbb_0_csr_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (ddr_board_msgdma_bbb_0_csr_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (ddr_board_msgdma_bbb_0_csr_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated),                         
		.csr_read          (1'b0),                                                        // (terminated),                         
		.csr_write         (1'b0),                                                        // (terminated),                         
		.csr_readdata      (),                                                            // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated),                         
		.almost_full_data  (),                                                            // (terminated),                         
		.almost_empty_data (),                                                            // (terminated),                         
		.in_empty          (1'b0),                                                        // (terminated),                         
		.out_empty         (),                                                            // (terminated),                         
		.in_error          (1'b0),                                                        // (terminated),                         
		.out_error         (),                                                            // (terminated),                         
		.in_channel        (1'b0),                                                        // (terminated),                         
		.out_channel       ()                                                             // (terminated),                         
	);

	board_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (128),
		.PKT_ORI_BURST_SIZE_L      (126),
		.PKT_RESPONSE_STATUS_H     (125),
		.PKT_RESPONSE_STATUS_L     (124),
		.PKT_BURST_SIZE_H          (103),
		.PKT_BURST_SIZE_L          (101),
		.PKT_TRANS_LOCK            (94),
		.PKT_BEGIN_BURST           (108),
		.PKT_PROTECTION_H          (119),
		.PKT_PROTECTION_L          (117),
		.PKT_BURSTWRAP_H           (100),
		.PKT_BURSTWRAP_L           (100),
		.PKT_BYTE_CNT_H            (99),
		.PKT_BYTE_CNT_L            (96),
		.PKT_ADDR_H                (89),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (90),
		.PKT_TRANS_POSTED          (91),
		.PKT_TRANS_WRITE           (92),
		.PKT_TRANS_READ            (93),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (112),
		.PKT_SRC_ID_L              (110),
		.PKT_DEST_ID_H             (115),
		.PKT_DEST_ID_L             (113),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (138),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) ddr_board_msgdma_bbb_1_csr_agent (
		.clk                     (clk_200_out_clk_clk),                                         //   input,    width = 1,             clk.clk
		.reset                   (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),      //   input,    width = 1,       clk_reset.reset
		.m0_address              (ddr_board_msgdma_bbb_1_csr_agent_m0_address),                 //  output,   width = 18,              m0.address
		.m0_burstcount           (ddr_board_msgdma_bbb_1_csr_agent_m0_burstcount),              //  output,    width = 4,                .burstcount
		.m0_byteenable           (ddr_board_msgdma_bbb_1_csr_agent_m0_byteenable),              //  output,    width = 8,                .byteenable
		.m0_debugaccess          (ddr_board_msgdma_bbb_1_csr_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (ddr_board_msgdma_bbb_1_csr_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (ddr_board_msgdma_bbb_1_csr_agent_m0_readdata),                //   input,   width = 64,                .readdata
		.m0_readdatavalid        (ddr_board_msgdma_bbb_1_csr_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (ddr_board_msgdma_bbb_1_csr_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (ddr_board_msgdma_bbb_1_csr_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (ddr_board_msgdma_bbb_1_csr_agent_m0_writedata),               //  output,   width = 64,                .writedata
		.m0_write                (ddr_board_msgdma_bbb_1_csr_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (ddr_board_msgdma_bbb_1_csr_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (ddr_board_msgdma_bbb_1_csr_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (ddr_board_msgdma_bbb_1_csr_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (ddr_board_msgdma_bbb_1_csr_agent_rp_data),                    //  output,  width = 138,                .data
		.rp_startofpacket        (ddr_board_msgdma_bbb_1_csr_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (agent_pipeline_012_source0_ready),                            //  output,    width = 1,              cp.ready
		.cp_valid                (agent_pipeline_012_source0_valid),                            //   input,    width = 1,                .valid
		.cp_data                 (agent_pipeline_012_source0_data),                             //   input,  width = 138,                .data
		.cp_startofpacket        (agent_pipeline_012_source0_startofpacket),                    //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (agent_pipeline_012_source0_endofpacket),                      //   input,    width = 1,                .endofpacket
		.cp_channel              (agent_pipeline_012_source0_channel),                          //   input,    width = 8,                .channel
		.rf_sink_ready           (ddr_board_msgdma_bbb_1_csr_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (ddr_board_msgdma_bbb_1_csr_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (ddr_board_msgdma_bbb_1_csr_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (ddr_board_msgdma_bbb_1_csr_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (ddr_board_msgdma_bbb_1_csr_agent_rsp_fifo_out_data),          //   input,  width = 139,                .data
		.rf_source_ready         (ddr_board_msgdma_bbb_1_csr_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (ddr_board_msgdma_bbb_1_csr_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (ddr_board_msgdma_bbb_1_csr_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (ddr_board_msgdma_bbb_1_csr_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (ddr_board_msgdma_bbb_1_csr_agent_rf_source_data),             //  output,  width = 139,                .data
		.rdata_fifo_sink_ready   (ddr_board_msgdma_bbb_1_csr_agent_rdata_fifo_src_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (ddr_board_msgdma_bbb_1_csr_agent_rdata_fifo_src_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (ddr_board_msgdma_bbb_1_csr_agent_rdata_fifo_src_data),        //   input,   width = 66,                .data
		.rdata_fifo_src_ready    (ddr_board_msgdma_bbb_1_csr_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ddr_board_msgdma_bbb_1_csr_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (ddr_board_msgdma_bbb_1_csr_agent_rdata_fifo_src_data),        //  output,   width = 66,                .data
		.m0_response             (2'b00),                                                       // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                        // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                         // (terminated),                               
	);

	board_altera_avalon_sc_fifo_191_e5eqkcq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (139),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) ddr_board_msgdma_bbb_1_csr_agent_rsp_fifo (
		.clk               (clk_200_out_clk_clk),                                         //   input,    width = 1,       clk.clk
		.reset             (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),      //   input,    width = 1, clk_reset.reset
		.in_data           (ddr_board_msgdma_bbb_1_csr_agent_rf_source_data),             //   input,  width = 139,        in.data
		.in_valid          (ddr_board_msgdma_bbb_1_csr_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (ddr_board_msgdma_bbb_1_csr_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (ddr_board_msgdma_bbb_1_csr_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (ddr_board_msgdma_bbb_1_csr_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (ddr_board_msgdma_bbb_1_csr_agent_rsp_fifo_out_data),          //  output,  width = 139,       out.data
		.out_valid         (ddr_board_msgdma_bbb_1_csr_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (ddr_board_msgdma_bbb_1_csr_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (ddr_board_msgdma_bbb_1_csr_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (ddr_board_msgdma_bbb_1_csr_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated),                         
		.csr_read          (1'b0),                                                        // (terminated),                         
		.csr_write         (1'b0),                                                        // (terminated),                         
		.csr_readdata      (),                                                            // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated),                         
		.almost_full_data  (),                                                            // (terminated),                         
		.almost_empty_data (),                                                            // (terminated),                         
		.in_empty          (1'b0),                                                        // (terminated),                         
		.out_empty         (),                                                            // (terminated),                         
		.in_error          (1'b0),                                                        // (terminated),                         
		.out_error         (),                                                            // (terminated),                         
		.in_channel        (1'b0),                                                        // (terminated),                         
		.out_channel       ()                                                             // (terminated),                         
	);

	board_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (128),
		.PKT_ORI_BURST_SIZE_L      (126),
		.PKT_RESPONSE_STATUS_H     (125),
		.PKT_RESPONSE_STATUS_L     (124),
		.PKT_BURST_SIZE_H          (103),
		.PKT_BURST_SIZE_L          (101),
		.PKT_TRANS_LOCK            (94),
		.PKT_BEGIN_BURST           (108),
		.PKT_PROTECTION_H          (119),
		.PKT_PROTECTION_L          (117),
		.PKT_BURSTWRAP_H           (100),
		.PKT_BURSTWRAP_L           (100),
		.PKT_BYTE_CNT_H            (99),
		.PKT_BYTE_CNT_L            (96),
		.PKT_ADDR_H                (89),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (90),
		.PKT_TRANS_POSTED          (91),
		.PKT_TRANS_WRITE           (92),
		.PKT_TRANS_READ            (93),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (112),
		.PKT_SRC_ID_L              (110),
		.PKT_DEST_ID_H             (115),
		.PKT_DEST_ID_L             (113),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (138),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) ddr_board_null_dfh_afu_id_agent (
		.clk                     (clk_200_out_clk_clk),                                        //   input,    width = 1,             clk.clk
		.reset                   (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),     //   input,    width = 1,       clk_reset.reset
		.m0_address              (ddr_board_null_dfh_afu_id_agent_m0_address),                 //  output,   width = 18,              m0.address
		.m0_burstcount           (ddr_board_null_dfh_afu_id_agent_m0_burstcount),              //  output,    width = 4,                .burstcount
		.m0_byteenable           (ddr_board_null_dfh_afu_id_agent_m0_byteenable),              //  output,    width = 8,                .byteenable
		.m0_debugaccess          (ddr_board_null_dfh_afu_id_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (ddr_board_null_dfh_afu_id_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (ddr_board_null_dfh_afu_id_agent_m0_readdata),                //   input,   width = 64,                .readdata
		.m0_readdatavalid        (ddr_board_null_dfh_afu_id_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (ddr_board_null_dfh_afu_id_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (ddr_board_null_dfh_afu_id_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (ddr_board_null_dfh_afu_id_agent_m0_writedata),               //  output,   width = 64,                .writedata
		.m0_write                (ddr_board_null_dfh_afu_id_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (ddr_board_null_dfh_afu_id_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (ddr_board_null_dfh_afu_id_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (ddr_board_null_dfh_afu_id_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (ddr_board_null_dfh_afu_id_agent_rp_data),                    //  output,  width = 138,                .data
		.rp_startofpacket        (ddr_board_null_dfh_afu_id_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (agent_pipeline_014_source0_ready),                           //  output,    width = 1,              cp.ready
		.cp_valid                (agent_pipeline_014_source0_valid),                           //   input,    width = 1,                .valid
		.cp_data                 (agent_pipeline_014_source0_data),                            //   input,  width = 138,                .data
		.cp_startofpacket        (agent_pipeline_014_source0_startofpacket),                   //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (agent_pipeline_014_source0_endofpacket),                     //   input,    width = 1,                .endofpacket
		.cp_channel              (agent_pipeline_014_source0_channel),                         //   input,    width = 8,                .channel
		.rf_sink_ready           (ddr_board_null_dfh_afu_id_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (ddr_board_null_dfh_afu_id_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (ddr_board_null_dfh_afu_id_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (ddr_board_null_dfh_afu_id_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (ddr_board_null_dfh_afu_id_agent_rsp_fifo_out_data),          //   input,  width = 139,                .data
		.rf_source_ready         (ddr_board_null_dfh_afu_id_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (ddr_board_null_dfh_afu_id_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (ddr_board_null_dfh_afu_id_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (ddr_board_null_dfh_afu_id_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (ddr_board_null_dfh_afu_id_agent_rf_source_data),             //  output,  width = 139,                .data
		.rdata_fifo_sink_ready   (ddr_board_null_dfh_afu_id_agent_rdata_fifo_src_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (ddr_board_null_dfh_afu_id_agent_rdata_fifo_src_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (ddr_board_null_dfh_afu_id_agent_rdata_fifo_src_data),        //   input,   width = 66,                .data
		.rdata_fifo_src_ready    (ddr_board_null_dfh_afu_id_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ddr_board_null_dfh_afu_id_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (ddr_board_null_dfh_afu_id_agent_rdata_fifo_src_data),        //  output,   width = 66,                .data
		.m0_response             (2'b00),                                                      // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                       // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                        // (terminated),                               
	);

	board_altera_avalon_sc_fifo_191_e5eqkcq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (139),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) ddr_board_null_dfh_afu_id_agent_rsp_fifo (
		.clk               (clk_200_out_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset             (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),     //   input,    width = 1, clk_reset.reset
		.in_data           (ddr_board_null_dfh_afu_id_agent_rf_source_data),             //   input,  width = 139,        in.data
		.in_valid          (ddr_board_null_dfh_afu_id_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (ddr_board_null_dfh_afu_id_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (ddr_board_null_dfh_afu_id_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (ddr_board_null_dfh_afu_id_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (ddr_board_null_dfh_afu_id_agent_rsp_fifo_out_data),          //  output,  width = 139,       out.data
		.out_valid         (ddr_board_null_dfh_afu_id_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (ddr_board_null_dfh_afu_id_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (ddr_board_null_dfh_afu_id_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (ddr_board_null_dfh_afu_id_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated),                         
		.csr_read          (1'b0),                                                       // (terminated),                         
		.csr_write         (1'b0),                                                       // (terminated),                         
		.csr_readdata      (),                                                           // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated),                         
		.almost_full_data  (),                                                           // (terminated),                         
		.almost_empty_data (),                                                           // (terminated),                         
		.in_empty          (1'b0),                                                       // (terminated),                         
		.out_empty         (),                                                           // (terminated),                         
		.in_error          (1'b0),                                                       // (terminated),                         
		.out_error         (),                                                           // (terminated),                         
		.in_channel        (1'b0),                                                       // (terminated),                         
		.out_channel       ()                                                            // (terminated),                         
	);

	board_altera_merlin_router_191_qdcstwy router (
		.sink_ready         (pipe_stage_host_ctrl_m0_agent_cp_ready),                 //  output,    width = 1,      sink.ready
		.sink_valid         (pipe_stage_host_ctrl_m0_agent_cp_valid),                 //   input,    width = 1,          .valid
		.sink_data          (pipe_stage_host_ctrl_m0_agent_cp_data),                  //   input,  width = 138,          .data
		.sink_startofpacket (pipe_stage_host_ctrl_m0_agent_cp_startofpacket),         //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (pipe_stage_host_ctrl_m0_agent_cp_endofpacket),           //   input,    width = 1,          .endofpacket
		.clk                (clk_200_out_clk_clk),                                    //   input,    width = 1,       clk.clk
		.reset              (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_src_ready),                                       //   input,    width = 1,       src.ready
		.src_valid          (router_src_valid),                                       //  output,    width = 1,          .valid
		.src_data           (router_src_data),                                        //  output,  width = 138,          .data
		.src_channel        (router_src_channel),                                     //  output,    width = 8,          .channel
		.src_startofpacket  (router_src_startofpacket),                               //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                  //  output,    width = 1,          .endofpacket
	);

	board_altera_merlin_router_191_ymmgbda router_001 (
		.sink_ready         (agent_pipeline_001_source0_ready),                       //  output,    width = 1,      sink.ready
		.sink_valid         (agent_pipeline_001_source0_valid),                       //   input,    width = 1,          .valid
		.sink_data          (agent_pipeline_001_source0_data),                        //   input,  width = 102,          .data
		.sink_startofpacket (agent_pipeline_001_source0_startofpacket),               //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (agent_pipeline_001_source0_endofpacket),                 //   input,    width = 1,          .endofpacket
		.clk                (clk_200_out_clk_clk),                                    //   input,    width = 1,       clk.clk
		.reset              (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_001_src_ready),                                   //   input,    width = 1,       src.ready
		.src_valid          (router_001_src_valid),                                   //  output,    width = 1,          .valid
		.src_data           (router_001_src_data),                                    //  output,  width = 102,          .data
		.src_channel        (router_001_src_channel),                                 //  output,    width = 8,          .channel
		.src_startofpacket  (router_001_src_startofpacket),                           //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                              //  output,    width = 1,          .endofpacket
	);

	board_altera_merlin_router_191_ymmgbda router_002 (
		.sink_ready         (agent_pipeline_003_source0_ready),                       //  output,    width = 1,      sink.ready
		.sink_valid         (agent_pipeline_003_source0_valid),                       //   input,    width = 1,          .valid
		.sink_data          (agent_pipeline_003_source0_data),                        //   input,  width = 102,          .data
		.sink_startofpacket (agent_pipeline_003_source0_startofpacket),               //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (agent_pipeline_003_source0_endofpacket),                 //   input,    width = 1,          .endofpacket
		.clk                (clk_200_out_clk_clk),                                    //   input,    width = 1,       clk.clk
		.reset              (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_002_src_ready),                                   //   input,    width = 1,       src.ready
		.src_valid          (router_002_src_valid),                                   //  output,    width = 1,          .valid
		.src_data           (router_002_src_data),                                    //  output,  width = 102,          .data
		.src_channel        (router_002_src_channel),                                 //  output,    width = 8,          .channel
		.src_startofpacket  (router_002_src_startofpacket),                           //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                              //  output,    width = 1,          .endofpacket
	);

	board_altera_merlin_router_191_p7j7u6q router_003 (
		.sink_ready         (agent_pipeline_005_source0_ready),                       //  output,    width = 1,      sink.ready
		.sink_valid         (agent_pipeline_005_source0_valid),                       //   input,    width = 1,          .valid
		.sink_data          (agent_pipeline_005_source0_data),                        //   input,  width = 138,          .data
		.sink_startofpacket (agent_pipeline_005_source0_startofpacket),               //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (agent_pipeline_005_source0_endofpacket),                 //   input,    width = 1,          .endofpacket
		.clk                (clk_200_out_clk_clk),                                    //   input,    width = 1,       clk.clk
		.reset              (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_003_src_ready),                                   //   input,    width = 1,       src.ready
		.src_valid          (router_003_src_valid),                                   //  output,    width = 1,          .valid
		.src_data           (router_003_src_data),                                    //  output,  width = 138,          .data
		.src_channel        (router_003_src_channel),                                 //  output,    width = 8,          .channel
		.src_startofpacket  (router_003_src_startofpacket),                           //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                              //  output,    width = 1,          .endofpacket
	);

	board_altera_merlin_router_191_p7j7u6q router_004 (
		.sink_ready         (agent_pipeline_007_source0_ready),                       //  output,    width = 1,      sink.ready
		.sink_valid         (agent_pipeline_007_source0_valid),                       //   input,    width = 1,          .valid
		.sink_data          (agent_pipeline_007_source0_data),                        //   input,  width = 138,          .data
		.sink_startofpacket (agent_pipeline_007_source0_startofpacket),               //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (agent_pipeline_007_source0_endofpacket),                 //   input,    width = 1,          .endofpacket
		.clk                (clk_200_out_clk_clk),                                    //   input,    width = 1,       clk.clk
		.reset              (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_004_src_ready),                                   //   input,    width = 1,       src.ready
		.src_valid          (router_004_src_valid),                                   //  output,    width = 1,          .valid
		.src_data           (router_004_src_data),                                    //  output,  width = 138,          .data
		.src_channel        (router_004_src_channel),                                 //  output,    width = 8,          .channel
		.src_startofpacket  (router_004_src_startofpacket),                           //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                              //  output,    width = 1,          .endofpacket
	);

	board_altera_merlin_router_191_ymmgbda router_005 (
		.sink_ready         (agent_pipeline_009_source0_ready),                       //  output,    width = 1,      sink.ready
		.sink_valid         (agent_pipeline_009_source0_valid),                       //   input,    width = 1,          .valid
		.sink_data          (agent_pipeline_009_source0_data),                        //   input,  width = 102,          .data
		.sink_startofpacket (agent_pipeline_009_source0_startofpacket),               //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (agent_pipeline_009_source0_endofpacket),                 //   input,    width = 1,          .endofpacket
		.clk                (clk_200_out_clk_clk),                                    //   input,    width = 1,       clk.clk
		.reset              (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_005_src_ready),                                   //   input,    width = 1,       src.ready
		.src_valid          (router_005_src_valid),                                   //  output,    width = 1,          .valid
		.src_data           (router_005_src_data),                                    //  output,  width = 102,          .data
		.src_channel        (router_005_src_channel),                                 //  output,    width = 8,          .channel
		.src_startofpacket  (router_005_src_startofpacket),                           //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                              //  output,    width = 1,          .endofpacket
	);

	board_altera_merlin_router_191_p7j7u6q router_006 (
		.sink_ready         (agent_pipeline_011_source0_ready),                       //  output,    width = 1,      sink.ready
		.sink_valid         (agent_pipeline_011_source0_valid),                       //   input,    width = 1,          .valid
		.sink_data          (agent_pipeline_011_source0_data),                        //   input,  width = 138,          .data
		.sink_startofpacket (agent_pipeline_011_source0_startofpacket),               //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (agent_pipeline_011_source0_endofpacket),                 //   input,    width = 1,          .endofpacket
		.clk                (clk_200_out_clk_clk),                                    //   input,    width = 1,       clk.clk
		.reset              (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_006_src_ready),                                   //   input,    width = 1,       src.ready
		.src_valid          (router_006_src_valid),                                   //  output,    width = 1,          .valid
		.src_data           (router_006_src_data),                                    //  output,  width = 138,          .data
		.src_channel        (router_006_src_channel),                                 //  output,    width = 8,          .channel
		.src_startofpacket  (router_006_src_startofpacket),                           //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                              //  output,    width = 1,          .endofpacket
	);

	board_altera_merlin_router_191_p7j7u6q router_007 (
		.sink_ready         (agent_pipeline_013_source0_ready),                       //  output,    width = 1,      sink.ready
		.sink_valid         (agent_pipeline_013_source0_valid),                       //   input,    width = 1,          .valid
		.sink_data          (agent_pipeline_013_source0_data),                        //   input,  width = 138,          .data
		.sink_startofpacket (agent_pipeline_013_source0_startofpacket),               //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (agent_pipeline_013_source0_endofpacket),                 //   input,    width = 1,          .endofpacket
		.clk                (clk_200_out_clk_clk),                                    //   input,    width = 1,       clk.clk
		.reset              (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_007_src_ready),                                   //   input,    width = 1,       src.ready
		.src_valid          (router_007_src_valid),                                   //  output,    width = 1,          .valid
		.src_data           (router_007_src_data),                                    //  output,  width = 138,          .data
		.src_channel        (router_007_src_channel),                                 //  output,    width = 8,          .channel
		.src_startofpacket  (router_007_src_startofpacket),                           //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                              //  output,    width = 1,          .endofpacket
	);

	board_altera_merlin_router_191_p7j7u6q router_008 (
		.sink_ready         (agent_pipeline_015_source0_ready),                       //  output,    width = 1,      sink.ready
		.sink_valid         (agent_pipeline_015_source0_valid),                       //   input,    width = 1,          .valid
		.sink_data          (agent_pipeline_015_source0_data),                        //   input,  width = 138,          .data
		.sink_startofpacket (agent_pipeline_015_source0_startofpacket),               //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (agent_pipeline_015_source0_endofpacket),                 //   input,    width = 1,          .endofpacket
		.clk                (clk_200_out_clk_clk),                                    //   input,    width = 1,       clk.clk
		.reset              (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_008_src_ready),                                   //   input,    width = 1,       src.ready
		.src_valid          (router_008_src_valid),                                   //  output,    width = 1,          .valid
		.src_data           (router_008_src_data),                                    //  output,  width = 138,          .data
		.src_channel        (router_008_src_channel),                                 //  output,    width = 8,          .channel
		.src_startofpacket  (router_008_src_startofpacket),                           //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                              //  output,    width = 1,          .endofpacket
	);

	board_altera_merlin_traffic_limiter_191_kcba44q #(
		.SYNC_RESET                (0),
		.PKT_DEST_ID_H             (115),
		.PKT_DEST_ID_L             (113),
		.PKT_SRC_ID_H              (112),
		.PKT_SRC_ID_L              (110),
		.PKT_BYTE_CNT_H            (99),
		.PKT_BYTE_CNT_L            (96),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_TRANS_POSTED          (91),
		.PKT_TRANS_WRITE           (92),
		.MAX_OUTSTANDING_RESPONSES (16),
		.PIPELINED                 (0),
		.ST_DATA_W                 (138),
		.ST_CHANNEL_W              (8),
		.VALID_WIDTH               (1),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) pipe_stage_host_ctrl_m0_limiter (
		.clk                    (clk_200_out_clk_clk),                                    //   input,    width = 1,       clk.clk
		.reset                  (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                       //  output,    width = 1,  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                       //   input,    width = 1,          .valid
		.cmd_sink_data          (router_src_data),                                        //   input,  width = 138,          .data
		.cmd_sink_channel       (router_src_channel),                                     //   input,    width = 8,          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                               //   input,    width = 1,          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                 //   input,    width = 1,          .endofpacket
		.cmd_src_ready          (pipe_stage_host_ctrl_m0_limiter_cmd_src_ready),          //   input,    width = 1,   cmd_src.ready
		.cmd_src_data           (pipe_stage_host_ctrl_m0_limiter_cmd_src_data),           //  output,  width = 138,          .data
		.cmd_src_channel        (pipe_stage_host_ctrl_m0_limiter_cmd_src_channel),        //  output,    width = 8,          .channel
		.cmd_src_startofpacket  (pipe_stage_host_ctrl_m0_limiter_cmd_src_startofpacket),  //  output,    width = 1,          .startofpacket
		.cmd_src_endofpacket    (pipe_stage_host_ctrl_m0_limiter_cmd_src_endofpacket),    //  output,    width = 1,          .endofpacket
		.cmd_src_valid          (pipe_stage_host_ctrl_m0_limiter_cmd_src_valid),          //  output,    width = 1,          .valid
		.rsp_sink_ready         (limiter_pipeline_001_source0_ready),                     //  output,    width = 1,  rsp_sink.ready
		.rsp_sink_valid         (limiter_pipeline_001_source0_valid),                     //   input,    width = 1,          .valid
		.rsp_sink_channel       (limiter_pipeline_001_source0_channel),                   //   input,    width = 8,          .channel
		.rsp_sink_data          (limiter_pipeline_001_source0_data),                      //   input,  width = 138,          .data
		.rsp_sink_startofpacket (limiter_pipeline_001_source0_startofpacket),             //   input,    width = 1,          .startofpacket
		.rsp_sink_endofpacket   (limiter_pipeline_001_source0_endofpacket),               //   input,    width = 1,          .endofpacket
		.rsp_src_ready          (pipe_stage_host_ctrl_m0_limiter_rsp_src_ready),          //   input,    width = 1,   rsp_src.ready
		.rsp_src_valid          (pipe_stage_host_ctrl_m0_limiter_rsp_src_valid),          //  output,    width = 1,          .valid
		.rsp_src_data           (pipe_stage_host_ctrl_m0_limiter_rsp_src_data),           //  output,  width = 138,          .data
		.rsp_src_channel        (pipe_stage_host_ctrl_m0_limiter_rsp_src_channel),        //  output,    width = 8,          .channel
		.rsp_src_startofpacket  (pipe_stage_host_ctrl_m0_limiter_rsp_src_startofpacket),  //  output,    width = 1,          .startofpacket
		.rsp_src_endofpacket    (pipe_stage_host_ctrl_m0_limiter_rsp_src_endofpacket)     //  output,    width = 1,          .endofpacket
	);

	board_altera_merlin_burst_adapter_191_32tg2fa #(
		.PKT_ADDR_H                (53),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (72),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (60),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (67),
		.PKT_BURST_SIZE_L          (65),
		.PKT_BURST_TYPE_H          (69),
		.PKT_BURST_TYPE_L          (68),
		.PKT_BURSTWRAP_H           (64),
		.PKT_BURSTWRAP_L           (64),
		.PKT_TRANS_COMPRESSED_READ (54),
		.PKT_TRANS_WRITE           (56),
		.PKT_TRANS_READ            (57),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (102),
		.ST_CHANNEL_W              (8),
		.OUT_BYTE_CNT_H            (62),
		.OUT_BURSTWRAP_H           (64),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) board_irq_ctrl_0_irq_mask_slave_burst_adapter (
		.clk                   (clk_200_out_clk_clk),                                                 //   input,    width = 1,       cr0.clk
		.reset                 (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),              //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (board_irq_ctrl_0_irq_mask_slave_cmd_width_adapter_src_valid),         //   input,    width = 1,     sink0.valid
		.sink0_data            (board_irq_ctrl_0_irq_mask_slave_cmd_width_adapter_src_data),          //   input,  width = 102,          .data
		.sink0_channel         (board_irq_ctrl_0_irq_mask_slave_cmd_width_adapter_src_channel),       //   input,    width = 8,          .channel
		.sink0_startofpacket   (board_irq_ctrl_0_irq_mask_slave_cmd_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (board_irq_ctrl_0_irq_mask_slave_cmd_width_adapter_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.sink0_ready           (board_irq_ctrl_0_irq_mask_slave_cmd_width_adapter_src_ready),         //  output,    width = 1,          .ready
		.source0_valid         (board_irq_ctrl_0_irq_mask_slave_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (board_irq_ctrl_0_irq_mask_slave_burst_adapter_source0_data),          //  output,  width = 102,          .data
		.source0_channel       (board_irq_ctrl_0_irq_mask_slave_burst_adapter_source0_channel),       //  output,    width = 8,          .channel
		.source0_startofpacket (board_irq_ctrl_0_irq_mask_slave_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (board_irq_ctrl_0_irq_mask_slave_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (board_irq_ctrl_0_irq_mask_slave_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	board_altera_merlin_burst_adapter_191_32tg2fa #(
		.PKT_ADDR_H                (53),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (72),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (60),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (67),
		.PKT_BURST_SIZE_L          (65),
		.PKT_BURST_TYPE_H          (69),
		.PKT_BURST_TYPE_L          (68),
		.PKT_BURSTWRAP_H           (64),
		.PKT_BURSTWRAP_L           (64),
		.PKT_TRANS_COMPRESSED_READ (54),
		.PKT_TRANS_WRITE           (56),
		.PKT_TRANS_READ            (57),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (102),
		.ST_CHANNEL_W              (8),
		.OUT_BYTE_CNT_H            (62),
		.OUT_BURSTWRAP_H           (64),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) board_irq_ctrl_0_irq_read_slave_burst_adapter (
		.clk                   (clk_200_out_clk_clk),                                                 //   input,    width = 1,       cr0.clk
		.reset                 (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),              //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (board_irq_ctrl_0_irq_read_slave_cmd_width_adapter_src_valid),         //   input,    width = 1,     sink0.valid
		.sink0_data            (board_irq_ctrl_0_irq_read_slave_cmd_width_adapter_src_data),          //   input,  width = 102,          .data
		.sink0_channel         (board_irq_ctrl_0_irq_read_slave_cmd_width_adapter_src_channel),       //   input,    width = 8,          .channel
		.sink0_startofpacket   (board_irq_ctrl_0_irq_read_slave_cmd_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (board_irq_ctrl_0_irq_read_slave_cmd_width_adapter_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.sink0_ready           (board_irq_ctrl_0_irq_read_slave_cmd_width_adapter_src_ready),         //  output,    width = 1,          .ready
		.source0_valid         (board_irq_ctrl_0_irq_read_slave_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (board_irq_ctrl_0_irq_read_slave_burst_adapter_source0_data),          //  output,  width = 102,          .data
		.source0_channel       (board_irq_ctrl_0_irq_read_slave_burst_adapter_source0_channel),       //  output,    width = 8,          .channel
		.source0_startofpacket (board_irq_ctrl_0_irq_read_slave_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (board_irq_ctrl_0_irq_read_slave_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (board_irq_ctrl_0_irq_read_slave_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	board_altera_merlin_burst_adapter_191_32tg2fa #(
		.PKT_ADDR_H                (53),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (72),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (60),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (67),
		.PKT_BURST_SIZE_L          (65),
		.PKT_BURST_TYPE_H          (69),
		.PKT_BURST_TYPE_L          (68),
		.PKT_BURSTWRAP_H           (64),
		.PKT_BURSTWRAP_L           (64),
		.PKT_TRANS_COMPRESSED_READ (54),
		.PKT_TRANS_WRITE           (56),
		.PKT_TRANS_READ            (57),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (102),
		.ST_CHANNEL_W              (8),
		.OUT_BYTE_CNT_H            (62),
		.OUT_BURSTWRAP_H           (64),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) kernel_interface_ctrl_burst_adapter (
		.clk                   (clk_200_out_clk_clk),                                       //   input,    width = 1,       cr0.clk
		.reset                 (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),    //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (kernel_interface_ctrl_cmd_width_adapter_src_valid),         //   input,    width = 1,     sink0.valid
		.sink0_data            (kernel_interface_ctrl_cmd_width_adapter_src_data),          //   input,  width = 102,          .data
		.sink0_channel         (kernel_interface_ctrl_cmd_width_adapter_src_channel),       //   input,    width = 8,          .channel
		.sink0_startofpacket   (kernel_interface_ctrl_cmd_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (kernel_interface_ctrl_cmd_width_adapter_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.sink0_ready           (kernel_interface_ctrl_cmd_width_adapter_src_ready),         //  output,    width = 1,          .ready
		.source0_valid         (kernel_interface_ctrl_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (kernel_interface_ctrl_burst_adapter_source0_data),          //  output,  width = 102,          .data
		.source0_channel       (kernel_interface_ctrl_burst_adapter_source0_channel),       //  output,    width = 8,          .channel
		.source0_startofpacket (kernel_interface_ctrl_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (kernel_interface_ctrl_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (kernel_interface_ctrl_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	board_altera_merlin_demultiplexer_191_lgtc25y cmd_demux (
		.clk                (clk_200_out_clk_clk),                                    //   input,    width = 1,       clk.clk
		.reset              (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (limiter_pipeline_source0_ready),                         //  output,    width = 1,      sink.ready
		.sink_channel       (limiter_pipeline_source0_channel),                       //   input,    width = 8,          .channel
		.sink_data          (limiter_pipeline_source0_data),                          //   input,  width = 138,          .data
		.sink_startofpacket (limiter_pipeline_source0_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (limiter_pipeline_source0_endofpacket),                   //   input,    width = 1,          .endofpacket
		.sink_valid         (limiter_pipeline_source0_valid),                         //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_src0_ready),                                   //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                   //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_src0_data),                                    //  output,  width = 138,          .data
		.src0_channel       (cmd_demux_src0_channel),                                 //  output,    width = 8,          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                           //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                             //  output,    width = 1,          .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                   //   input,    width = 1,      src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                   //  output,    width = 1,          .valid
		.src1_data          (cmd_demux_src1_data),                                    //  output,  width = 138,          .data
		.src1_channel       (cmd_demux_src1_channel),                                 //  output,    width = 8,          .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                           //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                             //  output,    width = 1,          .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                                   //   input,    width = 1,      src2.ready
		.src2_valid         (cmd_demux_src2_valid),                                   //  output,    width = 1,          .valid
		.src2_data          (cmd_demux_src2_data),                                    //  output,  width = 138,          .data
		.src2_channel       (cmd_demux_src2_channel),                                 //  output,    width = 8,          .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                           //  output,    width = 1,          .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                             //  output,    width = 1,          .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                                   //   input,    width = 1,      src3.ready
		.src3_valid         (cmd_demux_src3_valid),                                   //  output,    width = 1,          .valid
		.src3_data          (cmd_demux_src3_data),                                    //  output,  width = 138,          .data
		.src3_channel       (cmd_demux_src3_channel),                                 //  output,    width = 8,          .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                           //  output,    width = 1,          .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket),                             //  output,    width = 1,          .endofpacket
		.src4_ready         (cmd_demux_src4_ready),                                   //   input,    width = 1,      src4.ready
		.src4_valid         (cmd_demux_src4_valid),                                   //  output,    width = 1,          .valid
		.src4_data          (cmd_demux_src4_data),                                    //  output,  width = 138,          .data
		.src4_channel       (cmd_demux_src4_channel),                                 //  output,    width = 8,          .channel
		.src4_startofpacket (cmd_demux_src4_startofpacket),                           //  output,    width = 1,          .startofpacket
		.src4_endofpacket   (cmd_demux_src4_endofpacket),                             //  output,    width = 1,          .endofpacket
		.src5_ready         (cmd_demux_src5_ready),                                   //   input,    width = 1,      src5.ready
		.src5_valid         (cmd_demux_src5_valid),                                   //  output,    width = 1,          .valid
		.src5_data          (cmd_demux_src5_data),                                    //  output,  width = 138,          .data
		.src5_channel       (cmd_demux_src5_channel),                                 //  output,    width = 8,          .channel
		.src5_startofpacket (cmd_demux_src5_startofpacket),                           //  output,    width = 1,          .startofpacket
		.src5_endofpacket   (cmd_demux_src5_endofpacket),                             //  output,    width = 1,          .endofpacket
		.src6_ready         (cmd_demux_src6_ready),                                   //   input,    width = 1,      src6.ready
		.src6_valid         (cmd_demux_src6_valid),                                   //  output,    width = 1,          .valid
		.src6_data          (cmd_demux_src6_data),                                    //  output,  width = 138,          .data
		.src6_channel       (cmd_demux_src6_channel),                                 //  output,    width = 8,          .channel
		.src6_startofpacket (cmd_demux_src6_startofpacket),                           //  output,    width = 1,          .startofpacket
		.src6_endofpacket   (cmd_demux_src6_endofpacket),                             //  output,    width = 1,          .endofpacket
		.src7_ready         (cmd_demux_src7_ready),                                   //   input,    width = 1,      src7.ready
		.src7_valid         (cmd_demux_src7_valid),                                   //  output,    width = 1,          .valid
		.src7_data          (cmd_demux_src7_data),                                    //  output,  width = 138,          .data
		.src7_channel       (cmd_demux_src7_channel),                                 //  output,    width = 8,          .channel
		.src7_startofpacket (cmd_demux_src7_startofpacket),                           //  output,    width = 1,          .startofpacket
		.src7_endofpacket   (cmd_demux_src7_endofpacket)                              //  output,    width = 1,          .endofpacket
	);

	board_altera_merlin_multiplexer_191_2bsc4nq cmd_mux (
		.clk                 (clk_200_out_clk_clk),                                    //   input,    width = 1,       clk.clk
		.reset               (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                      //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_src_valid),                                      //  output,    width = 1,          .valid
		.src_data            (cmd_mux_src_data),                                       //  output,  width = 138,          .data
		.src_channel         (cmd_mux_src_channel),                                    //  output,    width = 8,          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                              //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                //  output,    width = 1,          .endofpacket
		.sink0_ready         (mux_pipeline_source0_ready),                             //  output,    width = 1,     sink0.ready
		.sink0_valid         (mux_pipeline_source0_valid),                             //   input,    width = 1,          .valid
		.sink0_channel       (mux_pipeline_source0_channel),                           //   input,    width = 8,          .channel
		.sink0_data          (mux_pipeline_source0_data),                              //   input,  width = 138,          .data
		.sink0_startofpacket (mux_pipeline_source0_startofpacket),                     //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (mux_pipeline_source0_endofpacket)                        //   input,    width = 1,          .endofpacket
	);

	board_altera_merlin_multiplexer_191_2bsc4nq cmd_mux_001 (
		.clk                 (clk_200_out_clk_clk),                                    //   input,    width = 1,       clk.clk
		.reset               (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                  //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                  //  output,    width = 1,          .valid
		.src_data            (cmd_mux_001_src_data),                                   //  output,  width = 138,          .data
		.src_channel         (cmd_mux_001_src_channel),                                //  output,    width = 8,          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                          //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                            //  output,    width = 1,          .endofpacket
		.sink0_ready         (mux_pipeline_001_source0_ready),                         //  output,    width = 1,     sink0.ready
		.sink0_valid         (mux_pipeline_001_source0_valid),                         //   input,    width = 1,          .valid
		.sink0_channel       (mux_pipeline_001_source0_channel),                       //   input,    width = 8,          .channel
		.sink0_data          (mux_pipeline_001_source0_data),                          //   input,  width = 138,          .data
		.sink0_startofpacket (mux_pipeline_001_source0_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (mux_pipeline_001_source0_endofpacket)                    //   input,    width = 1,          .endofpacket
	);

	board_altera_merlin_multiplexer_191_2bsc4nq cmd_mux_002 (
		.clk                 (clk_200_out_clk_clk),                                    //   input,    width = 1,       clk.clk
		.reset               (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                                  //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_002_src_valid),                                  //  output,    width = 1,          .valid
		.src_data            (cmd_mux_002_src_data),                                   //  output,  width = 138,          .data
		.src_channel         (cmd_mux_002_src_channel),                                //  output,    width = 8,          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                          //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                            //  output,    width = 1,          .endofpacket
		.sink0_ready         (mux_pipeline_002_source0_ready),                         //  output,    width = 1,     sink0.ready
		.sink0_valid         (mux_pipeline_002_source0_valid),                         //   input,    width = 1,          .valid
		.sink0_channel       (mux_pipeline_002_source0_channel),                       //   input,    width = 8,          .channel
		.sink0_data          (mux_pipeline_002_source0_data),                          //   input,  width = 138,          .data
		.sink0_startofpacket (mux_pipeline_002_source0_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (mux_pipeline_002_source0_endofpacket)                    //   input,    width = 1,          .endofpacket
	);

	board_altera_merlin_multiplexer_191_2bsc4nq cmd_mux_003 (
		.clk                 (clk_200_out_clk_clk),                                    //   input,    width = 1,       clk.clk
		.reset               (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                                  //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_003_src_valid),                                  //  output,    width = 1,          .valid
		.src_data            (cmd_mux_003_src_data),                                   //  output,  width = 138,          .data
		.src_channel         (cmd_mux_003_src_channel),                                //  output,    width = 8,          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                          //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                            //  output,    width = 1,          .endofpacket
		.sink0_ready         (mux_pipeline_003_source0_ready),                         //  output,    width = 1,     sink0.ready
		.sink0_valid         (mux_pipeline_003_source0_valid),                         //   input,    width = 1,          .valid
		.sink0_channel       (mux_pipeline_003_source0_channel),                       //   input,    width = 8,          .channel
		.sink0_data          (mux_pipeline_003_source0_data),                          //   input,  width = 138,          .data
		.sink0_startofpacket (mux_pipeline_003_source0_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (mux_pipeline_003_source0_endofpacket)                    //   input,    width = 1,          .endofpacket
	);

	board_altera_merlin_multiplexer_191_2bsc4nq cmd_mux_004 (
		.clk                 (clk_200_out_clk_clk),                                    //   input,    width = 1,       clk.clk
		.reset               (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                                  //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_004_src_valid),                                  //  output,    width = 1,          .valid
		.src_data            (cmd_mux_004_src_data),                                   //  output,  width = 138,          .data
		.src_channel         (cmd_mux_004_src_channel),                                //  output,    width = 8,          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                          //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                            //  output,    width = 1,          .endofpacket
		.sink0_ready         (mux_pipeline_004_source0_ready),                         //  output,    width = 1,     sink0.ready
		.sink0_valid         (mux_pipeline_004_source0_valid),                         //   input,    width = 1,          .valid
		.sink0_channel       (mux_pipeline_004_source0_channel),                       //   input,    width = 8,          .channel
		.sink0_data          (mux_pipeline_004_source0_data),                          //   input,  width = 138,          .data
		.sink0_startofpacket (mux_pipeline_004_source0_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (mux_pipeline_004_source0_endofpacket)                    //   input,    width = 1,          .endofpacket
	);

	board_altera_merlin_multiplexer_191_2bsc4nq cmd_mux_005 (
		.clk                 (clk_200_out_clk_clk),                                    //   input,    width = 1,       clk.clk
		.reset               (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                                  //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_005_src_valid),                                  //  output,    width = 1,          .valid
		.src_data            (cmd_mux_005_src_data),                                   //  output,  width = 138,          .data
		.src_channel         (cmd_mux_005_src_channel),                                //  output,    width = 8,          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                          //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                            //  output,    width = 1,          .endofpacket
		.sink0_ready         (mux_pipeline_005_source0_ready),                         //  output,    width = 1,     sink0.ready
		.sink0_valid         (mux_pipeline_005_source0_valid),                         //   input,    width = 1,          .valid
		.sink0_channel       (mux_pipeline_005_source0_channel),                       //   input,    width = 8,          .channel
		.sink0_data          (mux_pipeline_005_source0_data),                          //   input,  width = 138,          .data
		.sink0_startofpacket (mux_pipeline_005_source0_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (mux_pipeline_005_source0_endofpacket)                    //   input,    width = 1,          .endofpacket
	);

	board_altera_merlin_multiplexer_191_2bsc4nq cmd_mux_006 (
		.clk                 (clk_200_out_clk_clk),                                    //   input,    width = 1,       clk.clk
		.reset               (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                                  //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_006_src_valid),                                  //  output,    width = 1,          .valid
		.src_data            (cmd_mux_006_src_data),                                   //  output,  width = 138,          .data
		.src_channel         (cmd_mux_006_src_channel),                                //  output,    width = 8,          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                          //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                            //  output,    width = 1,          .endofpacket
		.sink0_ready         (mux_pipeline_006_source0_ready),                         //  output,    width = 1,     sink0.ready
		.sink0_valid         (mux_pipeline_006_source0_valid),                         //   input,    width = 1,          .valid
		.sink0_channel       (mux_pipeline_006_source0_channel),                       //   input,    width = 8,          .channel
		.sink0_data          (mux_pipeline_006_source0_data),                          //   input,  width = 138,          .data
		.sink0_startofpacket (mux_pipeline_006_source0_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (mux_pipeline_006_source0_endofpacket)                    //   input,    width = 1,          .endofpacket
	);

	board_altera_merlin_multiplexer_191_2bsc4nq cmd_mux_007 (
		.clk                 (clk_200_out_clk_clk),                                    //   input,    width = 1,       clk.clk
		.reset               (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                                  //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_007_src_valid),                                  //  output,    width = 1,          .valid
		.src_data            (cmd_mux_007_src_data),                                   //  output,  width = 138,          .data
		.src_channel         (cmd_mux_007_src_channel),                                //  output,    width = 8,          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                          //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                            //  output,    width = 1,          .endofpacket
		.sink0_ready         (mux_pipeline_007_source0_ready),                         //  output,    width = 1,     sink0.ready
		.sink0_valid         (mux_pipeline_007_source0_valid),                         //   input,    width = 1,          .valid
		.sink0_channel       (mux_pipeline_007_source0_channel),                       //   input,    width = 8,          .channel
		.sink0_data          (mux_pipeline_007_source0_data),                          //   input,  width = 138,          .data
		.sink0_startofpacket (mux_pipeline_007_source0_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (mux_pipeline_007_source0_endofpacket)                    //   input,    width = 1,          .endofpacket
	);

	board_altera_merlin_demultiplexer_191_wkeid3i rsp_demux (
		.clk                (clk_200_out_clk_clk),                                                 //   input,    width = 1,       clk.clk
		.reset              (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),              //   input,    width = 1, clk_reset.reset
		.sink_ready         (board_irq_ctrl_0_irq_mask_slave_rsp_width_adapter_src_ready),         //  output,    width = 1,      sink.ready
		.sink_channel       (board_irq_ctrl_0_irq_mask_slave_rsp_width_adapter_src_channel),       //   input,    width = 8,          .channel
		.sink_data          (board_irq_ctrl_0_irq_mask_slave_rsp_width_adapter_src_data),          //   input,  width = 138,          .data
		.sink_startofpacket (board_irq_ctrl_0_irq_mask_slave_rsp_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (board_irq_ctrl_0_irq_mask_slave_rsp_width_adapter_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.sink_valid         (board_irq_ctrl_0_irq_mask_slave_rsp_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_src0_ready),                                                //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                                //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_src0_data),                                                 //  output,  width = 138,          .data
		.src0_channel       (rsp_demux_src0_channel),                                              //  output,    width = 8,          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                        //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                                           //  output,    width = 1,          .endofpacket
	);

	board_altera_merlin_demultiplexer_191_wkeid3i rsp_demux_001 (
		.clk                (clk_200_out_clk_clk),                                                 //   input,    width = 1,       clk.clk
		.reset              (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),              //   input,    width = 1, clk_reset.reset
		.sink_ready         (board_irq_ctrl_0_irq_read_slave_rsp_width_adapter_src_ready),         //  output,    width = 1,      sink.ready
		.sink_channel       (board_irq_ctrl_0_irq_read_slave_rsp_width_adapter_src_channel),       //   input,    width = 8,          .channel
		.sink_data          (board_irq_ctrl_0_irq_read_slave_rsp_width_adapter_src_data),          //   input,  width = 138,          .data
		.sink_startofpacket (board_irq_ctrl_0_irq_read_slave_rsp_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (board_irq_ctrl_0_irq_read_slave_rsp_width_adapter_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.sink_valid         (board_irq_ctrl_0_irq_read_slave_rsp_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                            //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                            //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_001_src0_data),                                             //  output,  width = 138,          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                          //  output,    width = 8,          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                                    //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                                       //  output,    width = 1,          .endofpacket
	);

	board_altera_merlin_demultiplexer_191_wkeid3i rsp_demux_002 (
		.clk                (clk_200_out_clk_clk),                                    //   input,    width = 1,       clk.clk
		.reset              (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_003_src_ready),                                   //  output,    width = 1,      sink.ready
		.sink_channel       (router_003_src_channel),                                 //   input,    width = 8,          .channel
		.sink_data          (router_003_src_data),                                    //   input,  width = 138,          .data
		.sink_startofpacket (router_003_src_startofpacket),                           //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                             //   input,    width = 1,          .endofpacket
		.sink_valid         (router_003_src_valid),                                   //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                               //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                               //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_002_src0_data),                                //  output,  width = 138,          .data
		.src0_channel       (rsp_demux_002_src0_channel),                             //  output,    width = 8,          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                       //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                          //  output,    width = 1,          .endofpacket
	);

	board_altera_merlin_demultiplexer_191_wkeid3i rsp_demux_003 (
		.clk                (clk_200_out_clk_clk),                                    //   input,    width = 1,       clk.clk
		.reset              (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_004_src_ready),                                   //  output,    width = 1,      sink.ready
		.sink_channel       (router_004_src_channel),                                 //   input,    width = 8,          .channel
		.sink_data          (router_004_src_data),                                    //   input,  width = 138,          .data
		.sink_startofpacket (router_004_src_startofpacket),                           //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                             //   input,    width = 1,          .endofpacket
		.sink_valid         (router_004_src_valid),                                   //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                               //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                               //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_003_src0_data),                                //  output,  width = 138,          .data
		.src0_channel       (rsp_demux_003_src0_channel),                             //  output,    width = 8,          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                       //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                          //  output,    width = 1,          .endofpacket
	);

	board_altera_merlin_demultiplexer_191_wkeid3i rsp_demux_004 (
		.clk                (clk_200_out_clk_clk),                                       //   input,    width = 1,       clk.clk
		.reset              (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),    //   input,    width = 1, clk_reset.reset
		.sink_ready         (kernel_interface_ctrl_rsp_width_adapter_src_ready),         //  output,    width = 1,      sink.ready
		.sink_channel       (kernel_interface_ctrl_rsp_width_adapter_src_channel),       //   input,    width = 8,          .channel
		.sink_data          (kernel_interface_ctrl_rsp_width_adapter_src_data),          //   input,  width = 138,          .data
		.sink_startofpacket (kernel_interface_ctrl_rsp_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (kernel_interface_ctrl_rsp_width_adapter_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.sink_valid         (kernel_interface_ctrl_rsp_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                                  //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                                  //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_004_src0_data),                                   //  output,  width = 138,          .data
		.src0_channel       (rsp_demux_004_src0_channel),                                //  output,    width = 8,          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                          //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)                             //  output,    width = 1,          .endofpacket
	);

	board_altera_merlin_demultiplexer_191_wkeid3i rsp_demux_005 (
		.clk                (clk_200_out_clk_clk),                                    //   input,    width = 1,       clk.clk
		.reset              (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_006_src_ready),                                   //  output,    width = 1,      sink.ready
		.sink_channel       (router_006_src_channel),                                 //   input,    width = 8,          .channel
		.sink_data          (router_006_src_data),                                    //   input,  width = 138,          .data
		.sink_startofpacket (router_006_src_startofpacket),                           //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                             //   input,    width = 1,          .endofpacket
		.sink_valid         (router_006_src_valid),                                   //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                               //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                               //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_005_src0_data),                                //  output,  width = 138,          .data
		.src0_channel       (rsp_demux_005_src0_channel),                             //  output,    width = 8,          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),                       //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)                          //  output,    width = 1,          .endofpacket
	);

	board_altera_merlin_demultiplexer_191_wkeid3i rsp_demux_006 (
		.clk                (clk_200_out_clk_clk),                                    //   input,    width = 1,       clk.clk
		.reset              (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_007_src_ready),                                   //  output,    width = 1,      sink.ready
		.sink_channel       (router_007_src_channel),                                 //   input,    width = 8,          .channel
		.sink_data          (router_007_src_data),                                    //   input,  width = 138,          .data
		.sink_startofpacket (router_007_src_startofpacket),                           //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                             //   input,    width = 1,          .endofpacket
		.sink_valid         (router_007_src_valid),                                   //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                               //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                               //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_006_src0_data),                                //  output,  width = 138,          .data
		.src0_channel       (rsp_demux_006_src0_channel),                             //  output,    width = 8,          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),                       //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)                          //  output,    width = 1,          .endofpacket
	);

	board_altera_merlin_demultiplexer_191_wkeid3i rsp_demux_007 (
		.clk                (clk_200_out_clk_clk),                                    //   input,    width = 1,       clk.clk
		.reset              (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_008_src_ready),                                   //  output,    width = 1,      sink.ready
		.sink_channel       (router_008_src_channel),                                 //   input,    width = 8,          .channel
		.sink_data          (router_008_src_data),                                    //   input,  width = 138,          .data
		.sink_startofpacket (router_008_src_startofpacket),                           //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                             //   input,    width = 1,          .endofpacket
		.sink_valid         (router_008_src_valid),                                   //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                               //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                               //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_007_src0_data),                                //  output,  width = 138,          .data
		.src0_channel       (rsp_demux_007_src0_channel),                             //  output,    width = 8,          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),                       //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket)                          //  output,    width = 1,          .endofpacket
	);

	board_altera_merlin_multiplexer_191_lg6qpai rsp_mux (
		.clk                 (clk_200_out_clk_clk),                                    //   input,    width = 1,       clk.clk
		.reset               (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                      //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_src_valid),                                      //  output,    width = 1,          .valid
		.src_data            (rsp_mux_src_data),                                       //  output,  width = 138,          .data
		.src_channel         (rsp_mux_src_channel),                                    //  output,    width = 8,          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                              //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                //  output,    width = 1,          .endofpacket
		.sink0_ready         (mux_pipeline_008_source0_ready),                         //  output,    width = 1,     sink0.ready
		.sink0_valid         (mux_pipeline_008_source0_valid),                         //   input,    width = 1,          .valid
		.sink0_channel       (mux_pipeline_008_source0_channel),                       //   input,    width = 8,          .channel
		.sink0_data          (mux_pipeline_008_source0_data),                          //   input,  width = 138,          .data
		.sink0_startofpacket (mux_pipeline_008_source0_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (mux_pipeline_008_source0_endofpacket),                   //   input,    width = 1,          .endofpacket
		.sink1_ready         (mux_pipeline_009_source0_ready),                         //  output,    width = 1,     sink1.ready
		.sink1_valid         (mux_pipeline_009_source0_valid),                         //   input,    width = 1,          .valid
		.sink1_channel       (mux_pipeline_009_source0_channel),                       //   input,    width = 8,          .channel
		.sink1_data          (mux_pipeline_009_source0_data),                          //   input,  width = 138,          .data
		.sink1_startofpacket (mux_pipeline_009_source0_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (mux_pipeline_009_source0_endofpacket),                   //   input,    width = 1,          .endofpacket
		.sink2_ready         (mux_pipeline_010_source0_ready),                         //  output,    width = 1,     sink2.ready
		.sink2_valid         (mux_pipeline_010_source0_valid),                         //   input,    width = 1,          .valid
		.sink2_channel       (mux_pipeline_010_source0_channel),                       //   input,    width = 8,          .channel
		.sink2_data          (mux_pipeline_010_source0_data),                          //   input,  width = 138,          .data
		.sink2_startofpacket (mux_pipeline_010_source0_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink2_endofpacket   (mux_pipeline_010_source0_endofpacket),                   //   input,    width = 1,          .endofpacket
		.sink3_ready         (mux_pipeline_011_source0_ready),                         //  output,    width = 1,     sink3.ready
		.sink3_valid         (mux_pipeline_011_source0_valid),                         //   input,    width = 1,          .valid
		.sink3_channel       (mux_pipeline_011_source0_channel),                       //   input,    width = 8,          .channel
		.sink3_data          (mux_pipeline_011_source0_data),                          //   input,  width = 138,          .data
		.sink3_startofpacket (mux_pipeline_011_source0_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink3_endofpacket   (mux_pipeline_011_source0_endofpacket),                   //   input,    width = 1,          .endofpacket
		.sink4_ready         (mux_pipeline_012_source0_ready),                         //  output,    width = 1,     sink4.ready
		.sink4_valid         (mux_pipeline_012_source0_valid),                         //   input,    width = 1,          .valid
		.sink4_channel       (mux_pipeline_012_source0_channel),                       //   input,    width = 8,          .channel
		.sink4_data          (mux_pipeline_012_source0_data),                          //   input,  width = 138,          .data
		.sink4_startofpacket (mux_pipeline_012_source0_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink4_endofpacket   (mux_pipeline_012_source0_endofpacket),                   //   input,    width = 1,          .endofpacket
		.sink5_ready         (mux_pipeline_013_source0_ready),                         //  output,    width = 1,     sink5.ready
		.sink5_valid         (mux_pipeline_013_source0_valid),                         //   input,    width = 1,          .valid
		.sink5_channel       (mux_pipeline_013_source0_channel),                       //   input,    width = 8,          .channel
		.sink5_data          (mux_pipeline_013_source0_data),                          //   input,  width = 138,          .data
		.sink5_startofpacket (mux_pipeline_013_source0_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink5_endofpacket   (mux_pipeline_013_source0_endofpacket),                   //   input,    width = 1,          .endofpacket
		.sink6_ready         (mux_pipeline_014_source0_ready),                         //  output,    width = 1,     sink6.ready
		.sink6_valid         (mux_pipeline_014_source0_valid),                         //   input,    width = 1,          .valid
		.sink6_channel       (mux_pipeline_014_source0_channel),                       //   input,    width = 8,          .channel
		.sink6_data          (mux_pipeline_014_source0_data),                          //   input,  width = 138,          .data
		.sink6_startofpacket (mux_pipeline_014_source0_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink6_endofpacket   (mux_pipeline_014_source0_endofpacket),                   //   input,    width = 1,          .endofpacket
		.sink7_ready         (mux_pipeline_015_source0_ready),                         //  output,    width = 1,     sink7.ready
		.sink7_valid         (mux_pipeline_015_source0_valid),                         //   input,    width = 1,          .valid
		.sink7_channel       (mux_pipeline_015_source0_channel),                       //   input,    width = 8,          .channel
		.sink7_data          (mux_pipeline_015_source0_data),                          //   input,  width = 138,          .data
		.sink7_startofpacket (mux_pipeline_015_source0_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink7_endofpacket   (mux_pipeline_015_source0_endofpacket)                    //   input,    width = 1,          .endofpacket
	);

	board_altera_merlin_width_adapter_191_vfugsvi #(
		.IN_PKT_ADDR_H                 (53),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (63),
		.IN_PKT_BYTE_CNT_L             (60),
		.IN_PKT_TRANS_COMPRESSED_READ  (54),
		.IN_PKT_TRANS_WRITE            (56),
		.IN_PKT_BURSTWRAP_H            (64),
		.IN_PKT_BURSTWRAP_L            (64),
		.IN_PKT_BURST_SIZE_H           (67),
		.IN_PKT_BURST_SIZE_L           (65),
		.IN_PKT_RESPONSE_STATUS_H      (89),
		.IN_PKT_RESPONSE_STATUS_L      (88),
		.IN_PKT_TRANS_EXCLUSIVE        (59),
		.IN_PKT_BURST_TYPE_H           (69),
		.IN_PKT_BURST_TYPE_L           (68),
		.IN_PKT_ORI_BURST_SIZE_L       (90),
		.IN_PKT_ORI_BURST_SIZE_H       (92),
		.IN_ST_DATA_W                  (102),
		.OUT_PKT_ADDR_H                (89),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (99),
		.OUT_PKT_BYTE_CNT_L            (96),
		.OUT_PKT_TRANS_COMPRESSED_READ (90),
		.OUT_PKT_BURST_SIZE_H          (103),
		.OUT_PKT_BURST_SIZE_L          (101),
		.OUT_PKT_RESPONSE_STATUS_H     (125),
		.OUT_PKT_RESPONSE_STATUS_L     (124),
		.OUT_PKT_TRANS_EXCLUSIVE       (95),
		.OUT_PKT_BURST_TYPE_H          (105),
		.OUT_PKT_BURST_TYPE_L          (104),
		.OUT_PKT_ORI_BURST_SIZE_L      (126),
		.OUT_PKT_ORI_BURST_SIZE_H      (128),
		.OUT_ST_DATA_W                 (138),
		.ST_CHANNEL_W                  (8),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) board_irq_ctrl_0_irq_mask_slave_rsp_width_adapter (
		.clk                  (clk_200_out_clk_clk),                                                 //   input,    width = 1,       clk.clk
		.reset                (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),              //   input,    width = 1, clk_reset.reset
		.in_valid             (router_001_src_valid),                                                //   input,    width = 1,      sink.valid
		.in_channel           (router_001_src_channel),                                              //   input,    width = 8,          .channel
		.in_startofpacket     (router_001_src_startofpacket),                                        //   input,    width = 1,          .startofpacket
		.in_endofpacket       (router_001_src_endofpacket),                                          //   input,    width = 1,          .endofpacket
		.in_ready             (router_001_src_ready),                                                //  output,    width = 1,          .ready
		.in_data              (router_001_src_data),                                                 //   input,  width = 102,          .data
		.out_endofpacket      (board_irq_ctrl_0_irq_mask_slave_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (board_irq_ctrl_0_irq_mask_slave_rsp_width_adapter_src_data),          //  output,  width = 138,          .data
		.out_channel          (board_irq_ctrl_0_irq_mask_slave_rsp_width_adapter_src_channel),       //  output,    width = 8,          .channel
		.out_valid            (board_irq_ctrl_0_irq_mask_slave_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (board_irq_ctrl_0_irq_mask_slave_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (board_irq_ctrl_0_irq_mask_slave_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                               // (terminated),                         
	);

	board_altera_merlin_width_adapter_191_vfugsvi #(
		.IN_PKT_ADDR_H                 (53),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (63),
		.IN_PKT_BYTE_CNT_L             (60),
		.IN_PKT_TRANS_COMPRESSED_READ  (54),
		.IN_PKT_TRANS_WRITE            (56),
		.IN_PKT_BURSTWRAP_H            (64),
		.IN_PKT_BURSTWRAP_L            (64),
		.IN_PKT_BURST_SIZE_H           (67),
		.IN_PKT_BURST_SIZE_L           (65),
		.IN_PKT_RESPONSE_STATUS_H      (89),
		.IN_PKT_RESPONSE_STATUS_L      (88),
		.IN_PKT_TRANS_EXCLUSIVE        (59),
		.IN_PKT_BURST_TYPE_H           (69),
		.IN_PKT_BURST_TYPE_L           (68),
		.IN_PKT_ORI_BURST_SIZE_L       (90),
		.IN_PKT_ORI_BURST_SIZE_H       (92),
		.IN_ST_DATA_W                  (102),
		.OUT_PKT_ADDR_H                (89),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (99),
		.OUT_PKT_BYTE_CNT_L            (96),
		.OUT_PKT_TRANS_COMPRESSED_READ (90),
		.OUT_PKT_BURST_SIZE_H          (103),
		.OUT_PKT_BURST_SIZE_L          (101),
		.OUT_PKT_RESPONSE_STATUS_H     (125),
		.OUT_PKT_RESPONSE_STATUS_L     (124),
		.OUT_PKT_TRANS_EXCLUSIVE       (95),
		.OUT_PKT_BURST_TYPE_H          (105),
		.OUT_PKT_BURST_TYPE_L          (104),
		.OUT_PKT_ORI_BURST_SIZE_L      (126),
		.OUT_PKT_ORI_BURST_SIZE_H      (128),
		.OUT_ST_DATA_W                 (138),
		.ST_CHANNEL_W                  (8),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) board_irq_ctrl_0_irq_read_slave_rsp_width_adapter (
		.clk                  (clk_200_out_clk_clk),                                                 //   input,    width = 1,       clk.clk
		.reset                (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),              //   input,    width = 1, clk_reset.reset
		.in_valid             (router_002_src_valid),                                                //   input,    width = 1,      sink.valid
		.in_channel           (router_002_src_channel),                                              //   input,    width = 8,          .channel
		.in_startofpacket     (router_002_src_startofpacket),                                        //   input,    width = 1,          .startofpacket
		.in_endofpacket       (router_002_src_endofpacket),                                          //   input,    width = 1,          .endofpacket
		.in_ready             (router_002_src_ready),                                                //  output,    width = 1,          .ready
		.in_data              (router_002_src_data),                                                 //   input,  width = 102,          .data
		.out_endofpacket      (board_irq_ctrl_0_irq_read_slave_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (board_irq_ctrl_0_irq_read_slave_rsp_width_adapter_src_data),          //  output,  width = 138,          .data
		.out_channel          (board_irq_ctrl_0_irq_read_slave_rsp_width_adapter_src_channel),       //  output,    width = 8,          .channel
		.out_valid            (board_irq_ctrl_0_irq_read_slave_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (board_irq_ctrl_0_irq_read_slave_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (board_irq_ctrl_0_irq_read_slave_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                               // (terminated),                         
	);

	board_altera_merlin_width_adapter_191_vfugsvi #(
		.IN_PKT_ADDR_H                 (53),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (63),
		.IN_PKT_BYTE_CNT_L             (60),
		.IN_PKT_TRANS_COMPRESSED_READ  (54),
		.IN_PKT_TRANS_WRITE            (56),
		.IN_PKT_BURSTWRAP_H            (64),
		.IN_PKT_BURSTWRAP_L            (64),
		.IN_PKT_BURST_SIZE_H           (67),
		.IN_PKT_BURST_SIZE_L           (65),
		.IN_PKT_RESPONSE_STATUS_H      (89),
		.IN_PKT_RESPONSE_STATUS_L      (88),
		.IN_PKT_TRANS_EXCLUSIVE        (59),
		.IN_PKT_BURST_TYPE_H           (69),
		.IN_PKT_BURST_TYPE_L           (68),
		.IN_PKT_ORI_BURST_SIZE_L       (90),
		.IN_PKT_ORI_BURST_SIZE_H       (92),
		.IN_ST_DATA_W                  (102),
		.OUT_PKT_ADDR_H                (89),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (99),
		.OUT_PKT_BYTE_CNT_L            (96),
		.OUT_PKT_TRANS_COMPRESSED_READ (90),
		.OUT_PKT_BURST_SIZE_H          (103),
		.OUT_PKT_BURST_SIZE_L          (101),
		.OUT_PKT_RESPONSE_STATUS_H     (125),
		.OUT_PKT_RESPONSE_STATUS_L     (124),
		.OUT_PKT_TRANS_EXCLUSIVE       (95),
		.OUT_PKT_BURST_TYPE_H          (105),
		.OUT_PKT_BURST_TYPE_L          (104),
		.OUT_PKT_ORI_BURST_SIZE_L      (126),
		.OUT_PKT_ORI_BURST_SIZE_H      (128),
		.OUT_ST_DATA_W                 (138),
		.ST_CHANNEL_W                  (8),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) kernel_interface_ctrl_rsp_width_adapter (
		.clk                  (clk_200_out_clk_clk),                                       //   input,    width = 1,       clk.clk
		.reset                (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),    //   input,    width = 1, clk_reset.reset
		.in_valid             (router_005_src_valid),                                      //   input,    width = 1,      sink.valid
		.in_channel           (router_005_src_channel),                                    //   input,    width = 8,          .channel
		.in_startofpacket     (router_005_src_startofpacket),                              //   input,    width = 1,          .startofpacket
		.in_endofpacket       (router_005_src_endofpacket),                                //   input,    width = 1,          .endofpacket
		.in_ready             (router_005_src_ready),                                      //  output,    width = 1,          .ready
		.in_data              (router_005_src_data),                                       //   input,  width = 102,          .data
		.out_endofpacket      (kernel_interface_ctrl_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (kernel_interface_ctrl_rsp_width_adapter_src_data),          //  output,  width = 138,          .data
		.out_channel          (kernel_interface_ctrl_rsp_width_adapter_src_channel),       //  output,    width = 8,          .channel
		.out_valid            (kernel_interface_ctrl_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (kernel_interface_ctrl_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (kernel_interface_ctrl_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                     // (terminated),                         
	);

	board_altera_merlin_width_adapter_191_w5iwv2q #(
		.IN_PKT_ADDR_H                 (89),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (99),
		.IN_PKT_BYTE_CNT_L             (96),
		.IN_PKT_TRANS_COMPRESSED_READ  (90),
		.IN_PKT_TRANS_WRITE            (92),
		.IN_PKT_BURSTWRAP_H            (100),
		.IN_PKT_BURSTWRAP_L            (100),
		.IN_PKT_BURST_SIZE_H           (103),
		.IN_PKT_BURST_SIZE_L           (101),
		.IN_PKT_RESPONSE_STATUS_H      (125),
		.IN_PKT_RESPONSE_STATUS_L      (124),
		.IN_PKT_TRANS_EXCLUSIVE        (95),
		.IN_PKT_BURST_TYPE_H           (105),
		.IN_PKT_BURST_TYPE_L           (104),
		.IN_PKT_ORI_BURST_SIZE_L       (126),
		.IN_PKT_ORI_BURST_SIZE_H       (128),
		.IN_ST_DATA_W                  (138),
		.OUT_PKT_ADDR_H                (53),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (63),
		.OUT_PKT_BYTE_CNT_L            (60),
		.OUT_PKT_TRANS_COMPRESSED_READ (54),
		.OUT_PKT_BURST_SIZE_H          (67),
		.OUT_PKT_BURST_SIZE_L          (65),
		.OUT_PKT_RESPONSE_STATUS_H     (89),
		.OUT_PKT_RESPONSE_STATUS_L     (88),
		.OUT_PKT_TRANS_EXCLUSIVE       (59),
		.OUT_PKT_BURST_TYPE_H          (69),
		.OUT_PKT_BURST_TYPE_L          (68),
		.OUT_PKT_ORI_BURST_SIZE_L      (90),
		.OUT_PKT_ORI_BURST_SIZE_H      (92),
		.OUT_ST_DATA_W                 (102),
		.ST_CHANNEL_W                  (8),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) board_irq_ctrl_0_irq_mask_slave_cmd_width_adapter (
		.clk                  (clk_200_out_clk_clk),                                                 //   input,    width = 1,       clk.clk
		.reset                (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),              //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_mux_src_valid),                                                   //   input,    width = 1,      sink.valid
		.in_channel           (cmd_mux_src_channel),                                                 //   input,    width = 8,          .channel
		.in_startofpacket     (cmd_mux_src_startofpacket),                                           //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_mux_src_endofpacket),                                             //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_mux_src_ready),                                                   //  output,    width = 1,          .ready
		.in_data              (cmd_mux_src_data),                                                    //   input,  width = 138,          .data
		.out_endofpacket      (board_irq_ctrl_0_irq_mask_slave_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (board_irq_ctrl_0_irq_mask_slave_cmd_width_adapter_src_data),          //  output,  width = 102,          .data
		.out_channel          (board_irq_ctrl_0_irq_mask_slave_cmd_width_adapter_src_channel),       //  output,    width = 8,          .channel
		.out_valid            (board_irq_ctrl_0_irq_mask_slave_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (board_irq_ctrl_0_irq_mask_slave_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (board_irq_ctrl_0_irq_mask_slave_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                               // (terminated),                         
	);

	board_altera_merlin_width_adapter_191_w5iwv2q #(
		.IN_PKT_ADDR_H                 (89),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (99),
		.IN_PKT_BYTE_CNT_L             (96),
		.IN_PKT_TRANS_COMPRESSED_READ  (90),
		.IN_PKT_TRANS_WRITE            (92),
		.IN_PKT_BURSTWRAP_H            (100),
		.IN_PKT_BURSTWRAP_L            (100),
		.IN_PKT_BURST_SIZE_H           (103),
		.IN_PKT_BURST_SIZE_L           (101),
		.IN_PKT_RESPONSE_STATUS_H      (125),
		.IN_PKT_RESPONSE_STATUS_L      (124),
		.IN_PKT_TRANS_EXCLUSIVE        (95),
		.IN_PKT_BURST_TYPE_H           (105),
		.IN_PKT_BURST_TYPE_L           (104),
		.IN_PKT_ORI_BURST_SIZE_L       (126),
		.IN_PKT_ORI_BURST_SIZE_H       (128),
		.IN_ST_DATA_W                  (138),
		.OUT_PKT_ADDR_H                (53),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (63),
		.OUT_PKT_BYTE_CNT_L            (60),
		.OUT_PKT_TRANS_COMPRESSED_READ (54),
		.OUT_PKT_BURST_SIZE_H          (67),
		.OUT_PKT_BURST_SIZE_L          (65),
		.OUT_PKT_RESPONSE_STATUS_H     (89),
		.OUT_PKT_RESPONSE_STATUS_L     (88),
		.OUT_PKT_TRANS_EXCLUSIVE       (59),
		.OUT_PKT_BURST_TYPE_H          (69),
		.OUT_PKT_BURST_TYPE_L          (68),
		.OUT_PKT_ORI_BURST_SIZE_L      (90),
		.OUT_PKT_ORI_BURST_SIZE_H      (92),
		.OUT_ST_DATA_W                 (102),
		.ST_CHANNEL_W                  (8),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) board_irq_ctrl_0_irq_read_slave_cmd_width_adapter (
		.clk                  (clk_200_out_clk_clk),                                                 //   input,    width = 1,       clk.clk
		.reset                (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),              //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_mux_001_src_valid),                                               //   input,    width = 1,      sink.valid
		.in_channel           (cmd_mux_001_src_channel),                                             //   input,    width = 8,          .channel
		.in_startofpacket     (cmd_mux_001_src_startofpacket),                                       //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_mux_001_src_endofpacket),                                         //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_mux_001_src_ready),                                               //  output,    width = 1,          .ready
		.in_data              (cmd_mux_001_src_data),                                                //   input,  width = 138,          .data
		.out_endofpacket      (board_irq_ctrl_0_irq_read_slave_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (board_irq_ctrl_0_irq_read_slave_cmd_width_adapter_src_data),          //  output,  width = 102,          .data
		.out_channel          (board_irq_ctrl_0_irq_read_slave_cmd_width_adapter_src_channel),       //  output,    width = 8,          .channel
		.out_valid            (board_irq_ctrl_0_irq_read_slave_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (board_irq_ctrl_0_irq_read_slave_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (board_irq_ctrl_0_irq_read_slave_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                               // (terminated),                         
	);

	board_altera_merlin_width_adapter_191_w5iwv2q #(
		.IN_PKT_ADDR_H                 (89),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (99),
		.IN_PKT_BYTE_CNT_L             (96),
		.IN_PKT_TRANS_COMPRESSED_READ  (90),
		.IN_PKT_TRANS_WRITE            (92),
		.IN_PKT_BURSTWRAP_H            (100),
		.IN_PKT_BURSTWRAP_L            (100),
		.IN_PKT_BURST_SIZE_H           (103),
		.IN_PKT_BURST_SIZE_L           (101),
		.IN_PKT_RESPONSE_STATUS_H      (125),
		.IN_PKT_RESPONSE_STATUS_L      (124),
		.IN_PKT_TRANS_EXCLUSIVE        (95),
		.IN_PKT_BURST_TYPE_H           (105),
		.IN_PKT_BURST_TYPE_L           (104),
		.IN_PKT_ORI_BURST_SIZE_L       (126),
		.IN_PKT_ORI_BURST_SIZE_H       (128),
		.IN_ST_DATA_W                  (138),
		.OUT_PKT_ADDR_H                (53),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (63),
		.OUT_PKT_BYTE_CNT_L            (60),
		.OUT_PKT_TRANS_COMPRESSED_READ (54),
		.OUT_PKT_BURST_SIZE_H          (67),
		.OUT_PKT_BURST_SIZE_L          (65),
		.OUT_PKT_RESPONSE_STATUS_H     (89),
		.OUT_PKT_RESPONSE_STATUS_L     (88),
		.OUT_PKT_TRANS_EXCLUSIVE       (59),
		.OUT_PKT_BURST_TYPE_H          (69),
		.OUT_PKT_BURST_TYPE_L          (68),
		.OUT_PKT_ORI_BURST_SIZE_L      (90),
		.OUT_PKT_ORI_BURST_SIZE_H      (92),
		.OUT_ST_DATA_W                 (102),
		.ST_CHANNEL_W                  (8),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) kernel_interface_ctrl_cmd_width_adapter (
		.clk                  (clk_200_out_clk_clk),                                       //   input,    width = 1,       clk.clk
		.reset                (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),    //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_mux_004_src_valid),                                     //   input,    width = 1,      sink.valid
		.in_channel           (cmd_mux_004_src_channel),                                   //   input,    width = 8,          .channel
		.in_startofpacket     (cmd_mux_004_src_startofpacket),                             //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_mux_004_src_endofpacket),                               //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_mux_004_src_ready),                                     //  output,    width = 1,          .ready
		.in_data              (cmd_mux_004_src_data),                                      //   input,  width = 138,          .data
		.out_endofpacket      (kernel_interface_ctrl_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (kernel_interface_ctrl_cmd_width_adapter_src_data),          //  output,  width = 102,          .data
		.out_channel          (kernel_interface_ctrl_cmd_width_adapter_src_channel),       //  output,    width = 8,          .channel
		.out_valid            (kernel_interface_ctrl_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (kernel_interface_ctrl_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (kernel_interface_ctrl_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                     // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (138),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (8),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) limiter_pipeline (
		.clk               (clk_200_out_clk_clk),                                    //   input,    width = 1,       cr0.clk
		.reset             (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (pipe_stage_host_ctrl_m0_limiter_cmd_src_ready),          //  output,    width = 1,     sink0.ready
		.in_valid          (pipe_stage_host_ctrl_m0_limiter_cmd_src_valid),          //   input,    width = 1,          .valid
		.in_startofpacket  (pipe_stage_host_ctrl_m0_limiter_cmd_src_startofpacket),  //   input,    width = 1,          .startofpacket
		.in_endofpacket    (pipe_stage_host_ctrl_m0_limiter_cmd_src_endofpacket),    //   input,    width = 1,          .endofpacket
		.in_data           (pipe_stage_host_ctrl_m0_limiter_cmd_src_data),           //   input,  width = 138,          .data
		.in_channel        (pipe_stage_host_ctrl_m0_limiter_cmd_src_channel),        //   input,    width = 8,          .channel
		.out_ready         (limiter_pipeline_source0_ready),                         //   input,    width = 1,   source0.ready
		.out_valid         (limiter_pipeline_source0_valid),                         //  output,    width = 1,          .valid
		.out_startofpacket (limiter_pipeline_source0_startofpacket),                 //  output,    width = 1,          .startofpacket
		.out_endofpacket   (limiter_pipeline_source0_endofpacket),                   //  output,    width = 1,          .endofpacket
		.out_data          (limiter_pipeline_source0_data),                          //  output,  width = 138,          .data
		.out_channel       (limiter_pipeline_source0_channel),                       //  output,    width = 8,          .channel
		.in_empty          (1'b0),                                                   // (terminated),                         
		.out_empty         (),                                                       // (terminated),                         
		.out_error         (),                                                       // (terminated),                         
		.in_error          (1'b0)                                                    // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (138),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (8),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) limiter_pipeline_001 (
		.clk               (clk_200_out_clk_clk),                                    //   input,    width = 1,       cr0.clk
		.reset             (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (rsp_mux_src_ready),                                      //  output,    width = 1,     sink0.ready
		.in_valid          (rsp_mux_src_valid),                                      //   input,    width = 1,          .valid
		.in_startofpacket  (rsp_mux_src_startofpacket),                              //   input,    width = 1,          .startofpacket
		.in_endofpacket    (rsp_mux_src_endofpacket),                                //   input,    width = 1,          .endofpacket
		.in_data           (rsp_mux_src_data),                                       //   input,  width = 138,          .data
		.in_channel        (rsp_mux_src_channel),                                    //   input,    width = 8,          .channel
		.out_ready         (limiter_pipeline_001_source0_ready),                     //   input,    width = 1,   source0.ready
		.out_valid         (limiter_pipeline_001_source0_valid),                     //  output,    width = 1,          .valid
		.out_startofpacket (limiter_pipeline_001_source0_startofpacket),             //  output,    width = 1,          .startofpacket
		.out_endofpacket   (limiter_pipeline_001_source0_endofpacket),               //  output,    width = 1,          .endofpacket
		.out_data          (limiter_pipeline_001_source0_data),                      //  output,  width = 138,          .data
		.out_channel       (limiter_pipeline_001_source0_channel),                   //  output,    width = 8,          .channel
		.in_empty          (1'b0),                                                   // (terminated),                         
		.out_empty         (),                                                       // (terminated),                         
		.out_error         (),                                                       // (terminated),                         
		.in_error          (1'b0)                                                    // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (102),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (8),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) agent_pipeline (
		.clk               (clk_200_out_clk_clk),                                                 //   input,    width = 1,       cr0.clk
		.reset             (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),              //   input,    width = 1, cr0_reset.reset
		.in_ready          (board_irq_ctrl_0_irq_mask_slave_burst_adapter_source0_ready),         //  output,    width = 1,     sink0.ready
		.in_valid          (board_irq_ctrl_0_irq_mask_slave_burst_adapter_source0_valid),         //   input,    width = 1,          .valid
		.in_startofpacket  (board_irq_ctrl_0_irq_mask_slave_burst_adapter_source0_startofpacket), //   input,    width = 1,          .startofpacket
		.in_endofpacket    (board_irq_ctrl_0_irq_mask_slave_burst_adapter_source0_endofpacket),   //   input,    width = 1,          .endofpacket
		.in_data           (board_irq_ctrl_0_irq_mask_slave_burst_adapter_source0_data),          //   input,  width = 102,          .data
		.in_channel        (board_irq_ctrl_0_irq_mask_slave_burst_adapter_source0_channel),       //   input,    width = 8,          .channel
		.out_ready         (agent_pipeline_source0_ready),                                        //   input,    width = 1,   source0.ready
		.out_valid         (agent_pipeline_source0_valid),                                        //  output,    width = 1,          .valid
		.out_startofpacket (agent_pipeline_source0_startofpacket),                                //  output,    width = 1,          .startofpacket
		.out_endofpacket   (agent_pipeline_source0_endofpacket),                                  //  output,    width = 1,          .endofpacket
		.out_data          (agent_pipeline_source0_data),                                         //  output,  width = 102,          .data
		.out_channel       (agent_pipeline_source0_channel),                                      //  output,    width = 8,          .channel
		.in_empty          (1'b0),                                                                // (terminated),                         
		.out_empty         (),                                                                    // (terminated),                         
		.out_error         (),                                                                    // (terminated),                         
		.in_error          (1'b0)                                                                 // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (102),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) agent_pipeline_001 (
		.clk               (clk_200_out_clk_clk),                                    //   input,    width = 1,       cr0.clk
		.reset             (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (board_irq_ctrl_0_irq_mask_slave_agent_rp_ready),         //  output,    width = 1,     sink0.ready
		.in_valid          (board_irq_ctrl_0_irq_mask_slave_agent_rp_valid),         //   input,    width = 1,          .valid
		.in_startofpacket  (board_irq_ctrl_0_irq_mask_slave_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.in_endofpacket    (board_irq_ctrl_0_irq_mask_slave_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.in_data           (board_irq_ctrl_0_irq_mask_slave_agent_rp_data),          //   input,  width = 102,          .data
		.out_ready         (agent_pipeline_001_source0_ready),                       //   input,    width = 1,   source0.ready
		.out_valid         (agent_pipeline_001_source0_valid),                       //  output,    width = 1,          .valid
		.out_startofpacket (agent_pipeline_001_source0_startofpacket),               //  output,    width = 1,          .startofpacket
		.out_endofpacket   (agent_pipeline_001_source0_endofpacket),                 //  output,    width = 1,          .endofpacket
		.out_data          (agent_pipeline_001_source0_data),                        //  output,  width = 102,          .data
		.in_empty          (1'b0),                                                   // (terminated),                         
		.out_empty         (),                                                       // (terminated),                         
		.out_error         (),                                                       // (terminated),                         
		.in_error          (1'b0),                                                   // (terminated),                         
		.out_channel       (),                                                       // (terminated),                         
		.in_channel        (1'b0)                                                    // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (102),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (8),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) agent_pipeline_002 (
		.clk               (clk_200_out_clk_clk),                                                 //   input,    width = 1,       cr0.clk
		.reset             (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),              //   input,    width = 1, cr0_reset.reset
		.in_ready          (board_irq_ctrl_0_irq_read_slave_burst_adapter_source0_ready),         //  output,    width = 1,     sink0.ready
		.in_valid          (board_irq_ctrl_0_irq_read_slave_burst_adapter_source0_valid),         //   input,    width = 1,          .valid
		.in_startofpacket  (board_irq_ctrl_0_irq_read_slave_burst_adapter_source0_startofpacket), //   input,    width = 1,          .startofpacket
		.in_endofpacket    (board_irq_ctrl_0_irq_read_slave_burst_adapter_source0_endofpacket),   //   input,    width = 1,          .endofpacket
		.in_data           (board_irq_ctrl_0_irq_read_slave_burst_adapter_source0_data),          //   input,  width = 102,          .data
		.in_channel        (board_irq_ctrl_0_irq_read_slave_burst_adapter_source0_channel),       //   input,    width = 8,          .channel
		.out_ready         (agent_pipeline_002_source0_ready),                                    //   input,    width = 1,   source0.ready
		.out_valid         (agent_pipeline_002_source0_valid),                                    //  output,    width = 1,          .valid
		.out_startofpacket (agent_pipeline_002_source0_startofpacket),                            //  output,    width = 1,          .startofpacket
		.out_endofpacket   (agent_pipeline_002_source0_endofpacket),                              //  output,    width = 1,          .endofpacket
		.out_data          (agent_pipeline_002_source0_data),                                     //  output,  width = 102,          .data
		.out_channel       (agent_pipeline_002_source0_channel),                                  //  output,    width = 8,          .channel
		.in_empty          (1'b0),                                                                // (terminated),                         
		.out_empty         (),                                                                    // (terminated),                         
		.out_error         (),                                                                    // (terminated),                         
		.in_error          (1'b0)                                                                 // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (102),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) agent_pipeline_003 (
		.clk               (clk_200_out_clk_clk),                                    //   input,    width = 1,       cr0.clk
		.reset             (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (board_irq_ctrl_0_irq_read_slave_agent_rp_ready),         //  output,    width = 1,     sink0.ready
		.in_valid          (board_irq_ctrl_0_irq_read_slave_agent_rp_valid),         //   input,    width = 1,          .valid
		.in_startofpacket  (board_irq_ctrl_0_irq_read_slave_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.in_endofpacket    (board_irq_ctrl_0_irq_read_slave_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.in_data           (board_irq_ctrl_0_irq_read_slave_agent_rp_data),          //   input,  width = 102,          .data
		.out_ready         (agent_pipeline_003_source0_ready),                       //   input,    width = 1,   source0.ready
		.out_valid         (agent_pipeline_003_source0_valid),                       //  output,    width = 1,          .valid
		.out_startofpacket (agent_pipeline_003_source0_startofpacket),               //  output,    width = 1,          .startofpacket
		.out_endofpacket   (agent_pipeline_003_source0_endofpacket),                 //  output,    width = 1,          .endofpacket
		.out_data          (agent_pipeline_003_source0_data),                        //  output,  width = 102,          .data
		.in_empty          (1'b0),                                                   // (terminated),                         
		.out_empty         (),                                                       // (terminated),                         
		.out_error         (),                                                       // (terminated),                         
		.in_error          (1'b0),                                                   // (terminated),                         
		.out_channel       (),                                                       // (terminated),                         
		.in_channel        (1'b0)                                                    // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (138),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (8),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) agent_pipeline_004 (
		.clk               (clk_200_out_clk_clk),                                    //   input,    width = 1,       cr0.clk
		.reset             (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (cmd_mux_002_src_ready),                                  //  output,    width = 1,     sink0.ready
		.in_valid          (cmd_mux_002_src_valid),                                  //   input,    width = 1,          .valid
		.in_startofpacket  (cmd_mux_002_src_startofpacket),                          //   input,    width = 1,          .startofpacket
		.in_endofpacket    (cmd_mux_002_src_endofpacket),                            //   input,    width = 1,          .endofpacket
		.in_data           (cmd_mux_002_src_data),                                   //   input,  width = 138,          .data
		.in_channel        (cmd_mux_002_src_channel),                                //   input,    width = 8,          .channel
		.out_ready         (agent_pipeline_004_source0_ready),                       //   input,    width = 1,   source0.ready
		.out_valid         (agent_pipeline_004_source0_valid),                       //  output,    width = 1,          .valid
		.out_startofpacket (agent_pipeline_004_source0_startofpacket),               //  output,    width = 1,          .startofpacket
		.out_endofpacket   (agent_pipeline_004_source0_endofpacket),                 //  output,    width = 1,          .endofpacket
		.out_data          (agent_pipeline_004_source0_data),                        //  output,  width = 138,          .data
		.out_channel       (agent_pipeline_004_source0_channel),                     //  output,    width = 8,          .channel
		.in_empty          (1'b0),                                                   // (terminated),                         
		.out_empty         (),                                                       // (terminated),                         
		.out_error         (),                                                       // (terminated),                         
		.in_error          (1'b0)                                                    // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (138),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) agent_pipeline_005 (
		.clk               (clk_200_out_clk_clk),                                            //   input,    width = 1,       cr0.clk
		.reset             (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),         //   input,    width = 1, cr0_reset.reset
		.in_ready          (board_afu_id_avmm_slave_0_afu_cfg_slave_agent_rp_ready),         //  output,    width = 1,     sink0.ready
		.in_valid          (board_afu_id_avmm_slave_0_afu_cfg_slave_agent_rp_valid),         //   input,    width = 1,          .valid
		.in_startofpacket  (board_afu_id_avmm_slave_0_afu_cfg_slave_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.in_endofpacket    (board_afu_id_avmm_slave_0_afu_cfg_slave_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.in_data           (board_afu_id_avmm_slave_0_afu_cfg_slave_agent_rp_data),          //   input,  width = 138,          .data
		.out_ready         (agent_pipeline_005_source0_ready),                               //   input,    width = 1,   source0.ready
		.out_valid         (agent_pipeline_005_source0_valid),                               //  output,    width = 1,          .valid
		.out_startofpacket (agent_pipeline_005_source0_startofpacket),                       //  output,    width = 1,          .startofpacket
		.out_endofpacket   (agent_pipeline_005_source0_endofpacket),                         //  output,    width = 1,          .endofpacket
		.out_data          (agent_pipeline_005_source0_data),                                //  output,  width = 138,          .data
		.in_empty          (1'b0),                                                           // (terminated),                         
		.out_empty         (),                                                               // (terminated),                         
		.out_error         (),                                                               // (terminated),                         
		.in_error          (1'b0),                                                           // (terminated),                         
		.out_channel       (),                                                               // (terminated),                         
		.in_channel        (1'b0)                                                            // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (138),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (8),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) agent_pipeline_006 (
		.clk               (clk_200_out_clk_clk),                                    //   input,    width = 1,       cr0.clk
		.reset             (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (cmd_mux_003_src_ready),                                  //  output,    width = 1,     sink0.ready
		.in_valid          (cmd_mux_003_src_valid),                                  //   input,    width = 1,          .valid
		.in_startofpacket  (cmd_mux_003_src_startofpacket),                          //   input,    width = 1,          .startofpacket
		.in_endofpacket    (cmd_mux_003_src_endofpacket),                            //   input,    width = 1,          .endofpacket
		.in_data           (cmd_mux_003_src_data),                                   //   input,  width = 138,          .data
		.in_channel        (cmd_mux_003_src_channel),                                //   input,    width = 8,          .channel
		.out_ready         (agent_pipeline_006_source0_ready),                       //   input,    width = 1,   source0.ready
		.out_valid         (agent_pipeline_006_source0_valid),                       //  output,    width = 1,          .valid
		.out_startofpacket (agent_pipeline_006_source0_startofpacket),               //  output,    width = 1,          .startofpacket
		.out_endofpacket   (agent_pipeline_006_source0_endofpacket),                 //  output,    width = 1,          .endofpacket
		.out_data          (agent_pipeline_006_source0_data),                        //  output,  width = 138,          .data
		.out_channel       (agent_pipeline_006_source0_channel),                     //  output,    width = 8,          .channel
		.in_empty          (1'b0),                                                   // (terminated),                         
		.out_empty         (),                                                       // (terminated),                         
		.out_error         (),                                                       // (terminated),                         
		.in_error          (1'b0)                                                    // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (138),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) agent_pipeline_007 (
		.clk               (clk_200_out_clk_clk),                                    //   input,    width = 1,       cr0.clk
		.reset             (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (ddr_board_ase_0_avmm_pipe_slave_agent_rp_ready),         //  output,    width = 1,     sink0.ready
		.in_valid          (ddr_board_ase_0_avmm_pipe_slave_agent_rp_valid),         //   input,    width = 1,          .valid
		.in_startofpacket  (ddr_board_ase_0_avmm_pipe_slave_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.in_endofpacket    (ddr_board_ase_0_avmm_pipe_slave_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.in_data           (ddr_board_ase_0_avmm_pipe_slave_agent_rp_data),          //   input,  width = 138,          .data
		.out_ready         (agent_pipeline_007_source0_ready),                       //   input,    width = 1,   source0.ready
		.out_valid         (agent_pipeline_007_source0_valid),                       //  output,    width = 1,          .valid
		.out_startofpacket (agent_pipeline_007_source0_startofpacket),               //  output,    width = 1,          .startofpacket
		.out_endofpacket   (agent_pipeline_007_source0_endofpacket),                 //  output,    width = 1,          .endofpacket
		.out_data          (agent_pipeline_007_source0_data),                        //  output,  width = 138,          .data
		.in_empty          (1'b0),                                                   // (terminated),                         
		.out_empty         (),                                                       // (terminated),                         
		.out_error         (),                                                       // (terminated),                         
		.in_error          (1'b0),                                                   // (terminated),                         
		.out_channel       (),                                                       // (terminated),                         
		.in_channel        (1'b0)                                                    // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (102),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (8),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) agent_pipeline_008 (
		.clk               (clk_200_out_clk_clk),                                       //   input,    width = 1,       cr0.clk
		.reset             (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset),    //   input,    width = 1, cr0_reset.reset
		.in_ready          (kernel_interface_ctrl_burst_adapter_source0_ready),         //  output,    width = 1,     sink0.ready
		.in_valid          (kernel_interface_ctrl_burst_adapter_source0_valid),         //   input,    width = 1,          .valid
		.in_startofpacket  (kernel_interface_ctrl_burst_adapter_source0_startofpacket), //   input,    width = 1,          .startofpacket
		.in_endofpacket    (kernel_interface_ctrl_burst_adapter_source0_endofpacket),   //   input,    width = 1,          .endofpacket
		.in_data           (kernel_interface_ctrl_burst_adapter_source0_data),          //   input,  width = 102,          .data
		.in_channel        (kernel_interface_ctrl_burst_adapter_source0_channel),       //   input,    width = 8,          .channel
		.out_ready         (agent_pipeline_008_source0_ready),                          //   input,    width = 1,   source0.ready
		.out_valid         (agent_pipeline_008_source0_valid),                          //  output,    width = 1,          .valid
		.out_startofpacket (agent_pipeline_008_source0_startofpacket),                  //  output,    width = 1,          .startofpacket
		.out_endofpacket   (agent_pipeline_008_source0_endofpacket),                    //  output,    width = 1,          .endofpacket
		.out_data          (agent_pipeline_008_source0_data),                           //  output,  width = 102,          .data
		.out_channel       (agent_pipeline_008_source0_channel),                        //  output,    width = 8,          .channel
		.in_empty          (1'b0),                                                      // (terminated),                         
		.out_empty         (),                                                          // (terminated),                         
		.out_error         (),                                                          // (terminated),                         
		.in_error          (1'b0)                                                       // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (102),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) agent_pipeline_009 (
		.clk               (clk_200_out_clk_clk),                                    //   input,    width = 1,       cr0.clk
		.reset             (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (kernel_interface_ctrl_agent_rp_ready),                   //  output,    width = 1,     sink0.ready
		.in_valid          (kernel_interface_ctrl_agent_rp_valid),                   //   input,    width = 1,          .valid
		.in_startofpacket  (kernel_interface_ctrl_agent_rp_startofpacket),           //   input,    width = 1,          .startofpacket
		.in_endofpacket    (kernel_interface_ctrl_agent_rp_endofpacket),             //   input,    width = 1,          .endofpacket
		.in_data           (kernel_interface_ctrl_agent_rp_data),                    //   input,  width = 102,          .data
		.out_ready         (agent_pipeline_009_source0_ready),                       //   input,    width = 1,   source0.ready
		.out_valid         (agent_pipeline_009_source0_valid),                       //  output,    width = 1,          .valid
		.out_startofpacket (agent_pipeline_009_source0_startofpacket),               //  output,    width = 1,          .startofpacket
		.out_endofpacket   (agent_pipeline_009_source0_endofpacket),                 //  output,    width = 1,          .endofpacket
		.out_data          (agent_pipeline_009_source0_data),                        //  output,  width = 102,          .data
		.in_empty          (1'b0),                                                   // (terminated),                         
		.out_empty         (),                                                       // (terminated),                         
		.out_error         (),                                                       // (terminated),                         
		.in_error          (1'b0),                                                   // (terminated),                         
		.out_channel       (),                                                       // (terminated),                         
		.in_channel        (1'b0)                                                    // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (138),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (8),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) agent_pipeline_010 (
		.clk               (clk_200_out_clk_clk),                                    //   input,    width = 1,       cr0.clk
		.reset             (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (cmd_mux_005_src_ready),                                  //  output,    width = 1,     sink0.ready
		.in_valid          (cmd_mux_005_src_valid),                                  //   input,    width = 1,          .valid
		.in_startofpacket  (cmd_mux_005_src_startofpacket),                          //   input,    width = 1,          .startofpacket
		.in_endofpacket    (cmd_mux_005_src_endofpacket),                            //   input,    width = 1,          .endofpacket
		.in_data           (cmd_mux_005_src_data),                                   //   input,  width = 138,          .data
		.in_channel        (cmd_mux_005_src_channel),                                //   input,    width = 8,          .channel
		.out_ready         (agent_pipeline_010_source0_ready),                       //   input,    width = 1,   source0.ready
		.out_valid         (agent_pipeline_010_source0_valid),                       //  output,    width = 1,          .valid
		.out_startofpacket (agent_pipeline_010_source0_startofpacket),               //  output,    width = 1,          .startofpacket
		.out_endofpacket   (agent_pipeline_010_source0_endofpacket),                 //  output,    width = 1,          .endofpacket
		.out_data          (agent_pipeline_010_source0_data),                        //  output,  width = 138,          .data
		.out_channel       (agent_pipeline_010_source0_channel),                     //  output,    width = 8,          .channel
		.in_empty          (1'b0),                                                   // (terminated),                         
		.out_empty         (),                                                       // (terminated),                         
		.out_error         (),                                                       // (terminated),                         
		.in_error          (1'b0)                                                    // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (138),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) agent_pipeline_011 (
		.clk               (clk_200_out_clk_clk),                                    //   input,    width = 1,       cr0.clk
		.reset             (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (ddr_board_msgdma_bbb_0_csr_agent_rp_ready),              //  output,    width = 1,     sink0.ready
		.in_valid          (ddr_board_msgdma_bbb_0_csr_agent_rp_valid),              //   input,    width = 1,          .valid
		.in_startofpacket  (ddr_board_msgdma_bbb_0_csr_agent_rp_startofpacket),      //   input,    width = 1,          .startofpacket
		.in_endofpacket    (ddr_board_msgdma_bbb_0_csr_agent_rp_endofpacket),        //   input,    width = 1,          .endofpacket
		.in_data           (ddr_board_msgdma_bbb_0_csr_agent_rp_data),               //   input,  width = 138,          .data
		.out_ready         (agent_pipeline_011_source0_ready),                       //   input,    width = 1,   source0.ready
		.out_valid         (agent_pipeline_011_source0_valid),                       //  output,    width = 1,          .valid
		.out_startofpacket (agent_pipeline_011_source0_startofpacket),               //  output,    width = 1,          .startofpacket
		.out_endofpacket   (agent_pipeline_011_source0_endofpacket),                 //  output,    width = 1,          .endofpacket
		.out_data          (agent_pipeline_011_source0_data),                        //  output,  width = 138,          .data
		.in_empty          (1'b0),                                                   // (terminated),                         
		.out_empty         (),                                                       // (terminated),                         
		.out_error         (),                                                       // (terminated),                         
		.in_error          (1'b0),                                                   // (terminated),                         
		.out_channel       (),                                                       // (terminated),                         
		.in_channel        (1'b0)                                                    // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (138),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (8),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) agent_pipeline_012 (
		.clk               (clk_200_out_clk_clk),                                    //   input,    width = 1,       cr0.clk
		.reset             (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (cmd_mux_006_src_ready),                                  //  output,    width = 1,     sink0.ready
		.in_valid          (cmd_mux_006_src_valid),                                  //   input,    width = 1,          .valid
		.in_startofpacket  (cmd_mux_006_src_startofpacket),                          //   input,    width = 1,          .startofpacket
		.in_endofpacket    (cmd_mux_006_src_endofpacket),                            //   input,    width = 1,          .endofpacket
		.in_data           (cmd_mux_006_src_data),                                   //   input,  width = 138,          .data
		.in_channel        (cmd_mux_006_src_channel),                                //   input,    width = 8,          .channel
		.out_ready         (agent_pipeline_012_source0_ready),                       //   input,    width = 1,   source0.ready
		.out_valid         (agent_pipeline_012_source0_valid),                       //  output,    width = 1,          .valid
		.out_startofpacket (agent_pipeline_012_source0_startofpacket),               //  output,    width = 1,          .startofpacket
		.out_endofpacket   (agent_pipeline_012_source0_endofpacket),                 //  output,    width = 1,          .endofpacket
		.out_data          (agent_pipeline_012_source0_data),                        //  output,  width = 138,          .data
		.out_channel       (agent_pipeline_012_source0_channel),                     //  output,    width = 8,          .channel
		.in_empty          (1'b0),                                                   // (terminated),                         
		.out_empty         (),                                                       // (terminated),                         
		.out_error         (),                                                       // (terminated),                         
		.in_error          (1'b0)                                                    // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (138),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) agent_pipeline_013 (
		.clk               (clk_200_out_clk_clk),                                    //   input,    width = 1,       cr0.clk
		.reset             (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (ddr_board_msgdma_bbb_1_csr_agent_rp_ready),              //  output,    width = 1,     sink0.ready
		.in_valid          (ddr_board_msgdma_bbb_1_csr_agent_rp_valid),              //   input,    width = 1,          .valid
		.in_startofpacket  (ddr_board_msgdma_bbb_1_csr_agent_rp_startofpacket),      //   input,    width = 1,          .startofpacket
		.in_endofpacket    (ddr_board_msgdma_bbb_1_csr_agent_rp_endofpacket),        //   input,    width = 1,          .endofpacket
		.in_data           (ddr_board_msgdma_bbb_1_csr_agent_rp_data),               //   input,  width = 138,          .data
		.out_ready         (agent_pipeline_013_source0_ready),                       //   input,    width = 1,   source0.ready
		.out_valid         (agent_pipeline_013_source0_valid),                       //  output,    width = 1,          .valid
		.out_startofpacket (agent_pipeline_013_source0_startofpacket),               //  output,    width = 1,          .startofpacket
		.out_endofpacket   (agent_pipeline_013_source0_endofpacket),                 //  output,    width = 1,          .endofpacket
		.out_data          (agent_pipeline_013_source0_data),                        //  output,  width = 138,          .data
		.in_empty          (1'b0),                                                   // (terminated),                         
		.out_empty         (),                                                       // (terminated),                         
		.out_error         (),                                                       // (terminated),                         
		.in_error          (1'b0),                                                   // (terminated),                         
		.out_channel       (),                                                       // (terminated),                         
		.in_channel        (1'b0)                                                    // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (138),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (8),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) agent_pipeline_014 (
		.clk               (clk_200_out_clk_clk),                                    //   input,    width = 1,       cr0.clk
		.reset             (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (cmd_mux_007_src_ready),                                  //  output,    width = 1,     sink0.ready
		.in_valid          (cmd_mux_007_src_valid),                                  //   input,    width = 1,          .valid
		.in_startofpacket  (cmd_mux_007_src_startofpacket),                          //   input,    width = 1,          .startofpacket
		.in_endofpacket    (cmd_mux_007_src_endofpacket),                            //   input,    width = 1,          .endofpacket
		.in_data           (cmd_mux_007_src_data),                                   //   input,  width = 138,          .data
		.in_channel        (cmd_mux_007_src_channel),                                //   input,    width = 8,          .channel
		.out_ready         (agent_pipeline_014_source0_ready),                       //   input,    width = 1,   source0.ready
		.out_valid         (agent_pipeline_014_source0_valid),                       //  output,    width = 1,          .valid
		.out_startofpacket (agent_pipeline_014_source0_startofpacket),               //  output,    width = 1,          .startofpacket
		.out_endofpacket   (agent_pipeline_014_source0_endofpacket),                 //  output,    width = 1,          .endofpacket
		.out_data          (agent_pipeline_014_source0_data),                        //  output,  width = 138,          .data
		.out_channel       (agent_pipeline_014_source0_channel),                     //  output,    width = 8,          .channel
		.in_empty          (1'b0),                                                   // (terminated),                         
		.out_empty         (),                                                       // (terminated),                         
		.out_error         (),                                                       // (terminated),                         
		.in_error          (1'b0)                                                    // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (138),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) agent_pipeline_015 (
		.clk               (clk_200_out_clk_clk),                                    //   input,    width = 1,       cr0.clk
		.reset             (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (ddr_board_null_dfh_afu_id_agent_rp_ready),               //  output,    width = 1,     sink0.ready
		.in_valid          (ddr_board_null_dfh_afu_id_agent_rp_valid),               //   input,    width = 1,          .valid
		.in_startofpacket  (ddr_board_null_dfh_afu_id_agent_rp_startofpacket),       //   input,    width = 1,          .startofpacket
		.in_endofpacket    (ddr_board_null_dfh_afu_id_agent_rp_endofpacket),         //   input,    width = 1,          .endofpacket
		.in_data           (ddr_board_null_dfh_afu_id_agent_rp_data),                //   input,  width = 138,          .data
		.out_ready         (agent_pipeline_015_source0_ready),                       //   input,    width = 1,   source0.ready
		.out_valid         (agent_pipeline_015_source0_valid),                       //  output,    width = 1,          .valid
		.out_startofpacket (agent_pipeline_015_source0_startofpacket),               //  output,    width = 1,          .startofpacket
		.out_endofpacket   (agent_pipeline_015_source0_endofpacket),                 //  output,    width = 1,          .endofpacket
		.out_data          (agent_pipeline_015_source0_data),                        //  output,  width = 138,          .data
		.in_empty          (1'b0),                                                   // (terminated),                         
		.out_empty         (),                                                       // (terminated),                         
		.out_error         (),                                                       // (terminated),                         
		.in_error          (1'b0),                                                   // (terminated),                         
		.out_channel       (),                                                       // (terminated),                         
		.in_channel        (1'b0)                                                    // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (138),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (8),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) mux_pipeline (
		.clk               (clk_200_out_clk_clk),                                    //   input,    width = 1,       cr0.clk
		.reset             (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (cmd_demux_src0_ready),                                   //  output,    width = 1,     sink0.ready
		.in_valid          (cmd_demux_src0_valid),                                   //   input,    width = 1,          .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),                           //   input,    width = 1,          .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                             //   input,    width = 1,          .endofpacket
		.in_data           (cmd_demux_src0_data),                                    //   input,  width = 138,          .data
		.in_channel        (cmd_demux_src0_channel),                                 //   input,    width = 8,          .channel
		.out_ready         (mux_pipeline_source0_ready),                             //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_source0_valid),                             //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_source0_startofpacket),                     //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_source0_endofpacket),                       //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_source0_data),                              //  output,  width = 138,          .data
		.out_channel       (mux_pipeline_source0_channel),                           //  output,    width = 8,          .channel
		.in_empty          (1'b0),                                                   // (terminated),                         
		.out_empty         (),                                                       // (terminated),                         
		.out_error         (),                                                       // (terminated),                         
		.in_error          (1'b0)                                                    // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (138),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (8),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) mux_pipeline_001 (
		.clk               (clk_200_out_clk_clk),                                    //   input,    width = 1,       cr0.clk
		.reset             (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (cmd_demux_src1_ready),                                   //  output,    width = 1,     sink0.ready
		.in_valid          (cmd_demux_src1_valid),                                   //   input,    width = 1,          .valid
		.in_startofpacket  (cmd_demux_src1_startofpacket),                           //   input,    width = 1,          .startofpacket
		.in_endofpacket    (cmd_demux_src1_endofpacket),                             //   input,    width = 1,          .endofpacket
		.in_data           (cmd_demux_src1_data),                                    //   input,  width = 138,          .data
		.in_channel        (cmd_demux_src1_channel),                                 //   input,    width = 8,          .channel
		.out_ready         (mux_pipeline_001_source0_ready),                         //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_001_source0_valid),                         //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_001_source0_startofpacket),                 //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_001_source0_endofpacket),                   //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_001_source0_data),                          //  output,  width = 138,          .data
		.out_channel       (mux_pipeline_001_source0_channel),                       //  output,    width = 8,          .channel
		.in_empty          (1'b0),                                                   // (terminated),                         
		.out_empty         (),                                                       // (terminated),                         
		.out_error         (),                                                       // (terminated),                         
		.in_error          (1'b0)                                                    // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (138),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (8),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) mux_pipeline_002 (
		.clk               (clk_200_out_clk_clk),                                    //   input,    width = 1,       cr0.clk
		.reset             (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (cmd_demux_src2_ready),                                   //  output,    width = 1,     sink0.ready
		.in_valid          (cmd_demux_src2_valid),                                   //   input,    width = 1,          .valid
		.in_startofpacket  (cmd_demux_src2_startofpacket),                           //   input,    width = 1,          .startofpacket
		.in_endofpacket    (cmd_demux_src2_endofpacket),                             //   input,    width = 1,          .endofpacket
		.in_data           (cmd_demux_src2_data),                                    //   input,  width = 138,          .data
		.in_channel        (cmd_demux_src2_channel),                                 //   input,    width = 8,          .channel
		.out_ready         (mux_pipeline_002_source0_ready),                         //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_002_source0_valid),                         //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_002_source0_startofpacket),                 //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_002_source0_endofpacket),                   //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_002_source0_data),                          //  output,  width = 138,          .data
		.out_channel       (mux_pipeline_002_source0_channel),                       //  output,    width = 8,          .channel
		.in_empty          (1'b0),                                                   // (terminated),                         
		.out_empty         (),                                                       // (terminated),                         
		.out_error         (),                                                       // (terminated),                         
		.in_error          (1'b0)                                                    // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (138),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (8),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) mux_pipeline_003 (
		.clk               (clk_200_out_clk_clk),                                    //   input,    width = 1,       cr0.clk
		.reset             (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (cmd_demux_src3_ready),                                   //  output,    width = 1,     sink0.ready
		.in_valid          (cmd_demux_src3_valid),                                   //   input,    width = 1,          .valid
		.in_startofpacket  (cmd_demux_src3_startofpacket),                           //   input,    width = 1,          .startofpacket
		.in_endofpacket    (cmd_demux_src3_endofpacket),                             //   input,    width = 1,          .endofpacket
		.in_data           (cmd_demux_src3_data),                                    //   input,  width = 138,          .data
		.in_channel        (cmd_demux_src3_channel),                                 //   input,    width = 8,          .channel
		.out_ready         (mux_pipeline_003_source0_ready),                         //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_003_source0_valid),                         //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_003_source0_startofpacket),                 //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_003_source0_endofpacket),                   //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_003_source0_data),                          //  output,  width = 138,          .data
		.out_channel       (mux_pipeline_003_source0_channel),                       //  output,    width = 8,          .channel
		.in_empty          (1'b0),                                                   // (terminated),                         
		.out_empty         (),                                                       // (terminated),                         
		.out_error         (),                                                       // (terminated),                         
		.in_error          (1'b0)                                                    // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (138),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (8),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) mux_pipeline_004 (
		.clk               (clk_200_out_clk_clk),                                    //   input,    width = 1,       cr0.clk
		.reset             (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (cmd_demux_src4_ready),                                   //  output,    width = 1,     sink0.ready
		.in_valid          (cmd_demux_src4_valid),                                   //   input,    width = 1,          .valid
		.in_startofpacket  (cmd_demux_src4_startofpacket),                           //   input,    width = 1,          .startofpacket
		.in_endofpacket    (cmd_demux_src4_endofpacket),                             //   input,    width = 1,          .endofpacket
		.in_data           (cmd_demux_src4_data),                                    //   input,  width = 138,          .data
		.in_channel        (cmd_demux_src4_channel),                                 //   input,    width = 8,          .channel
		.out_ready         (mux_pipeline_004_source0_ready),                         //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_004_source0_valid),                         //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_004_source0_startofpacket),                 //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_004_source0_endofpacket),                   //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_004_source0_data),                          //  output,  width = 138,          .data
		.out_channel       (mux_pipeline_004_source0_channel),                       //  output,    width = 8,          .channel
		.in_empty          (1'b0),                                                   // (terminated),                         
		.out_empty         (),                                                       // (terminated),                         
		.out_error         (),                                                       // (terminated),                         
		.in_error          (1'b0)                                                    // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (138),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (8),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) mux_pipeline_005 (
		.clk               (clk_200_out_clk_clk),                                    //   input,    width = 1,       cr0.clk
		.reset             (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (cmd_demux_src5_ready),                                   //  output,    width = 1,     sink0.ready
		.in_valid          (cmd_demux_src5_valid),                                   //   input,    width = 1,          .valid
		.in_startofpacket  (cmd_demux_src5_startofpacket),                           //   input,    width = 1,          .startofpacket
		.in_endofpacket    (cmd_demux_src5_endofpacket),                             //   input,    width = 1,          .endofpacket
		.in_data           (cmd_demux_src5_data),                                    //   input,  width = 138,          .data
		.in_channel        (cmd_demux_src5_channel),                                 //   input,    width = 8,          .channel
		.out_ready         (mux_pipeline_005_source0_ready),                         //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_005_source0_valid),                         //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_005_source0_startofpacket),                 //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_005_source0_endofpacket),                   //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_005_source0_data),                          //  output,  width = 138,          .data
		.out_channel       (mux_pipeline_005_source0_channel),                       //  output,    width = 8,          .channel
		.in_empty          (1'b0),                                                   // (terminated),                         
		.out_empty         (),                                                       // (terminated),                         
		.out_error         (),                                                       // (terminated),                         
		.in_error          (1'b0)                                                    // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (138),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (8),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) mux_pipeline_006 (
		.clk               (clk_200_out_clk_clk),                                    //   input,    width = 1,       cr0.clk
		.reset             (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (cmd_demux_src6_ready),                                   //  output,    width = 1,     sink0.ready
		.in_valid          (cmd_demux_src6_valid),                                   //   input,    width = 1,          .valid
		.in_startofpacket  (cmd_demux_src6_startofpacket),                           //   input,    width = 1,          .startofpacket
		.in_endofpacket    (cmd_demux_src6_endofpacket),                             //   input,    width = 1,          .endofpacket
		.in_data           (cmd_demux_src6_data),                                    //   input,  width = 138,          .data
		.in_channel        (cmd_demux_src6_channel),                                 //   input,    width = 8,          .channel
		.out_ready         (mux_pipeline_006_source0_ready),                         //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_006_source0_valid),                         //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_006_source0_startofpacket),                 //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_006_source0_endofpacket),                   //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_006_source0_data),                          //  output,  width = 138,          .data
		.out_channel       (mux_pipeline_006_source0_channel),                       //  output,    width = 8,          .channel
		.in_empty          (1'b0),                                                   // (terminated),                         
		.out_empty         (),                                                       // (terminated),                         
		.out_error         (),                                                       // (terminated),                         
		.in_error          (1'b0)                                                    // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (138),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (8),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) mux_pipeline_007 (
		.clk               (clk_200_out_clk_clk),                                    //   input,    width = 1,       cr0.clk
		.reset             (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (cmd_demux_src7_ready),                                   //  output,    width = 1,     sink0.ready
		.in_valid          (cmd_demux_src7_valid),                                   //   input,    width = 1,          .valid
		.in_startofpacket  (cmd_demux_src7_startofpacket),                           //   input,    width = 1,          .startofpacket
		.in_endofpacket    (cmd_demux_src7_endofpacket),                             //   input,    width = 1,          .endofpacket
		.in_data           (cmd_demux_src7_data),                                    //   input,  width = 138,          .data
		.in_channel        (cmd_demux_src7_channel),                                 //   input,    width = 8,          .channel
		.out_ready         (mux_pipeline_007_source0_ready),                         //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_007_source0_valid),                         //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_007_source0_startofpacket),                 //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_007_source0_endofpacket),                   //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_007_source0_data),                          //  output,  width = 138,          .data
		.out_channel       (mux_pipeline_007_source0_channel),                       //  output,    width = 8,          .channel
		.in_empty          (1'b0),                                                   // (terminated),                         
		.out_empty         (),                                                       // (terminated),                         
		.out_error         (),                                                       // (terminated),                         
		.in_error          (1'b0)                                                    // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (138),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (8),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) mux_pipeline_008 (
		.clk               (clk_200_out_clk_clk),                                    //   input,    width = 1,       cr0.clk
		.reset             (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (rsp_demux_src0_ready),                                   //  output,    width = 1,     sink0.ready
		.in_valid          (rsp_demux_src0_valid),                                   //   input,    width = 1,          .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                           //   input,    width = 1,          .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                             //   input,    width = 1,          .endofpacket
		.in_data           (rsp_demux_src0_data),                                    //   input,  width = 138,          .data
		.in_channel        (rsp_demux_src0_channel),                                 //   input,    width = 8,          .channel
		.out_ready         (mux_pipeline_008_source0_ready),                         //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_008_source0_valid),                         //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_008_source0_startofpacket),                 //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_008_source0_endofpacket),                   //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_008_source0_data),                          //  output,  width = 138,          .data
		.out_channel       (mux_pipeline_008_source0_channel),                       //  output,    width = 8,          .channel
		.in_empty          (1'b0),                                                   // (terminated),                         
		.out_empty         (),                                                       // (terminated),                         
		.out_error         (),                                                       // (terminated),                         
		.in_error          (1'b0)                                                    // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (138),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (8),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) mux_pipeline_009 (
		.clk               (clk_200_out_clk_clk),                                    //   input,    width = 1,       cr0.clk
		.reset             (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (rsp_demux_001_src0_ready),                               //  output,    width = 1,     sink0.ready
		.in_valid          (rsp_demux_001_src0_valid),                               //   input,    width = 1,          .valid
		.in_startofpacket  (rsp_demux_001_src0_startofpacket),                       //   input,    width = 1,          .startofpacket
		.in_endofpacket    (rsp_demux_001_src0_endofpacket),                         //   input,    width = 1,          .endofpacket
		.in_data           (rsp_demux_001_src0_data),                                //   input,  width = 138,          .data
		.in_channel        (rsp_demux_001_src0_channel),                             //   input,    width = 8,          .channel
		.out_ready         (mux_pipeline_009_source0_ready),                         //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_009_source0_valid),                         //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_009_source0_startofpacket),                 //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_009_source0_endofpacket),                   //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_009_source0_data),                          //  output,  width = 138,          .data
		.out_channel       (mux_pipeline_009_source0_channel),                       //  output,    width = 8,          .channel
		.in_empty          (1'b0),                                                   // (terminated),                         
		.out_empty         (),                                                       // (terminated),                         
		.out_error         (),                                                       // (terminated),                         
		.in_error          (1'b0)                                                    // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (138),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (8),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) mux_pipeline_010 (
		.clk               (clk_200_out_clk_clk),                                    //   input,    width = 1,       cr0.clk
		.reset             (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (rsp_demux_002_src0_ready),                               //  output,    width = 1,     sink0.ready
		.in_valid          (rsp_demux_002_src0_valid),                               //   input,    width = 1,          .valid
		.in_startofpacket  (rsp_demux_002_src0_startofpacket),                       //   input,    width = 1,          .startofpacket
		.in_endofpacket    (rsp_demux_002_src0_endofpacket),                         //   input,    width = 1,          .endofpacket
		.in_data           (rsp_demux_002_src0_data),                                //   input,  width = 138,          .data
		.in_channel        (rsp_demux_002_src0_channel),                             //   input,    width = 8,          .channel
		.out_ready         (mux_pipeline_010_source0_ready),                         //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_010_source0_valid),                         //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_010_source0_startofpacket),                 //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_010_source0_endofpacket),                   //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_010_source0_data),                          //  output,  width = 138,          .data
		.out_channel       (mux_pipeline_010_source0_channel),                       //  output,    width = 8,          .channel
		.in_empty          (1'b0),                                                   // (terminated),                         
		.out_empty         (),                                                       // (terminated),                         
		.out_error         (),                                                       // (terminated),                         
		.in_error          (1'b0)                                                    // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (138),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (8),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) mux_pipeline_011 (
		.clk               (clk_200_out_clk_clk),                                    //   input,    width = 1,       cr0.clk
		.reset             (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (rsp_demux_003_src0_ready),                               //  output,    width = 1,     sink0.ready
		.in_valid          (rsp_demux_003_src0_valid),                               //   input,    width = 1,          .valid
		.in_startofpacket  (rsp_demux_003_src0_startofpacket),                       //   input,    width = 1,          .startofpacket
		.in_endofpacket    (rsp_demux_003_src0_endofpacket),                         //   input,    width = 1,          .endofpacket
		.in_data           (rsp_demux_003_src0_data),                                //   input,  width = 138,          .data
		.in_channel        (rsp_demux_003_src0_channel),                             //   input,    width = 8,          .channel
		.out_ready         (mux_pipeline_011_source0_ready),                         //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_011_source0_valid),                         //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_011_source0_startofpacket),                 //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_011_source0_endofpacket),                   //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_011_source0_data),                          //  output,  width = 138,          .data
		.out_channel       (mux_pipeline_011_source0_channel),                       //  output,    width = 8,          .channel
		.in_empty          (1'b0),                                                   // (terminated),                         
		.out_empty         (),                                                       // (terminated),                         
		.out_error         (),                                                       // (terminated),                         
		.in_error          (1'b0)                                                    // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (138),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (8),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) mux_pipeline_012 (
		.clk               (clk_200_out_clk_clk),                                    //   input,    width = 1,       cr0.clk
		.reset             (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (rsp_demux_004_src0_ready),                               //  output,    width = 1,     sink0.ready
		.in_valid          (rsp_demux_004_src0_valid),                               //   input,    width = 1,          .valid
		.in_startofpacket  (rsp_demux_004_src0_startofpacket),                       //   input,    width = 1,          .startofpacket
		.in_endofpacket    (rsp_demux_004_src0_endofpacket),                         //   input,    width = 1,          .endofpacket
		.in_data           (rsp_demux_004_src0_data),                                //   input,  width = 138,          .data
		.in_channel        (rsp_demux_004_src0_channel),                             //   input,    width = 8,          .channel
		.out_ready         (mux_pipeline_012_source0_ready),                         //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_012_source0_valid),                         //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_012_source0_startofpacket),                 //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_012_source0_endofpacket),                   //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_012_source0_data),                          //  output,  width = 138,          .data
		.out_channel       (mux_pipeline_012_source0_channel),                       //  output,    width = 8,          .channel
		.in_empty          (1'b0),                                                   // (terminated),                         
		.out_empty         (),                                                       // (terminated),                         
		.out_error         (),                                                       // (terminated),                         
		.in_error          (1'b0)                                                    // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (138),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (8),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) mux_pipeline_013 (
		.clk               (clk_200_out_clk_clk),                                    //   input,    width = 1,       cr0.clk
		.reset             (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (rsp_demux_005_src0_ready),                               //  output,    width = 1,     sink0.ready
		.in_valid          (rsp_demux_005_src0_valid),                               //   input,    width = 1,          .valid
		.in_startofpacket  (rsp_demux_005_src0_startofpacket),                       //   input,    width = 1,          .startofpacket
		.in_endofpacket    (rsp_demux_005_src0_endofpacket),                         //   input,    width = 1,          .endofpacket
		.in_data           (rsp_demux_005_src0_data),                                //   input,  width = 138,          .data
		.in_channel        (rsp_demux_005_src0_channel),                             //   input,    width = 8,          .channel
		.out_ready         (mux_pipeline_013_source0_ready),                         //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_013_source0_valid),                         //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_013_source0_startofpacket),                 //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_013_source0_endofpacket),                   //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_013_source0_data),                          //  output,  width = 138,          .data
		.out_channel       (mux_pipeline_013_source0_channel),                       //  output,    width = 8,          .channel
		.in_empty          (1'b0),                                                   // (terminated),                         
		.out_empty         (),                                                       // (terminated),                         
		.out_error         (),                                                       // (terminated),                         
		.in_error          (1'b0)                                                    // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (138),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (8),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) mux_pipeline_014 (
		.clk               (clk_200_out_clk_clk),                                    //   input,    width = 1,       cr0.clk
		.reset             (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (rsp_demux_006_src0_ready),                               //  output,    width = 1,     sink0.ready
		.in_valid          (rsp_demux_006_src0_valid),                               //   input,    width = 1,          .valid
		.in_startofpacket  (rsp_demux_006_src0_startofpacket),                       //   input,    width = 1,          .startofpacket
		.in_endofpacket    (rsp_demux_006_src0_endofpacket),                         //   input,    width = 1,          .endofpacket
		.in_data           (rsp_demux_006_src0_data),                                //   input,  width = 138,          .data
		.in_channel        (rsp_demux_006_src0_channel),                             //   input,    width = 8,          .channel
		.out_ready         (mux_pipeline_014_source0_ready),                         //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_014_source0_valid),                         //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_014_source0_startofpacket),                 //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_014_source0_endofpacket),                   //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_014_source0_data),                          //  output,  width = 138,          .data
		.out_channel       (mux_pipeline_014_source0_channel),                       //  output,    width = 8,          .channel
		.in_empty          (1'b0),                                                   // (terminated),                         
		.out_empty         (),                                                       // (terminated),                         
		.out_error         (),                                                       // (terminated),                         
		.in_error          (1'b0)                                                    // (terminated),                         
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (138),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (8),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1),
		.SYNC_RESET       (0)
	) mux_pipeline_015 (
		.clk               (clk_200_out_clk_clk),                                    //   input,    width = 1,       cr0.clk
		.reset             (pipe_stage_host_ctrl_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.in_ready          (rsp_demux_007_src0_ready),                               //  output,    width = 1,     sink0.ready
		.in_valid          (rsp_demux_007_src0_valid),                               //   input,    width = 1,          .valid
		.in_startofpacket  (rsp_demux_007_src0_startofpacket),                       //   input,    width = 1,          .startofpacket
		.in_endofpacket    (rsp_demux_007_src0_endofpacket),                         //   input,    width = 1,          .endofpacket
		.in_data           (rsp_demux_007_src0_data),                                //   input,  width = 138,          .data
		.in_channel        (rsp_demux_007_src0_channel),                             //   input,    width = 8,          .channel
		.out_ready         (mux_pipeline_015_source0_ready),                         //   input,    width = 1,   source0.ready
		.out_valid         (mux_pipeline_015_source0_valid),                         //  output,    width = 1,          .valid
		.out_startofpacket (mux_pipeline_015_source0_startofpacket),                 //  output,    width = 1,          .startofpacket
		.out_endofpacket   (mux_pipeline_015_source0_endofpacket),                   //  output,    width = 1,          .endofpacket
		.out_data          (mux_pipeline_015_source0_data),                          //  output,  width = 138,          .data
		.out_channel       (mux_pipeline_015_source0_channel),                       //  output,    width = 8,          .channel
		.in_empty          (1'b0),                                                   // (terminated),                         
		.out_empty         (),                                                       // (terminated),                         
		.out_error         (),                                                       // (terminated),                         
		.in_error          (1'b0)                                                    // (terminated),                         
	);

endmodule
