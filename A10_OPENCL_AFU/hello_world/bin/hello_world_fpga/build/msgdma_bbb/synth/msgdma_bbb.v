// msgdma_bbb.v

// Generated using ACDS version 19.2 57

`timescale 1 ps / 1 ps
module msgdma_bbb (
		input  wire         clk_clk,               //     clk.clk
		input  wire         reset_reset_n,         //   reset.reset_n
		output wire         csr_waitrequest,       //     csr.waitrequest
		output wire [63:0]  csr_readdata,          //        .readdata
		output wire         csr_readdatavalid,     //        .readdatavalid
		input  wire [0:0]   csr_burstcount,        //        .burstcount
		input  wire [63:0]  csr_writedata,         //        .writedata
		input  wire [6:0]   csr_address,           //        .address
		input  wire         csr_write,             //        .write
		input  wire         csr_read,              //        .read
		input  wire [7:0]   csr_byteenable,        //        .byteenable
		input  wire         csr_debugaccess,       //        .debugaccess
		output wire         dma_irq_irq,           // dma_irq.irq
		input  wire         host_rd_waitrequest,   // host_rd.waitrequest
		input  wire [511:0] host_rd_readdata,      //        .readdata
		input  wire         host_rd_readdatavalid, //        .readdatavalid
		output wire [2:0]   host_rd_burstcount,    //        .burstcount
		output wire [511:0] host_rd_writedata,     //        .writedata
		output wire [47:0]  host_rd_address,       //        .address
		output wire         host_rd_write,         //        .write
		output wire         host_rd_read,          //        .read
		output wire [63:0]  host_rd_byteenable,    //        .byteenable
		output wire         host_rd_debugaccess,   //        .debugaccess
		input  wire         host_wr_waitrequest,   // host_wr.waitrequest
		input  wire [511:0] host_wr_readdata,      //        .readdata
		input  wire         host_wr_readdatavalid, //        .readdatavalid
		output wire [2:0]   host_wr_burstcount,    //        .burstcount
		output wire [511:0] host_wr_writedata,     //        .writedata
		output wire [48:0]  host_wr_address,       //        .address
		output wire         host_wr_write,         //        .write
		output wire         host_wr_read,          //        .read
		output wire [63:0]  host_wr_byteenable,    //        .byteenable
		output wire         host_wr_debugaccess,   //        .debugaccess
		input  wire         mem_waitrequest,       //     mem.waitrequest
		input  wire [511:0] mem_readdata,          //        .readdata
		input  wire         mem_readdatavalid,     //        .readdatavalid
		output wire [2:0]   mem_burstcount,        //        .burstcount
		output wire [511:0] mem_writedata,         //        .writedata
		output wire [47:0]  mem_address,           //        .address
		output wire         mem_write,             //        .write
		output wire         mem_read,              //        .read
		output wire [63:0]  mem_byteenable,        //        .byteenable
		output wire         mem_debugaccess        //        .debugaccess
	);

	wire          dma_read_master_data_source_valid;                                         // dma_read_master:src_valid -> dma_write_master:snk_valid
	wire  [511:0] dma_read_master_data_source_data;                                          // dma_read_master:src_data -> dma_write_master:snk_data
	wire          dma_read_master_data_source_ready;                                         // dma_write_master:snk_ready -> dma_read_master:src_ready
	wire          modular_sgdma_dispatcher_0_read_command_source_valid;                      // modular_sgdma_dispatcher_0:src_read_master_valid -> dma_read_master:snk_command_valid
	wire  [255:0] modular_sgdma_dispatcher_0_read_command_source_data;                       // modular_sgdma_dispatcher_0:src_read_master_data -> dma_read_master:snk_command_data
	wire          modular_sgdma_dispatcher_0_read_command_source_ready;                      // dma_read_master:snk_command_ready -> modular_sgdma_dispatcher_0:src_read_master_ready
	wire          dma_read_master_response_source_valid;                                     // dma_read_master:src_response_valid -> modular_sgdma_dispatcher_0:snk_read_master_valid
	wire  [255:0] dma_read_master_response_source_data;                                      // dma_read_master:src_response_data -> modular_sgdma_dispatcher_0:snk_read_master_data
	wire          dma_read_master_response_source_ready;                                     // modular_sgdma_dispatcher_0:snk_read_master_ready -> dma_read_master:src_response_ready
	wire          dma_write_master_response_source_valid;                                    // dma_write_master:src_response_valid -> modular_sgdma_dispatcher_0:snk_write_master_valid
	wire  [255:0] dma_write_master_response_source_data;                                     // dma_write_master:src_response_data -> modular_sgdma_dispatcher_0:snk_write_master_data
	wire          dma_write_master_response_source_ready;                                    // modular_sgdma_dispatcher_0:snk_write_master_ready -> dma_write_master:src_response_ready
	wire          modular_sgdma_dispatcher_0_write_command_source_valid;                     // modular_sgdma_dispatcher_0:src_write_master_valid -> dma_write_master:snk_command_valid
	wire  [255:0] modular_sgdma_dispatcher_0_write_command_source_data;                      // modular_sgdma_dispatcher_0:src_write_master_data -> dma_write_master:snk_command_data
	wire          modular_sgdma_dispatcher_0_write_command_source_ready;                     // dma_write_master:snk_command_ready -> modular_sgdma_dispatcher_0:src_write_master_ready
	wire          clk_clk_clk;                                                               // clk:clk_out -> [csr:clk, dma_read_master:clk, dma_write_master:clk, magic_number_rom:clk, mm_interconnect_0:clk_clk_clk, mm_interconnect_1:clk_clk_clk, mm_interconnect_2:clk_clk_clk, mm_interconnect_3:clk_clk_clk, modular_sgdma_dispatcher_0:clk, msgdma_bbb_afu_id_avmm_slave_0:clk, pipe_stage_dma_read:clk, pipe_stage_dma_write:clk, pipe_stage_host_rd:clk, pipe_stage_host_wr:clk, pipe_stage_mem:clk]
	wire          clk_clk_reset_reset;                                                       // clk:reset_n_out -> [csr:reset, dma_read_master:reset, dma_write_master:reset, magic_number_rom:reset, mm_interconnect_0:pipe_stage_dma_read_reset_reset_bridge_in_reset_reset, mm_interconnect_1:pipe_stage_dma_write_reset_reset_bridge_in_reset_reset, mm_interconnect_2:csr_reset_reset_bridge_in_reset_reset, mm_interconnect_3:pipe_stage_dma_write_reset_reset_bridge_in_reset_reset, modular_sgdma_dispatcher_0:reset, msgdma_bbb_afu_id_avmm_slave_0:reset, pipe_stage_dma_read:reset, pipe_stage_dma_write:reset, pipe_stage_host_rd:reset, pipe_stage_host_wr:reset, pipe_stage_mem:reset]
	wire  [511:0] dma_read_master_data_read_master_readdata;                                 // mm_interconnect_0:dma_read_master_Data_Read_Master_readdata -> dma_read_master:master_readdata
	wire          dma_read_master_data_read_master_waitrequest;                              // mm_interconnect_0:dma_read_master_Data_Read_Master_waitrequest -> dma_read_master:master_waitrequest
	wire   [49:0] dma_read_master_data_read_master_address;                                  // dma_read_master:master_address -> mm_interconnect_0:dma_read_master_Data_Read_Master_address
	wire          dma_read_master_data_read_master_read;                                     // dma_read_master:master_read -> mm_interconnect_0:dma_read_master_Data_Read_Master_read
	wire   [63:0] dma_read_master_data_read_master_byteenable;                               // dma_read_master:master_byteenable -> mm_interconnect_0:dma_read_master_Data_Read_Master_byteenable
	wire          dma_read_master_data_read_master_readdatavalid;                            // mm_interconnect_0:dma_read_master_Data_Read_Master_readdatavalid -> dma_read_master:master_readdatavalid
	wire    [2:0] dma_read_master_data_read_master_burstcount;                               // dma_read_master:master_burstcount -> mm_interconnect_0:dma_read_master_Data_Read_Master_burstcount
	wire  [511:0] mm_interconnect_0_pipe_stage_dma_read_s0_readdata;                         // pipe_stage_dma_read:s0_readdata -> mm_interconnect_0:pipe_stage_dma_read_s0_readdata
	wire          mm_interconnect_0_pipe_stage_dma_read_s0_waitrequest;                      // pipe_stage_dma_read:s0_waitrequest -> mm_interconnect_0:pipe_stage_dma_read_s0_waitrequest
	wire          mm_interconnect_0_pipe_stage_dma_read_s0_debugaccess;                      // mm_interconnect_0:pipe_stage_dma_read_s0_debugaccess -> pipe_stage_dma_read:s0_debugaccess
	wire   [49:0] mm_interconnect_0_pipe_stage_dma_read_s0_address;                          // mm_interconnect_0:pipe_stage_dma_read_s0_address -> pipe_stage_dma_read:s0_address
	wire          mm_interconnect_0_pipe_stage_dma_read_s0_read;                             // mm_interconnect_0:pipe_stage_dma_read_s0_read -> pipe_stage_dma_read:s0_read
	wire   [63:0] mm_interconnect_0_pipe_stage_dma_read_s0_byteenable;                       // mm_interconnect_0:pipe_stage_dma_read_s0_byteenable -> pipe_stage_dma_read:s0_byteenable
	wire          mm_interconnect_0_pipe_stage_dma_read_s0_readdatavalid;                    // pipe_stage_dma_read:s0_readdatavalid -> mm_interconnect_0:pipe_stage_dma_read_s0_readdatavalid
	wire          mm_interconnect_0_pipe_stage_dma_read_s0_write;                            // mm_interconnect_0:pipe_stage_dma_read_s0_write -> pipe_stage_dma_read:s0_write
	wire  [511:0] mm_interconnect_0_pipe_stage_dma_read_s0_writedata;                        // mm_interconnect_0:pipe_stage_dma_read_s0_writedata -> pipe_stage_dma_read:s0_writedata
	wire    [2:0] mm_interconnect_0_pipe_stage_dma_read_s0_burstcount;                       // mm_interconnect_0:pipe_stage_dma_read_s0_burstcount -> pipe_stage_dma_read:s0_burstcount
	wire          dma_write_master_data_write_master_waitrequest;                            // mm_interconnect_1:dma_write_master_Data_Write_Master_waitrequest -> dma_write_master:master_waitrequest
	wire   [49:0] dma_write_master_data_write_master_address;                                // dma_write_master:master_address -> mm_interconnect_1:dma_write_master_Data_Write_Master_address
	wire   [63:0] dma_write_master_data_write_master_byteenable;                             // dma_write_master:master_byteenable -> mm_interconnect_1:dma_write_master_Data_Write_Master_byteenable
	wire          dma_write_master_data_write_master_write;                                  // dma_write_master:master_write -> mm_interconnect_1:dma_write_master_Data_Write_Master_write
	wire  [511:0] dma_write_master_data_write_master_writedata;                              // dma_write_master:master_writedata -> mm_interconnect_1:dma_write_master_Data_Write_Master_writedata
	wire    [2:0] dma_write_master_data_write_master_burstcount;                             // dma_write_master:master_burstcount -> mm_interconnect_1:dma_write_master_Data_Write_Master_burstcount
	wire  [511:0] mm_interconnect_1_pipe_stage_dma_write_s0_readdata;                        // pipe_stage_dma_write:s0_readdata -> mm_interconnect_1:pipe_stage_dma_write_s0_readdata
	wire          mm_interconnect_1_pipe_stage_dma_write_s0_waitrequest;                     // pipe_stage_dma_write:s0_waitrequest -> mm_interconnect_1:pipe_stage_dma_write_s0_waitrequest
	wire          mm_interconnect_1_pipe_stage_dma_write_s0_debugaccess;                     // mm_interconnect_1:pipe_stage_dma_write_s0_debugaccess -> pipe_stage_dma_write:s0_debugaccess
	wire   [49:0] mm_interconnect_1_pipe_stage_dma_write_s0_address;                         // mm_interconnect_1:pipe_stage_dma_write_s0_address -> pipe_stage_dma_write:s0_address
	wire          mm_interconnect_1_pipe_stage_dma_write_s0_read;                            // mm_interconnect_1:pipe_stage_dma_write_s0_read -> pipe_stage_dma_write:s0_read
	wire   [63:0] mm_interconnect_1_pipe_stage_dma_write_s0_byteenable;                      // mm_interconnect_1:pipe_stage_dma_write_s0_byteenable -> pipe_stage_dma_write:s0_byteenable
	wire          mm_interconnect_1_pipe_stage_dma_write_s0_readdatavalid;                   // pipe_stage_dma_write:s0_readdatavalid -> mm_interconnect_1:pipe_stage_dma_write_s0_readdatavalid
	wire          mm_interconnect_1_pipe_stage_dma_write_s0_write;                           // mm_interconnect_1:pipe_stage_dma_write_s0_write -> pipe_stage_dma_write:s0_write
	wire  [511:0] mm_interconnect_1_pipe_stage_dma_write_s0_writedata;                       // mm_interconnect_1:pipe_stage_dma_write_s0_writedata -> pipe_stage_dma_write:s0_writedata
	wire    [2:0] mm_interconnect_1_pipe_stage_dma_write_s0_burstcount;                      // mm_interconnect_1:pipe_stage_dma_write_s0_burstcount -> pipe_stage_dma_write:s0_burstcount
	wire          csr_m0_waitrequest;                                                        // mm_interconnect_2:csr_m0_waitrequest -> csr:m0_waitrequest
	wire   [63:0] csr_m0_readdata;                                                           // mm_interconnect_2:csr_m0_readdata -> csr:m0_readdata
	wire          csr_m0_debugaccess;                                                        // csr:m0_debugaccess -> mm_interconnect_2:csr_m0_debugaccess
	wire    [6:0] csr_m0_address;                                                            // csr:m0_address -> mm_interconnect_2:csr_m0_address
	wire          csr_m0_read;                                                               // csr:m0_read -> mm_interconnect_2:csr_m0_read
	wire    [7:0] csr_m0_byteenable;                                                         // csr:m0_byteenable -> mm_interconnect_2:csr_m0_byteenable
	wire          csr_m0_readdatavalid;                                                      // mm_interconnect_2:csr_m0_readdatavalid -> csr:m0_readdatavalid
	wire   [63:0] csr_m0_writedata;                                                          // csr:m0_writedata -> mm_interconnect_2:csr_m0_writedata
	wire          csr_m0_write;                                                              // csr:m0_write -> mm_interconnect_2:csr_m0_write
	wire    [0:0] csr_m0_burstcount;                                                         // csr:m0_burstcount -> mm_interconnect_2:csr_m0_burstcount
	wire   [31:0] mm_interconnect_2_modular_sgdma_dispatcher_0_csr_readdata;                 // modular_sgdma_dispatcher_0:csr_readdata -> mm_interconnect_2:modular_sgdma_dispatcher_0_CSR_readdata
	wire    [2:0] mm_interconnect_2_modular_sgdma_dispatcher_0_csr_address;                  // mm_interconnect_2:modular_sgdma_dispatcher_0_CSR_address -> modular_sgdma_dispatcher_0:csr_address
	wire          mm_interconnect_2_modular_sgdma_dispatcher_0_csr_read;                     // mm_interconnect_2:modular_sgdma_dispatcher_0_CSR_read -> modular_sgdma_dispatcher_0:csr_read
	wire    [3:0] mm_interconnect_2_modular_sgdma_dispatcher_0_csr_byteenable;               // mm_interconnect_2:modular_sgdma_dispatcher_0_CSR_byteenable -> modular_sgdma_dispatcher_0:csr_byteenable
	wire          mm_interconnect_2_modular_sgdma_dispatcher_0_csr_write;                    // mm_interconnect_2:modular_sgdma_dispatcher_0_CSR_write -> modular_sgdma_dispatcher_0:csr_write
	wire   [31:0] mm_interconnect_2_modular_sgdma_dispatcher_0_csr_writedata;                // mm_interconnect_2:modular_sgdma_dispatcher_0_CSR_writedata -> modular_sgdma_dispatcher_0:csr_writedata
	wire          mm_interconnect_2_modular_sgdma_dispatcher_0_descriptor_slave_waitrequest; // modular_sgdma_dispatcher_0:descriptor_waitrequest -> mm_interconnect_2:modular_sgdma_dispatcher_0_Descriptor_Slave_waitrequest
	wire   [31:0] mm_interconnect_2_modular_sgdma_dispatcher_0_descriptor_slave_byteenable;  // mm_interconnect_2:modular_sgdma_dispatcher_0_Descriptor_Slave_byteenable -> modular_sgdma_dispatcher_0:descriptor_byteenable
	wire          mm_interconnect_2_modular_sgdma_dispatcher_0_descriptor_slave_write;       // mm_interconnect_2:modular_sgdma_dispatcher_0_Descriptor_Slave_write -> modular_sgdma_dispatcher_0:descriptor_write
	wire  [255:0] mm_interconnect_2_modular_sgdma_dispatcher_0_descriptor_slave_writedata;   // mm_interconnect_2:modular_sgdma_dispatcher_0_Descriptor_Slave_writedata -> modular_sgdma_dispatcher_0:descriptor_writedata
	wire   [63:0] mm_interconnect_2_msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_readdata;   // msgdma_bbb_afu_id_avmm_slave_0:avmm_readdata -> mm_interconnect_2:msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_readdata
	wire    [2:0] mm_interconnect_2_msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_address;    // mm_interconnect_2:msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_address -> msgdma_bbb_afu_id_avmm_slave_0:avmm_address
	wire          mm_interconnect_2_msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_read;       // mm_interconnect_2:msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_read -> msgdma_bbb_afu_id_avmm_slave_0:avmm_read
	wire          mm_interconnect_2_msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_write;      // mm_interconnect_2:msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_write -> msgdma_bbb_afu_id_avmm_slave_0:avmm_write
	wire   [63:0] mm_interconnect_2_msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_writedata;  // mm_interconnect_2:msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_writedata -> msgdma_bbb_afu_id_avmm_slave_0:avmm_writedata
	wire          pipe_stage_dma_write_m0_waitrequest;                                       // mm_interconnect_3:pipe_stage_dma_write_m0_waitrequest -> pipe_stage_dma_write:m0_waitrequest
	wire  [511:0] pipe_stage_dma_write_m0_readdata;                                          // mm_interconnect_3:pipe_stage_dma_write_m0_readdata -> pipe_stage_dma_write:m0_readdata
	wire          pipe_stage_dma_write_m0_debugaccess;                                       // pipe_stage_dma_write:m0_debugaccess -> mm_interconnect_3:pipe_stage_dma_write_m0_debugaccess
	wire   [49:0] pipe_stage_dma_write_m0_address;                                           // pipe_stage_dma_write:m0_address -> mm_interconnect_3:pipe_stage_dma_write_m0_address
	wire          pipe_stage_dma_write_m0_read;                                              // pipe_stage_dma_write:m0_read -> mm_interconnect_3:pipe_stage_dma_write_m0_read
	wire   [63:0] pipe_stage_dma_write_m0_byteenable;                                        // pipe_stage_dma_write:m0_byteenable -> mm_interconnect_3:pipe_stage_dma_write_m0_byteenable
	wire          pipe_stage_dma_write_m0_readdatavalid;                                     // mm_interconnect_3:pipe_stage_dma_write_m0_readdatavalid -> pipe_stage_dma_write:m0_readdatavalid
	wire  [511:0] pipe_stage_dma_write_m0_writedata;                                         // pipe_stage_dma_write:m0_writedata -> mm_interconnect_3:pipe_stage_dma_write_m0_writedata
	wire          pipe_stage_dma_write_m0_write;                                             // pipe_stage_dma_write:m0_write -> mm_interconnect_3:pipe_stage_dma_write_m0_write
	wire    [2:0] pipe_stage_dma_write_m0_burstcount;                                        // pipe_stage_dma_write:m0_burstcount -> mm_interconnect_3:pipe_stage_dma_write_m0_burstcount
	wire          pipe_stage_dma_read_m0_waitrequest;                                        // mm_interconnect_3:pipe_stage_dma_read_m0_waitrequest -> pipe_stage_dma_read:m0_waitrequest
	wire  [511:0] pipe_stage_dma_read_m0_readdata;                                           // mm_interconnect_3:pipe_stage_dma_read_m0_readdata -> pipe_stage_dma_read:m0_readdata
	wire          pipe_stage_dma_read_m0_debugaccess;                                        // pipe_stage_dma_read:m0_debugaccess -> mm_interconnect_3:pipe_stage_dma_read_m0_debugaccess
	wire   [49:0] pipe_stage_dma_read_m0_address;                                            // pipe_stage_dma_read:m0_address -> mm_interconnect_3:pipe_stage_dma_read_m0_address
	wire          pipe_stage_dma_read_m0_read;                                               // pipe_stage_dma_read:m0_read -> mm_interconnect_3:pipe_stage_dma_read_m0_read
	wire   [63:0] pipe_stage_dma_read_m0_byteenable;                                         // pipe_stage_dma_read:m0_byteenable -> mm_interconnect_3:pipe_stage_dma_read_m0_byteenable
	wire          pipe_stage_dma_read_m0_readdatavalid;                                      // mm_interconnect_3:pipe_stage_dma_read_m0_readdatavalid -> pipe_stage_dma_read:m0_readdatavalid
	wire  [511:0] pipe_stage_dma_read_m0_writedata;                                          // pipe_stage_dma_read:m0_writedata -> mm_interconnect_3:pipe_stage_dma_read_m0_writedata
	wire          pipe_stage_dma_read_m0_write;                                              // pipe_stage_dma_read:m0_write -> mm_interconnect_3:pipe_stage_dma_read_m0_write
	wire    [2:0] pipe_stage_dma_read_m0_burstcount;                                         // pipe_stage_dma_read:m0_burstcount -> mm_interconnect_3:pipe_stage_dma_read_m0_burstcount
	wire  [511:0] mm_interconnect_3_pipe_stage_mem_s0_readdata;                              // pipe_stage_mem:s0_readdata -> mm_interconnect_3:pipe_stage_mem_s0_readdata
	wire          mm_interconnect_3_pipe_stage_mem_s0_waitrequest;                           // pipe_stage_mem:s0_waitrequest -> mm_interconnect_3:pipe_stage_mem_s0_waitrequest
	wire          mm_interconnect_3_pipe_stage_mem_s0_debugaccess;                           // mm_interconnect_3:pipe_stage_mem_s0_debugaccess -> pipe_stage_mem:s0_debugaccess
	wire   [47:0] mm_interconnect_3_pipe_stage_mem_s0_address;                               // mm_interconnect_3:pipe_stage_mem_s0_address -> pipe_stage_mem:s0_address
	wire          mm_interconnect_3_pipe_stage_mem_s0_read;                                  // mm_interconnect_3:pipe_stage_mem_s0_read -> pipe_stage_mem:s0_read
	wire   [63:0] mm_interconnect_3_pipe_stage_mem_s0_byteenable;                            // mm_interconnect_3:pipe_stage_mem_s0_byteenable -> pipe_stage_mem:s0_byteenable
	wire          mm_interconnect_3_pipe_stage_mem_s0_readdatavalid;                         // pipe_stage_mem:s0_readdatavalid -> mm_interconnect_3:pipe_stage_mem_s0_readdatavalid
	wire          mm_interconnect_3_pipe_stage_mem_s0_write;                                 // mm_interconnect_3:pipe_stage_mem_s0_write -> pipe_stage_mem:s0_write
	wire  [511:0] mm_interconnect_3_pipe_stage_mem_s0_writedata;                             // mm_interconnect_3:pipe_stage_mem_s0_writedata -> pipe_stage_mem:s0_writedata
	wire    [2:0] mm_interconnect_3_pipe_stage_mem_s0_burstcount;                            // mm_interconnect_3:pipe_stage_mem_s0_burstcount -> pipe_stage_mem:s0_burstcount
	wire  [511:0] mm_interconnect_3_pipe_stage_host_wr_s0_readdata;                          // pipe_stage_host_wr:s0_readdata -> mm_interconnect_3:pipe_stage_host_wr_s0_readdata
	wire          mm_interconnect_3_pipe_stage_host_wr_s0_waitrequest;                       // pipe_stage_host_wr:s0_waitrequest -> mm_interconnect_3:pipe_stage_host_wr_s0_waitrequest
	wire          mm_interconnect_3_pipe_stage_host_wr_s0_debugaccess;                       // mm_interconnect_3:pipe_stage_host_wr_s0_debugaccess -> pipe_stage_host_wr:s0_debugaccess
	wire   [48:0] mm_interconnect_3_pipe_stage_host_wr_s0_address;                           // mm_interconnect_3:pipe_stage_host_wr_s0_address -> pipe_stage_host_wr:s0_address
	wire          mm_interconnect_3_pipe_stage_host_wr_s0_read;                              // mm_interconnect_3:pipe_stage_host_wr_s0_read -> pipe_stage_host_wr:s0_read
	wire   [63:0] mm_interconnect_3_pipe_stage_host_wr_s0_byteenable;                        // mm_interconnect_3:pipe_stage_host_wr_s0_byteenable -> pipe_stage_host_wr:s0_byteenable
	wire          mm_interconnect_3_pipe_stage_host_wr_s0_readdatavalid;                     // pipe_stage_host_wr:s0_readdatavalid -> mm_interconnect_3:pipe_stage_host_wr_s0_readdatavalid
	wire          mm_interconnect_3_pipe_stage_host_wr_s0_write;                             // mm_interconnect_3:pipe_stage_host_wr_s0_write -> pipe_stage_host_wr:s0_write
	wire  [511:0] mm_interconnect_3_pipe_stage_host_wr_s0_writedata;                         // mm_interconnect_3:pipe_stage_host_wr_s0_writedata -> pipe_stage_host_wr:s0_writedata
	wire    [2:0] mm_interconnect_3_pipe_stage_host_wr_s0_burstcount;                        // mm_interconnect_3:pipe_stage_host_wr_s0_burstcount -> pipe_stage_host_wr:s0_burstcount
	wire  [511:0] mm_interconnect_3_pipe_stage_host_rd_s0_readdata;                          // pipe_stage_host_rd:s0_readdata -> mm_interconnect_3:pipe_stage_host_rd_s0_readdata
	wire          mm_interconnect_3_pipe_stage_host_rd_s0_waitrequest;                       // pipe_stage_host_rd:s0_waitrequest -> mm_interconnect_3:pipe_stage_host_rd_s0_waitrequest
	wire          mm_interconnect_3_pipe_stage_host_rd_s0_debugaccess;                       // mm_interconnect_3:pipe_stage_host_rd_s0_debugaccess -> pipe_stage_host_rd:s0_debugaccess
	wire   [47:0] mm_interconnect_3_pipe_stage_host_rd_s0_address;                           // mm_interconnect_3:pipe_stage_host_rd_s0_address -> pipe_stage_host_rd:s0_address
	wire          mm_interconnect_3_pipe_stage_host_rd_s0_read;                              // mm_interconnect_3:pipe_stage_host_rd_s0_read -> pipe_stage_host_rd:s0_read
	wire   [63:0] mm_interconnect_3_pipe_stage_host_rd_s0_byteenable;                        // mm_interconnect_3:pipe_stage_host_rd_s0_byteenable -> pipe_stage_host_rd:s0_byteenable
	wire          mm_interconnect_3_pipe_stage_host_rd_s0_readdatavalid;                     // pipe_stage_host_rd:s0_readdatavalid -> mm_interconnect_3:pipe_stage_host_rd_s0_readdatavalid
	wire          mm_interconnect_3_pipe_stage_host_rd_s0_write;                             // mm_interconnect_3:pipe_stage_host_rd_s0_write -> pipe_stage_host_rd:s0_write
	wire  [511:0] mm_interconnect_3_pipe_stage_host_rd_s0_writedata;                         // mm_interconnect_3:pipe_stage_host_rd_s0_writedata -> pipe_stage_host_rd:s0_writedata
	wire    [2:0] mm_interconnect_3_pipe_stage_host_rd_s0_burstcount;                        // mm_interconnect_3:pipe_stage_host_rd_s0_burstcount -> pipe_stage_host_rd:s0_burstcount
	wire  [511:0] mm_interconnect_3_magic_number_rom_slave_readdata;                         // magic_number_rom:readdata -> mm_interconnect_3:magic_number_rom_slave_readdata
	wire          mm_interconnect_3_magic_number_rom_slave_waitrequest;                      // magic_number_rom:waitrequest -> mm_interconnect_3:magic_number_rom_slave_waitrequest
	wire    [1:0] mm_interconnect_3_magic_number_rom_slave_address;                          // mm_interconnect_3:magic_number_rom_slave_address -> magic_number_rom:address
	wire          mm_interconnect_3_magic_number_rom_slave_read;                             // mm_interconnect_3:magic_number_rom_slave_read -> magic_number_rom:read
	wire          mm_interconnect_3_magic_number_rom_slave_readdatavalid;                    // magic_number_rom:readdatavalid -> mm_interconnect_3:magic_number_rom_slave_readdatavalid
	wire    [2:0] mm_interconnect_3_magic_number_rom_slave_burstcount;                       // mm_interconnect_3:magic_number_rom_slave_burstcount -> magic_number_rom:burst

	msgdma_bbb_clk clk (
		.clk_out     (clk_clk_clk),         //  output,  width = 1,          clk.clk
		.in_clk      (clk_clk),             //   input,  width = 1,       clk_in.clk
		.reset_n     (reset_reset_n),       //   input,  width = 1, clk_in_reset.reset_n
		.reset_n_out (clk_clk_reset_reset)  //  output,  width = 1,    clk_reset.reset_n
	);

	msgdma_bbb_csr csr (
		.clk              (clk_clk_clk),          //   input,   width = 1,   clk.clk
		.m0_waitrequest   (csr_m0_waitrequest),   //   input,   width = 1,    m0.waitrequest
		.m0_readdata      (csr_m0_readdata),      //   input,  width = 64,      .readdata
		.m0_readdatavalid (csr_m0_readdatavalid), //   input,   width = 1,      .readdatavalid
		.m0_burstcount    (csr_m0_burstcount),    //  output,   width = 1,      .burstcount
		.m0_writedata     (csr_m0_writedata),     //  output,  width = 64,      .writedata
		.m0_address       (csr_m0_address),       //  output,   width = 7,      .address
		.m0_write         (csr_m0_write),         //  output,   width = 1,      .write
		.m0_read          (csr_m0_read),          //  output,   width = 1,      .read
		.m0_byteenable    (csr_m0_byteenable),    //  output,   width = 8,      .byteenable
		.m0_debugaccess   (csr_m0_debugaccess),   //  output,   width = 1,      .debugaccess
		.reset            (~clk_clk_reset_reset), //   input,   width = 1, reset.reset
		.s0_waitrequest   (csr_waitrequest),      //  output,   width = 1,    s0.waitrequest
		.s0_readdata      (csr_readdata),         //  output,  width = 64,      .readdata
		.s0_readdatavalid (csr_readdatavalid),    //  output,   width = 1,      .readdatavalid
		.s0_burstcount    (csr_burstcount),       //   input,   width = 1,      .burstcount
		.s0_writedata     (csr_writedata),        //   input,  width = 64,      .writedata
		.s0_address       (csr_address),          //   input,   width = 7,      .address
		.s0_write         (csr_write),            //   input,   width = 1,      .write
		.s0_read          (csr_read),             //   input,   width = 1,      .read
		.s0_byteenable    (csr_byteenable),       //   input,   width = 8,      .byteenable
		.s0_debugaccess   (csr_debugaccess)       //   input,   width = 1,      .debugaccess
	);

	dma_core_dma_read_master dma_read_master (
		.clk                  (clk_clk_clk),                                          //   input,    width = 1,            Clock.clk
		.reset                (~clk_clk_reset_reset),                                 //   input,    width = 1,      Clock_reset.reset
		.snk_command_data     (modular_sgdma_dispatcher_0_read_command_source_data),  //   input,  width = 256,     Command_Sink.data
		.snk_command_valid    (modular_sgdma_dispatcher_0_read_command_source_valid), //   input,    width = 1,                 .valid
		.snk_command_ready    (modular_sgdma_dispatcher_0_read_command_source_ready), //  output,    width = 1,                 .ready
		.master_address       (dma_read_master_data_read_master_address),             //  output,   width = 50, Data_Read_Master.address
		.master_read          (dma_read_master_data_read_master_read),                //  output,    width = 1,                 .read
		.master_byteenable    (dma_read_master_data_read_master_byteenable),          //  output,   width = 64,                 .byteenable
		.master_readdata      (dma_read_master_data_read_master_readdata),            //   input,  width = 512,                 .readdata
		.master_waitrequest   (dma_read_master_data_read_master_waitrequest),         //   input,    width = 1,                 .waitrequest
		.master_readdatavalid (dma_read_master_data_read_master_readdatavalid),       //   input,    width = 1,                 .readdatavalid
		.master_burstcount    (dma_read_master_data_read_master_burstcount),          //  output,    width = 3,                 .burstcount
		.src_data             (dma_read_master_data_source_data),                     //  output,  width = 512,      Data_Source.data
		.src_valid            (dma_read_master_data_source_valid),                    //  output,    width = 1,                 .valid
		.src_ready            (dma_read_master_data_source_ready),                    //   input,    width = 1,                 .ready
		.src_response_data    (dma_read_master_response_source_data),                 //  output,  width = 256,  Response_Source.data
		.src_response_valid   (dma_read_master_response_source_valid),                //  output,    width = 1,                 .valid
		.src_response_ready   (dma_read_master_response_source_ready)                 //   input,    width = 1,                 .ready
	);

	dma_core_dma_write_master dma_write_master (
		.clk                (clk_clk_clk),                                           //   input,    width = 1,             Clock.clk
		.reset              (~clk_clk_reset_reset),                                  //   input,    width = 1,       Clock_reset.reset
		.snk_command_data   (modular_sgdma_dispatcher_0_write_command_source_data),  //   input,  width = 256,      Command_Sink.data
		.snk_command_valid  (modular_sgdma_dispatcher_0_write_command_source_valid), //   input,    width = 1,                  .valid
		.snk_command_ready  (modular_sgdma_dispatcher_0_write_command_source_ready), //  output,    width = 1,                  .ready
		.snk_data           (dma_read_master_data_source_data),                      //   input,  width = 512,         Data_Sink.data
		.snk_valid          (dma_read_master_data_source_valid),                     //   input,    width = 1,                  .valid
		.snk_ready          (dma_read_master_data_source_ready),                     //  output,    width = 1,                  .ready
		.master_address     (dma_write_master_data_write_master_address),            //  output,   width = 50, Data_Write_Master.address
		.master_write       (dma_write_master_data_write_master_write),              //  output,    width = 1,                  .write
		.master_byteenable  (dma_write_master_data_write_master_byteenable),         //  output,   width = 64,                  .byteenable
		.master_writedata   (dma_write_master_data_write_master_writedata),          //  output,  width = 512,                  .writedata
		.master_waitrequest (dma_write_master_data_write_master_waitrequest),        //   input,    width = 1,                  .waitrequest
		.master_burstcount  (dma_write_master_data_write_master_burstcount),         //  output,    width = 3,                  .burstcount
		.src_response_data  (dma_write_master_response_source_data),                 //  output,  width = 256,   Response_Source.data
		.src_response_valid (dma_write_master_response_source_valid),                //  output,    width = 1,                  .valid
		.src_response_ready (dma_write_master_response_source_ready)                 //   input,    width = 1,                  .ready
	);

	msgdma_bbb_magic_number_rom_0 magic_number_rom (
		.clk           (clk_clk_clk),                                            //   input,    width = 1,   clk.clk
		.reset         (~clk_clk_reset_reset),                                   //   input,    width = 1, reset.reset
		.address       (mm_interconnect_3_magic_number_rom_slave_address),       //   input,    width = 2, slave.address
		.burst         (mm_interconnect_3_magic_number_rom_slave_burstcount),    //   input,    width = 3,      .burstcount
		.read          (mm_interconnect_3_magic_number_rom_slave_read),          //   input,    width = 1,      .read
		.readdata      (mm_interconnect_3_magic_number_rom_slave_readdata),      //  output,  width = 512,      .readdata
		.waitrequest   (mm_interconnect_3_magic_number_rom_slave_waitrequest),   //  output,    width = 1,      .waitrequest
		.readdatavalid (mm_interconnect_3_magic_number_rom_slave_readdatavalid)  //  output,    width = 1,      .readdatavalid
	);

	dma_core_modular_sgdma_dispatcher_0 modular_sgdma_dispatcher_0 (
		.csr_writedata          (mm_interconnect_2_modular_sgdma_dispatcher_0_csr_writedata),                //   input,   width = 32,                  CSR.writedata
		.csr_write              (mm_interconnect_2_modular_sgdma_dispatcher_0_csr_write),                    //   input,    width = 1,                     .write
		.csr_byteenable         (mm_interconnect_2_modular_sgdma_dispatcher_0_csr_byteenable),               //   input,    width = 4,                     .byteenable
		.csr_readdata           (mm_interconnect_2_modular_sgdma_dispatcher_0_csr_readdata),                 //  output,   width = 32,                     .readdata
		.csr_read               (mm_interconnect_2_modular_sgdma_dispatcher_0_csr_read),                     //   input,    width = 1,                     .read
		.csr_address            (mm_interconnect_2_modular_sgdma_dispatcher_0_csr_address),                  //   input,    width = 3,                     .address
		.descriptor_write       (mm_interconnect_2_modular_sgdma_dispatcher_0_descriptor_slave_write),       //   input,    width = 1,     Descriptor_Slave.write
		.descriptor_waitrequest (mm_interconnect_2_modular_sgdma_dispatcher_0_descriptor_slave_waitrequest), //  output,    width = 1,                     .waitrequest
		.descriptor_writedata   (mm_interconnect_2_modular_sgdma_dispatcher_0_descriptor_slave_writedata),   //   input,  width = 256,                     .writedata
		.descriptor_byteenable  (mm_interconnect_2_modular_sgdma_dispatcher_0_descriptor_slave_byteenable),  //   input,   width = 32,                     .byteenable
		.src_read_master_data   (modular_sgdma_dispatcher_0_read_command_source_data),                       //  output,  width = 256,  Read_Command_Source.data
		.src_read_master_valid  (modular_sgdma_dispatcher_0_read_command_source_valid),                      //  output,    width = 1,                     .valid
		.src_read_master_ready  (modular_sgdma_dispatcher_0_read_command_source_ready),                      //   input,    width = 1,                     .ready
		.snk_read_master_data   (dma_read_master_response_source_data),                                      //   input,  width = 256,   Read_Response_Sink.data
		.snk_read_master_valid  (dma_read_master_response_source_valid),                                     //   input,    width = 1,                     .valid
		.snk_read_master_ready  (dma_read_master_response_source_ready),                                     //  output,    width = 1,                     .ready
		.src_write_master_data  (modular_sgdma_dispatcher_0_write_command_source_data),                      //  output,  width = 256, Write_Command_Source.data
		.src_write_master_valid (modular_sgdma_dispatcher_0_write_command_source_valid),                     //  output,    width = 1,                     .valid
		.src_write_master_ready (modular_sgdma_dispatcher_0_write_command_source_ready),                     //   input,    width = 1,                     .ready
		.snk_write_master_data  (dma_write_master_response_source_data),                                     //   input,  width = 256,  Write_Response_Sink.data
		.snk_write_master_valid (dma_write_master_response_source_valid),                                    //   input,    width = 1,                     .valid
		.snk_write_master_ready (dma_write_master_response_source_ready),                                    //  output,    width = 1,                     .ready
		.clk                    (clk_clk_clk),                                                               //   input,    width = 1,                clock.clk
		.reset                  (~clk_clk_reset_reset),                                                      //   input,    width = 1,          clock_reset.reset
		.csr_irq                (dma_irq_irq)                                                                //  output,    width = 1,              csr_irq.irq
	);

	msgdma_bbb_afu_id_avmm_slave_0 msgdma_bbb_afu_id_avmm_slave_0 (
		.avmm_readdata  (mm_interconnect_2_msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_readdata),  //  output,  width = 64, afu_cfg_slave.readdata
		.avmm_writedata (mm_interconnect_2_msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_writedata), //   input,  width = 64,              .writedata
		.avmm_address   (mm_interconnect_2_msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_address),   //   input,   width = 3,              .address
		.avmm_write     (mm_interconnect_2_msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_write),     //   input,   width = 1,              .write
		.avmm_read      (mm_interconnect_2_msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_read),      //   input,   width = 1,              .read
		.clk            (clk_clk_clk),                                                              //   input,   width = 1,         clock.clk
		.reset          (~clk_clk_reset_reset)                                                      //   input,   width = 1,         reset.reset
	);

	dma_core_pipe_stage_dma_read pipe_stage_dma_read (
		.clk              (clk_clk_clk),                                            //   input,    width = 1,   clk.clk
		.m0_waitrequest   (pipe_stage_dma_read_m0_waitrequest),                     //   input,    width = 1,    m0.waitrequest
		.m0_readdata      (pipe_stage_dma_read_m0_readdata),                        //   input,  width = 512,      .readdata
		.m0_readdatavalid (pipe_stage_dma_read_m0_readdatavalid),                   //   input,    width = 1,      .readdatavalid
		.m0_burstcount    (pipe_stage_dma_read_m0_burstcount),                      //  output,    width = 3,      .burstcount
		.m0_writedata     (pipe_stage_dma_read_m0_writedata),                       //  output,  width = 512,      .writedata
		.m0_address       (pipe_stage_dma_read_m0_address),                         //  output,   width = 50,      .address
		.m0_write         (pipe_stage_dma_read_m0_write),                           //  output,    width = 1,      .write
		.m0_read          (pipe_stage_dma_read_m0_read),                            //  output,    width = 1,      .read
		.m0_byteenable    (pipe_stage_dma_read_m0_byteenable),                      //  output,   width = 64,      .byteenable
		.m0_debugaccess   (pipe_stage_dma_read_m0_debugaccess),                     //  output,    width = 1,      .debugaccess
		.reset            (~clk_clk_reset_reset),                                   //   input,    width = 1, reset.reset
		.s0_waitrequest   (mm_interconnect_0_pipe_stage_dma_read_s0_waitrequest),   //  output,    width = 1,    s0.waitrequest
		.s0_readdata      (mm_interconnect_0_pipe_stage_dma_read_s0_readdata),      //  output,  width = 512,      .readdata
		.s0_readdatavalid (mm_interconnect_0_pipe_stage_dma_read_s0_readdatavalid), //  output,    width = 1,      .readdatavalid
		.s0_burstcount    (mm_interconnect_0_pipe_stage_dma_read_s0_burstcount),    //   input,    width = 3,      .burstcount
		.s0_writedata     (mm_interconnect_0_pipe_stage_dma_read_s0_writedata),     //   input,  width = 512,      .writedata
		.s0_address       (mm_interconnect_0_pipe_stage_dma_read_s0_address),       //   input,   width = 50,      .address
		.s0_write         (mm_interconnect_0_pipe_stage_dma_read_s0_write),         //   input,    width = 1,      .write
		.s0_read          (mm_interconnect_0_pipe_stage_dma_read_s0_read),          //   input,    width = 1,      .read
		.s0_byteenable    (mm_interconnect_0_pipe_stage_dma_read_s0_byteenable),    //   input,   width = 64,      .byteenable
		.s0_debugaccess   (mm_interconnect_0_pipe_stage_dma_read_s0_debugaccess)    //   input,    width = 1,      .debugaccess
	);

	dma_core_pipe_stage_dma_write pipe_stage_dma_write (
		.clk              (clk_clk_clk),                                             //   input,    width = 1,   clk.clk
		.m0_waitrequest   (pipe_stage_dma_write_m0_waitrequest),                     //   input,    width = 1,    m0.waitrequest
		.m0_readdata      (pipe_stage_dma_write_m0_readdata),                        //   input,  width = 512,      .readdata
		.m0_readdatavalid (pipe_stage_dma_write_m0_readdatavalid),                   //   input,    width = 1,      .readdatavalid
		.m0_burstcount    (pipe_stage_dma_write_m0_burstcount),                      //  output,    width = 3,      .burstcount
		.m0_writedata     (pipe_stage_dma_write_m0_writedata),                       //  output,  width = 512,      .writedata
		.m0_address       (pipe_stage_dma_write_m0_address),                         //  output,   width = 50,      .address
		.m0_write         (pipe_stage_dma_write_m0_write),                           //  output,    width = 1,      .write
		.m0_read          (pipe_stage_dma_write_m0_read),                            //  output,    width = 1,      .read
		.m0_byteenable    (pipe_stage_dma_write_m0_byteenable),                      //  output,   width = 64,      .byteenable
		.m0_debugaccess   (pipe_stage_dma_write_m0_debugaccess),                     //  output,    width = 1,      .debugaccess
		.reset            (~clk_clk_reset_reset),                                    //   input,    width = 1, reset.reset
		.s0_waitrequest   (mm_interconnect_1_pipe_stage_dma_write_s0_waitrequest),   //  output,    width = 1,    s0.waitrequest
		.s0_readdata      (mm_interconnect_1_pipe_stage_dma_write_s0_readdata),      //  output,  width = 512,      .readdata
		.s0_readdatavalid (mm_interconnect_1_pipe_stage_dma_write_s0_readdatavalid), //  output,    width = 1,      .readdatavalid
		.s0_burstcount    (mm_interconnect_1_pipe_stage_dma_write_s0_burstcount),    //   input,    width = 3,      .burstcount
		.s0_writedata     (mm_interconnect_1_pipe_stage_dma_write_s0_writedata),     //   input,  width = 512,      .writedata
		.s0_address       (mm_interconnect_1_pipe_stage_dma_write_s0_address),       //   input,   width = 50,      .address
		.s0_write         (mm_interconnect_1_pipe_stage_dma_write_s0_write),         //   input,    width = 1,      .write
		.s0_read          (mm_interconnect_1_pipe_stage_dma_write_s0_read),          //   input,    width = 1,      .read
		.s0_byteenable    (mm_interconnect_1_pipe_stage_dma_write_s0_byteenable),    //   input,   width = 64,      .byteenable
		.s0_debugaccess   (mm_interconnect_1_pipe_stage_dma_write_s0_debugaccess)    //   input,    width = 1,      .debugaccess
	);

	msgdma_bbb_pipe_stage_m pipe_stage_host_rd (
		.clk              (clk_clk_clk),                                           //   input,    width = 1,   clk.clk
		.m0_waitrequest   (host_rd_waitrequest),                                   //   input,    width = 1,    m0.waitrequest
		.m0_readdata      (host_rd_readdata),                                      //   input,  width = 512,      .readdata
		.m0_readdatavalid (host_rd_readdatavalid),                                 //   input,    width = 1,      .readdatavalid
		.m0_burstcount    (host_rd_burstcount),                                    //  output,    width = 3,      .burstcount
		.m0_writedata     (host_rd_writedata),                                     //  output,  width = 512,      .writedata
		.m0_address       (host_rd_address),                                       //  output,   width = 48,      .address
		.m0_write         (host_rd_write),                                         //  output,    width = 1,      .write
		.m0_read          (host_rd_read),                                          //  output,    width = 1,      .read
		.m0_byteenable    (host_rd_byteenable),                                    //  output,   width = 64,      .byteenable
		.m0_debugaccess   (host_rd_debugaccess),                                   //  output,    width = 1,      .debugaccess
		.reset            (~clk_clk_reset_reset),                                  //   input,    width = 1, reset.reset
		.s0_waitrequest   (mm_interconnect_3_pipe_stage_host_rd_s0_waitrequest),   //  output,    width = 1,    s0.waitrequest
		.s0_readdata      (mm_interconnect_3_pipe_stage_host_rd_s0_readdata),      //  output,  width = 512,      .readdata
		.s0_readdatavalid (mm_interconnect_3_pipe_stage_host_rd_s0_readdatavalid), //  output,    width = 1,      .readdatavalid
		.s0_burstcount    (mm_interconnect_3_pipe_stage_host_rd_s0_burstcount),    //   input,    width = 3,      .burstcount
		.s0_writedata     (mm_interconnect_3_pipe_stage_host_rd_s0_writedata),     //   input,  width = 512,      .writedata
		.s0_address       (mm_interconnect_3_pipe_stage_host_rd_s0_address),       //   input,   width = 48,      .address
		.s0_write         (mm_interconnect_3_pipe_stage_host_rd_s0_write),         //   input,    width = 1,      .write
		.s0_read          (mm_interconnect_3_pipe_stage_host_rd_s0_read),          //   input,    width = 1,      .read
		.s0_byteenable    (mm_interconnect_3_pipe_stage_host_rd_s0_byteenable),    //   input,   width = 64,      .byteenable
		.s0_debugaccess   (mm_interconnect_3_pipe_stage_host_rd_s0_debugaccess)    //   input,    width = 1,      .debugaccess
	);

	msgdma_bbb_mm_bridge_1 pipe_stage_host_wr (
		.clk              (clk_clk_clk),                                           //   input,    width = 1,   clk.clk
		.m0_waitrequest   (host_wr_waitrequest),                                   //   input,    width = 1,    m0.waitrequest
		.m0_readdata      (host_wr_readdata),                                      //   input,  width = 512,      .readdata
		.m0_readdatavalid (host_wr_readdatavalid),                                 //   input,    width = 1,      .readdatavalid
		.m0_burstcount    (host_wr_burstcount),                                    //  output,    width = 3,      .burstcount
		.m0_writedata     (host_wr_writedata),                                     //  output,  width = 512,      .writedata
		.m0_address       (host_wr_address),                                       //  output,   width = 49,      .address
		.m0_write         (host_wr_write),                                         //  output,    width = 1,      .write
		.m0_read          (host_wr_read),                                          //  output,    width = 1,      .read
		.m0_byteenable    (host_wr_byteenable),                                    //  output,   width = 64,      .byteenable
		.m0_debugaccess   (host_wr_debugaccess),                                   //  output,    width = 1,      .debugaccess
		.reset            (~clk_clk_reset_reset),                                  //   input,    width = 1, reset.reset
		.s0_waitrequest   (mm_interconnect_3_pipe_stage_host_wr_s0_waitrequest),   //  output,    width = 1,    s0.waitrequest
		.s0_readdata      (mm_interconnect_3_pipe_stage_host_wr_s0_readdata),      //  output,  width = 512,      .readdata
		.s0_readdatavalid (mm_interconnect_3_pipe_stage_host_wr_s0_readdatavalid), //  output,    width = 1,      .readdatavalid
		.s0_burstcount    (mm_interconnect_3_pipe_stage_host_wr_s0_burstcount),    //   input,    width = 3,      .burstcount
		.s0_writedata     (mm_interconnect_3_pipe_stage_host_wr_s0_writedata),     //   input,  width = 512,      .writedata
		.s0_address       (mm_interconnect_3_pipe_stage_host_wr_s0_address),       //   input,   width = 49,      .address
		.s0_write         (mm_interconnect_3_pipe_stage_host_wr_s0_write),         //   input,    width = 1,      .write
		.s0_read          (mm_interconnect_3_pipe_stage_host_wr_s0_read),          //   input,    width = 1,      .read
		.s0_byteenable    (mm_interconnect_3_pipe_stage_host_wr_s0_byteenable),    //   input,   width = 64,      .byteenable
		.s0_debugaccess   (mm_interconnect_3_pipe_stage_host_wr_s0_debugaccess)    //   input,    width = 1,      .debugaccess
	);

	msgdma_bbb_mm_bridge_0 pipe_stage_mem (
		.clk              (clk_clk_clk),                                       //   input,    width = 1,   clk.clk
		.m0_waitrequest   (mem_waitrequest),                                   //   input,    width = 1,    m0.waitrequest
		.m0_readdata      (mem_readdata),                                      //   input,  width = 512,      .readdata
		.m0_readdatavalid (mem_readdatavalid),                                 //   input,    width = 1,      .readdatavalid
		.m0_burstcount    (mem_burstcount),                                    //  output,    width = 3,      .burstcount
		.m0_writedata     (mem_writedata),                                     //  output,  width = 512,      .writedata
		.m0_address       (mem_address),                                       //  output,   width = 48,      .address
		.m0_write         (mem_write),                                         //  output,    width = 1,      .write
		.m0_read          (mem_read),                                          //  output,    width = 1,      .read
		.m0_byteenable    (mem_byteenable),                                    //  output,   width = 64,      .byteenable
		.m0_debugaccess   (mem_debugaccess),                                   //  output,    width = 1,      .debugaccess
		.reset            (~clk_clk_reset_reset),                              //   input,    width = 1, reset.reset
		.s0_waitrequest   (mm_interconnect_3_pipe_stage_mem_s0_waitrequest),   //  output,    width = 1,    s0.waitrequest
		.s0_readdata      (mm_interconnect_3_pipe_stage_mem_s0_readdata),      //  output,  width = 512,      .readdata
		.s0_readdatavalid (mm_interconnect_3_pipe_stage_mem_s0_readdatavalid), //  output,    width = 1,      .readdatavalid
		.s0_burstcount    (mm_interconnect_3_pipe_stage_mem_s0_burstcount),    //   input,    width = 3,      .burstcount
		.s0_writedata     (mm_interconnect_3_pipe_stage_mem_s0_writedata),     //   input,  width = 512,      .writedata
		.s0_address       (mm_interconnect_3_pipe_stage_mem_s0_address),       //   input,   width = 48,      .address
		.s0_write         (mm_interconnect_3_pipe_stage_mem_s0_write),         //   input,    width = 1,      .write
		.s0_read          (mm_interconnect_3_pipe_stage_mem_s0_read),          //   input,    width = 1,      .read
		.s0_byteenable    (mm_interconnect_3_pipe_stage_mem_s0_byteenable),    //   input,   width = 64,      .byteenable
		.s0_debugaccess   (mm_interconnect_3_pipe_stage_mem_s0_debugaccess)    //   input,    width = 1,      .debugaccess
	);

	msgdma_bbb_altera_mm_interconnect_191_jmxhaza mm_interconnect_0 (
		.dma_read_master_Data_Read_Master_address              (dma_read_master_data_read_master_address),               //   input,   width = 50,                dma_read_master_Data_Read_Master.address
		.dma_read_master_Data_Read_Master_waitrequest          (dma_read_master_data_read_master_waitrequest),           //  output,    width = 1,                                                .waitrequest
		.dma_read_master_Data_Read_Master_burstcount           (dma_read_master_data_read_master_burstcount),            //   input,    width = 3,                                                .burstcount
		.dma_read_master_Data_Read_Master_byteenable           (dma_read_master_data_read_master_byteenable),            //   input,   width = 64,                                                .byteenable
		.dma_read_master_Data_Read_Master_read                 (dma_read_master_data_read_master_read),                  //   input,    width = 1,                                                .read
		.dma_read_master_Data_Read_Master_readdata             (dma_read_master_data_read_master_readdata),              //  output,  width = 512,                                                .readdata
		.dma_read_master_Data_Read_Master_readdatavalid        (dma_read_master_data_read_master_readdatavalid),         //  output,    width = 1,                                                .readdatavalid
		.pipe_stage_dma_read_s0_address                        (mm_interconnect_0_pipe_stage_dma_read_s0_address),       //  output,   width = 50,                          pipe_stage_dma_read_s0.address
		.pipe_stage_dma_read_s0_write                          (mm_interconnect_0_pipe_stage_dma_read_s0_write),         //  output,    width = 1,                                                .write
		.pipe_stage_dma_read_s0_read                           (mm_interconnect_0_pipe_stage_dma_read_s0_read),          //  output,    width = 1,                                                .read
		.pipe_stage_dma_read_s0_readdata                       (mm_interconnect_0_pipe_stage_dma_read_s0_readdata),      //   input,  width = 512,                                                .readdata
		.pipe_stage_dma_read_s0_writedata                      (mm_interconnect_0_pipe_stage_dma_read_s0_writedata),     //  output,  width = 512,                                                .writedata
		.pipe_stage_dma_read_s0_burstcount                     (mm_interconnect_0_pipe_stage_dma_read_s0_burstcount),    //  output,    width = 3,                                                .burstcount
		.pipe_stage_dma_read_s0_byteenable                     (mm_interconnect_0_pipe_stage_dma_read_s0_byteenable),    //  output,   width = 64,                                                .byteenable
		.pipe_stage_dma_read_s0_readdatavalid                  (mm_interconnect_0_pipe_stage_dma_read_s0_readdatavalid), //   input,    width = 1,                                                .readdatavalid
		.pipe_stage_dma_read_s0_waitrequest                    (mm_interconnect_0_pipe_stage_dma_read_s0_waitrequest),   //   input,    width = 1,                                                .waitrequest
		.pipe_stage_dma_read_s0_debugaccess                    (mm_interconnect_0_pipe_stage_dma_read_s0_debugaccess),   //  output,    width = 1,                                                .debugaccess
		.pipe_stage_dma_read_reset_reset_bridge_in_reset_reset (~clk_clk_reset_reset),                                   //   input,    width = 1, pipe_stage_dma_read_reset_reset_bridge_in_reset.reset
		.clk_clk_clk                                           (clk_clk_clk)                                             //   input,    width = 1,                                         clk_clk.clk
	);

	msgdma_bbb_altera_mm_interconnect_191_32dta6a mm_interconnect_1 (
		.dma_write_master_Data_Write_Master_address             (dma_write_master_data_write_master_address),              //   input,   width = 50,               dma_write_master_Data_Write_Master.address
		.dma_write_master_Data_Write_Master_waitrequest         (dma_write_master_data_write_master_waitrequest),          //  output,    width = 1,                                                 .waitrequest
		.dma_write_master_Data_Write_Master_burstcount          (dma_write_master_data_write_master_burstcount),           //   input,    width = 3,                                                 .burstcount
		.dma_write_master_Data_Write_Master_byteenable          (dma_write_master_data_write_master_byteenable),           //   input,   width = 64,                                                 .byteenable
		.dma_write_master_Data_Write_Master_write               (dma_write_master_data_write_master_write),                //   input,    width = 1,                                                 .write
		.dma_write_master_Data_Write_Master_writedata           (dma_write_master_data_write_master_writedata),            //   input,  width = 512,                                                 .writedata
		.pipe_stage_dma_write_s0_address                        (mm_interconnect_1_pipe_stage_dma_write_s0_address),       //  output,   width = 50,                          pipe_stage_dma_write_s0.address
		.pipe_stage_dma_write_s0_write                          (mm_interconnect_1_pipe_stage_dma_write_s0_write),         //  output,    width = 1,                                                 .write
		.pipe_stage_dma_write_s0_read                           (mm_interconnect_1_pipe_stage_dma_write_s0_read),          //  output,    width = 1,                                                 .read
		.pipe_stage_dma_write_s0_readdata                       (mm_interconnect_1_pipe_stage_dma_write_s0_readdata),      //   input,  width = 512,                                                 .readdata
		.pipe_stage_dma_write_s0_writedata                      (mm_interconnect_1_pipe_stage_dma_write_s0_writedata),     //  output,  width = 512,                                                 .writedata
		.pipe_stage_dma_write_s0_burstcount                     (mm_interconnect_1_pipe_stage_dma_write_s0_burstcount),    //  output,    width = 3,                                                 .burstcount
		.pipe_stage_dma_write_s0_byteenable                     (mm_interconnect_1_pipe_stage_dma_write_s0_byteenable),    //  output,   width = 64,                                                 .byteenable
		.pipe_stage_dma_write_s0_readdatavalid                  (mm_interconnect_1_pipe_stage_dma_write_s0_readdatavalid), //   input,    width = 1,                                                 .readdatavalid
		.pipe_stage_dma_write_s0_waitrequest                    (mm_interconnect_1_pipe_stage_dma_write_s0_waitrequest),   //   input,    width = 1,                                                 .waitrequest
		.pipe_stage_dma_write_s0_debugaccess                    (mm_interconnect_1_pipe_stage_dma_write_s0_debugaccess),   //  output,    width = 1,                                                 .debugaccess
		.pipe_stage_dma_write_reset_reset_bridge_in_reset_reset (~clk_clk_reset_reset),                                    //   input,    width = 1, pipe_stage_dma_write_reset_reset_bridge_in_reset.reset
		.clk_clk_clk                                            (clk_clk_clk)                                              //   input,    width = 1,                                          clk_clk.clk
	);

	msgdma_bbb_altera_mm_interconnect_191_shqzigy mm_interconnect_2 (
		.csr_m0_address                                          (csr_m0_address),                                                            //   input,    width = 7,                                       csr_m0.address
		.csr_m0_waitrequest                                      (csr_m0_waitrequest),                                                        //  output,    width = 1,                                             .waitrequest
		.csr_m0_burstcount                                       (csr_m0_burstcount),                                                         //   input,    width = 1,                                             .burstcount
		.csr_m0_byteenable                                       (csr_m0_byteenable),                                                         //   input,    width = 8,                                             .byteenable
		.csr_m0_read                                             (csr_m0_read),                                                               //   input,    width = 1,                                             .read
		.csr_m0_readdata                                         (csr_m0_readdata),                                                           //  output,   width = 64,                                             .readdata
		.csr_m0_readdatavalid                                    (csr_m0_readdatavalid),                                                      //  output,    width = 1,                                             .readdatavalid
		.csr_m0_write                                            (csr_m0_write),                                                              //   input,    width = 1,                                             .write
		.csr_m0_writedata                                        (csr_m0_writedata),                                                          //   input,   width = 64,                                             .writedata
		.csr_m0_debugaccess                                      (csr_m0_debugaccess),                                                        //   input,    width = 1,                                             .debugaccess
		.modular_sgdma_dispatcher_0_CSR_address                  (mm_interconnect_2_modular_sgdma_dispatcher_0_csr_address),                  //  output,    width = 3,               modular_sgdma_dispatcher_0_CSR.address
		.modular_sgdma_dispatcher_0_CSR_write                    (mm_interconnect_2_modular_sgdma_dispatcher_0_csr_write),                    //  output,    width = 1,                                             .write
		.modular_sgdma_dispatcher_0_CSR_read                     (mm_interconnect_2_modular_sgdma_dispatcher_0_csr_read),                     //  output,    width = 1,                                             .read
		.modular_sgdma_dispatcher_0_CSR_readdata                 (mm_interconnect_2_modular_sgdma_dispatcher_0_csr_readdata),                 //   input,   width = 32,                                             .readdata
		.modular_sgdma_dispatcher_0_CSR_writedata                (mm_interconnect_2_modular_sgdma_dispatcher_0_csr_writedata),                //  output,   width = 32,                                             .writedata
		.modular_sgdma_dispatcher_0_CSR_byteenable               (mm_interconnect_2_modular_sgdma_dispatcher_0_csr_byteenable),               //  output,    width = 4,                                             .byteenable
		.modular_sgdma_dispatcher_0_Descriptor_Slave_write       (mm_interconnect_2_modular_sgdma_dispatcher_0_descriptor_slave_write),       //  output,    width = 1,  modular_sgdma_dispatcher_0_Descriptor_Slave.write
		.modular_sgdma_dispatcher_0_Descriptor_Slave_writedata   (mm_interconnect_2_modular_sgdma_dispatcher_0_descriptor_slave_writedata),   //  output,  width = 256,                                             .writedata
		.modular_sgdma_dispatcher_0_Descriptor_Slave_byteenable  (mm_interconnect_2_modular_sgdma_dispatcher_0_descriptor_slave_byteenable),  //  output,   width = 32,                                             .byteenable
		.modular_sgdma_dispatcher_0_Descriptor_Slave_waitrequest (mm_interconnect_2_modular_sgdma_dispatcher_0_descriptor_slave_waitrequest), //   input,    width = 1,                                             .waitrequest
		.msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_address    (mm_interconnect_2_msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_address),    //  output,    width = 3, msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave.address
		.msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_write      (mm_interconnect_2_msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_write),      //  output,    width = 1,                                             .write
		.msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_read       (mm_interconnect_2_msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_read),       //  output,    width = 1,                                             .read
		.msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_readdata   (mm_interconnect_2_msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_readdata),   //   input,   width = 64,                                             .readdata
		.msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_writedata  (mm_interconnect_2_msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_writedata),  //  output,   width = 64,                                             .writedata
		.csr_reset_reset_bridge_in_reset_reset                   (~clk_clk_reset_reset),                                                      //   input,    width = 1,              csr_reset_reset_bridge_in_reset.reset
		.clk_clk_clk                                             (clk_clk_clk)                                                                //   input,    width = 1,                                      clk_clk.clk
	);

	msgdma_bbb_altera_mm_interconnect_191_iuu5b4y mm_interconnect_3 (
		.pipe_stage_dma_write_m0_address                        (pipe_stage_dma_write_m0_address),                        //   input,   width = 50,                          pipe_stage_dma_write_m0.address
		.pipe_stage_dma_write_m0_waitrequest                    (pipe_stage_dma_write_m0_waitrequest),                    //  output,    width = 1,                                                 .waitrequest
		.pipe_stage_dma_write_m0_burstcount                     (pipe_stage_dma_write_m0_burstcount),                     //   input,    width = 3,                                                 .burstcount
		.pipe_stage_dma_write_m0_byteenable                     (pipe_stage_dma_write_m0_byteenable),                     //   input,   width = 64,                                                 .byteenable
		.pipe_stage_dma_write_m0_read                           (pipe_stage_dma_write_m0_read),                           //   input,    width = 1,                                                 .read
		.pipe_stage_dma_write_m0_readdata                       (pipe_stage_dma_write_m0_readdata),                       //  output,  width = 512,                                                 .readdata
		.pipe_stage_dma_write_m0_readdatavalid                  (pipe_stage_dma_write_m0_readdatavalid),                  //  output,    width = 1,                                                 .readdatavalid
		.pipe_stage_dma_write_m0_write                          (pipe_stage_dma_write_m0_write),                          //   input,    width = 1,                                                 .write
		.pipe_stage_dma_write_m0_writedata                      (pipe_stage_dma_write_m0_writedata),                      //   input,  width = 512,                                                 .writedata
		.pipe_stage_dma_write_m0_debugaccess                    (pipe_stage_dma_write_m0_debugaccess),                    //   input,    width = 1,                                                 .debugaccess
		.pipe_stage_dma_read_m0_address                         (pipe_stage_dma_read_m0_address),                         //   input,   width = 50,                           pipe_stage_dma_read_m0.address
		.pipe_stage_dma_read_m0_waitrequest                     (pipe_stage_dma_read_m0_waitrequest),                     //  output,    width = 1,                                                 .waitrequest
		.pipe_stage_dma_read_m0_burstcount                      (pipe_stage_dma_read_m0_burstcount),                      //   input,    width = 3,                                                 .burstcount
		.pipe_stage_dma_read_m0_byteenable                      (pipe_stage_dma_read_m0_byteenable),                      //   input,   width = 64,                                                 .byteenable
		.pipe_stage_dma_read_m0_read                            (pipe_stage_dma_read_m0_read),                            //   input,    width = 1,                                                 .read
		.pipe_stage_dma_read_m0_readdata                        (pipe_stage_dma_read_m0_readdata),                        //  output,  width = 512,                                                 .readdata
		.pipe_stage_dma_read_m0_readdatavalid                   (pipe_stage_dma_read_m0_readdatavalid),                   //  output,    width = 1,                                                 .readdatavalid
		.pipe_stage_dma_read_m0_write                           (pipe_stage_dma_read_m0_write),                           //   input,    width = 1,                                                 .write
		.pipe_stage_dma_read_m0_writedata                       (pipe_stage_dma_read_m0_writedata),                       //   input,  width = 512,                                                 .writedata
		.pipe_stage_dma_read_m0_debugaccess                     (pipe_stage_dma_read_m0_debugaccess),                     //   input,    width = 1,                                                 .debugaccess
		.pipe_stage_mem_s0_address                              (mm_interconnect_3_pipe_stage_mem_s0_address),            //  output,   width = 48,                                pipe_stage_mem_s0.address
		.pipe_stage_mem_s0_write                                (mm_interconnect_3_pipe_stage_mem_s0_write),              //  output,    width = 1,                                                 .write
		.pipe_stage_mem_s0_read                                 (mm_interconnect_3_pipe_stage_mem_s0_read),               //  output,    width = 1,                                                 .read
		.pipe_stage_mem_s0_readdata                             (mm_interconnect_3_pipe_stage_mem_s0_readdata),           //   input,  width = 512,                                                 .readdata
		.pipe_stage_mem_s0_writedata                            (mm_interconnect_3_pipe_stage_mem_s0_writedata),          //  output,  width = 512,                                                 .writedata
		.pipe_stage_mem_s0_burstcount                           (mm_interconnect_3_pipe_stage_mem_s0_burstcount),         //  output,    width = 3,                                                 .burstcount
		.pipe_stage_mem_s0_byteenable                           (mm_interconnect_3_pipe_stage_mem_s0_byteenable),         //  output,   width = 64,                                                 .byteenable
		.pipe_stage_mem_s0_readdatavalid                        (mm_interconnect_3_pipe_stage_mem_s0_readdatavalid),      //   input,    width = 1,                                                 .readdatavalid
		.pipe_stage_mem_s0_waitrequest                          (mm_interconnect_3_pipe_stage_mem_s0_waitrequest),        //   input,    width = 1,                                                 .waitrequest
		.pipe_stage_mem_s0_debugaccess                          (mm_interconnect_3_pipe_stage_mem_s0_debugaccess),        //  output,    width = 1,                                                 .debugaccess
		.pipe_stage_host_wr_s0_address                          (mm_interconnect_3_pipe_stage_host_wr_s0_address),        //  output,   width = 49,                            pipe_stage_host_wr_s0.address
		.pipe_stage_host_wr_s0_write                            (mm_interconnect_3_pipe_stage_host_wr_s0_write),          //  output,    width = 1,                                                 .write
		.pipe_stage_host_wr_s0_read                             (mm_interconnect_3_pipe_stage_host_wr_s0_read),           //  output,    width = 1,                                                 .read
		.pipe_stage_host_wr_s0_readdata                         (mm_interconnect_3_pipe_stage_host_wr_s0_readdata),       //   input,  width = 512,                                                 .readdata
		.pipe_stage_host_wr_s0_writedata                        (mm_interconnect_3_pipe_stage_host_wr_s0_writedata),      //  output,  width = 512,                                                 .writedata
		.pipe_stage_host_wr_s0_burstcount                       (mm_interconnect_3_pipe_stage_host_wr_s0_burstcount),     //  output,    width = 3,                                                 .burstcount
		.pipe_stage_host_wr_s0_byteenable                       (mm_interconnect_3_pipe_stage_host_wr_s0_byteenable),     //  output,   width = 64,                                                 .byteenable
		.pipe_stage_host_wr_s0_readdatavalid                    (mm_interconnect_3_pipe_stage_host_wr_s0_readdatavalid),  //   input,    width = 1,                                                 .readdatavalid
		.pipe_stage_host_wr_s0_waitrequest                      (mm_interconnect_3_pipe_stage_host_wr_s0_waitrequest),    //   input,    width = 1,                                                 .waitrequest
		.pipe_stage_host_wr_s0_debugaccess                      (mm_interconnect_3_pipe_stage_host_wr_s0_debugaccess),    //  output,    width = 1,                                                 .debugaccess
		.pipe_stage_host_rd_s0_address                          (mm_interconnect_3_pipe_stage_host_rd_s0_address),        //  output,   width = 48,                            pipe_stage_host_rd_s0.address
		.pipe_stage_host_rd_s0_write                            (mm_interconnect_3_pipe_stage_host_rd_s0_write),          //  output,    width = 1,                                                 .write
		.pipe_stage_host_rd_s0_read                             (mm_interconnect_3_pipe_stage_host_rd_s0_read),           //  output,    width = 1,                                                 .read
		.pipe_stage_host_rd_s0_readdata                         (mm_interconnect_3_pipe_stage_host_rd_s0_readdata),       //   input,  width = 512,                                                 .readdata
		.pipe_stage_host_rd_s0_writedata                        (mm_interconnect_3_pipe_stage_host_rd_s0_writedata),      //  output,  width = 512,                                                 .writedata
		.pipe_stage_host_rd_s0_burstcount                       (mm_interconnect_3_pipe_stage_host_rd_s0_burstcount),     //  output,    width = 3,                                                 .burstcount
		.pipe_stage_host_rd_s0_byteenable                       (mm_interconnect_3_pipe_stage_host_rd_s0_byteenable),     //  output,   width = 64,                                                 .byteenable
		.pipe_stage_host_rd_s0_readdatavalid                    (mm_interconnect_3_pipe_stage_host_rd_s0_readdatavalid),  //   input,    width = 1,                                                 .readdatavalid
		.pipe_stage_host_rd_s0_waitrequest                      (mm_interconnect_3_pipe_stage_host_rd_s0_waitrequest),    //   input,    width = 1,                                                 .waitrequest
		.pipe_stage_host_rd_s0_debugaccess                      (mm_interconnect_3_pipe_stage_host_rd_s0_debugaccess),    //  output,    width = 1,                                                 .debugaccess
		.magic_number_rom_slave_address                         (mm_interconnect_3_magic_number_rom_slave_address),       //  output,    width = 2,                           magic_number_rom_slave.address
		.magic_number_rom_slave_read                            (mm_interconnect_3_magic_number_rom_slave_read),          //  output,    width = 1,                                                 .read
		.magic_number_rom_slave_readdata                        (mm_interconnect_3_magic_number_rom_slave_readdata),      //   input,  width = 512,                                                 .readdata
		.magic_number_rom_slave_burstcount                      (mm_interconnect_3_magic_number_rom_slave_burstcount),    //  output,    width = 3,                                                 .burstcount
		.magic_number_rom_slave_readdatavalid                   (mm_interconnect_3_magic_number_rom_slave_readdatavalid), //   input,    width = 1,                                                 .readdatavalid
		.magic_number_rom_slave_waitrequest                     (mm_interconnect_3_magic_number_rom_slave_waitrequest),   //   input,    width = 1,                                                 .waitrequest
		.pipe_stage_dma_write_reset_reset_bridge_in_reset_reset (~clk_clk_reset_reset),                                   //   input,    width = 1, pipe_stage_dma_write_reset_reset_bridge_in_reset.reset
		.clk_clk_clk                                            (clk_clk_clk)                                             //   input,    width = 1,                                          clk_clk.clk
	);

endmodule
