// msgdma_bbb_altera_mm_interconnect_191_iuu5b4y.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 19.2 57

`timescale 1 ps / 1 ps
module msgdma_bbb_altera_mm_interconnect_191_iuu5b4y (
		input  wire [49:0]  pipe_stage_dma_write_m0_address,                        //                          pipe_stage_dma_write_m0.address
		output wire         pipe_stage_dma_write_m0_waitrequest,                    //                                                 .waitrequest
		input  wire [2:0]   pipe_stage_dma_write_m0_burstcount,                     //                                                 .burstcount
		input  wire [63:0]  pipe_stage_dma_write_m0_byteenable,                     //                                                 .byteenable
		input  wire         pipe_stage_dma_write_m0_read,                           //                                                 .read
		output wire [511:0] pipe_stage_dma_write_m0_readdata,                       //                                                 .readdata
		output wire         pipe_stage_dma_write_m0_readdatavalid,                  //                                                 .readdatavalid
		input  wire         pipe_stage_dma_write_m0_write,                          //                                                 .write
		input  wire [511:0] pipe_stage_dma_write_m0_writedata,                      //                                                 .writedata
		input  wire         pipe_stage_dma_write_m0_debugaccess,                    //                                                 .debugaccess
		input  wire [49:0]  pipe_stage_dma_read_m0_address,                         //                           pipe_stage_dma_read_m0.address
		output wire         pipe_stage_dma_read_m0_waitrequest,                     //                                                 .waitrequest
		input  wire [2:0]   pipe_stage_dma_read_m0_burstcount,                      //                                                 .burstcount
		input  wire [63:0]  pipe_stage_dma_read_m0_byteenable,                      //                                                 .byteenable
		input  wire         pipe_stage_dma_read_m0_read,                            //                                                 .read
		output wire [511:0] pipe_stage_dma_read_m0_readdata,                        //                                                 .readdata
		output wire         pipe_stage_dma_read_m0_readdatavalid,                   //                                                 .readdatavalid
		input  wire         pipe_stage_dma_read_m0_write,                           //                                                 .write
		input  wire [511:0] pipe_stage_dma_read_m0_writedata,                       //                                                 .writedata
		input  wire         pipe_stage_dma_read_m0_debugaccess,                     //                                                 .debugaccess
		output wire [47:0]  pipe_stage_mem_s0_address,                              //                                pipe_stage_mem_s0.address
		output wire         pipe_stage_mem_s0_write,                                //                                                 .write
		output wire         pipe_stage_mem_s0_read,                                 //                                                 .read
		input  wire [511:0] pipe_stage_mem_s0_readdata,                             //                                                 .readdata
		output wire [511:0] pipe_stage_mem_s0_writedata,                            //                                                 .writedata
		output wire [2:0]   pipe_stage_mem_s0_burstcount,                           //                                                 .burstcount
		output wire [63:0]  pipe_stage_mem_s0_byteenable,                           //                                                 .byteenable
		input  wire         pipe_stage_mem_s0_readdatavalid,                        //                                                 .readdatavalid
		input  wire         pipe_stage_mem_s0_waitrequest,                          //                                                 .waitrequest
		output wire         pipe_stage_mem_s0_debugaccess,                          //                                                 .debugaccess
		output wire [48:0]  pipe_stage_host_wr_s0_address,                          //                            pipe_stage_host_wr_s0.address
		output wire         pipe_stage_host_wr_s0_write,                            //                                                 .write
		output wire         pipe_stage_host_wr_s0_read,                             //                                                 .read
		input  wire [511:0] pipe_stage_host_wr_s0_readdata,                         //                                                 .readdata
		output wire [511:0] pipe_stage_host_wr_s0_writedata,                        //                                                 .writedata
		output wire [2:0]   pipe_stage_host_wr_s0_burstcount,                       //                                                 .burstcount
		output wire [63:0]  pipe_stage_host_wr_s0_byteenable,                       //                                                 .byteenable
		input  wire         pipe_stage_host_wr_s0_readdatavalid,                    //                                                 .readdatavalid
		input  wire         pipe_stage_host_wr_s0_waitrequest,                      //                                                 .waitrequest
		output wire         pipe_stage_host_wr_s0_debugaccess,                      //                                                 .debugaccess
		output wire [47:0]  pipe_stage_host_rd_s0_address,                          //                            pipe_stage_host_rd_s0.address
		output wire         pipe_stage_host_rd_s0_write,                            //                                                 .write
		output wire         pipe_stage_host_rd_s0_read,                             //                                                 .read
		input  wire [511:0] pipe_stage_host_rd_s0_readdata,                         //                                                 .readdata
		output wire [511:0] pipe_stage_host_rd_s0_writedata,                        //                                                 .writedata
		output wire [2:0]   pipe_stage_host_rd_s0_burstcount,                       //                                                 .burstcount
		output wire [63:0]  pipe_stage_host_rd_s0_byteenable,                       //                                                 .byteenable
		input  wire         pipe_stage_host_rd_s0_readdatavalid,                    //                                                 .readdatavalid
		input  wire         pipe_stage_host_rd_s0_waitrequest,                      //                                                 .waitrequest
		output wire         pipe_stage_host_rd_s0_debugaccess,                      //                                                 .debugaccess
		output wire [1:0]   magic_number_rom_slave_address,                         //                           magic_number_rom_slave.address
		output wire         magic_number_rom_slave_read,                            //                                                 .read
		input  wire [511:0] magic_number_rom_slave_readdata,                        //                                                 .readdata
		output wire [2:0]   magic_number_rom_slave_burstcount,                      //                                                 .burstcount
		input  wire         magic_number_rom_slave_readdatavalid,                   //                                                 .readdatavalid
		input  wire         magic_number_rom_slave_waitrequest,                     //                                                 .waitrequest
		input  wire         pipe_stage_dma_write_reset_reset_bridge_in_reset_reset, // pipe_stage_dma_write_reset_reset_bridge_in_reset.reset
		input  wire         clk_clk_clk                                             //                                          clk_clk.clk
	);

	wire          pipe_stage_dma_write_m0_translator_avalon_universal_master_0_waitrequest;   // pipe_stage_dma_write_m0_agent:av_waitrequest -> pipe_stage_dma_write_m0_translator:uav_waitrequest
	wire  [511:0] pipe_stage_dma_write_m0_translator_avalon_universal_master_0_readdata;      // pipe_stage_dma_write_m0_agent:av_readdata -> pipe_stage_dma_write_m0_translator:uav_readdata
	wire          pipe_stage_dma_write_m0_translator_avalon_universal_master_0_debugaccess;   // pipe_stage_dma_write_m0_translator:uav_debugaccess -> pipe_stage_dma_write_m0_agent:av_debugaccess
	wire   [49:0] pipe_stage_dma_write_m0_translator_avalon_universal_master_0_address;       // pipe_stage_dma_write_m0_translator:uav_address -> pipe_stage_dma_write_m0_agent:av_address
	wire          pipe_stage_dma_write_m0_translator_avalon_universal_master_0_read;          // pipe_stage_dma_write_m0_translator:uav_read -> pipe_stage_dma_write_m0_agent:av_read
	wire   [63:0] pipe_stage_dma_write_m0_translator_avalon_universal_master_0_byteenable;    // pipe_stage_dma_write_m0_translator:uav_byteenable -> pipe_stage_dma_write_m0_agent:av_byteenable
	wire          pipe_stage_dma_write_m0_translator_avalon_universal_master_0_readdatavalid; // pipe_stage_dma_write_m0_agent:av_readdatavalid -> pipe_stage_dma_write_m0_translator:uav_readdatavalid
	wire          pipe_stage_dma_write_m0_translator_avalon_universal_master_0_lock;          // pipe_stage_dma_write_m0_translator:uav_lock -> pipe_stage_dma_write_m0_agent:av_lock
	wire          pipe_stage_dma_write_m0_translator_avalon_universal_master_0_write;         // pipe_stage_dma_write_m0_translator:uav_write -> pipe_stage_dma_write_m0_agent:av_write
	wire  [511:0] pipe_stage_dma_write_m0_translator_avalon_universal_master_0_writedata;     // pipe_stage_dma_write_m0_translator:uav_writedata -> pipe_stage_dma_write_m0_agent:av_writedata
	wire    [8:0] pipe_stage_dma_write_m0_translator_avalon_universal_master_0_burstcount;    // pipe_stage_dma_write_m0_translator:uav_burstcount -> pipe_stage_dma_write_m0_agent:av_burstcount
	wire          pipe_stage_dma_read_m0_translator_avalon_universal_master_0_waitrequest;    // pipe_stage_dma_read_m0_agent:av_waitrequest -> pipe_stage_dma_read_m0_translator:uav_waitrequest
	wire  [511:0] pipe_stage_dma_read_m0_translator_avalon_universal_master_0_readdata;       // pipe_stage_dma_read_m0_agent:av_readdata -> pipe_stage_dma_read_m0_translator:uav_readdata
	wire          pipe_stage_dma_read_m0_translator_avalon_universal_master_0_debugaccess;    // pipe_stage_dma_read_m0_translator:uav_debugaccess -> pipe_stage_dma_read_m0_agent:av_debugaccess
	wire   [49:0] pipe_stage_dma_read_m0_translator_avalon_universal_master_0_address;        // pipe_stage_dma_read_m0_translator:uav_address -> pipe_stage_dma_read_m0_agent:av_address
	wire          pipe_stage_dma_read_m0_translator_avalon_universal_master_0_read;           // pipe_stage_dma_read_m0_translator:uav_read -> pipe_stage_dma_read_m0_agent:av_read
	wire   [63:0] pipe_stage_dma_read_m0_translator_avalon_universal_master_0_byteenable;     // pipe_stage_dma_read_m0_translator:uav_byteenable -> pipe_stage_dma_read_m0_agent:av_byteenable
	wire          pipe_stage_dma_read_m0_translator_avalon_universal_master_0_readdatavalid;  // pipe_stage_dma_read_m0_agent:av_readdatavalid -> pipe_stage_dma_read_m0_translator:uav_readdatavalid
	wire          pipe_stage_dma_read_m0_translator_avalon_universal_master_0_lock;           // pipe_stage_dma_read_m0_translator:uav_lock -> pipe_stage_dma_read_m0_agent:av_lock
	wire          pipe_stage_dma_read_m0_translator_avalon_universal_master_0_write;          // pipe_stage_dma_read_m0_translator:uav_write -> pipe_stage_dma_read_m0_agent:av_write
	wire  [511:0] pipe_stage_dma_read_m0_translator_avalon_universal_master_0_writedata;      // pipe_stage_dma_read_m0_translator:uav_writedata -> pipe_stage_dma_read_m0_agent:av_writedata
	wire    [8:0] pipe_stage_dma_read_m0_translator_avalon_universal_master_0_burstcount;     // pipe_stage_dma_read_m0_translator:uav_burstcount -> pipe_stage_dma_read_m0_agent:av_burstcount
	wire  [511:0] pipe_stage_mem_s0_agent_m0_readdata;                                        // pipe_stage_mem_s0_translator:uav_readdata -> pipe_stage_mem_s0_agent:m0_readdata
	wire          pipe_stage_mem_s0_agent_m0_waitrequest;                                     // pipe_stage_mem_s0_translator:uav_waitrequest -> pipe_stage_mem_s0_agent:m0_waitrequest
	wire          pipe_stage_mem_s0_agent_m0_debugaccess;                                     // pipe_stage_mem_s0_agent:m0_debugaccess -> pipe_stage_mem_s0_translator:uav_debugaccess
	wire   [49:0] pipe_stage_mem_s0_agent_m0_address;                                         // pipe_stage_mem_s0_agent:m0_address -> pipe_stage_mem_s0_translator:uav_address
	wire   [63:0] pipe_stage_mem_s0_agent_m0_byteenable;                                      // pipe_stage_mem_s0_agent:m0_byteenable -> pipe_stage_mem_s0_translator:uav_byteenable
	wire          pipe_stage_mem_s0_agent_m0_read;                                            // pipe_stage_mem_s0_agent:m0_read -> pipe_stage_mem_s0_translator:uav_read
	wire          pipe_stage_mem_s0_agent_m0_readdatavalid;                                   // pipe_stage_mem_s0_translator:uav_readdatavalid -> pipe_stage_mem_s0_agent:m0_readdatavalid
	wire          pipe_stage_mem_s0_agent_m0_lock;                                            // pipe_stage_mem_s0_agent:m0_lock -> pipe_stage_mem_s0_translator:uav_lock
	wire  [511:0] pipe_stage_mem_s0_agent_m0_writedata;                                       // pipe_stage_mem_s0_agent:m0_writedata -> pipe_stage_mem_s0_translator:uav_writedata
	wire          pipe_stage_mem_s0_agent_m0_write;                                           // pipe_stage_mem_s0_agent:m0_write -> pipe_stage_mem_s0_translator:uav_write
	wire    [8:0] pipe_stage_mem_s0_agent_m0_burstcount;                                      // pipe_stage_mem_s0_agent:m0_burstcount -> pipe_stage_mem_s0_translator:uav_burstcount
	wire          pipe_stage_mem_s0_agent_rf_source_valid;                                    // pipe_stage_mem_s0_agent:rf_source_valid -> pipe_stage_mem_s0_agent_rsp_fifo:in_valid
	wire  [677:0] pipe_stage_mem_s0_agent_rf_source_data;                                     // pipe_stage_mem_s0_agent:rf_source_data -> pipe_stage_mem_s0_agent_rsp_fifo:in_data
	wire          pipe_stage_mem_s0_agent_rf_source_ready;                                    // pipe_stage_mem_s0_agent_rsp_fifo:in_ready -> pipe_stage_mem_s0_agent:rf_source_ready
	wire          pipe_stage_mem_s0_agent_rf_source_startofpacket;                            // pipe_stage_mem_s0_agent:rf_source_startofpacket -> pipe_stage_mem_s0_agent_rsp_fifo:in_startofpacket
	wire          pipe_stage_mem_s0_agent_rf_source_endofpacket;                              // pipe_stage_mem_s0_agent:rf_source_endofpacket -> pipe_stage_mem_s0_agent_rsp_fifo:in_endofpacket
	wire          pipe_stage_mem_s0_agent_rsp_fifo_out_valid;                                 // pipe_stage_mem_s0_agent_rsp_fifo:out_valid -> pipe_stage_mem_s0_agent:rf_sink_valid
	wire  [677:0] pipe_stage_mem_s0_agent_rsp_fifo_out_data;                                  // pipe_stage_mem_s0_agent_rsp_fifo:out_data -> pipe_stage_mem_s0_agent:rf_sink_data
	wire          pipe_stage_mem_s0_agent_rsp_fifo_out_ready;                                 // pipe_stage_mem_s0_agent:rf_sink_ready -> pipe_stage_mem_s0_agent_rsp_fifo:out_ready
	wire          pipe_stage_mem_s0_agent_rsp_fifo_out_startofpacket;                         // pipe_stage_mem_s0_agent_rsp_fifo:out_startofpacket -> pipe_stage_mem_s0_agent:rf_sink_startofpacket
	wire          pipe_stage_mem_s0_agent_rsp_fifo_out_endofpacket;                           // pipe_stage_mem_s0_agent_rsp_fifo:out_endofpacket -> pipe_stage_mem_s0_agent:rf_sink_endofpacket
	wire          pipe_stage_mem_s0_agent_rdata_fifo_src_valid;                               // pipe_stage_mem_s0_agent:rdata_fifo_src_valid -> pipe_stage_mem_s0_agent:rdata_fifo_sink_valid
	wire  [513:0] pipe_stage_mem_s0_agent_rdata_fifo_src_data;                                // pipe_stage_mem_s0_agent:rdata_fifo_src_data -> pipe_stage_mem_s0_agent:rdata_fifo_sink_data
	wire          pipe_stage_mem_s0_agent_rdata_fifo_src_ready;                               // pipe_stage_mem_s0_agent:rdata_fifo_sink_ready -> pipe_stage_mem_s0_agent:rdata_fifo_src_ready
	wire          cmd_mux_src_valid;                                                          // cmd_mux:src_valid -> pipe_stage_mem_s0_agent:cp_valid
	wire  [676:0] cmd_mux_src_data;                                                           // cmd_mux:src_data -> pipe_stage_mem_s0_agent:cp_data
	wire          cmd_mux_src_ready;                                                          // pipe_stage_mem_s0_agent:cp_ready -> cmd_mux:src_ready
	wire    [3:0] cmd_mux_src_channel;                                                        // cmd_mux:src_channel -> pipe_stage_mem_s0_agent:cp_channel
	wire          cmd_mux_src_startofpacket;                                                  // cmd_mux:src_startofpacket -> pipe_stage_mem_s0_agent:cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                                    // cmd_mux:src_endofpacket -> pipe_stage_mem_s0_agent:cp_endofpacket
	wire  [511:0] pipe_stage_host_wr_s0_agent_m0_readdata;                                    // pipe_stage_host_wr_s0_translator:uav_readdata -> pipe_stage_host_wr_s0_agent:m0_readdata
	wire          pipe_stage_host_wr_s0_agent_m0_waitrequest;                                 // pipe_stage_host_wr_s0_translator:uav_waitrequest -> pipe_stage_host_wr_s0_agent:m0_waitrequest
	wire          pipe_stage_host_wr_s0_agent_m0_debugaccess;                                 // pipe_stage_host_wr_s0_agent:m0_debugaccess -> pipe_stage_host_wr_s0_translator:uav_debugaccess
	wire   [49:0] pipe_stage_host_wr_s0_agent_m0_address;                                     // pipe_stage_host_wr_s0_agent:m0_address -> pipe_stage_host_wr_s0_translator:uav_address
	wire   [63:0] pipe_stage_host_wr_s0_agent_m0_byteenable;                                  // pipe_stage_host_wr_s0_agent:m0_byteenable -> pipe_stage_host_wr_s0_translator:uav_byteenable
	wire          pipe_stage_host_wr_s0_agent_m0_read;                                        // pipe_stage_host_wr_s0_agent:m0_read -> pipe_stage_host_wr_s0_translator:uav_read
	wire          pipe_stage_host_wr_s0_agent_m0_readdatavalid;                               // pipe_stage_host_wr_s0_translator:uav_readdatavalid -> pipe_stage_host_wr_s0_agent:m0_readdatavalid
	wire          pipe_stage_host_wr_s0_agent_m0_lock;                                        // pipe_stage_host_wr_s0_agent:m0_lock -> pipe_stage_host_wr_s0_translator:uav_lock
	wire  [511:0] pipe_stage_host_wr_s0_agent_m0_writedata;                                   // pipe_stage_host_wr_s0_agent:m0_writedata -> pipe_stage_host_wr_s0_translator:uav_writedata
	wire          pipe_stage_host_wr_s0_agent_m0_write;                                       // pipe_stage_host_wr_s0_agent:m0_write -> pipe_stage_host_wr_s0_translator:uav_write
	wire    [8:0] pipe_stage_host_wr_s0_agent_m0_burstcount;                                  // pipe_stage_host_wr_s0_agent:m0_burstcount -> pipe_stage_host_wr_s0_translator:uav_burstcount
	wire          pipe_stage_host_wr_s0_agent_rf_source_valid;                                // pipe_stage_host_wr_s0_agent:rf_source_valid -> pipe_stage_host_wr_s0_agent_rsp_fifo:in_valid
	wire  [677:0] pipe_stage_host_wr_s0_agent_rf_source_data;                                 // pipe_stage_host_wr_s0_agent:rf_source_data -> pipe_stage_host_wr_s0_agent_rsp_fifo:in_data
	wire          pipe_stage_host_wr_s0_agent_rf_source_ready;                                // pipe_stage_host_wr_s0_agent_rsp_fifo:in_ready -> pipe_stage_host_wr_s0_agent:rf_source_ready
	wire          pipe_stage_host_wr_s0_agent_rf_source_startofpacket;                        // pipe_stage_host_wr_s0_agent:rf_source_startofpacket -> pipe_stage_host_wr_s0_agent_rsp_fifo:in_startofpacket
	wire          pipe_stage_host_wr_s0_agent_rf_source_endofpacket;                          // pipe_stage_host_wr_s0_agent:rf_source_endofpacket -> pipe_stage_host_wr_s0_agent_rsp_fifo:in_endofpacket
	wire          pipe_stage_host_wr_s0_agent_rsp_fifo_out_valid;                             // pipe_stage_host_wr_s0_agent_rsp_fifo:out_valid -> pipe_stage_host_wr_s0_agent:rf_sink_valid
	wire  [677:0] pipe_stage_host_wr_s0_agent_rsp_fifo_out_data;                              // pipe_stage_host_wr_s0_agent_rsp_fifo:out_data -> pipe_stage_host_wr_s0_agent:rf_sink_data
	wire          pipe_stage_host_wr_s0_agent_rsp_fifo_out_ready;                             // pipe_stage_host_wr_s0_agent:rf_sink_ready -> pipe_stage_host_wr_s0_agent_rsp_fifo:out_ready
	wire          pipe_stage_host_wr_s0_agent_rsp_fifo_out_startofpacket;                     // pipe_stage_host_wr_s0_agent_rsp_fifo:out_startofpacket -> pipe_stage_host_wr_s0_agent:rf_sink_startofpacket
	wire          pipe_stage_host_wr_s0_agent_rsp_fifo_out_endofpacket;                       // pipe_stage_host_wr_s0_agent_rsp_fifo:out_endofpacket -> pipe_stage_host_wr_s0_agent:rf_sink_endofpacket
	wire          pipe_stage_host_wr_s0_agent_rdata_fifo_src_valid;                           // pipe_stage_host_wr_s0_agent:rdata_fifo_src_valid -> pipe_stage_host_wr_s0_agent:rdata_fifo_sink_valid
	wire  [513:0] pipe_stage_host_wr_s0_agent_rdata_fifo_src_data;                            // pipe_stage_host_wr_s0_agent:rdata_fifo_src_data -> pipe_stage_host_wr_s0_agent:rdata_fifo_sink_data
	wire          pipe_stage_host_wr_s0_agent_rdata_fifo_src_ready;                           // pipe_stage_host_wr_s0_agent:rdata_fifo_sink_ready -> pipe_stage_host_wr_s0_agent:rdata_fifo_src_ready
	wire          cmd_mux_001_src_valid;                                                      // cmd_mux_001:src_valid -> pipe_stage_host_wr_s0_agent:cp_valid
	wire  [676:0] cmd_mux_001_src_data;                                                       // cmd_mux_001:src_data -> pipe_stage_host_wr_s0_agent:cp_data
	wire          cmd_mux_001_src_ready;                                                      // pipe_stage_host_wr_s0_agent:cp_ready -> cmd_mux_001:src_ready
	wire    [3:0] cmd_mux_001_src_channel;                                                    // cmd_mux_001:src_channel -> pipe_stage_host_wr_s0_agent:cp_channel
	wire          cmd_mux_001_src_startofpacket;                                              // cmd_mux_001:src_startofpacket -> pipe_stage_host_wr_s0_agent:cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                // cmd_mux_001:src_endofpacket -> pipe_stage_host_wr_s0_agent:cp_endofpacket
	wire  [511:0] pipe_stage_host_rd_s0_agent_m0_readdata;                                    // pipe_stage_host_rd_s0_translator:uav_readdata -> pipe_stage_host_rd_s0_agent:m0_readdata
	wire          pipe_stage_host_rd_s0_agent_m0_waitrequest;                                 // pipe_stage_host_rd_s0_translator:uav_waitrequest -> pipe_stage_host_rd_s0_agent:m0_waitrequest
	wire          pipe_stage_host_rd_s0_agent_m0_debugaccess;                                 // pipe_stage_host_rd_s0_agent:m0_debugaccess -> pipe_stage_host_rd_s0_translator:uav_debugaccess
	wire   [49:0] pipe_stage_host_rd_s0_agent_m0_address;                                     // pipe_stage_host_rd_s0_agent:m0_address -> pipe_stage_host_rd_s0_translator:uav_address
	wire   [63:0] pipe_stage_host_rd_s0_agent_m0_byteenable;                                  // pipe_stage_host_rd_s0_agent:m0_byteenable -> pipe_stage_host_rd_s0_translator:uav_byteenable
	wire          pipe_stage_host_rd_s0_agent_m0_read;                                        // pipe_stage_host_rd_s0_agent:m0_read -> pipe_stage_host_rd_s0_translator:uav_read
	wire          pipe_stage_host_rd_s0_agent_m0_readdatavalid;                               // pipe_stage_host_rd_s0_translator:uav_readdatavalid -> pipe_stage_host_rd_s0_agent:m0_readdatavalid
	wire          pipe_stage_host_rd_s0_agent_m0_lock;                                        // pipe_stage_host_rd_s0_agent:m0_lock -> pipe_stage_host_rd_s0_translator:uav_lock
	wire  [511:0] pipe_stage_host_rd_s0_agent_m0_writedata;                                   // pipe_stage_host_rd_s0_agent:m0_writedata -> pipe_stage_host_rd_s0_translator:uav_writedata
	wire          pipe_stage_host_rd_s0_agent_m0_write;                                       // pipe_stage_host_rd_s0_agent:m0_write -> pipe_stage_host_rd_s0_translator:uav_write
	wire    [8:0] pipe_stage_host_rd_s0_agent_m0_burstcount;                                  // pipe_stage_host_rd_s0_agent:m0_burstcount -> pipe_stage_host_rd_s0_translator:uav_burstcount
	wire          pipe_stage_host_rd_s0_agent_rf_source_valid;                                // pipe_stage_host_rd_s0_agent:rf_source_valid -> pipe_stage_host_rd_s0_agent_rsp_fifo:in_valid
	wire  [677:0] pipe_stage_host_rd_s0_agent_rf_source_data;                                 // pipe_stage_host_rd_s0_agent:rf_source_data -> pipe_stage_host_rd_s0_agent_rsp_fifo:in_data
	wire          pipe_stage_host_rd_s0_agent_rf_source_ready;                                // pipe_stage_host_rd_s0_agent_rsp_fifo:in_ready -> pipe_stage_host_rd_s0_agent:rf_source_ready
	wire          pipe_stage_host_rd_s0_agent_rf_source_startofpacket;                        // pipe_stage_host_rd_s0_agent:rf_source_startofpacket -> pipe_stage_host_rd_s0_agent_rsp_fifo:in_startofpacket
	wire          pipe_stage_host_rd_s0_agent_rf_source_endofpacket;                          // pipe_stage_host_rd_s0_agent:rf_source_endofpacket -> pipe_stage_host_rd_s0_agent_rsp_fifo:in_endofpacket
	wire          pipe_stage_host_rd_s0_agent_rsp_fifo_out_valid;                             // pipe_stage_host_rd_s0_agent_rsp_fifo:out_valid -> pipe_stage_host_rd_s0_agent:rf_sink_valid
	wire  [677:0] pipe_stage_host_rd_s0_agent_rsp_fifo_out_data;                              // pipe_stage_host_rd_s0_agent_rsp_fifo:out_data -> pipe_stage_host_rd_s0_agent:rf_sink_data
	wire          pipe_stage_host_rd_s0_agent_rsp_fifo_out_ready;                             // pipe_stage_host_rd_s0_agent:rf_sink_ready -> pipe_stage_host_rd_s0_agent_rsp_fifo:out_ready
	wire          pipe_stage_host_rd_s0_agent_rsp_fifo_out_startofpacket;                     // pipe_stage_host_rd_s0_agent_rsp_fifo:out_startofpacket -> pipe_stage_host_rd_s0_agent:rf_sink_startofpacket
	wire          pipe_stage_host_rd_s0_agent_rsp_fifo_out_endofpacket;                       // pipe_stage_host_rd_s0_agent_rsp_fifo:out_endofpacket -> pipe_stage_host_rd_s0_agent:rf_sink_endofpacket
	wire          pipe_stage_host_rd_s0_agent_rdata_fifo_src_valid;                           // pipe_stage_host_rd_s0_agent:rdata_fifo_src_valid -> pipe_stage_host_rd_s0_agent:rdata_fifo_sink_valid
	wire  [513:0] pipe_stage_host_rd_s0_agent_rdata_fifo_src_data;                            // pipe_stage_host_rd_s0_agent:rdata_fifo_src_data -> pipe_stage_host_rd_s0_agent:rdata_fifo_sink_data
	wire          pipe_stage_host_rd_s0_agent_rdata_fifo_src_ready;                           // pipe_stage_host_rd_s0_agent:rdata_fifo_sink_ready -> pipe_stage_host_rd_s0_agent:rdata_fifo_src_ready
	wire          cmd_mux_002_src_valid;                                                      // cmd_mux_002:src_valid -> pipe_stage_host_rd_s0_agent:cp_valid
	wire  [676:0] cmd_mux_002_src_data;                                                       // cmd_mux_002:src_data -> pipe_stage_host_rd_s0_agent:cp_data
	wire          cmd_mux_002_src_ready;                                                      // pipe_stage_host_rd_s0_agent:cp_ready -> cmd_mux_002:src_ready
	wire    [3:0] cmd_mux_002_src_channel;                                                    // cmd_mux_002:src_channel -> pipe_stage_host_rd_s0_agent:cp_channel
	wire          cmd_mux_002_src_startofpacket;                                              // cmd_mux_002:src_startofpacket -> pipe_stage_host_rd_s0_agent:cp_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                // cmd_mux_002:src_endofpacket -> pipe_stage_host_rd_s0_agent:cp_endofpacket
	wire  [511:0] magic_number_rom_slave_agent_m0_readdata;                                   // magic_number_rom_slave_translator:uav_readdata -> magic_number_rom_slave_agent:m0_readdata
	wire          magic_number_rom_slave_agent_m0_waitrequest;                                // magic_number_rom_slave_translator:uav_waitrequest -> magic_number_rom_slave_agent:m0_waitrequest
	wire          magic_number_rom_slave_agent_m0_debugaccess;                                // magic_number_rom_slave_agent:m0_debugaccess -> magic_number_rom_slave_translator:uav_debugaccess
	wire   [49:0] magic_number_rom_slave_agent_m0_address;                                    // magic_number_rom_slave_agent:m0_address -> magic_number_rom_slave_translator:uav_address
	wire   [63:0] magic_number_rom_slave_agent_m0_byteenable;                                 // magic_number_rom_slave_agent:m0_byteenable -> magic_number_rom_slave_translator:uav_byteenable
	wire          magic_number_rom_slave_agent_m0_read;                                       // magic_number_rom_slave_agent:m0_read -> magic_number_rom_slave_translator:uav_read
	wire          magic_number_rom_slave_agent_m0_readdatavalid;                              // magic_number_rom_slave_translator:uav_readdatavalid -> magic_number_rom_slave_agent:m0_readdatavalid
	wire          magic_number_rom_slave_agent_m0_lock;                                       // magic_number_rom_slave_agent:m0_lock -> magic_number_rom_slave_translator:uav_lock
	wire  [511:0] magic_number_rom_slave_agent_m0_writedata;                                  // magic_number_rom_slave_agent:m0_writedata -> magic_number_rom_slave_translator:uav_writedata
	wire          magic_number_rom_slave_agent_m0_write;                                      // magic_number_rom_slave_agent:m0_write -> magic_number_rom_slave_translator:uav_write
	wire    [8:0] magic_number_rom_slave_agent_m0_burstcount;                                 // magic_number_rom_slave_agent:m0_burstcount -> magic_number_rom_slave_translator:uav_burstcount
	wire          magic_number_rom_slave_agent_rf_source_valid;                               // magic_number_rom_slave_agent:rf_source_valid -> magic_number_rom_slave_agent_rsp_fifo:in_valid
	wire  [677:0] magic_number_rom_slave_agent_rf_source_data;                                // magic_number_rom_slave_agent:rf_source_data -> magic_number_rom_slave_agent_rsp_fifo:in_data
	wire          magic_number_rom_slave_agent_rf_source_ready;                               // magic_number_rom_slave_agent_rsp_fifo:in_ready -> magic_number_rom_slave_agent:rf_source_ready
	wire          magic_number_rom_slave_agent_rf_source_startofpacket;                       // magic_number_rom_slave_agent:rf_source_startofpacket -> magic_number_rom_slave_agent_rsp_fifo:in_startofpacket
	wire          magic_number_rom_slave_agent_rf_source_endofpacket;                         // magic_number_rom_slave_agent:rf_source_endofpacket -> magic_number_rom_slave_agent_rsp_fifo:in_endofpacket
	wire          magic_number_rom_slave_agent_rsp_fifo_out_valid;                            // magic_number_rom_slave_agent_rsp_fifo:out_valid -> magic_number_rom_slave_agent:rf_sink_valid
	wire  [677:0] magic_number_rom_slave_agent_rsp_fifo_out_data;                             // magic_number_rom_slave_agent_rsp_fifo:out_data -> magic_number_rom_slave_agent:rf_sink_data
	wire          magic_number_rom_slave_agent_rsp_fifo_out_ready;                            // magic_number_rom_slave_agent:rf_sink_ready -> magic_number_rom_slave_agent_rsp_fifo:out_ready
	wire          magic_number_rom_slave_agent_rsp_fifo_out_startofpacket;                    // magic_number_rom_slave_agent_rsp_fifo:out_startofpacket -> magic_number_rom_slave_agent:rf_sink_startofpacket
	wire          magic_number_rom_slave_agent_rsp_fifo_out_endofpacket;                      // magic_number_rom_slave_agent_rsp_fifo:out_endofpacket -> magic_number_rom_slave_agent:rf_sink_endofpacket
	wire          magic_number_rom_slave_agent_rdata_fifo_src_valid;                          // magic_number_rom_slave_agent:rdata_fifo_src_valid -> magic_number_rom_slave_agent:rdata_fifo_sink_valid
	wire  [513:0] magic_number_rom_slave_agent_rdata_fifo_src_data;                           // magic_number_rom_slave_agent:rdata_fifo_src_data -> magic_number_rom_slave_agent:rdata_fifo_sink_data
	wire          magic_number_rom_slave_agent_rdata_fifo_src_ready;                          // magic_number_rom_slave_agent:rdata_fifo_sink_ready -> magic_number_rom_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_003_src_valid;                                                      // cmd_mux_003:src_valid -> magic_number_rom_slave_agent:cp_valid
	wire  [676:0] cmd_mux_003_src_data;                                                       // cmd_mux_003:src_data -> magic_number_rom_slave_agent:cp_data
	wire          cmd_mux_003_src_ready;                                                      // magic_number_rom_slave_agent:cp_ready -> cmd_mux_003:src_ready
	wire    [3:0] cmd_mux_003_src_channel;                                                    // cmd_mux_003:src_channel -> magic_number_rom_slave_agent:cp_channel
	wire          cmd_mux_003_src_startofpacket;                                              // cmd_mux_003:src_startofpacket -> magic_number_rom_slave_agent:cp_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                // cmd_mux_003:src_endofpacket -> magic_number_rom_slave_agent:cp_endofpacket
	wire          pipe_stage_dma_write_m0_agent_cp_valid;                                     // pipe_stage_dma_write_m0_agent:cp_valid -> router:sink_valid
	wire  [676:0] pipe_stage_dma_write_m0_agent_cp_data;                                      // pipe_stage_dma_write_m0_agent:cp_data -> router:sink_data
	wire          pipe_stage_dma_write_m0_agent_cp_ready;                                     // router:sink_ready -> pipe_stage_dma_write_m0_agent:cp_ready
	wire          pipe_stage_dma_write_m0_agent_cp_startofpacket;                             // pipe_stage_dma_write_m0_agent:cp_startofpacket -> router:sink_startofpacket
	wire          pipe_stage_dma_write_m0_agent_cp_endofpacket;                               // pipe_stage_dma_write_m0_agent:cp_endofpacket -> router:sink_endofpacket
	wire          pipe_stage_dma_read_m0_agent_cp_valid;                                      // pipe_stage_dma_read_m0_agent:cp_valid -> router_001:sink_valid
	wire  [676:0] pipe_stage_dma_read_m0_agent_cp_data;                                       // pipe_stage_dma_read_m0_agent:cp_data -> router_001:sink_data
	wire          pipe_stage_dma_read_m0_agent_cp_ready;                                      // router_001:sink_ready -> pipe_stage_dma_read_m0_agent:cp_ready
	wire          pipe_stage_dma_read_m0_agent_cp_startofpacket;                              // pipe_stage_dma_read_m0_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          pipe_stage_dma_read_m0_agent_cp_endofpacket;                                // pipe_stage_dma_read_m0_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          pipe_stage_mem_s0_agent_rp_valid;                                           // pipe_stage_mem_s0_agent:rp_valid -> router_002:sink_valid
	wire  [676:0] pipe_stage_mem_s0_agent_rp_data;                                            // pipe_stage_mem_s0_agent:rp_data -> router_002:sink_data
	wire          pipe_stage_mem_s0_agent_rp_ready;                                           // router_002:sink_ready -> pipe_stage_mem_s0_agent:rp_ready
	wire          pipe_stage_mem_s0_agent_rp_startofpacket;                                   // pipe_stage_mem_s0_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          pipe_stage_mem_s0_agent_rp_endofpacket;                                     // pipe_stage_mem_s0_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                       // router_002:src_valid -> rsp_demux:sink_valid
	wire  [676:0] router_002_src_data;                                                        // router_002:src_data -> rsp_demux:sink_data
	wire          router_002_src_ready;                                                       // rsp_demux:sink_ready -> router_002:src_ready
	wire    [3:0] router_002_src_channel;                                                     // router_002:src_channel -> rsp_demux:sink_channel
	wire          router_002_src_startofpacket;                                               // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_002_src_endofpacket;                                                 // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          pipe_stage_host_wr_s0_agent_rp_valid;                                       // pipe_stage_host_wr_s0_agent:rp_valid -> router_003:sink_valid
	wire  [676:0] pipe_stage_host_wr_s0_agent_rp_data;                                        // pipe_stage_host_wr_s0_agent:rp_data -> router_003:sink_data
	wire          pipe_stage_host_wr_s0_agent_rp_ready;                                       // router_003:sink_ready -> pipe_stage_host_wr_s0_agent:rp_ready
	wire          pipe_stage_host_wr_s0_agent_rp_startofpacket;                               // pipe_stage_host_wr_s0_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          pipe_stage_host_wr_s0_agent_rp_endofpacket;                                 // pipe_stage_host_wr_s0_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                       // router_003:src_valid -> rsp_demux_001:sink_valid
	wire  [676:0] router_003_src_data;                                                        // router_003:src_data -> rsp_demux_001:sink_data
	wire          router_003_src_ready;                                                       // rsp_demux_001:sink_ready -> router_003:src_ready
	wire    [3:0] router_003_src_channel;                                                     // router_003:src_channel -> rsp_demux_001:sink_channel
	wire          router_003_src_startofpacket;                                               // router_003:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_003_src_endofpacket;                                                 // router_003:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          pipe_stage_host_rd_s0_agent_rp_valid;                                       // pipe_stage_host_rd_s0_agent:rp_valid -> router_004:sink_valid
	wire  [676:0] pipe_stage_host_rd_s0_agent_rp_data;                                        // pipe_stage_host_rd_s0_agent:rp_data -> router_004:sink_data
	wire          pipe_stage_host_rd_s0_agent_rp_ready;                                       // router_004:sink_ready -> pipe_stage_host_rd_s0_agent:rp_ready
	wire          pipe_stage_host_rd_s0_agent_rp_startofpacket;                               // pipe_stage_host_rd_s0_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          pipe_stage_host_rd_s0_agent_rp_endofpacket;                                 // pipe_stage_host_rd_s0_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                       // router_004:src_valid -> rsp_demux_002:sink_valid
	wire  [676:0] router_004_src_data;                                                        // router_004:src_data -> rsp_demux_002:sink_data
	wire          router_004_src_ready;                                                       // rsp_demux_002:sink_ready -> router_004:src_ready
	wire    [3:0] router_004_src_channel;                                                     // router_004:src_channel -> rsp_demux_002:sink_channel
	wire          router_004_src_startofpacket;                                               // router_004:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_004_src_endofpacket;                                                 // router_004:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          magic_number_rom_slave_agent_rp_valid;                                      // magic_number_rom_slave_agent:rp_valid -> router_005:sink_valid
	wire  [676:0] magic_number_rom_slave_agent_rp_data;                                       // magic_number_rom_slave_agent:rp_data -> router_005:sink_data
	wire          magic_number_rom_slave_agent_rp_ready;                                      // router_005:sink_ready -> magic_number_rom_slave_agent:rp_ready
	wire          magic_number_rom_slave_agent_rp_startofpacket;                              // magic_number_rom_slave_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          magic_number_rom_slave_agent_rp_endofpacket;                                // magic_number_rom_slave_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                       // router_005:src_valid -> rsp_demux_003:sink_valid
	wire  [676:0] router_005_src_data;                                                        // router_005:src_data -> rsp_demux_003:sink_data
	wire          router_005_src_ready;                                                       // rsp_demux_003:sink_ready -> router_005:src_ready
	wire    [3:0] router_005_src_channel;                                                     // router_005:src_channel -> rsp_demux_003:sink_channel
	wire          router_005_src_startofpacket;                                               // router_005:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_005_src_endofpacket;                                                 // router_005:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          router_src_valid;                                                           // router:src_valid -> pipe_stage_dma_write_m0_limiter:cmd_sink_valid
	wire  [676:0] router_src_data;                                                            // router:src_data -> pipe_stage_dma_write_m0_limiter:cmd_sink_data
	wire          router_src_ready;                                                           // pipe_stage_dma_write_m0_limiter:cmd_sink_ready -> router:src_ready
	wire    [3:0] router_src_channel;                                                         // router:src_channel -> pipe_stage_dma_write_m0_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                   // router:src_startofpacket -> pipe_stage_dma_write_m0_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                     // router:src_endofpacket -> pipe_stage_dma_write_m0_limiter:cmd_sink_endofpacket
	wire  [676:0] pipe_stage_dma_write_m0_limiter_cmd_src_data;                               // pipe_stage_dma_write_m0_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          pipe_stage_dma_write_m0_limiter_cmd_src_ready;                              // cmd_demux:sink_ready -> pipe_stage_dma_write_m0_limiter:cmd_src_ready
	wire    [3:0] pipe_stage_dma_write_m0_limiter_cmd_src_channel;                            // pipe_stage_dma_write_m0_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          pipe_stage_dma_write_m0_limiter_cmd_src_startofpacket;                      // pipe_stage_dma_write_m0_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          pipe_stage_dma_write_m0_limiter_cmd_src_endofpacket;                        // pipe_stage_dma_write_m0_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                          // rsp_mux:src_valid -> pipe_stage_dma_write_m0_limiter:rsp_sink_valid
	wire  [676:0] rsp_mux_src_data;                                                           // rsp_mux:src_data -> pipe_stage_dma_write_m0_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                          // pipe_stage_dma_write_m0_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire    [3:0] rsp_mux_src_channel;                                                        // rsp_mux:src_channel -> pipe_stage_dma_write_m0_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                                  // rsp_mux:src_startofpacket -> pipe_stage_dma_write_m0_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                                    // rsp_mux:src_endofpacket -> pipe_stage_dma_write_m0_limiter:rsp_sink_endofpacket
	wire          pipe_stage_dma_write_m0_limiter_rsp_src_valid;                              // pipe_stage_dma_write_m0_limiter:rsp_src_valid -> pipe_stage_dma_write_m0_agent:rp_valid
	wire  [676:0] pipe_stage_dma_write_m0_limiter_rsp_src_data;                               // pipe_stage_dma_write_m0_limiter:rsp_src_data -> pipe_stage_dma_write_m0_agent:rp_data
	wire          pipe_stage_dma_write_m0_limiter_rsp_src_ready;                              // pipe_stage_dma_write_m0_agent:rp_ready -> pipe_stage_dma_write_m0_limiter:rsp_src_ready
	wire    [3:0] pipe_stage_dma_write_m0_limiter_rsp_src_channel;                            // pipe_stage_dma_write_m0_limiter:rsp_src_channel -> pipe_stage_dma_write_m0_agent:rp_channel
	wire          pipe_stage_dma_write_m0_limiter_rsp_src_startofpacket;                      // pipe_stage_dma_write_m0_limiter:rsp_src_startofpacket -> pipe_stage_dma_write_m0_agent:rp_startofpacket
	wire          pipe_stage_dma_write_m0_limiter_rsp_src_endofpacket;                        // pipe_stage_dma_write_m0_limiter:rsp_src_endofpacket -> pipe_stage_dma_write_m0_agent:rp_endofpacket
	wire          router_001_src_valid;                                                       // router_001:src_valid -> pipe_stage_dma_read_m0_limiter:cmd_sink_valid
	wire  [676:0] router_001_src_data;                                                        // router_001:src_data -> pipe_stage_dma_read_m0_limiter:cmd_sink_data
	wire          router_001_src_ready;                                                       // pipe_stage_dma_read_m0_limiter:cmd_sink_ready -> router_001:src_ready
	wire    [3:0] router_001_src_channel;                                                     // router_001:src_channel -> pipe_stage_dma_read_m0_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                               // router_001:src_startofpacket -> pipe_stage_dma_read_m0_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                                 // router_001:src_endofpacket -> pipe_stage_dma_read_m0_limiter:cmd_sink_endofpacket
	wire  [676:0] pipe_stage_dma_read_m0_limiter_cmd_src_data;                                // pipe_stage_dma_read_m0_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          pipe_stage_dma_read_m0_limiter_cmd_src_ready;                               // cmd_demux_001:sink_ready -> pipe_stage_dma_read_m0_limiter:cmd_src_ready
	wire    [3:0] pipe_stage_dma_read_m0_limiter_cmd_src_channel;                             // pipe_stage_dma_read_m0_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          pipe_stage_dma_read_m0_limiter_cmd_src_startofpacket;                       // pipe_stage_dma_read_m0_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          pipe_stage_dma_read_m0_limiter_cmd_src_endofpacket;                         // pipe_stage_dma_read_m0_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                      // rsp_mux_001:src_valid -> pipe_stage_dma_read_m0_limiter:rsp_sink_valid
	wire  [676:0] rsp_mux_001_src_data;                                                       // rsp_mux_001:src_data -> pipe_stage_dma_read_m0_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                                      // pipe_stage_dma_read_m0_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire    [3:0] rsp_mux_001_src_channel;                                                    // rsp_mux_001:src_channel -> pipe_stage_dma_read_m0_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                                              // rsp_mux_001:src_startofpacket -> pipe_stage_dma_read_m0_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                // rsp_mux_001:src_endofpacket -> pipe_stage_dma_read_m0_limiter:rsp_sink_endofpacket
	wire          pipe_stage_dma_read_m0_limiter_rsp_src_valid;                               // pipe_stage_dma_read_m0_limiter:rsp_src_valid -> pipe_stage_dma_read_m0_agent:rp_valid
	wire  [676:0] pipe_stage_dma_read_m0_limiter_rsp_src_data;                                // pipe_stage_dma_read_m0_limiter:rsp_src_data -> pipe_stage_dma_read_m0_agent:rp_data
	wire          pipe_stage_dma_read_m0_limiter_rsp_src_ready;                               // pipe_stage_dma_read_m0_agent:rp_ready -> pipe_stage_dma_read_m0_limiter:rsp_src_ready
	wire    [3:0] pipe_stage_dma_read_m0_limiter_rsp_src_channel;                             // pipe_stage_dma_read_m0_limiter:rsp_src_channel -> pipe_stage_dma_read_m0_agent:rp_channel
	wire          pipe_stage_dma_read_m0_limiter_rsp_src_startofpacket;                       // pipe_stage_dma_read_m0_limiter:rsp_src_startofpacket -> pipe_stage_dma_read_m0_agent:rp_startofpacket
	wire          pipe_stage_dma_read_m0_limiter_rsp_src_endofpacket;                         // pipe_stage_dma_read_m0_limiter:rsp_src_endofpacket -> pipe_stage_dma_read_m0_agent:rp_endofpacket
	wire          cmd_demux_src0_valid;                                                       // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [676:0] cmd_demux_src0_data;                                                        // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                       // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [3:0] cmd_demux_src0_channel;                                                     // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                               // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                 // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                       // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [676:0] cmd_demux_src1_data;                                                        // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                       // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire    [3:0] cmd_demux_src1_channel;                                                     // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                               // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                 // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                   // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [676:0] cmd_demux_001_src0_data;                                                    // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_001_src0_ready;                                                   // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire    [3:0] cmd_demux_001_src0_channel;                                                 // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                           // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                             // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                                   // cmd_demux_001:src1_valid -> cmd_mux_002:sink0_valid
	wire  [676:0] cmd_demux_001_src1_data;                                                    // cmd_demux_001:src1_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_001_src1_ready;                                                   // cmd_mux_002:sink0_ready -> cmd_demux_001:src1_ready
	wire    [3:0] cmd_demux_001_src1_channel;                                                 // cmd_demux_001:src1_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_001_src1_startofpacket;                                           // cmd_demux_001:src1_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                             // cmd_demux_001:src1_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_001_src2_valid;                                                   // cmd_demux_001:src2_valid -> cmd_mux_003:sink0_valid
	wire  [676:0] cmd_demux_001_src2_data;                                                    // cmd_demux_001:src2_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_001_src2_ready;                                                   // cmd_mux_003:sink0_ready -> cmd_demux_001:src2_ready
	wire    [3:0] cmd_demux_001_src2_channel;                                                 // cmd_demux_001:src2_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_001_src2_startofpacket;                                           // cmd_demux_001:src2_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                             // cmd_demux_001:src2_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                                       // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [676:0] rsp_demux_src0_data;                                                        // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                       // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [3:0] rsp_demux_src0_channel;                                                     // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                               // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                 // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                       // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [676:0] rsp_demux_src1_data;                                                        // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_src1_ready;                                                       // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire    [3:0] rsp_demux_src1_channel;                                                     // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_startofpacket;                                               // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                                                 // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                   // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [676:0] rsp_demux_001_src0_data;                                                    // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                                   // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire    [3:0] rsp_demux_001_src0_channel;                                                 // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                           // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                             // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                   // rsp_demux_002:src0_valid -> rsp_mux_001:sink1_valid
	wire  [676:0] rsp_demux_002_src0_data;                                                    // rsp_demux_002:src0_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_002_src0_ready;                                                   // rsp_mux_001:sink1_ready -> rsp_demux_002:src0_ready
	wire    [3:0] rsp_demux_002_src0_channel;                                                 // rsp_demux_002:src0_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_002_src0_startofpacket;                                           // rsp_demux_002:src0_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                             // rsp_demux_002:src0_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_003_src0_valid;                                                   // rsp_demux_003:src0_valid -> rsp_mux_001:sink2_valid
	wire  [676:0] rsp_demux_003_src0_data;                                                    // rsp_demux_003:src0_data -> rsp_mux_001:sink2_data
	wire          rsp_demux_003_src0_ready;                                                   // rsp_mux_001:sink2_ready -> rsp_demux_003:src0_ready
	wire    [3:0] rsp_demux_003_src0_channel;                                                 // rsp_demux_003:src0_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_003_src0_startofpacket;                                           // rsp_demux_003:src0_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                             // rsp_demux_003:src0_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire    [3:0] pipe_stage_dma_write_m0_limiter_cmd_valid_data;                             // pipe_stage_dma_write_m0_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire    [3:0] pipe_stage_dma_read_m0_limiter_cmd_valid_data;                              // pipe_stage_dma_read_m0_limiter:cmd_src_valid -> cmd_demux_001:sink_valid

	msgdma_bbb_altera_merlin_master_translator_191_g7h47bq #(
		.AV_ADDRESS_W                (50),
		.AV_DATA_W                   (512),
		.AV_BURSTCOUNT_W             (3),
		.AV_BYTEENABLE_W             (64),
		.UAV_ADDRESS_W               (50),
		.UAV_BURSTCOUNT_W            (9),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (64),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (0),
		.WAITREQUEST_ALLOWANCE       (0)
	) pipe_stage_dma_write_m0_translator (
		.clk                    (clk_clk_clk),                                                                //   input,    width = 1,                       clk.clk
		.reset                  (pipe_stage_dma_write_reset_reset_bridge_in_reset_reset),                     //   input,    width = 1,                     reset.reset
		.uav_address            (pipe_stage_dma_write_m0_translator_avalon_universal_master_0_address),       //  output,   width = 50, avalon_universal_master_0.address
		.uav_burstcount         (pipe_stage_dma_write_m0_translator_avalon_universal_master_0_burstcount),    //  output,    width = 9,                          .burstcount
		.uav_read               (pipe_stage_dma_write_m0_translator_avalon_universal_master_0_read),          //  output,    width = 1,                          .read
		.uav_write              (pipe_stage_dma_write_m0_translator_avalon_universal_master_0_write),         //  output,    width = 1,                          .write
		.uav_waitrequest        (pipe_stage_dma_write_m0_translator_avalon_universal_master_0_waitrequest),   //   input,    width = 1,                          .waitrequest
		.uav_readdatavalid      (pipe_stage_dma_write_m0_translator_avalon_universal_master_0_readdatavalid), //   input,    width = 1,                          .readdatavalid
		.uav_byteenable         (pipe_stage_dma_write_m0_translator_avalon_universal_master_0_byteenable),    //  output,   width = 64,                          .byteenable
		.uav_readdata           (pipe_stage_dma_write_m0_translator_avalon_universal_master_0_readdata),      //   input,  width = 512,                          .readdata
		.uav_writedata          (pipe_stage_dma_write_m0_translator_avalon_universal_master_0_writedata),     //  output,  width = 512,                          .writedata
		.uav_lock               (pipe_stage_dma_write_m0_translator_avalon_universal_master_0_lock),          //  output,    width = 1,                          .lock
		.uav_debugaccess        (pipe_stage_dma_write_m0_translator_avalon_universal_master_0_debugaccess),   //  output,    width = 1,                          .debugaccess
		.av_address             (pipe_stage_dma_write_m0_address),                                            //   input,   width = 50,      avalon_anti_master_0.address
		.av_waitrequest         (pipe_stage_dma_write_m0_waitrequest),                                        //  output,    width = 1,                          .waitrequest
		.av_burstcount          (pipe_stage_dma_write_m0_burstcount),                                         //   input,    width = 3,                          .burstcount
		.av_byteenable          (pipe_stage_dma_write_m0_byteenable),                                         //   input,   width = 64,                          .byteenable
		.av_read                (pipe_stage_dma_write_m0_read),                                               //   input,    width = 1,                          .read
		.av_readdata            (pipe_stage_dma_write_m0_readdata),                                           //  output,  width = 512,                          .readdata
		.av_readdatavalid       (pipe_stage_dma_write_m0_readdatavalid),                                      //  output,    width = 1,                          .readdatavalid
		.av_write               (pipe_stage_dma_write_m0_write),                                              //   input,    width = 1,                          .write
		.av_writedata           (pipe_stage_dma_write_m0_writedata),                                          //   input,  width = 512,                          .writedata
		.av_debugaccess         (pipe_stage_dma_write_m0_debugaccess),                                        //   input,    width = 1,                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                       // (terminated),                                         
		.av_begintransfer       (1'b0),                                                                       // (terminated),                                         
		.av_chipselect          (1'b0),                                                                       // (terminated),                                         
		.av_lock                (1'b0),                                                                       // (terminated),                                         
		.uav_clken              (),                                                                           // (terminated),                                         
		.av_clken               (1'b1),                                                                       // (terminated),                                         
		.uav_response           (2'b00),                                                                      // (terminated),                                         
		.av_response            (),                                                                           // (terminated),                                         
		.uav_writeresponsevalid (1'b0),                                                                       // (terminated),                                         
		.av_writeresponsevalid  ()                                                                            // (terminated),                                         
	);

	msgdma_bbb_altera_merlin_master_translator_191_g7h47bq #(
		.AV_ADDRESS_W                (50),
		.AV_DATA_W                   (512),
		.AV_BURSTCOUNT_W             (3),
		.AV_BYTEENABLE_W             (64),
		.UAV_ADDRESS_W               (50),
		.UAV_BURSTCOUNT_W            (9),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (64),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (0),
		.WAITREQUEST_ALLOWANCE       (0)
	) pipe_stage_dma_read_m0_translator (
		.clk                    (clk_clk_clk),                                                               //   input,    width = 1,                       clk.clk
		.reset                  (pipe_stage_dma_write_reset_reset_bridge_in_reset_reset),                    //   input,    width = 1,                     reset.reset
		.uav_address            (pipe_stage_dma_read_m0_translator_avalon_universal_master_0_address),       //  output,   width = 50, avalon_universal_master_0.address
		.uav_burstcount         (pipe_stage_dma_read_m0_translator_avalon_universal_master_0_burstcount),    //  output,    width = 9,                          .burstcount
		.uav_read               (pipe_stage_dma_read_m0_translator_avalon_universal_master_0_read),          //  output,    width = 1,                          .read
		.uav_write              (pipe_stage_dma_read_m0_translator_avalon_universal_master_0_write),         //  output,    width = 1,                          .write
		.uav_waitrequest        (pipe_stage_dma_read_m0_translator_avalon_universal_master_0_waitrequest),   //   input,    width = 1,                          .waitrequest
		.uav_readdatavalid      (pipe_stage_dma_read_m0_translator_avalon_universal_master_0_readdatavalid), //   input,    width = 1,                          .readdatavalid
		.uav_byteenable         (pipe_stage_dma_read_m0_translator_avalon_universal_master_0_byteenable),    //  output,   width = 64,                          .byteenable
		.uav_readdata           (pipe_stage_dma_read_m0_translator_avalon_universal_master_0_readdata),      //   input,  width = 512,                          .readdata
		.uav_writedata          (pipe_stage_dma_read_m0_translator_avalon_universal_master_0_writedata),     //  output,  width = 512,                          .writedata
		.uav_lock               (pipe_stage_dma_read_m0_translator_avalon_universal_master_0_lock),          //  output,    width = 1,                          .lock
		.uav_debugaccess        (pipe_stage_dma_read_m0_translator_avalon_universal_master_0_debugaccess),   //  output,    width = 1,                          .debugaccess
		.av_address             (pipe_stage_dma_read_m0_address),                                            //   input,   width = 50,      avalon_anti_master_0.address
		.av_waitrequest         (pipe_stage_dma_read_m0_waitrequest),                                        //  output,    width = 1,                          .waitrequest
		.av_burstcount          (pipe_stage_dma_read_m0_burstcount),                                         //   input,    width = 3,                          .burstcount
		.av_byteenable          (pipe_stage_dma_read_m0_byteenable),                                         //   input,   width = 64,                          .byteenable
		.av_read                (pipe_stage_dma_read_m0_read),                                               //   input,    width = 1,                          .read
		.av_readdata            (pipe_stage_dma_read_m0_readdata),                                           //  output,  width = 512,                          .readdata
		.av_readdatavalid       (pipe_stage_dma_read_m0_readdatavalid),                                      //  output,    width = 1,                          .readdatavalid
		.av_write               (pipe_stage_dma_read_m0_write),                                              //   input,    width = 1,                          .write
		.av_writedata           (pipe_stage_dma_read_m0_writedata),                                          //   input,  width = 512,                          .writedata
		.av_debugaccess         (pipe_stage_dma_read_m0_debugaccess),                                        //   input,    width = 1,                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                      // (terminated),                                         
		.av_begintransfer       (1'b0),                                                                      // (terminated),                                         
		.av_chipselect          (1'b0),                                                                      // (terminated),                                         
		.av_lock                (1'b0),                                                                      // (terminated),                                         
		.uav_clken              (),                                                                          // (terminated),                                         
		.av_clken               (1'b1),                                                                      // (terminated),                                         
		.uav_response           (2'b00),                                                                     // (terminated),                                         
		.av_response            (),                                                                          // (terminated),                                         
		.uav_writeresponsevalid (1'b0),                                                                      // (terminated),                                         
		.av_writeresponsevalid  ()                                                                           // (terminated),                                         
	);

	msgdma_bbb_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (48),
		.AV_DATA_W                      (512),
		.UAV_DATA_W                     (512),
		.AV_BURSTCOUNT_W                (3),
		.AV_BYTEENABLE_W                (64),
		.UAV_BYTEENABLE_W               (64),
		.UAV_ADDRESS_W                  (50),
		.UAV_BURSTCOUNT_W               (9),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (64),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) pipe_stage_mem_s0_translator (
		.clk                    (clk_clk_clk),                                            //   input,    width = 1,                      clk.clk
		.reset                  (pipe_stage_dma_write_reset_reset_bridge_in_reset_reset), //   input,    width = 1,                    reset.reset
		.uav_address            (pipe_stage_mem_s0_agent_m0_address),                     //   input,   width = 50, avalon_universal_slave_0.address
		.uav_burstcount         (pipe_stage_mem_s0_agent_m0_burstcount),                  //   input,    width = 9,                         .burstcount
		.uav_read               (pipe_stage_mem_s0_agent_m0_read),                        //   input,    width = 1,                         .read
		.uav_write              (pipe_stage_mem_s0_agent_m0_write),                       //   input,    width = 1,                         .write
		.uav_waitrequest        (pipe_stage_mem_s0_agent_m0_waitrequest),                 //  output,    width = 1,                         .waitrequest
		.uav_readdatavalid      (pipe_stage_mem_s0_agent_m0_readdatavalid),               //  output,    width = 1,                         .readdatavalid
		.uav_byteenable         (pipe_stage_mem_s0_agent_m0_byteenable),                  //   input,   width = 64,                         .byteenable
		.uav_readdata           (pipe_stage_mem_s0_agent_m0_readdata),                    //  output,  width = 512,                         .readdata
		.uav_writedata          (pipe_stage_mem_s0_agent_m0_writedata),                   //   input,  width = 512,                         .writedata
		.uav_lock               (pipe_stage_mem_s0_agent_m0_lock),                        //   input,    width = 1,                         .lock
		.uav_debugaccess        (pipe_stage_mem_s0_agent_m0_debugaccess),                 //   input,    width = 1,                         .debugaccess
		.av_address             (pipe_stage_mem_s0_address),                              //  output,   width = 48,      avalon_anti_slave_0.address
		.av_write               (pipe_stage_mem_s0_write),                                //  output,    width = 1,                         .write
		.av_read                (pipe_stage_mem_s0_read),                                 //  output,    width = 1,                         .read
		.av_readdata            (pipe_stage_mem_s0_readdata),                             //   input,  width = 512,                         .readdata
		.av_writedata           (pipe_stage_mem_s0_writedata),                            //  output,  width = 512,                         .writedata
		.av_burstcount          (pipe_stage_mem_s0_burstcount),                           //  output,    width = 3,                         .burstcount
		.av_byteenable          (pipe_stage_mem_s0_byteenable),                           //  output,   width = 64,                         .byteenable
		.av_readdatavalid       (pipe_stage_mem_s0_readdatavalid),                        //   input,    width = 1,                         .readdatavalid
		.av_waitrequest         (pipe_stage_mem_s0_waitrequest),                          //   input,    width = 1,                         .waitrequest
		.av_debugaccess         (pipe_stage_mem_s0_debugaccess),                          //  output,    width = 1,                         .debugaccess
		.av_begintransfer       (),                                                       // (terminated),                                        
		.av_beginbursttransfer  (),                                                       // (terminated),                                        
		.av_writebyteenable     (),                                                       // (terminated),                                        
		.av_lock                (),                                                       // (terminated),                                        
		.av_chipselect          (),                                                       // (terminated),                                        
		.av_clken               (),                                                       // (terminated),                                        
		.uav_clken              (1'b0),                                                   // (terminated),                                        
		.av_outputenable        (),                                                       // (terminated),                                        
		.uav_response           (),                                                       // (terminated),                                        
		.av_response            (2'b00),                                                  // (terminated),                                        
		.uav_writeresponsevalid (),                                                       // (terminated),                                        
		.av_writeresponsevalid  (1'b0)                                                    // (terminated),                                        
	);

	msgdma_bbb_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (49),
		.AV_DATA_W                      (512),
		.UAV_DATA_W                     (512),
		.AV_BURSTCOUNT_W                (3),
		.AV_BYTEENABLE_W                (64),
		.UAV_BYTEENABLE_W               (64),
		.UAV_ADDRESS_W                  (50),
		.UAV_BURSTCOUNT_W               (9),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (64),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) pipe_stage_host_wr_s0_translator (
		.clk                    (clk_clk_clk),                                            //   input,    width = 1,                      clk.clk
		.reset                  (pipe_stage_dma_write_reset_reset_bridge_in_reset_reset), //   input,    width = 1,                    reset.reset
		.uav_address            (pipe_stage_host_wr_s0_agent_m0_address),                 //   input,   width = 50, avalon_universal_slave_0.address
		.uav_burstcount         (pipe_stage_host_wr_s0_agent_m0_burstcount),              //   input,    width = 9,                         .burstcount
		.uav_read               (pipe_stage_host_wr_s0_agent_m0_read),                    //   input,    width = 1,                         .read
		.uav_write              (pipe_stage_host_wr_s0_agent_m0_write),                   //   input,    width = 1,                         .write
		.uav_waitrequest        (pipe_stage_host_wr_s0_agent_m0_waitrequest),             //  output,    width = 1,                         .waitrequest
		.uav_readdatavalid      (pipe_stage_host_wr_s0_agent_m0_readdatavalid),           //  output,    width = 1,                         .readdatavalid
		.uav_byteenable         (pipe_stage_host_wr_s0_agent_m0_byteenable),              //   input,   width = 64,                         .byteenable
		.uav_readdata           (pipe_stage_host_wr_s0_agent_m0_readdata),                //  output,  width = 512,                         .readdata
		.uav_writedata          (pipe_stage_host_wr_s0_agent_m0_writedata),               //   input,  width = 512,                         .writedata
		.uav_lock               (pipe_stage_host_wr_s0_agent_m0_lock),                    //   input,    width = 1,                         .lock
		.uav_debugaccess        (pipe_stage_host_wr_s0_agent_m0_debugaccess),             //   input,    width = 1,                         .debugaccess
		.av_address             (pipe_stage_host_wr_s0_address),                          //  output,   width = 49,      avalon_anti_slave_0.address
		.av_write               (pipe_stage_host_wr_s0_write),                            //  output,    width = 1,                         .write
		.av_read                (pipe_stage_host_wr_s0_read),                             //  output,    width = 1,                         .read
		.av_readdata            (pipe_stage_host_wr_s0_readdata),                         //   input,  width = 512,                         .readdata
		.av_writedata           (pipe_stage_host_wr_s0_writedata),                        //  output,  width = 512,                         .writedata
		.av_burstcount          (pipe_stage_host_wr_s0_burstcount),                       //  output,    width = 3,                         .burstcount
		.av_byteenable          (pipe_stage_host_wr_s0_byteenable),                       //  output,   width = 64,                         .byteenable
		.av_readdatavalid       (pipe_stage_host_wr_s0_readdatavalid),                    //   input,    width = 1,                         .readdatavalid
		.av_waitrequest         (pipe_stage_host_wr_s0_waitrequest),                      //   input,    width = 1,                         .waitrequest
		.av_debugaccess         (pipe_stage_host_wr_s0_debugaccess),                      //  output,    width = 1,                         .debugaccess
		.av_begintransfer       (),                                                       // (terminated),                                        
		.av_beginbursttransfer  (),                                                       // (terminated),                                        
		.av_writebyteenable     (),                                                       // (terminated),                                        
		.av_lock                (),                                                       // (terminated),                                        
		.av_chipselect          (),                                                       // (terminated),                                        
		.av_clken               (),                                                       // (terminated),                                        
		.uav_clken              (1'b0),                                                   // (terminated),                                        
		.av_outputenable        (),                                                       // (terminated),                                        
		.uav_response           (),                                                       // (terminated),                                        
		.av_response            (2'b00),                                                  // (terminated),                                        
		.uav_writeresponsevalid (),                                                       // (terminated),                                        
		.av_writeresponsevalid  (1'b0)                                                    // (terminated),                                        
	);

	msgdma_bbb_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (48),
		.AV_DATA_W                      (512),
		.UAV_DATA_W                     (512),
		.AV_BURSTCOUNT_W                (3),
		.AV_BYTEENABLE_W                (64),
		.UAV_BYTEENABLE_W               (64),
		.UAV_ADDRESS_W                  (50),
		.UAV_BURSTCOUNT_W               (9),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (64),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) pipe_stage_host_rd_s0_translator (
		.clk                    (clk_clk_clk),                                            //   input,    width = 1,                      clk.clk
		.reset                  (pipe_stage_dma_write_reset_reset_bridge_in_reset_reset), //   input,    width = 1,                    reset.reset
		.uav_address            (pipe_stage_host_rd_s0_agent_m0_address),                 //   input,   width = 50, avalon_universal_slave_0.address
		.uav_burstcount         (pipe_stage_host_rd_s0_agent_m0_burstcount),              //   input,    width = 9,                         .burstcount
		.uav_read               (pipe_stage_host_rd_s0_agent_m0_read),                    //   input,    width = 1,                         .read
		.uav_write              (pipe_stage_host_rd_s0_agent_m0_write),                   //   input,    width = 1,                         .write
		.uav_waitrequest        (pipe_stage_host_rd_s0_agent_m0_waitrequest),             //  output,    width = 1,                         .waitrequest
		.uav_readdatavalid      (pipe_stage_host_rd_s0_agent_m0_readdatavalid),           //  output,    width = 1,                         .readdatavalid
		.uav_byteenable         (pipe_stage_host_rd_s0_agent_m0_byteenable),              //   input,   width = 64,                         .byteenable
		.uav_readdata           (pipe_stage_host_rd_s0_agent_m0_readdata),                //  output,  width = 512,                         .readdata
		.uav_writedata          (pipe_stage_host_rd_s0_agent_m0_writedata),               //   input,  width = 512,                         .writedata
		.uav_lock               (pipe_stage_host_rd_s0_agent_m0_lock),                    //   input,    width = 1,                         .lock
		.uav_debugaccess        (pipe_stage_host_rd_s0_agent_m0_debugaccess),             //   input,    width = 1,                         .debugaccess
		.av_address             (pipe_stage_host_rd_s0_address),                          //  output,   width = 48,      avalon_anti_slave_0.address
		.av_write               (pipe_stage_host_rd_s0_write),                            //  output,    width = 1,                         .write
		.av_read                (pipe_stage_host_rd_s0_read),                             //  output,    width = 1,                         .read
		.av_readdata            (pipe_stage_host_rd_s0_readdata),                         //   input,  width = 512,                         .readdata
		.av_writedata           (pipe_stage_host_rd_s0_writedata),                        //  output,  width = 512,                         .writedata
		.av_burstcount          (pipe_stage_host_rd_s0_burstcount),                       //  output,    width = 3,                         .burstcount
		.av_byteenable          (pipe_stage_host_rd_s0_byteenable),                       //  output,   width = 64,                         .byteenable
		.av_readdatavalid       (pipe_stage_host_rd_s0_readdatavalid),                    //   input,    width = 1,                         .readdatavalid
		.av_waitrequest         (pipe_stage_host_rd_s0_waitrequest),                      //   input,    width = 1,                         .waitrequest
		.av_debugaccess         (pipe_stage_host_rd_s0_debugaccess),                      //  output,    width = 1,                         .debugaccess
		.av_begintransfer       (),                                                       // (terminated),                                        
		.av_beginbursttransfer  (),                                                       // (terminated),                                        
		.av_writebyteenable     (),                                                       // (terminated),                                        
		.av_lock                (),                                                       // (terminated),                                        
		.av_chipselect          (),                                                       // (terminated),                                        
		.av_clken               (),                                                       // (terminated),                                        
		.uav_clken              (1'b0),                                                   // (terminated),                                        
		.av_outputenable        (),                                                       // (terminated),                                        
		.uav_response           (),                                                       // (terminated),                                        
		.av_response            (2'b00),                                                  // (terminated),                                        
		.uav_writeresponsevalid (),                                                       // (terminated),                                        
		.av_writeresponsevalid  (1'b0)                                                    // (terminated),                                        
	);

	msgdma_bbb_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (512),
		.UAV_DATA_W                     (512),
		.AV_BURSTCOUNT_W                (3),
		.AV_BYTEENABLE_W                (64),
		.UAV_BYTEENABLE_W               (64),
		.UAV_ADDRESS_W                  (50),
		.UAV_BURSTCOUNT_W               (9),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (64),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) magic_number_rom_slave_translator (
		.clk                    (clk_clk_clk),                                            //   input,    width = 1,                      clk.clk
		.reset                  (pipe_stage_dma_write_reset_reset_bridge_in_reset_reset), //   input,    width = 1,                    reset.reset
		.uav_address            (magic_number_rom_slave_agent_m0_address),                //   input,   width = 50, avalon_universal_slave_0.address
		.uav_burstcount         (magic_number_rom_slave_agent_m0_burstcount),             //   input,    width = 9,                         .burstcount
		.uav_read               (magic_number_rom_slave_agent_m0_read),                   //   input,    width = 1,                         .read
		.uav_write              (magic_number_rom_slave_agent_m0_write),                  //   input,    width = 1,                         .write
		.uav_waitrequest        (magic_number_rom_slave_agent_m0_waitrequest),            //  output,    width = 1,                         .waitrequest
		.uav_readdatavalid      (magic_number_rom_slave_agent_m0_readdatavalid),          //  output,    width = 1,                         .readdatavalid
		.uav_byteenable         (magic_number_rom_slave_agent_m0_byteenable),             //   input,   width = 64,                         .byteenable
		.uav_readdata           (magic_number_rom_slave_agent_m0_readdata),               //  output,  width = 512,                         .readdata
		.uav_writedata          (magic_number_rom_slave_agent_m0_writedata),              //   input,  width = 512,                         .writedata
		.uav_lock               (magic_number_rom_slave_agent_m0_lock),                   //   input,    width = 1,                         .lock
		.uav_debugaccess        (magic_number_rom_slave_agent_m0_debugaccess),            //   input,    width = 1,                         .debugaccess
		.av_address             (magic_number_rom_slave_address),                         //  output,    width = 2,      avalon_anti_slave_0.address
		.av_read                (magic_number_rom_slave_read),                            //  output,    width = 1,                         .read
		.av_readdata            (magic_number_rom_slave_readdata),                        //   input,  width = 512,                         .readdata
		.av_burstcount          (magic_number_rom_slave_burstcount),                      //  output,    width = 3,                         .burstcount
		.av_readdatavalid       (magic_number_rom_slave_readdatavalid),                   //   input,    width = 1,                         .readdatavalid
		.av_waitrequest         (magic_number_rom_slave_waitrequest),                     //   input,    width = 1,                         .waitrequest
		.av_write               (),                                                       // (terminated),                                        
		.av_writedata           (),                                                       // (terminated),                                        
		.av_begintransfer       (),                                                       // (terminated),                                        
		.av_beginbursttransfer  (),                                                       // (terminated),                                        
		.av_byteenable          (),                                                       // (terminated),                                        
		.av_writebyteenable     (),                                                       // (terminated),                                        
		.av_lock                (),                                                       // (terminated),                                        
		.av_chipselect          (),                                                       // (terminated),                                        
		.av_clken               (),                                                       // (terminated),                                        
		.uav_clken              (1'b0),                                                   // (terminated),                                        
		.av_debugaccess         (),                                                       // (terminated),                                        
		.av_outputenable        (),                                                       // (terminated),                                        
		.uav_response           (),                                                       // (terminated),                                        
		.av_response            (2'b00),                                                  // (terminated),                                        
		.uav_writeresponsevalid (),                                                       // (terminated),                                        
		.av_writeresponsevalid  (1'b0)                                                    // (terminated),                                        
	);

	msgdma_bbb_altera_merlin_master_agent_191_mpbm6tq #(
		.PKT_WUNIQUE               (676),
		.PKT_DOMAIN_H              (675),
		.PKT_DOMAIN_L              (674),
		.PKT_SNOOP_H               (673),
		.PKT_SNOOP_L               (670),
		.PKT_BARRIER_H             (669),
		.PKT_BARRIER_L             (668),
		.PKT_ORI_BURST_SIZE_H      (667),
		.PKT_ORI_BURST_SIZE_L      (665),
		.PKT_RESPONSE_STATUS_H     (664),
		.PKT_RESPONSE_STATUS_L     (663),
		.PKT_QOS_H                 (650),
		.PKT_QOS_L                 (650),
		.PKT_DATA_SIDEBAND_H       (648),
		.PKT_DATA_SIDEBAND_L       (648),
		.PKT_ADDR_SIDEBAND_H       (647),
		.PKT_ADDR_SIDEBAND_L       (647),
		.PKT_BURST_TYPE_H          (646),
		.PKT_BURST_TYPE_L          (645),
		.PKT_CACHE_H               (662),
		.PKT_CACHE_L               (659),
		.PKT_THREAD_ID_H           (655),
		.PKT_THREAD_ID_L           (655),
		.PKT_BURST_SIZE_H          (644),
		.PKT_BURST_SIZE_L          (642),
		.PKT_TRANS_EXCLUSIVE       (631),
		.PKT_TRANS_LOCK            (630),
		.PKT_BEGIN_BURST           (649),
		.PKT_PROTECTION_H          (658),
		.PKT_PROTECTION_L          (656),
		.PKT_BURSTWRAP_H           (641),
		.PKT_BURSTWRAP_L           (641),
		.PKT_BYTE_CNT_H            (640),
		.PKT_BYTE_CNT_L            (632),
		.PKT_ADDR_H                (625),
		.PKT_ADDR_L                (576),
		.PKT_TRANS_COMPRESSED_READ (626),
		.PKT_TRANS_POSTED          (627),
		.PKT_TRANS_WRITE           (628),
		.PKT_TRANS_READ            (629),
		.PKT_DATA_H                (511),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (575),
		.PKT_BYTEEN_L              (512),
		.PKT_SRC_ID_H              (652),
		.PKT_SRC_ID_L              (651),
		.PKT_DEST_ID_H             (654),
		.PKT_DEST_ID_L             (653),
		.ST_DATA_W                 (677),
		.ST_CHANNEL_W              (4),
		.AV_BURSTCOUNT_W           (9),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (0)
	) pipe_stage_dma_write_m0_agent (
		.clk                   (clk_clk_clk),                                                                //   input,    width = 1,       clk.clk
		.reset                 (pipe_stage_dma_write_reset_reset_bridge_in_reset_reset),                     //   input,    width = 1, clk_reset.reset
		.av_address            (pipe_stage_dma_write_m0_translator_avalon_universal_master_0_address),       //   input,   width = 50,        av.address
		.av_write              (pipe_stage_dma_write_m0_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (pipe_stage_dma_write_m0_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (pipe_stage_dma_write_m0_translator_avalon_universal_master_0_writedata),     //   input,  width = 512,          .writedata
		.av_readdata           (pipe_stage_dma_write_m0_translator_avalon_universal_master_0_readdata),      //  output,  width = 512,          .readdata
		.av_waitrequest        (pipe_stage_dma_write_m0_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (pipe_stage_dma_write_m0_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (pipe_stage_dma_write_m0_translator_avalon_universal_master_0_byteenable),    //   input,   width = 64,          .byteenable
		.av_burstcount         (pipe_stage_dma_write_m0_translator_avalon_universal_master_0_burstcount),    //   input,    width = 9,          .burstcount
		.av_debugaccess        (pipe_stage_dma_write_m0_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (pipe_stage_dma_write_m0_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (pipe_stage_dma_write_m0_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (pipe_stage_dma_write_m0_agent_cp_data),                                      //  output,  width = 677,          .data
		.cp_startofpacket      (pipe_stage_dma_write_m0_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (pipe_stage_dma_write_m0_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (pipe_stage_dma_write_m0_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (pipe_stage_dma_write_m0_limiter_rsp_src_valid),                              //   input,    width = 1,        rp.valid
		.rp_data               (pipe_stage_dma_write_m0_limiter_rsp_src_data),                               //   input,  width = 677,          .data
		.rp_channel            (pipe_stage_dma_write_m0_limiter_rsp_src_channel),                            //   input,    width = 4,          .channel
		.rp_startofpacket      (pipe_stage_dma_write_m0_limiter_rsp_src_startofpacket),                      //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (pipe_stage_dma_write_m0_limiter_rsp_src_endofpacket),                        //   input,    width = 1,          .endofpacket
		.rp_ready              (pipe_stage_dma_write_m0_limiter_rsp_src_ready),                              //  output,    width = 1,          .ready
		.av_response           (),                                                                           // (terminated),                         
		.av_writeresponsevalid ()                                                                            // (terminated),                         
	);

	msgdma_bbb_altera_merlin_master_agent_191_mpbm6tq #(
		.PKT_WUNIQUE               (676),
		.PKT_DOMAIN_H              (675),
		.PKT_DOMAIN_L              (674),
		.PKT_SNOOP_H               (673),
		.PKT_SNOOP_L               (670),
		.PKT_BARRIER_H             (669),
		.PKT_BARRIER_L             (668),
		.PKT_ORI_BURST_SIZE_H      (667),
		.PKT_ORI_BURST_SIZE_L      (665),
		.PKT_RESPONSE_STATUS_H     (664),
		.PKT_RESPONSE_STATUS_L     (663),
		.PKT_QOS_H                 (650),
		.PKT_QOS_L                 (650),
		.PKT_DATA_SIDEBAND_H       (648),
		.PKT_DATA_SIDEBAND_L       (648),
		.PKT_ADDR_SIDEBAND_H       (647),
		.PKT_ADDR_SIDEBAND_L       (647),
		.PKT_BURST_TYPE_H          (646),
		.PKT_BURST_TYPE_L          (645),
		.PKT_CACHE_H               (662),
		.PKT_CACHE_L               (659),
		.PKT_THREAD_ID_H           (655),
		.PKT_THREAD_ID_L           (655),
		.PKT_BURST_SIZE_H          (644),
		.PKT_BURST_SIZE_L          (642),
		.PKT_TRANS_EXCLUSIVE       (631),
		.PKT_TRANS_LOCK            (630),
		.PKT_BEGIN_BURST           (649),
		.PKT_PROTECTION_H          (658),
		.PKT_PROTECTION_L          (656),
		.PKT_BURSTWRAP_H           (641),
		.PKT_BURSTWRAP_L           (641),
		.PKT_BYTE_CNT_H            (640),
		.PKT_BYTE_CNT_L            (632),
		.PKT_ADDR_H                (625),
		.PKT_ADDR_L                (576),
		.PKT_TRANS_COMPRESSED_READ (626),
		.PKT_TRANS_POSTED          (627),
		.PKT_TRANS_WRITE           (628),
		.PKT_TRANS_READ            (629),
		.PKT_DATA_H                (511),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (575),
		.PKT_BYTEEN_L              (512),
		.PKT_SRC_ID_H              (652),
		.PKT_SRC_ID_L              (651),
		.PKT_DEST_ID_H             (654),
		.PKT_DEST_ID_L             (653),
		.ST_DATA_W                 (677),
		.ST_CHANNEL_W              (4),
		.AV_BURSTCOUNT_W           (9),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (0)
	) pipe_stage_dma_read_m0_agent (
		.clk                   (clk_clk_clk),                                                               //   input,    width = 1,       clk.clk
		.reset                 (pipe_stage_dma_write_reset_reset_bridge_in_reset_reset),                    //   input,    width = 1, clk_reset.reset
		.av_address            (pipe_stage_dma_read_m0_translator_avalon_universal_master_0_address),       //   input,   width = 50,        av.address
		.av_write              (pipe_stage_dma_read_m0_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (pipe_stage_dma_read_m0_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (pipe_stage_dma_read_m0_translator_avalon_universal_master_0_writedata),     //   input,  width = 512,          .writedata
		.av_readdata           (pipe_stage_dma_read_m0_translator_avalon_universal_master_0_readdata),      //  output,  width = 512,          .readdata
		.av_waitrequest        (pipe_stage_dma_read_m0_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (pipe_stage_dma_read_m0_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (pipe_stage_dma_read_m0_translator_avalon_universal_master_0_byteenable),    //   input,   width = 64,          .byteenable
		.av_burstcount         (pipe_stage_dma_read_m0_translator_avalon_universal_master_0_burstcount),    //   input,    width = 9,          .burstcount
		.av_debugaccess        (pipe_stage_dma_read_m0_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (pipe_stage_dma_read_m0_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (pipe_stage_dma_read_m0_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (pipe_stage_dma_read_m0_agent_cp_data),                                      //  output,  width = 677,          .data
		.cp_startofpacket      (pipe_stage_dma_read_m0_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (pipe_stage_dma_read_m0_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (pipe_stage_dma_read_m0_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (pipe_stage_dma_read_m0_limiter_rsp_src_valid),                              //   input,    width = 1,        rp.valid
		.rp_data               (pipe_stage_dma_read_m0_limiter_rsp_src_data),                               //   input,  width = 677,          .data
		.rp_channel            (pipe_stage_dma_read_m0_limiter_rsp_src_channel),                            //   input,    width = 4,          .channel
		.rp_startofpacket      (pipe_stage_dma_read_m0_limiter_rsp_src_startofpacket),                      //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (pipe_stage_dma_read_m0_limiter_rsp_src_endofpacket),                        //   input,    width = 1,          .endofpacket
		.rp_ready              (pipe_stage_dma_read_m0_limiter_rsp_src_ready),                              //  output,    width = 1,          .ready
		.av_response           (),                                                                          // (terminated),                         
		.av_writeresponsevalid ()                                                                           // (terminated),                         
	);

	msgdma_bbb_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (667),
		.PKT_ORI_BURST_SIZE_L      (665),
		.PKT_RESPONSE_STATUS_H     (664),
		.PKT_RESPONSE_STATUS_L     (663),
		.PKT_BURST_SIZE_H          (644),
		.PKT_BURST_SIZE_L          (642),
		.PKT_TRANS_LOCK            (630),
		.PKT_BEGIN_BURST           (649),
		.PKT_PROTECTION_H          (658),
		.PKT_PROTECTION_L          (656),
		.PKT_BURSTWRAP_H           (641),
		.PKT_BURSTWRAP_L           (641),
		.PKT_BYTE_CNT_H            (640),
		.PKT_BYTE_CNT_L            (632),
		.PKT_ADDR_H                (625),
		.PKT_ADDR_L                (576),
		.PKT_TRANS_COMPRESSED_READ (626),
		.PKT_TRANS_POSTED          (627),
		.PKT_TRANS_WRITE           (628),
		.PKT_TRANS_READ            (629),
		.PKT_DATA_H                (511),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (575),
		.PKT_BYTEEN_L              (512),
		.PKT_SRC_ID_H              (652),
		.PKT_SRC_ID_L              (651),
		.PKT_DEST_ID_H             (654),
		.PKT_DEST_ID_L             (653),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (677),
		.AVS_BURSTCOUNT_W          (9),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) pipe_stage_mem_s0_agent (
		.clk                     (clk_clk_clk),                                            //   input,    width = 1,             clk.clk
		.reset                   (pipe_stage_dma_write_reset_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (pipe_stage_mem_s0_agent_m0_address),                     //  output,   width = 50,              m0.address
		.m0_burstcount           (pipe_stage_mem_s0_agent_m0_burstcount),                  //  output,    width = 9,                .burstcount
		.m0_byteenable           (pipe_stage_mem_s0_agent_m0_byteenable),                  //  output,   width = 64,                .byteenable
		.m0_debugaccess          (pipe_stage_mem_s0_agent_m0_debugaccess),                 //  output,    width = 1,                .debugaccess
		.m0_lock                 (pipe_stage_mem_s0_agent_m0_lock),                        //  output,    width = 1,                .lock
		.m0_readdata             (pipe_stage_mem_s0_agent_m0_readdata),                    //   input,  width = 512,                .readdata
		.m0_readdatavalid        (pipe_stage_mem_s0_agent_m0_readdatavalid),               //   input,    width = 1,                .readdatavalid
		.m0_read                 (pipe_stage_mem_s0_agent_m0_read),                        //  output,    width = 1,                .read
		.m0_waitrequest          (pipe_stage_mem_s0_agent_m0_waitrequest),                 //   input,    width = 1,                .waitrequest
		.m0_writedata            (pipe_stage_mem_s0_agent_m0_writedata),                   //  output,  width = 512,                .writedata
		.m0_write                (pipe_stage_mem_s0_agent_m0_write),                       //  output,    width = 1,                .write
		.rp_endofpacket          (pipe_stage_mem_s0_agent_rp_endofpacket),                 //  output,    width = 1,              rp.endofpacket
		.rp_ready                (pipe_stage_mem_s0_agent_rp_ready),                       //   input,    width = 1,                .ready
		.rp_valid                (pipe_stage_mem_s0_agent_rp_valid),                       //  output,    width = 1,                .valid
		.rp_data                 (pipe_stage_mem_s0_agent_rp_data),                        //  output,  width = 677,                .data
		.rp_startofpacket        (pipe_stage_mem_s0_agent_rp_startofpacket),               //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                      //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                      //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_src_data),                                       //   input,  width = 677,                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                              //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                    //   input,    width = 4,                .channel
		.rf_sink_ready           (pipe_stage_mem_s0_agent_rsp_fifo_out_ready),             //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (pipe_stage_mem_s0_agent_rsp_fifo_out_valid),             //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (pipe_stage_mem_s0_agent_rsp_fifo_out_startofpacket),     //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (pipe_stage_mem_s0_agent_rsp_fifo_out_endofpacket),       //   input,    width = 1,                .endofpacket
		.rf_sink_data            (pipe_stage_mem_s0_agent_rsp_fifo_out_data),              //   input,  width = 678,                .data
		.rf_source_ready         (pipe_stage_mem_s0_agent_rf_source_ready),                //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (pipe_stage_mem_s0_agent_rf_source_valid),                //  output,    width = 1,                .valid
		.rf_source_startofpacket (pipe_stage_mem_s0_agent_rf_source_startofpacket),        //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (pipe_stage_mem_s0_agent_rf_source_endofpacket),          //  output,    width = 1,                .endofpacket
		.rf_source_data          (pipe_stage_mem_s0_agent_rf_source_data),                 //  output,  width = 678,                .data
		.rdata_fifo_sink_ready   (pipe_stage_mem_s0_agent_rdata_fifo_src_ready),           //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (pipe_stage_mem_s0_agent_rdata_fifo_src_valid),           //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (pipe_stage_mem_s0_agent_rdata_fifo_src_data),            //   input,  width = 514,                .data
		.rdata_fifo_src_ready    (pipe_stage_mem_s0_agent_rdata_fifo_src_ready),           //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pipe_stage_mem_s0_agent_rdata_fifo_src_valid),           //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (pipe_stage_mem_s0_agent_rdata_fifo_src_data),            //  output,  width = 514,                .data
		.m0_response             (2'b00),                                                  // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                   // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                    // (terminated),                               
	);

	msgdma_bbb_altera_avalon_sc_fifo_191_e5eqkcq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (678),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) pipe_stage_mem_s0_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                            //   input,    width = 1,       clk.clk
		.reset             (pipe_stage_dma_write_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (pipe_stage_mem_s0_agent_rf_source_data),                 //   input,  width = 678,        in.data
		.in_valid          (pipe_stage_mem_s0_agent_rf_source_valid),                //   input,    width = 1,          .valid
		.in_ready          (pipe_stage_mem_s0_agent_rf_source_ready),                //  output,    width = 1,          .ready
		.in_startofpacket  (pipe_stage_mem_s0_agent_rf_source_startofpacket),        //   input,    width = 1,          .startofpacket
		.in_endofpacket    (pipe_stage_mem_s0_agent_rf_source_endofpacket),          //   input,    width = 1,          .endofpacket
		.out_data          (pipe_stage_mem_s0_agent_rsp_fifo_out_data),              //  output,  width = 678,       out.data
		.out_valid         (pipe_stage_mem_s0_agent_rsp_fifo_out_valid),             //  output,    width = 1,          .valid
		.out_ready         (pipe_stage_mem_s0_agent_rsp_fifo_out_ready),             //   input,    width = 1,          .ready
		.out_startofpacket (pipe_stage_mem_s0_agent_rsp_fifo_out_startofpacket),     //  output,    width = 1,          .startofpacket
		.out_endofpacket   (pipe_stage_mem_s0_agent_rsp_fifo_out_endofpacket),       //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated),                         
		.csr_read          (1'b0),                                                   // (terminated),                         
		.csr_write         (1'b0),                                                   // (terminated),                         
		.csr_readdata      (),                                                       // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated),                         
		.almost_full_data  (),                                                       // (terminated),                         
		.almost_empty_data (),                                                       // (terminated),                         
		.in_empty          (1'b0),                                                   // (terminated),                         
		.out_empty         (),                                                       // (terminated),                         
		.in_error          (1'b0),                                                   // (terminated),                         
		.out_error         (),                                                       // (terminated),                         
		.in_channel        (1'b0),                                                   // (terminated),                         
		.out_channel       ()                                                        // (terminated),                         
	);

	msgdma_bbb_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (667),
		.PKT_ORI_BURST_SIZE_L      (665),
		.PKT_RESPONSE_STATUS_H     (664),
		.PKT_RESPONSE_STATUS_L     (663),
		.PKT_BURST_SIZE_H          (644),
		.PKT_BURST_SIZE_L          (642),
		.PKT_TRANS_LOCK            (630),
		.PKT_BEGIN_BURST           (649),
		.PKT_PROTECTION_H          (658),
		.PKT_PROTECTION_L          (656),
		.PKT_BURSTWRAP_H           (641),
		.PKT_BURSTWRAP_L           (641),
		.PKT_BYTE_CNT_H            (640),
		.PKT_BYTE_CNT_L            (632),
		.PKT_ADDR_H                (625),
		.PKT_ADDR_L                (576),
		.PKT_TRANS_COMPRESSED_READ (626),
		.PKT_TRANS_POSTED          (627),
		.PKT_TRANS_WRITE           (628),
		.PKT_TRANS_READ            (629),
		.PKT_DATA_H                (511),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (575),
		.PKT_BYTEEN_L              (512),
		.PKT_SRC_ID_H              (652),
		.PKT_SRC_ID_L              (651),
		.PKT_DEST_ID_H             (654),
		.PKT_DEST_ID_L             (653),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (677),
		.AVS_BURSTCOUNT_W          (9),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) pipe_stage_host_wr_s0_agent (
		.clk                     (clk_clk_clk),                                            //   input,    width = 1,             clk.clk
		.reset                   (pipe_stage_dma_write_reset_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (pipe_stage_host_wr_s0_agent_m0_address),                 //  output,   width = 50,              m0.address
		.m0_burstcount           (pipe_stage_host_wr_s0_agent_m0_burstcount),              //  output,    width = 9,                .burstcount
		.m0_byteenable           (pipe_stage_host_wr_s0_agent_m0_byteenable),              //  output,   width = 64,                .byteenable
		.m0_debugaccess          (pipe_stage_host_wr_s0_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (pipe_stage_host_wr_s0_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (pipe_stage_host_wr_s0_agent_m0_readdata),                //   input,  width = 512,                .readdata
		.m0_readdatavalid        (pipe_stage_host_wr_s0_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (pipe_stage_host_wr_s0_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (pipe_stage_host_wr_s0_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (pipe_stage_host_wr_s0_agent_m0_writedata),               //  output,  width = 512,                .writedata
		.m0_write                (pipe_stage_host_wr_s0_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (pipe_stage_host_wr_s0_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (pipe_stage_host_wr_s0_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (pipe_stage_host_wr_s0_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (pipe_stage_host_wr_s0_agent_rp_data),                    //  output,  width = 677,                .data
		.rp_startofpacket        (pipe_stage_host_wr_s0_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                  //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                  //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_001_src_data),                                   //   input,  width = 677,                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                          //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                            //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                //   input,    width = 4,                .channel
		.rf_sink_ready           (pipe_stage_host_wr_s0_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (pipe_stage_host_wr_s0_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (pipe_stage_host_wr_s0_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (pipe_stage_host_wr_s0_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (pipe_stage_host_wr_s0_agent_rsp_fifo_out_data),          //   input,  width = 678,                .data
		.rf_source_ready         (pipe_stage_host_wr_s0_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (pipe_stage_host_wr_s0_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (pipe_stage_host_wr_s0_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (pipe_stage_host_wr_s0_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (pipe_stage_host_wr_s0_agent_rf_source_data),             //  output,  width = 678,                .data
		.rdata_fifo_sink_ready   (pipe_stage_host_wr_s0_agent_rdata_fifo_src_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (pipe_stage_host_wr_s0_agent_rdata_fifo_src_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (pipe_stage_host_wr_s0_agent_rdata_fifo_src_data),        //   input,  width = 514,                .data
		.rdata_fifo_src_ready    (pipe_stage_host_wr_s0_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pipe_stage_host_wr_s0_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (pipe_stage_host_wr_s0_agent_rdata_fifo_src_data),        //  output,  width = 514,                .data
		.m0_response             (2'b00),                                                  // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                   // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                    // (terminated),                               
	);

	msgdma_bbb_altera_avalon_sc_fifo_191_e5eqkcq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (678),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) pipe_stage_host_wr_s0_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                            //   input,    width = 1,       clk.clk
		.reset             (pipe_stage_dma_write_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (pipe_stage_host_wr_s0_agent_rf_source_data),             //   input,  width = 678,        in.data
		.in_valid          (pipe_stage_host_wr_s0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (pipe_stage_host_wr_s0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (pipe_stage_host_wr_s0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (pipe_stage_host_wr_s0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (pipe_stage_host_wr_s0_agent_rsp_fifo_out_data),          //  output,  width = 678,       out.data
		.out_valid         (pipe_stage_host_wr_s0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (pipe_stage_host_wr_s0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (pipe_stage_host_wr_s0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (pipe_stage_host_wr_s0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated),                         
		.csr_read          (1'b0),                                                   // (terminated),                         
		.csr_write         (1'b0),                                                   // (terminated),                         
		.csr_readdata      (),                                                       // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated),                         
		.almost_full_data  (),                                                       // (terminated),                         
		.almost_empty_data (),                                                       // (terminated),                         
		.in_empty          (1'b0),                                                   // (terminated),                         
		.out_empty         (),                                                       // (terminated),                         
		.in_error          (1'b0),                                                   // (terminated),                         
		.out_error         (),                                                       // (terminated),                         
		.in_channel        (1'b0),                                                   // (terminated),                         
		.out_channel       ()                                                        // (terminated),                         
	);

	msgdma_bbb_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (667),
		.PKT_ORI_BURST_SIZE_L      (665),
		.PKT_RESPONSE_STATUS_H     (664),
		.PKT_RESPONSE_STATUS_L     (663),
		.PKT_BURST_SIZE_H          (644),
		.PKT_BURST_SIZE_L          (642),
		.PKT_TRANS_LOCK            (630),
		.PKT_BEGIN_BURST           (649),
		.PKT_PROTECTION_H          (658),
		.PKT_PROTECTION_L          (656),
		.PKT_BURSTWRAP_H           (641),
		.PKT_BURSTWRAP_L           (641),
		.PKT_BYTE_CNT_H            (640),
		.PKT_BYTE_CNT_L            (632),
		.PKT_ADDR_H                (625),
		.PKT_ADDR_L                (576),
		.PKT_TRANS_COMPRESSED_READ (626),
		.PKT_TRANS_POSTED          (627),
		.PKT_TRANS_WRITE           (628),
		.PKT_TRANS_READ            (629),
		.PKT_DATA_H                (511),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (575),
		.PKT_BYTEEN_L              (512),
		.PKT_SRC_ID_H              (652),
		.PKT_SRC_ID_L              (651),
		.PKT_DEST_ID_H             (654),
		.PKT_DEST_ID_L             (653),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (677),
		.AVS_BURSTCOUNT_W          (9),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) pipe_stage_host_rd_s0_agent (
		.clk                     (clk_clk_clk),                                            //   input,    width = 1,             clk.clk
		.reset                   (pipe_stage_dma_write_reset_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (pipe_stage_host_rd_s0_agent_m0_address),                 //  output,   width = 50,              m0.address
		.m0_burstcount           (pipe_stage_host_rd_s0_agent_m0_burstcount),              //  output,    width = 9,                .burstcount
		.m0_byteenable           (pipe_stage_host_rd_s0_agent_m0_byteenable),              //  output,   width = 64,                .byteenable
		.m0_debugaccess          (pipe_stage_host_rd_s0_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (pipe_stage_host_rd_s0_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (pipe_stage_host_rd_s0_agent_m0_readdata),                //   input,  width = 512,                .readdata
		.m0_readdatavalid        (pipe_stage_host_rd_s0_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (pipe_stage_host_rd_s0_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (pipe_stage_host_rd_s0_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (pipe_stage_host_rd_s0_agent_m0_writedata),               //  output,  width = 512,                .writedata
		.m0_write                (pipe_stage_host_rd_s0_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (pipe_stage_host_rd_s0_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (pipe_stage_host_rd_s0_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (pipe_stage_host_rd_s0_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (pipe_stage_host_rd_s0_agent_rp_data),                    //  output,  width = 677,                .data
		.rp_startofpacket        (pipe_stage_host_rd_s0_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                  //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                  //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_002_src_data),                                   //   input,  width = 677,                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                          //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                            //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                //   input,    width = 4,                .channel
		.rf_sink_ready           (pipe_stage_host_rd_s0_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (pipe_stage_host_rd_s0_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (pipe_stage_host_rd_s0_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (pipe_stage_host_rd_s0_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (pipe_stage_host_rd_s0_agent_rsp_fifo_out_data),          //   input,  width = 678,                .data
		.rf_source_ready         (pipe_stage_host_rd_s0_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (pipe_stage_host_rd_s0_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (pipe_stage_host_rd_s0_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (pipe_stage_host_rd_s0_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (pipe_stage_host_rd_s0_agent_rf_source_data),             //  output,  width = 678,                .data
		.rdata_fifo_sink_ready   (pipe_stage_host_rd_s0_agent_rdata_fifo_src_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (pipe_stage_host_rd_s0_agent_rdata_fifo_src_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (pipe_stage_host_rd_s0_agent_rdata_fifo_src_data),        //   input,  width = 514,                .data
		.rdata_fifo_src_ready    (pipe_stage_host_rd_s0_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pipe_stage_host_rd_s0_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (pipe_stage_host_rd_s0_agent_rdata_fifo_src_data),        //  output,  width = 514,                .data
		.m0_response             (2'b00),                                                  // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                   // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                    // (terminated),                               
	);

	msgdma_bbb_altera_avalon_sc_fifo_191_e5eqkcq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (678),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) pipe_stage_host_rd_s0_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                            //   input,    width = 1,       clk.clk
		.reset             (pipe_stage_dma_write_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (pipe_stage_host_rd_s0_agent_rf_source_data),             //   input,  width = 678,        in.data
		.in_valid          (pipe_stage_host_rd_s0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (pipe_stage_host_rd_s0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (pipe_stage_host_rd_s0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (pipe_stage_host_rd_s0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (pipe_stage_host_rd_s0_agent_rsp_fifo_out_data),          //  output,  width = 678,       out.data
		.out_valid         (pipe_stage_host_rd_s0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (pipe_stage_host_rd_s0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (pipe_stage_host_rd_s0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (pipe_stage_host_rd_s0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated),                         
		.csr_read          (1'b0),                                                   // (terminated),                         
		.csr_write         (1'b0),                                                   // (terminated),                         
		.csr_readdata      (),                                                       // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated),                         
		.almost_full_data  (),                                                       // (terminated),                         
		.almost_empty_data (),                                                       // (terminated),                         
		.in_empty          (1'b0),                                                   // (terminated),                         
		.out_empty         (),                                                       // (terminated),                         
		.in_error          (1'b0),                                                   // (terminated),                         
		.out_error         (),                                                       // (terminated),                         
		.in_channel        (1'b0),                                                   // (terminated),                         
		.out_channel       ()                                                        // (terminated),                         
	);

	msgdma_bbb_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (667),
		.PKT_ORI_BURST_SIZE_L      (665),
		.PKT_RESPONSE_STATUS_H     (664),
		.PKT_RESPONSE_STATUS_L     (663),
		.PKT_BURST_SIZE_H          (644),
		.PKT_BURST_SIZE_L          (642),
		.PKT_TRANS_LOCK            (630),
		.PKT_BEGIN_BURST           (649),
		.PKT_PROTECTION_H          (658),
		.PKT_PROTECTION_L          (656),
		.PKT_BURSTWRAP_H           (641),
		.PKT_BURSTWRAP_L           (641),
		.PKT_BYTE_CNT_H            (640),
		.PKT_BYTE_CNT_L            (632),
		.PKT_ADDR_H                (625),
		.PKT_ADDR_L                (576),
		.PKT_TRANS_COMPRESSED_READ (626),
		.PKT_TRANS_POSTED          (627),
		.PKT_TRANS_WRITE           (628),
		.PKT_TRANS_READ            (629),
		.PKT_DATA_H                (511),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (575),
		.PKT_BYTEEN_L              (512),
		.PKT_SRC_ID_H              (652),
		.PKT_SRC_ID_L              (651),
		.PKT_DEST_ID_H             (654),
		.PKT_DEST_ID_L             (653),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (677),
		.AVS_BURSTCOUNT_W          (9),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) magic_number_rom_slave_agent (
		.clk                     (clk_clk_clk),                                             //   input,    width = 1,             clk.clk
		.reset                   (pipe_stage_dma_write_reset_reset_bridge_in_reset_reset),  //   input,    width = 1,       clk_reset.reset
		.m0_address              (magic_number_rom_slave_agent_m0_address),                 //  output,   width = 50,              m0.address
		.m0_burstcount           (magic_number_rom_slave_agent_m0_burstcount),              //  output,    width = 9,                .burstcount
		.m0_byteenable           (magic_number_rom_slave_agent_m0_byteenable),              //  output,   width = 64,                .byteenable
		.m0_debugaccess          (magic_number_rom_slave_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (magic_number_rom_slave_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (magic_number_rom_slave_agent_m0_readdata),                //   input,  width = 512,                .readdata
		.m0_readdatavalid        (magic_number_rom_slave_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (magic_number_rom_slave_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (magic_number_rom_slave_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (magic_number_rom_slave_agent_m0_writedata),               //  output,  width = 512,                .writedata
		.m0_write                (magic_number_rom_slave_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (magic_number_rom_slave_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (magic_number_rom_slave_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (magic_number_rom_slave_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (magic_number_rom_slave_agent_rp_data),                    //  output,  width = 677,                .data
		.rp_startofpacket        (magic_number_rom_slave_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                                   //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                                   //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_003_src_data),                                    //   input,  width = 677,                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                           //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                             //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                                 //   input,    width = 4,                .channel
		.rf_sink_ready           (magic_number_rom_slave_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (magic_number_rom_slave_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (magic_number_rom_slave_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (magic_number_rom_slave_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (magic_number_rom_slave_agent_rsp_fifo_out_data),          //   input,  width = 678,                .data
		.rf_source_ready         (magic_number_rom_slave_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (magic_number_rom_slave_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (magic_number_rom_slave_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (magic_number_rom_slave_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (magic_number_rom_slave_agent_rf_source_data),             //  output,  width = 678,                .data
		.rdata_fifo_sink_ready   (magic_number_rom_slave_agent_rdata_fifo_src_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (magic_number_rom_slave_agent_rdata_fifo_src_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (magic_number_rom_slave_agent_rdata_fifo_src_data),        //   input,  width = 514,                .data
		.rdata_fifo_src_ready    (magic_number_rom_slave_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (magic_number_rom_slave_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (magic_number_rom_slave_agent_rdata_fifo_src_data),        //  output,  width = 514,                .data
		.m0_response             (2'b00),                                                   // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                    // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                     // (terminated),                               
	);

	msgdma_bbb_altera_avalon_sc_fifo_191_e5eqkcq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (678),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) magic_number_rom_slave_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                             //   input,    width = 1,       clk.clk
		.reset             (pipe_stage_dma_write_reset_reset_bridge_in_reset_reset),  //   input,    width = 1, clk_reset.reset
		.in_data           (magic_number_rom_slave_agent_rf_source_data),             //   input,  width = 678,        in.data
		.in_valid          (magic_number_rom_slave_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (magic_number_rom_slave_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (magic_number_rom_slave_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (magic_number_rom_slave_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (magic_number_rom_slave_agent_rsp_fifo_out_data),          //  output,  width = 678,       out.data
		.out_valid         (magic_number_rom_slave_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (magic_number_rom_slave_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (magic_number_rom_slave_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (magic_number_rom_slave_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated),                         
		.csr_read          (1'b0),                                                    // (terminated),                         
		.csr_write         (1'b0),                                                    // (terminated),                         
		.csr_readdata      (),                                                        // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated),                         
		.almost_full_data  (),                                                        // (terminated),                         
		.almost_empty_data (),                                                        // (terminated),                         
		.in_empty          (1'b0),                                                    // (terminated),                         
		.out_empty         (),                                                        // (terminated),                         
		.in_error          (1'b0),                                                    // (terminated),                         
		.out_error         (),                                                        // (terminated),                         
		.in_channel        (1'b0),                                                    // (terminated),                         
		.out_channel       ()                                                         // (terminated),                         
	);

	msgdma_bbb_altera_merlin_router_191_acw7igi router (
		.sink_ready         (pipe_stage_dma_write_m0_agent_cp_ready),                 //  output,    width = 1,      sink.ready
		.sink_valid         (pipe_stage_dma_write_m0_agent_cp_valid),                 //   input,    width = 1,          .valid
		.sink_data          (pipe_stage_dma_write_m0_agent_cp_data),                  //   input,  width = 677,          .data
		.sink_startofpacket (pipe_stage_dma_write_m0_agent_cp_startofpacket),         //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (pipe_stage_dma_write_m0_agent_cp_endofpacket),           //   input,    width = 1,          .endofpacket
		.clk                (clk_clk_clk),                                            //   input,    width = 1,       clk.clk
		.reset              (pipe_stage_dma_write_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_src_ready),                                       //   input,    width = 1,       src.ready
		.src_valid          (router_src_valid),                                       //  output,    width = 1,          .valid
		.src_data           (router_src_data),                                        //  output,  width = 677,          .data
		.src_channel        (router_src_channel),                                     //  output,    width = 4,          .channel
		.src_startofpacket  (router_src_startofpacket),                               //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                  //  output,    width = 1,          .endofpacket
	);

	msgdma_bbb_altera_merlin_router_191_c35n5ai router_001 (
		.sink_ready         (pipe_stage_dma_read_m0_agent_cp_ready),                  //  output,    width = 1,      sink.ready
		.sink_valid         (pipe_stage_dma_read_m0_agent_cp_valid),                  //   input,    width = 1,          .valid
		.sink_data          (pipe_stage_dma_read_m0_agent_cp_data),                   //   input,  width = 677,          .data
		.sink_startofpacket (pipe_stage_dma_read_m0_agent_cp_startofpacket),          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (pipe_stage_dma_read_m0_agent_cp_endofpacket),            //   input,    width = 1,          .endofpacket
		.clk                (clk_clk_clk),                                            //   input,    width = 1,       clk.clk
		.reset              (pipe_stage_dma_write_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_001_src_ready),                                   //   input,    width = 1,       src.ready
		.src_valid          (router_001_src_valid),                                   //  output,    width = 1,          .valid
		.src_data           (router_001_src_data),                                    //  output,  width = 677,          .data
		.src_channel        (router_001_src_channel),                                 //  output,    width = 4,          .channel
		.src_startofpacket  (router_001_src_startofpacket),                           //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                              //  output,    width = 1,          .endofpacket
	);

	msgdma_bbb_altera_merlin_router_191_ryksocy router_002 (
		.sink_ready         (pipe_stage_mem_s0_agent_rp_ready),                       //  output,    width = 1,      sink.ready
		.sink_valid         (pipe_stage_mem_s0_agent_rp_valid),                       //   input,    width = 1,          .valid
		.sink_data          (pipe_stage_mem_s0_agent_rp_data),                        //   input,  width = 677,          .data
		.sink_startofpacket (pipe_stage_mem_s0_agent_rp_startofpacket),               //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (pipe_stage_mem_s0_agent_rp_endofpacket),                 //   input,    width = 1,          .endofpacket
		.clk                (clk_clk_clk),                                            //   input,    width = 1,       clk.clk
		.reset              (pipe_stage_dma_write_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_002_src_ready),                                   //   input,    width = 1,       src.ready
		.src_valid          (router_002_src_valid),                                   //  output,    width = 1,          .valid
		.src_data           (router_002_src_data),                                    //  output,  width = 677,          .data
		.src_channel        (router_002_src_channel),                                 //  output,    width = 4,          .channel
		.src_startofpacket  (router_002_src_startofpacket),                           //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                              //  output,    width = 1,          .endofpacket
	);

	msgdma_bbb_altera_merlin_router_191_ai6ulwa router_003 (
		.sink_ready         (pipe_stage_host_wr_s0_agent_rp_ready),                   //  output,    width = 1,      sink.ready
		.sink_valid         (pipe_stage_host_wr_s0_agent_rp_valid),                   //   input,    width = 1,          .valid
		.sink_data          (pipe_stage_host_wr_s0_agent_rp_data),                    //   input,  width = 677,          .data
		.sink_startofpacket (pipe_stage_host_wr_s0_agent_rp_startofpacket),           //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (pipe_stage_host_wr_s0_agent_rp_endofpacket),             //   input,    width = 1,          .endofpacket
		.clk                (clk_clk_clk),                                            //   input,    width = 1,       clk.clk
		.reset              (pipe_stage_dma_write_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_003_src_ready),                                   //   input,    width = 1,       src.ready
		.src_valid          (router_003_src_valid),                                   //  output,    width = 1,          .valid
		.src_data           (router_003_src_data),                                    //  output,  width = 677,          .data
		.src_channel        (router_003_src_channel),                                 //  output,    width = 4,          .channel
		.src_startofpacket  (router_003_src_startofpacket),                           //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                              //  output,    width = 1,          .endofpacket
	);

	msgdma_bbb_altera_merlin_router_191_7mgzb3i router_004 (
		.sink_ready         (pipe_stage_host_rd_s0_agent_rp_ready),                   //  output,    width = 1,      sink.ready
		.sink_valid         (pipe_stage_host_rd_s0_agent_rp_valid),                   //   input,    width = 1,          .valid
		.sink_data          (pipe_stage_host_rd_s0_agent_rp_data),                    //   input,  width = 677,          .data
		.sink_startofpacket (pipe_stage_host_rd_s0_agent_rp_startofpacket),           //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (pipe_stage_host_rd_s0_agent_rp_endofpacket),             //   input,    width = 1,          .endofpacket
		.clk                (clk_clk_clk),                                            //   input,    width = 1,       clk.clk
		.reset              (pipe_stage_dma_write_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_004_src_ready),                                   //   input,    width = 1,       src.ready
		.src_valid          (router_004_src_valid),                                   //  output,    width = 1,          .valid
		.src_data           (router_004_src_data),                                    //  output,  width = 677,          .data
		.src_channel        (router_004_src_channel),                                 //  output,    width = 4,          .channel
		.src_startofpacket  (router_004_src_startofpacket),                           //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                              //  output,    width = 1,          .endofpacket
	);

	msgdma_bbb_altera_merlin_router_191_7mgzb3i router_005 (
		.sink_ready         (magic_number_rom_slave_agent_rp_ready),                  //  output,    width = 1,      sink.ready
		.sink_valid         (magic_number_rom_slave_agent_rp_valid),                  //   input,    width = 1,          .valid
		.sink_data          (magic_number_rom_slave_agent_rp_data),                   //   input,  width = 677,          .data
		.sink_startofpacket (magic_number_rom_slave_agent_rp_startofpacket),          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (magic_number_rom_slave_agent_rp_endofpacket),            //   input,    width = 1,          .endofpacket
		.clk                (clk_clk_clk),                                            //   input,    width = 1,       clk.clk
		.reset              (pipe_stage_dma_write_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_005_src_ready),                                   //   input,    width = 1,       src.ready
		.src_valid          (router_005_src_valid),                                   //  output,    width = 1,          .valid
		.src_data           (router_005_src_data),                                    //  output,  width = 677,          .data
		.src_channel        (router_005_src_channel),                                 //  output,    width = 4,          .channel
		.src_startofpacket  (router_005_src_startofpacket),                           //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                              //  output,    width = 1,          .endofpacket
	);

	msgdma_bbb_altera_merlin_traffic_limiter_191_kcba44q #(
		.SYNC_RESET                (0),
		.PKT_DEST_ID_H             (654),
		.PKT_DEST_ID_L             (653),
		.PKT_SRC_ID_H              (652),
		.PKT_SRC_ID_L              (651),
		.PKT_BYTE_CNT_H            (640),
		.PKT_BYTE_CNT_L            (632),
		.PKT_BYTEEN_H              (575),
		.PKT_BYTEEN_L              (512),
		.PKT_TRANS_POSTED          (627),
		.PKT_TRANS_WRITE           (628),
		.MAX_OUTSTANDING_RESPONSES (65),
		.PIPELINED                 (0),
		.ST_DATA_W                 (677),
		.ST_CHANNEL_W              (4),
		.VALID_WIDTH               (4),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) pipe_stage_dma_write_m0_limiter (
		.clk                    (clk_clk_clk),                                            //   input,    width = 1,       clk.clk
		.reset                  (pipe_stage_dma_write_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                       //  output,    width = 1,  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                       //   input,    width = 1,          .valid
		.cmd_sink_data          (router_src_data),                                        //   input,  width = 677,          .data
		.cmd_sink_channel       (router_src_channel),                                     //   input,    width = 4,          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                               //   input,    width = 1,          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                 //   input,    width = 1,          .endofpacket
		.cmd_src_ready          (pipe_stage_dma_write_m0_limiter_cmd_src_ready),          //   input,    width = 1,   cmd_src.ready
		.cmd_src_data           (pipe_stage_dma_write_m0_limiter_cmd_src_data),           //  output,  width = 677,          .data
		.cmd_src_channel        (pipe_stage_dma_write_m0_limiter_cmd_src_channel),        //  output,    width = 4,          .channel
		.cmd_src_startofpacket  (pipe_stage_dma_write_m0_limiter_cmd_src_startofpacket),  //  output,    width = 1,          .startofpacket
		.cmd_src_endofpacket    (pipe_stage_dma_write_m0_limiter_cmd_src_endofpacket),    //  output,    width = 1,          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                      //  output,    width = 1,  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                      //   input,    width = 1,          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                    //   input,    width = 4,          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                       //   input,  width = 677,          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                              //   input,    width = 1,          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                //   input,    width = 1,          .endofpacket
		.rsp_src_ready          (pipe_stage_dma_write_m0_limiter_rsp_src_ready),          //   input,    width = 1,   rsp_src.ready
		.rsp_src_valid          (pipe_stage_dma_write_m0_limiter_rsp_src_valid),          //  output,    width = 1,          .valid
		.rsp_src_data           (pipe_stage_dma_write_m0_limiter_rsp_src_data),           //  output,  width = 677,          .data
		.rsp_src_channel        (pipe_stage_dma_write_m0_limiter_rsp_src_channel),        //  output,    width = 4,          .channel
		.rsp_src_startofpacket  (pipe_stage_dma_write_m0_limiter_rsp_src_startofpacket),  //  output,    width = 1,          .startofpacket
		.rsp_src_endofpacket    (pipe_stage_dma_write_m0_limiter_rsp_src_endofpacket),    //  output,    width = 1,          .endofpacket
		.cmd_src_valid          (pipe_stage_dma_write_m0_limiter_cmd_valid_data)          //  output,    width = 4, cmd_valid.data
	);

	msgdma_bbb_altera_merlin_traffic_limiter_191_kcba44q #(
		.SYNC_RESET                (0),
		.PKT_DEST_ID_H             (654),
		.PKT_DEST_ID_L             (653),
		.PKT_SRC_ID_H              (652),
		.PKT_SRC_ID_L              (651),
		.PKT_BYTE_CNT_H            (640),
		.PKT_BYTE_CNT_L            (632),
		.PKT_BYTEEN_H              (575),
		.PKT_BYTEEN_L              (512),
		.PKT_TRANS_POSTED          (627),
		.PKT_TRANS_WRITE           (628),
		.MAX_OUTSTANDING_RESPONSES (65),
		.PIPELINED                 (0),
		.ST_DATA_W                 (677),
		.ST_CHANNEL_W              (4),
		.VALID_WIDTH               (4),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) pipe_stage_dma_read_m0_limiter (
		.clk                    (clk_clk_clk),                                            //   input,    width = 1,       clk.clk
		.reset                  (pipe_stage_dma_write_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                   //  output,    width = 1,  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                   //   input,    width = 1,          .valid
		.cmd_sink_data          (router_001_src_data),                                    //   input,  width = 677,          .data
		.cmd_sink_channel       (router_001_src_channel),                                 //   input,    width = 4,          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                           //   input,    width = 1,          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                             //   input,    width = 1,          .endofpacket
		.cmd_src_ready          (pipe_stage_dma_read_m0_limiter_cmd_src_ready),           //   input,    width = 1,   cmd_src.ready
		.cmd_src_data           (pipe_stage_dma_read_m0_limiter_cmd_src_data),            //  output,  width = 677,          .data
		.cmd_src_channel        (pipe_stage_dma_read_m0_limiter_cmd_src_channel),         //  output,    width = 4,          .channel
		.cmd_src_startofpacket  (pipe_stage_dma_read_m0_limiter_cmd_src_startofpacket),   //  output,    width = 1,          .startofpacket
		.cmd_src_endofpacket    (pipe_stage_dma_read_m0_limiter_cmd_src_endofpacket),     //  output,    width = 1,          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                                  //  output,    width = 1,  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                                  //   input,    width = 1,          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                                //   input,    width = 4,          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                                   //   input,  width = 677,          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                          //   input,    width = 1,          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                            //   input,    width = 1,          .endofpacket
		.rsp_src_ready          (pipe_stage_dma_read_m0_limiter_rsp_src_ready),           //   input,    width = 1,   rsp_src.ready
		.rsp_src_valid          (pipe_stage_dma_read_m0_limiter_rsp_src_valid),           //  output,    width = 1,          .valid
		.rsp_src_data           (pipe_stage_dma_read_m0_limiter_rsp_src_data),            //  output,  width = 677,          .data
		.rsp_src_channel        (pipe_stage_dma_read_m0_limiter_rsp_src_channel),         //  output,    width = 4,          .channel
		.rsp_src_startofpacket  (pipe_stage_dma_read_m0_limiter_rsp_src_startofpacket),   //  output,    width = 1,          .startofpacket
		.rsp_src_endofpacket    (pipe_stage_dma_read_m0_limiter_rsp_src_endofpacket),     //  output,    width = 1,          .endofpacket
		.cmd_src_valid          (pipe_stage_dma_read_m0_limiter_cmd_valid_data)           //  output,    width = 4, cmd_valid.data
	);

	msgdma_bbb_altera_merlin_demultiplexer_191_5js56xy cmd_demux (
		.clk                (clk_clk_clk),                                            //   input,    width = 1,        clk.clk
		.reset              (pipe_stage_dma_write_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  clk_reset.reset
		.sink_ready         (pipe_stage_dma_write_m0_limiter_cmd_src_ready),          //  output,    width = 1,       sink.ready
		.sink_channel       (pipe_stage_dma_write_m0_limiter_cmd_src_channel),        //   input,    width = 4,           .channel
		.sink_data          (pipe_stage_dma_write_m0_limiter_cmd_src_data),           //   input,  width = 677,           .data
		.sink_startofpacket (pipe_stage_dma_write_m0_limiter_cmd_src_startofpacket),  //   input,    width = 1,           .startofpacket
		.sink_endofpacket   (pipe_stage_dma_write_m0_limiter_cmd_src_endofpacket),    //   input,    width = 1,           .endofpacket
		.sink_valid         (pipe_stage_dma_write_m0_limiter_cmd_valid_data),         //   input,    width = 4, sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                                   //   input,    width = 1,       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                   //  output,    width = 1,           .valid
		.src0_data          (cmd_demux_src0_data),                                    //  output,  width = 677,           .data
		.src0_channel       (cmd_demux_src0_channel),                                 //  output,    width = 4,           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                           //  output,    width = 1,           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                             //  output,    width = 1,           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                   //   input,    width = 1,       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                   //  output,    width = 1,           .valid
		.src1_data          (cmd_demux_src1_data),                                    //  output,  width = 677,           .data
		.src1_channel       (cmd_demux_src1_channel),                                 //  output,    width = 4,           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                           //  output,    width = 1,           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket)                              //  output,    width = 1,           .endofpacket
	);

	msgdma_bbb_altera_merlin_demultiplexer_191_b4filfy cmd_demux_001 (
		.clk                (clk_clk_clk),                                            //   input,    width = 1,        clk.clk
		.reset              (pipe_stage_dma_write_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  clk_reset.reset
		.sink_ready         (pipe_stage_dma_read_m0_limiter_cmd_src_ready),           //  output,    width = 1,       sink.ready
		.sink_channel       (pipe_stage_dma_read_m0_limiter_cmd_src_channel),         //   input,    width = 4,           .channel
		.sink_data          (pipe_stage_dma_read_m0_limiter_cmd_src_data),            //   input,  width = 677,           .data
		.sink_startofpacket (pipe_stage_dma_read_m0_limiter_cmd_src_startofpacket),   //   input,    width = 1,           .startofpacket
		.sink_endofpacket   (pipe_stage_dma_read_m0_limiter_cmd_src_endofpacket),     //   input,    width = 1,           .endofpacket
		.sink_valid         (pipe_stage_dma_read_m0_limiter_cmd_valid_data),          //   input,    width = 4, sink_valid.data
		.src0_ready         (cmd_demux_001_src0_ready),                               //   input,    width = 1,       src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                               //  output,    width = 1,           .valid
		.src0_data          (cmd_demux_001_src0_data),                                //  output,  width = 677,           .data
		.src0_channel       (cmd_demux_001_src0_channel),                             //  output,    width = 4,           .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                       //  output,    width = 1,           .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                         //  output,    width = 1,           .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                               //   input,    width = 1,       src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                               //  output,    width = 1,           .valid
		.src1_data          (cmd_demux_001_src1_data),                                //  output,  width = 677,           .data
		.src1_channel       (cmd_demux_001_src1_channel),                             //  output,    width = 4,           .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                       //  output,    width = 1,           .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket),                         //  output,    width = 1,           .endofpacket
		.src2_ready         (cmd_demux_001_src2_ready),                               //   input,    width = 1,       src2.ready
		.src2_valid         (cmd_demux_001_src2_valid),                               //  output,    width = 1,           .valid
		.src2_data          (cmd_demux_001_src2_data),                                //  output,  width = 677,           .data
		.src2_channel       (cmd_demux_001_src2_channel),                             //  output,    width = 4,           .channel
		.src2_startofpacket (cmd_demux_001_src2_startofpacket),                       //  output,    width = 1,           .startofpacket
		.src2_endofpacket   (cmd_demux_001_src2_endofpacket)                          //  output,    width = 1,           .endofpacket
	);

	msgdma_bbb_altera_merlin_multiplexer_191_br63msi cmd_mux (
		.clk                 (clk_clk_clk),                                            //   input,    width = 1,       clk.clk
		.reset               (pipe_stage_dma_write_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                      //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_src_valid),                                      //  output,    width = 1,          .valid
		.src_data            (cmd_mux_src_data),                                       //  output,  width = 677,          .data
		.src_channel         (cmd_mux_src_channel),                                    //  output,    width = 4,          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                              //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                   //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                   //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src0_channel),                                 //   input,    width = 4,          .channel
		.sink0_data          (cmd_demux_src0_data),                                    //   input,  width = 677,          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                           //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                             //   input,    width = 1,          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                               //  output,    width = 1,     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                               //   input,    width = 1,          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                             //   input,    width = 4,          .channel
		.sink1_data          (cmd_demux_001_src0_data),                                //   input,  width = 677,          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),                       //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)                          //   input,    width = 1,          .endofpacket
	);

	msgdma_bbb_altera_merlin_multiplexer_191_fkmy6zy cmd_mux_001 (
		.clk                 (clk_clk_clk),                                            //   input,    width = 1,       clk.clk
		.reset               (pipe_stage_dma_write_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                  //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                  //  output,    width = 1,          .valid
		.src_data            (cmd_mux_001_src_data),                                   //  output,  width = 677,          .data
		.src_channel         (cmd_mux_001_src_channel),                                //  output,    width = 4,          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                          //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                            //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                                   //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                                   //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src1_channel),                                 //   input,    width = 4,          .channel
		.sink0_data          (cmd_demux_src1_data),                                    //   input,  width = 677,          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                           //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                              //   input,    width = 1,          .endofpacket
	);

	msgdma_bbb_altera_merlin_multiplexer_191_fkmy6zy cmd_mux_002 (
		.clk                 (clk_clk_clk),                                            //   input,    width = 1,       clk.clk
		.reset               (pipe_stage_dma_write_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                                  //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_002_src_valid),                                  //  output,    width = 1,          .valid
		.src_data            (cmd_mux_002_src_data),                                   //  output,  width = 677,          .data
		.src_channel         (cmd_mux_002_src_channel),                                //  output,    width = 4,          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                          //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                            //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_001_src1_ready),                               //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_001_src1_valid),                               //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_001_src1_channel),                             //   input,    width = 4,          .channel
		.sink0_data          (cmd_demux_001_src1_data),                                //   input,  width = 677,          .data
		.sink0_startofpacket (cmd_demux_001_src1_startofpacket),                       //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src1_endofpacket)                          //   input,    width = 1,          .endofpacket
	);

	msgdma_bbb_altera_merlin_multiplexer_191_fkmy6zy cmd_mux_003 (
		.clk                 (clk_clk_clk),                                            //   input,    width = 1,       clk.clk
		.reset               (pipe_stage_dma_write_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                                  //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_003_src_valid),                                  //  output,    width = 1,          .valid
		.src_data            (cmd_mux_003_src_data),                                   //  output,  width = 677,          .data
		.src_channel         (cmd_mux_003_src_channel),                                //  output,    width = 4,          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                          //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                            //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_001_src2_ready),                               //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_001_src2_valid),                               //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_001_src2_channel),                             //   input,    width = 4,          .channel
		.sink0_data          (cmd_demux_001_src2_data),                                //   input,  width = 677,          .data
		.sink0_startofpacket (cmd_demux_001_src2_startofpacket),                       //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src2_endofpacket)                          //   input,    width = 1,          .endofpacket
	);

	msgdma_bbb_altera_merlin_demultiplexer_191_osdbpdq rsp_demux (
		.clk                (clk_clk_clk),                                            //   input,    width = 1,       clk.clk
		.reset              (pipe_stage_dma_write_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_002_src_ready),                                   //  output,    width = 1,      sink.ready
		.sink_channel       (router_002_src_channel),                                 //   input,    width = 4,          .channel
		.sink_data          (router_002_src_data),                                    //   input,  width = 677,          .data
		.sink_startofpacket (router_002_src_startofpacket),                           //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                             //   input,    width = 1,          .endofpacket
		.sink_valid         (router_002_src_valid),                                   //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_src0_ready),                                   //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                   //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_src0_data),                                    //  output,  width = 677,          .data
		.src0_channel       (rsp_demux_src0_channel),                                 //  output,    width = 4,          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                           //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                             //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                                   //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                                   //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_src1_data),                                    //  output,  width = 677,          .data
		.src1_channel       (rsp_demux_src1_channel),                                 //  output,    width = 4,          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                           //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                              //  output,    width = 1,          .endofpacket
	);

	msgdma_bbb_altera_merlin_demultiplexer_191_kazjgxy rsp_demux_001 (
		.clk                (clk_clk_clk),                                            //   input,    width = 1,       clk.clk
		.reset              (pipe_stage_dma_write_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_003_src_ready),                                   //  output,    width = 1,      sink.ready
		.sink_channel       (router_003_src_channel),                                 //   input,    width = 4,          .channel
		.sink_data          (router_003_src_data),                                    //   input,  width = 677,          .data
		.sink_startofpacket (router_003_src_startofpacket),                           //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                             //   input,    width = 1,          .endofpacket
		.sink_valid         (router_003_src_valid),                                   //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                               //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                               //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_001_src0_data),                                //  output,  width = 677,          .data
		.src0_channel       (rsp_demux_001_src0_channel),                             //  output,    width = 4,          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                       //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                          //  output,    width = 1,          .endofpacket
	);

	msgdma_bbb_altera_merlin_demultiplexer_191_kazjgxy rsp_demux_002 (
		.clk                (clk_clk_clk),                                            //   input,    width = 1,       clk.clk
		.reset              (pipe_stage_dma_write_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_004_src_ready),                                   //  output,    width = 1,      sink.ready
		.sink_channel       (router_004_src_channel),                                 //   input,    width = 4,          .channel
		.sink_data          (router_004_src_data),                                    //   input,  width = 677,          .data
		.sink_startofpacket (router_004_src_startofpacket),                           //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                             //   input,    width = 1,          .endofpacket
		.sink_valid         (router_004_src_valid),                                   //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                               //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                               //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_002_src0_data),                                //  output,  width = 677,          .data
		.src0_channel       (rsp_demux_002_src0_channel),                             //  output,    width = 4,          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                       //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                          //  output,    width = 1,          .endofpacket
	);

	msgdma_bbb_altera_merlin_demultiplexer_191_kazjgxy rsp_demux_003 (
		.clk                (clk_clk_clk),                                            //   input,    width = 1,       clk.clk
		.reset              (pipe_stage_dma_write_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_005_src_ready),                                   //  output,    width = 1,      sink.ready
		.sink_channel       (router_005_src_channel),                                 //   input,    width = 4,          .channel
		.sink_data          (router_005_src_data),                                    //   input,  width = 677,          .data
		.sink_startofpacket (router_005_src_startofpacket),                           //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                             //   input,    width = 1,          .endofpacket
		.sink_valid         (router_005_src_valid),                                   //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                               //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                               //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_003_src0_data),                                //  output,  width = 677,          .data
		.src0_channel       (rsp_demux_003_src0_channel),                             //  output,    width = 4,          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                       //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                          //  output,    width = 1,          .endofpacket
	);

	msgdma_bbb_altera_merlin_multiplexer_191_jurlxwy rsp_mux (
		.clk                 (clk_clk_clk),                                            //   input,    width = 1,       clk.clk
		.reset               (pipe_stage_dma_write_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                      //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_src_valid),                                      //  output,    width = 1,          .valid
		.src_data            (rsp_mux_src_data),                                       //  output,  width = 677,          .data
		.src_channel         (rsp_mux_src_channel),                                    //  output,    width = 4,          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                              //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                   //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                   //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                 //   input,    width = 4,          .channel
		.sink0_data          (rsp_demux_src0_data),                                    //   input,  width = 677,          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                           //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                             //   input,    width = 1,          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                               //  output,    width = 1,     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                               //   input,    width = 1,          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                             //   input,    width = 4,          .channel
		.sink1_data          (rsp_demux_001_src0_data),                                //   input,  width = 677,          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),                       //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket)                          //   input,    width = 1,          .endofpacket
	);

	msgdma_bbb_altera_merlin_multiplexer_191_2n4vlwy rsp_mux_001 (
		.clk                 (clk_clk_clk),                                            //   input,    width = 1,       clk.clk
		.reset               (pipe_stage_dma_write_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                  //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                  //  output,    width = 1,          .valid
		.src_data            (rsp_mux_001_src_data),                                   //  output,  width = 677,          .data
		.src_channel         (rsp_mux_001_src_channel),                                //  output,    width = 4,          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                          //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                            //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_src1_ready),                                   //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_src1_valid),                                   //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_src1_channel),                                 //   input,    width = 4,          .channel
		.sink0_data          (rsp_demux_src1_data),                                    //   input,  width = 677,          .data
		.sink0_startofpacket (rsp_demux_src1_startofpacket),                           //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_src1_endofpacket),                             //   input,    width = 1,          .endofpacket
		.sink1_ready         (rsp_demux_002_src0_ready),                               //  output,    width = 1,     sink1.ready
		.sink1_valid         (rsp_demux_002_src0_valid),                               //   input,    width = 1,          .valid
		.sink1_channel       (rsp_demux_002_src0_channel),                             //   input,    width = 4,          .channel
		.sink1_data          (rsp_demux_002_src0_data),                                //   input,  width = 677,          .data
		.sink1_startofpacket (rsp_demux_002_src0_startofpacket),                       //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (rsp_demux_002_src0_endofpacket),                         //   input,    width = 1,          .endofpacket
		.sink2_ready         (rsp_demux_003_src0_ready),                               //  output,    width = 1,     sink2.ready
		.sink2_valid         (rsp_demux_003_src0_valid),                               //   input,    width = 1,          .valid
		.sink2_channel       (rsp_demux_003_src0_channel),                             //   input,    width = 4,          .channel
		.sink2_data          (rsp_demux_003_src0_data),                                //   input,  width = 677,          .data
		.sink2_startofpacket (rsp_demux_003_src0_startofpacket),                       //   input,    width = 1,          .startofpacket
		.sink2_endofpacket   (rsp_demux_003_src0_endofpacket)                          //   input,    width = 1,          .endofpacket
	);

endmodule
