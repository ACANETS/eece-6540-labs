// ddr_board_altera_mm_interconnect_191_rcnfcta.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 19.2 57

`timescale 1 ps / 1 ps
module ddr_board_altera_mm_interconnect_191_rcnfcta (
		input  wire [31:0]  ddr4b_cross_to_kernel_m0_address,                           //                             ddr4b_cross_to_kernel_m0.address
		output wire         ddr4b_cross_to_kernel_m0_waitrequest,                       //                                                     .waitrequest
		input  wire [4:0]   ddr4b_cross_to_kernel_m0_burstcount,                        //                                                     .burstcount
		input  wire [63:0]  ddr4b_cross_to_kernel_m0_byteenable,                        //                                                     .byteenable
		input  wire         ddr4b_cross_to_kernel_m0_read,                              //                                                     .read
		output wire [511:0] ddr4b_cross_to_kernel_m0_readdata,                          //                                                     .readdata
		output wire         ddr4b_cross_to_kernel_m0_readdatavalid,                     //                                                     .readdatavalid
		input  wire         ddr4b_cross_to_kernel_m0_write,                             //                                                     .write
		input  wire [511:0] ddr4b_cross_to_kernel_m0_writedata,                         //                                                     .writedata
		input  wire         ddr4b_cross_to_kernel_m0_debugaccess,                       //                                                     .debugaccess
		input  wire [31:0]  ddr4b_cross_to_host_m0_address,                             //                               ddr4b_cross_to_host_m0.address
		output wire         ddr4b_cross_to_host_m0_waitrequest,                         //                                                     .waitrequest
		input  wire [4:0]   ddr4b_cross_to_host_m0_burstcount,                          //                                                     .burstcount
		input  wire [63:0]  ddr4b_cross_to_host_m0_byteenable,                          //                                                     .byteenable
		input  wire         ddr4b_cross_to_host_m0_read,                                //                                                     .read
		output wire [511:0] ddr4b_cross_to_host_m0_readdata,                            //                                                     .readdata
		output wire         ddr4b_cross_to_host_m0_readdatavalid,                       //                                                     .readdatavalid
		input  wire         ddr4b_cross_to_host_m0_write,                               //                                                     .write
		input  wire [511:0] ddr4b_cross_to_host_m0_writedata,                           //                                                     .writedata
		input  wire         ddr4b_cross_to_host_m0_debugaccess,                         //                                                     .debugaccess
		output wire [31:0]  ddr4b_pipe_1_burst16_s0_address,                            //                              ddr4b_pipe_1_burst16_s0.address
		output wire         ddr4b_pipe_1_burst16_s0_write,                              //                                                     .write
		output wire         ddr4b_pipe_1_burst16_s0_read,                               //                                                     .read
		input  wire [511:0] ddr4b_pipe_1_burst16_s0_readdata,                           //                                                     .readdata
		output wire [511:0] ddr4b_pipe_1_burst16_s0_writedata,                          //                                                     .writedata
		output wire [4:0]   ddr4b_pipe_1_burst16_s0_burstcount,                         //                                                     .burstcount
		output wire [63:0]  ddr4b_pipe_1_burst16_s0_byteenable,                         //                                                     .byteenable
		input  wire         ddr4b_pipe_1_burst16_s0_readdatavalid,                      //                                                     .readdatavalid
		input  wire         ddr4b_pipe_1_burst16_s0_waitrequest,                        //                                                     .waitrequest
		output wire         ddr4b_pipe_1_burst16_s0_debugaccess,                        //                                                     .debugaccess
		input  wire         ddr4b_cross_to_kernel_m0_reset_reset_bridge_in_reset_reset, // ddr4b_cross_to_kernel_m0_reset_reset_bridge_in_reset.reset
		input  wire         ddr_clk_b_out_clk_clk                                       //                                    ddr_clk_b_out_clk.clk
	);

	wire          ddr4b_cross_to_kernel_m0_translator_avalon_universal_master_0_waitrequest;   // ddr4b_cross_to_kernel_m0_agent:av_waitrequest -> ddr4b_cross_to_kernel_m0_translator:uav_waitrequest
	wire  [511:0] ddr4b_cross_to_kernel_m0_translator_avalon_universal_master_0_readdata;      // ddr4b_cross_to_kernel_m0_agent:av_readdata -> ddr4b_cross_to_kernel_m0_translator:uav_readdata
	wire          ddr4b_cross_to_kernel_m0_translator_avalon_universal_master_0_debugaccess;   // ddr4b_cross_to_kernel_m0_translator:uav_debugaccess -> ddr4b_cross_to_kernel_m0_agent:av_debugaccess
	wire   [31:0] ddr4b_cross_to_kernel_m0_translator_avalon_universal_master_0_address;       // ddr4b_cross_to_kernel_m0_translator:uav_address -> ddr4b_cross_to_kernel_m0_agent:av_address
	wire          ddr4b_cross_to_kernel_m0_translator_avalon_universal_master_0_read;          // ddr4b_cross_to_kernel_m0_translator:uav_read -> ddr4b_cross_to_kernel_m0_agent:av_read
	wire   [63:0] ddr4b_cross_to_kernel_m0_translator_avalon_universal_master_0_byteenable;    // ddr4b_cross_to_kernel_m0_translator:uav_byteenable -> ddr4b_cross_to_kernel_m0_agent:av_byteenable
	wire          ddr4b_cross_to_kernel_m0_translator_avalon_universal_master_0_readdatavalid; // ddr4b_cross_to_kernel_m0_agent:av_readdatavalid -> ddr4b_cross_to_kernel_m0_translator:uav_readdatavalid
	wire          ddr4b_cross_to_kernel_m0_translator_avalon_universal_master_0_lock;          // ddr4b_cross_to_kernel_m0_translator:uav_lock -> ddr4b_cross_to_kernel_m0_agent:av_lock
	wire          ddr4b_cross_to_kernel_m0_translator_avalon_universal_master_0_write;         // ddr4b_cross_to_kernel_m0_translator:uav_write -> ddr4b_cross_to_kernel_m0_agent:av_write
	wire  [511:0] ddr4b_cross_to_kernel_m0_translator_avalon_universal_master_0_writedata;     // ddr4b_cross_to_kernel_m0_translator:uav_writedata -> ddr4b_cross_to_kernel_m0_agent:av_writedata
	wire   [10:0] ddr4b_cross_to_kernel_m0_translator_avalon_universal_master_0_burstcount;    // ddr4b_cross_to_kernel_m0_translator:uav_burstcount -> ddr4b_cross_to_kernel_m0_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                           // rsp_mux:src_valid -> ddr4b_cross_to_kernel_m0_agent:rp_valid
	wire  [658:0] rsp_mux_src_data;                                                            // rsp_mux:src_data -> ddr4b_cross_to_kernel_m0_agent:rp_data
	wire          rsp_mux_src_ready;                                                           // ddr4b_cross_to_kernel_m0_agent:rp_ready -> rsp_mux:src_ready
	wire    [1:0] rsp_mux_src_channel;                                                         // rsp_mux:src_channel -> ddr4b_cross_to_kernel_m0_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                                   // rsp_mux:src_startofpacket -> ddr4b_cross_to_kernel_m0_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                                     // rsp_mux:src_endofpacket -> ddr4b_cross_to_kernel_m0_agent:rp_endofpacket
	wire          ddr4b_cross_to_host_m0_translator_avalon_universal_master_0_waitrequest;     // ddr4b_cross_to_host_m0_agent:av_waitrequest -> ddr4b_cross_to_host_m0_translator:uav_waitrequest
	wire  [511:0] ddr4b_cross_to_host_m0_translator_avalon_universal_master_0_readdata;        // ddr4b_cross_to_host_m0_agent:av_readdata -> ddr4b_cross_to_host_m0_translator:uav_readdata
	wire          ddr4b_cross_to_host_m0_translator_avalon_universal_master_0_debugaccess;     // ddr4b_cross_to_host_m0_translator:uav_debugaccess -> ddr4b_cross_to_host_m0_agent:av_debugaccess
	wire   [31:0] ddr4b_cross_to_host_m0_translator_avalon_universal_master_0_address;         // ddr4b_cross_to_host_m0_translator:uav_address -> ddr4b_cross_to_host_m0_agent:av_address
	wire          ddr4b_cross_to_host_m0_translator_avalon_universal_master_0_read;            // ddr4b_cross_to_host_m0_translator:uav_read -> ddr4b_cross_to_host_m0_agent:av_read
	wire   [63:0] ddr4b_cross_to_host_m0_translator_avalon_universal_master_0_byteenable;      // ddr4b_cross_to_host_m0_translator:uav_byteenable -> ddr4b_cross_to_host_m0_agent:av_byteenable
	wire          ddr4b_cross_to_host_m0_translator_avalon_universal_master_0_readdatavalid;   // ddr4b_cross_to_host_m0_agent:av_readdatavalid -> ddr4b_cross_to_host_m0_translator:uav_readdatavalid
	wire          ddr4b_cross_to_host_m0_translator_avalon_universal_master_0_lock;            // ddr4b_cross_to_host_m0_translator:uav_lock -> ddr4b_cross_to_host_m0_agent:av_lock
	wire          ddr4b_cross_to_host_m0_translator_avalon_universal_master_0_write;           // ddr4b_cross_to_host_m0_translator:uav_write -> ddr4b_cross_to_host_m0_agent:av_write
	wire  [511:0] ddr4b_cross_to_host_m0_translator_avalon_universal_master_0_writedata;       // ddr4b_cross_to_host_m0_translator:uav_writedata -> ddr4b_cross_to_host_m0_agent:av_writedata
	wire   [10:0] ddr4b_cross_to_host_m0_translator_avalon_universal_master_0_burstcount;      // ddr4b_cross_to_host_m0_translator:uav_burstcount -> ddr4b_cross_to_host_m0_agent:av_burstcount
	wire          rsp_mux_001_src_valid;                                                       // rsp_mux_001:src_valid -> ddr4b_cross_to_host_m0_agent:rp_valid
	wire  [658:0] rsp_mux_001_src_data;                                                        // rsp_mux_001:src_data -> ddr4b_cross_to_host_m0_agent:rp_data
	wire          rsp_mux_001_src_ready;                                                       // ddr4b_cross_to_host_m0_agent:rp_ready -> rsp_mux_001:src_ready
	wire    [1:0] rsp_mux_001_src_channel;                                                     // rsp_mux_001:src_channel -> ddr4b_cross_to_host_m0_agent:rp_channel
	wire          rsp_mux_001_src_startofpacket;                                               // rsp_mux_001:src_startofpacket -> ddr4b_cross_to_host_m0_agent:rp_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                 // rsp_mux_001:src_endofpacket -> ddr4b_cross_to_host_m0_agent:rp_endofpacket
	wire  [511:0] ddr4b_pipe_1_burst16_s0_agent_m0_readdata;                                   // ddr4b_pipe_1_burst16_s0_translator:uav_readdata -> ddr4b_pipe_1_burst16_s0_agent:m0_readdata
	wire          ddr4b_pipe_1_burst16_s0_agent_m0_waitrequest;                                // ddr4b_pipe_1_burst16_s0_translator:uav_waitrequest -> ddr4b_pipe_1_burst16_s0_agent:m0_waitrequest
	wire          ddr4b_pipe_1_burst16_s0_agent_m0_debugaccess;                                // ddr4b_pipe_1_burst16_s0_agent:m0_debugaccess -> ddr4b_pipe_1_burst16_s0_translator:uav_debugaccess
	wire   [31:0] ddr4b_pipe_1_burst16_s0_agent_m0_address;                                    // ddr4b_pipe_1_burst16_s0_agent:m0_address -> ddr4b_pipe_1_burst16_s0_translator:uav_address
	wire   [63:0] ddr4b_pipe_1_burst16_s0_agent_m0_byteenable;                                 // ddr4b_pipe_1_burst16_s0_agent:m0_byteenable -> ddr4b_pipe_1_burst16_s0_translator:uav_byteenable
	wire          ddr4b_pipe_1_burst16_s0_agent_m0_read;                                       // ddr4b_pipe_1_burst16_s0_agent:m0_read -> ddr4b_pipe_1_burst16_s0_translator:uav_read
	wire          ddr4b_pipe_1_burst16_s0_agent_m0_readdatavalid;                              // ddr4b_pipe_1_burst16_s0_translator:uav_readdatavalid -> ddr4b_pipe_1_burst16_s0_agent:m0_readdatavalid
	wire          ddr4b_pipe_1_burst16_s0_agent_m0_lock;                                       // ddr4b_pipe_1_burst16_s0_agent:m0_lock -> ddr4b_pipe_1_burst16_s0_translator:uav_lock
	wire  [511:0] ddr4b_pipe_1_burst16_s0_agent_m0_writedata;                                  // ddr4b_pipe_1_burst16_s0_agent:m0_writedata -> ddr4b_pipe_1_burst16_s0_translator:uav_writedata
	wire          ddr4b_pipe_1_burst16_s0_agent_m0_write;                                      // ddr4b_pipe_1_burst16_s0_agent:m0_write -> ddr4b_pipe_1_burst16_s0_translator:uav_write
	wire   [10:0] ddr4b_pipe_1_burst16_s0_agent_m0_burstcount;                                 // ddr4b_pipe_1_burst16_s0_agent:m0_burstcount -> ddr4b_pipe_1_burst16_s0_translator:uav_burstcount
	wire          ddr4b_pipe_1_burst16_s0_agent_rf_source_valid;                               // ddr4b_pipe_1_burst16_s0_agent:rf_source_valid -> ddr4b_pipe_1_burst16_s0_agent_rsp_fifo:in_valid
	wire  [659:0] ddr4b_pipe_1_burst16_s0_agent_rf_source_data;                                // ddr4b_pipe_1_burst16_s0_agent:rf_source_data -> ddr4b_pipe_1_burst16_s0_agent_rsp_fifo:in_data
	wire          ddr4b_pipe_1_burst16_s0_agent_rf_source_ready;                               // ddr4b_pipe_1_burst16_s0_agent_rsp_fifo:in_ready -> ddr4b_pipe_1_burst16_s0_agent:rf_source_ready
	wire          ddr4b_pipe_1_burst16_s0_agent_rf_source_startofpacket;                       // ddr4b_pipe_1_burst16_s0_agent:rf_source_startofpacket -> ddr4b_pipe_1_burst16_s0_agent_rsp_fifo:in_startofpacket
	wire          ddr4b_pipe_1_burst16_s0_agent_rf_source_endofpacket;                         // ddr4b_pipe_1_burst16_s0_agent:rf_source_endofpacket -> ddr4b_pipe_1_burst16_s0_agent_rsp_fifo:in_endofpacket
	wire          ddr4b_pipe_1_burst16_s0_agent_rsp_fifo_out_valid;                            // ddr4b_pipe_1_burst16_s0_agent_rsp_fifo:out_valid -> ddr4b_pipe_1_burst16_s0_agent:rf_sink_valid
	wire  [659:0] ddr4b_pipe_1_burst16_s0_agent_rsp_fifo_out_data;                             // ddr4b_pipe_1_burst16_s0_agent_rsp_fifo:out_data -> ddr4b_pipe_1_burst16_s0_agent:rf_sink_data
	wire          ddr4b_pipe_1_burst16_s0_agent_rsp_fifo_out_ready;                            // ddr4b_pipe_1_burst16_s0_agent:rf_sink_ready -> ddr4b_pipe_1_burst16_s0_agent_rsp_fifo:out_ready
	wire          ddr4b_pipe_1_burst16_s0_agent_rsp_fifo_out_startofpacket;                    // ddr4b_pipe_1_burst16_s0_agent_rsp_fifo:out_startofpacket -> ddr4b_pipe_1_burst16_s0_agent:rf_sink_startofpacket
	wire          ddr4b_pipe_1_burst16_s0_agent_rsp_fifo_out_endofpacket;                      // ddr4b_pipe_1_burst16_s0_agent_rsp_fifo:out_endofpacket -> ddr4b_pipe_1_burst16_s0_agent:rf_sink_endofpacket
	wire          ddr4b_pipe_1_burst16_s0_agent_rdata_fifo_src_valid;                          // ddr4b_pipe_1_burst16_s0_agent:rdata_fifo_src_valid -> ddr4b_pipe_1_burst16_s0_agent:rdata_fifo_sink_valid
	wire  [513:0] ddr4b_pipe_1_burst16_s0_agent_rdata_fifo_src_data;                           // ddr4b_pipe_1_burst16_s0_agent:rdata_fifo_src_data -> ddr4b_pipe_1_burst16_s0_agent:rdata_fifo_sink_data
	wire          ddr4b_pipe_1_burst16_s0_agent_rdata_fifo_src_ready;                          // ddr4b_pipe_1_burst16_s0_agent:rdata_fifo_sink_ready -> ddr4b_pipe_1_burst16_s0_agent:rdata_fifo_src_ready
	wire          cmd_mux_src_valid;                                                           // cmd_mux:src_valid -> ddr4b_pipe_1_burst16_s0_agent:cp_valid
	wire  [658:0] cmd_mux_src_data;                                                            // cmd_mux:src_data -> ddr4b_pipe_1_burst16_s0_agent:cp_data
	wire          cmd_mux_src_ready;                                                           // ddr4b_pipe_1_burst16_s0_agent:cp_ready -> cmd_mux:src_ready
	wire    [1:0] cmd_mux_src_channel;                                                         // cmd_mux:src_channel -> ddr4b_pipe_1_burst16_s0_agent:cp_channel
	wire          cmd_mux_src_startofpacket;                                                   // cmd_mux:src_startofpacket -> ddr4b_pipe_1_burst16_s0_agent:cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                                     // cmd_mux:src_endofpacket -> ddr4b_pipe_1_burst16_s0_agent:cp_endofpacket
	wire          ddr4b_cross_to_kernel_m0_agent_cp_valid;                                     // ddr4b_cross_to_kernel_m0_agent:cp_valid -> router:sink_valid
	wire  [658:0] ddr4b_cross_to_kernel_m0_agent_cp_data;                                      // ddr4b_cross_to_kernel_m0_agent:cp_data -> router:sink_data
	wire          ddr4b_cross_to_kernel_m0_agent_cp_ready;                                     // router:sink_ready -> ddr4b_cross_to_kernel_m0_agent:cp_ready
	wire          ddr4b_cross_to_kernel_m0_agent_cp_startofpacket;                             // ddr4b_cross_to_kernel_m0_agent:cp_startofpacket -> router:sink_startofpacket
	wire          ddr4b_cross_to_kernel_m0_agent_cp_endofpacket;                               // ddr4b_cross_to_kernel_m0_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                            // router:src_valid -> cmd_demux:sink_valid
	wire  [658:0] router_src_data;                                                             // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                            // cmd_demux:sink_ready -> router:src_ready
	wire    [1:0] router_src_channel;                                                          // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                                    // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                                      // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          ddr4b_cross_to_host_m0_agent_cp_valid;                                       // ddr4b_cross_to_host_m0_agent:cp_valid -> router_001:sink_valid
	wire  [658:0] ddr4b_cross_to_host_m0_agent_cp_data;                                        // ddr4b_cross_to_host_m0_agent:cp_data -> router_001:sink_data
	wire          ddr4b_cross_to_host_m0_agent_cp_ready;                                       // router_001:sink_ready -> ddr4b_cross_to_host_m0_agent:cp_ready
	wire          ddr4b_cross_to_host_m0_agent_cp_startofpacket;                               // ddr4b_cross_to_host_m0_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          ddr4b_cross_to_host_m0_agent_cp_endofpacket;                                 // ddr4b_cross_to_host_m0_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                        // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [658:0] router_001_src_data;                                                         // router_001:src_data -> cmd_demux_001:sink_data
	wire          router_001_src_ready;                                                        // cmd_demux_001:sink_ready -> router_001:src_ready
	wire    [1:0] router_001_src_channel;                                                      // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_startofpacket;                                                // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          router_001_src_endofpacket;                                                  // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          ddr4b_pipe_1_burst16_s0_agent_rp_valid;                                      // ddr4b_pipe_1_burst16_s0_agent:rp_valid -> router_002:sink_valid
	wire  [658:0] ddr4b_pipe_1_burst16_s0_agent_rp_data;                                       // ddr4b_pipe_1_burst16_s0_agent:rp_data -> router_002:sink_data
	wire          ddr4b_pipe_1_burst16_s0_agent_rp_ready;                                      // router_002:sink_ready -> ddr4b_pipe_1_burst16_s0_agent:rp_ready
	wire          ddr4b_pipe_1_burst16_s0_agent_rp_startofpacket;                              // ddr4b_pipe_1_burst16_s0_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          ddr4b_pipe_1_burst16_s0_agent_rp_endofpacket;                                // ddr4b_pipe_1_burst16_s0_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                        // router_002:src_valid -> rsp_demux:sink_valid
	wire  [658:0] router_002_src_data;                                                         // router_002:src_data -> rsp_demux:sink_data
	wire          router_002_src_ready;                                                        // rsp_demux:sink_ready -> router_002:src_ready
	wire    [1:0] router_002_src_channel;                                                      // router_002:src_channel -> rsp_demux:sink_channel
	wire          router_002_src_startofpacket;                                                // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_002_src_endofpacket;                                                  // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          cmd_demux_src0_valid;                                                        // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [658:0] cmd_demux_src0_data;                                                         // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                        // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [1:0] cmd_demux_src0_channel;                                                      // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                  // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                    // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [658:0] cmd_demux_001_src0_data;                                                     // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_001_src0_ready;                                                    // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire    [1:0] cmd_demux_001_src0_channel;                                                  // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                            // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                              // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                                        // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [658:0] rsp_demux_src0_data;                                                         // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                        // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [1:0] rsp_demux_src0_channel;                                                      // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                  // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                        // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [658:0] rsp_demux_src1_data;                                                         // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_src1_ready;                                                        // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire    [1:0] rsp_demux_src1_channel;                                                      // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_startofpacket;                                                // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                                                  // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket

	ddr_board_altera_merlin_master_translator_191_g7h47bq #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (512),
		.AV_BURSTCOUNT_W             (5),
		.AV_BYTEENABLE_W             (64),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (11),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (64),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (0),
		.WAITREQUEST_ALLOWANCE       (0)
	) ddr4b_cross_to_kernel_m0_translator (
		.clk                    (ddr_clk_b_out_clk_clk),                                                       //   input,    width = 1,                       clk.clk
		.reset                  (ddr4b_cross_to_kernel_m0_reset_reset_bridge_in_reset_reset),                  //   input,    width = 1,                     reset.reset
		.uav_address            (ddr4b_cross_to_kernel_m0_translator_avalon_universal_master_0_address),       //  output,   width = 32, avalon_universal_master_0.address
		.uav_burstcount         (ddr4b_cross_to_kernel_m0_translator_avalon_universal_master_0_burstcount),    //  output,   width = 11,                          .burstcount
		.uav_read               (ddr4b_cross_to_kernel_m0_translator_avalon_universal_master_0_read),          //  output,    width = 1,                          .read
		.uav_write              (ddr4b_cross_to_kernel_m0_translator_avalon_universal_master_0_write),         //  output,    width = 1,                          .write
		.uav_waitrequest        (ddr4b_cross_to_kernel_m0_translator_avalon_universal_master_0_waitrequest),   //   input,    width = 1,                          .waitrequest
		.uav_readdatavalid      (ddr4b_cross_to_kernel_m0_translator_avalon_universal_master_0_readdatavalid), //   input,    width = 1,                          .readdatavalid
		.uav_byteenable         (ddr4b_cross_to_kernel_m0_translator_avalon_universal_master_0_byteenable),    //  output,   width = 64,                          .byteenable
		.uav_readdata           (ddr4b_cross_to_kernel_m0_translator_avalon_universal_master_0_readdata),      //   input,  width = 512,                          .readdata
		.uav_writedata          (ddr4b_cross_to_kernel_m0_translator_avalon_universal_master_0_writedata),     //  output,  width = 512,                          .writedata
		.uav_lock               (ddr4b_cross_to_kernel_m0_translator_avalon_universal_master_0_lock),          //  output,    width = 1,                          .lock
		.uav_debugaccess        (ddr4b_cross_to_kernel_m0_translator_avalon_universal_master_0_debugaccess),   //  output,    width = 1,                          .debugaccess
		.av_address             (ddr4b_cross_to_kernel_m0_address),                                            //   input,   width = 32,      avalon_anti_master_0.address
		.av_waitrequest         (ddr4b_cross_to_kernel_m0_waitrequest),                                        //  output,    width = 1,                          .waitrequest
		.av_burstcount          (ddr4b_cross_to_kernel_m0_burstcount),                                         //   input,    width = 5,                          .burstcount
		.av_byteenable          (ddr4b_cross_to_kernel_m0_byteenable),                                         //   input,   width = 64,                          .byteenable
		.av_read                (ddr4b_cross_to_kernel_m0_read),                                               //   input,    width = 1,                          .read
		.av_readdata            (ddr4b_cross_to_kernel_m0_readdata),                                           //  output,  width = 512,                          .readdata
		.av_readdatavalid       (ddr4b_cross_to_kernel_m0_readdatavalid),                                      //  output,    width = 1,                          .readdatavalid
		.av_write               (ddr4b_cross_to_kernel_m0_write),                                              //   input,    width = 1,                          .write
		.av_writedata           (ddr4b_cross_to_kernel_m0_writedata),                                          //   input,  width = 512,                          .writedata
		.av_debugaccess         (ddr4b_cross_to_kernel_m0_debugaccess),                                        //   input,    width = 1,                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                        // (terminated),                                         
		.av_begintransfer       (1'b0),                                                                        // (terminated),                                         
		.av_chipselect          (1'b0),                                                                        // (terminated),                                         
		.av_lock                (1'b0),                                                                        // (terminated),                                         
		.uav_clken              (),                                                                            // (terminated),                                         
		.av_clken               (1'b1),                                                                        // (terminated),                                         
		.uav_response           (2'b00),                                                                       // (terminated),                                         
		.av_response            (),                                                                            // (terminated),                                         
		.uav_writeresponsevalid (1'b0),                                                                        // (terminated),                                         
		.av_writeresponsevalid  ()                                                                             // (terminated),                                         
	);

	ddr_board_altera_merlin_master_translator_191_g7h47bq #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (512),
		.AV_BURSTCOUNT_W             (5),
		.AV_BYTEENABLE_W             (64),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (11),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (64),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (0),
		.WAITREQUEST_ALLOWANCE       (0)
	) ddr4b_cross_to_host_m0_translator (
		.clk                    (ddr_clk_b_out_clk_clk),                                                     //   input,    width = 1,                       clk.clk
		.reset                  (ddr4b_cross_to_kernel_m0_reset_reset_bridge_in_reset_reset),                //   input,    width = 1,                     reset.reset
		.uav_address            (ddr4b_cross_to_host_m0_translator_avalon_universal_master_0_address),       //  output,   width = 32, avalon_universal_master_0.address
		.uav_burstcount         (ddr4b_cross_to_host_m0_translator_avalon_universal_master_0_burstcount),    //  output,   width = 11,                          .burstcount
		.uav_read               (ddr4b_cross_to_host_m0_translator_avalon_universal_master_0_read),          //  output,    width = 1,                          .read
		.uav_write              (ddr4b_cross_to_host_m0_translator_avalon_universal_master_0_write),         //  output,    width = 1,                          .write
		.uav_waitrequest        (ddr4b_cross_to_host_m0_translator_avalon_universal_master_0_waitrequest),   //   input,    width = 1,                          .waitrequest
		.uav_readdatavalid      (ddr4b_cross_to_host_m0_translator_avalon_universal_master_0_readdatavalid), //   input,    width = 1,                          .readdatavalid
		.uav_byteenable         (ddr4b_cross_to_host_m0_translator_avalon_universal_master_0_byteenable),    //  output,   width = 64,                          .byteenable
		.uav_readdata           (ddr4b_cross_to_host_m0_translator_avalon_universal_master_0_readdata),      //   input,  width = 512,                          .readdata
		.uav_writedata          (ddr4b_cross_to_host_m0_translator_avalon_universal_master_0_writedata),     //  output,  width = 512,                          .writedata
		.uav_lock               (ddr4b_cross_to_host_m0_translator_avalon_universal_master_0_lock),          //  output,    width = 1,                          .lock
		.uav_debugaccess        (ddr4b_cross_to_host_m0_translator_avalon_universal_master_0_debugaccess),   //  output,    width = 1,                          .debugaccess
		.av_address             (ddr4b_cross_to_host_m0_address),                                            //   input,   width = 32,      avalon_anti_master_0.address
		.av_waitrequest         (ddr4b_cross_to_host_m0_waitrequest),                                        //  output,    width = 1,                          .waitrequest
		.av_burstcount          (ddr4b_cross_to_host_m0_burstcount),                                         //   input,    width = 5,                          .burstcount
		.av_byteenable          (ddr4b_cross_to_host_m0_byteenable),                                         //   input,   width = 64,                          .byteenable
		.av_read                (ddr4b_cross_to_host_m0_read),                                               //   input,    width = 1,                          .read
		.av_readdata            (ddr4b_cross_to_host_m0_readdata),                                           //  output,  width = 512,                          .readdata
		.av_readdatavalid       (ddr4b_cross_to_host_m0_readdatavalid),                                      //  output,    width = 1,                          .readdatavalid
		.av_write               (ddr4b_cross_to_host_m0_write),                                              //   input,    width = 1,                          .write
		.av_writedata           (ddr4b_cross_to_host_m0_writedata),                                          //   input,  width = 512,                          .writedata
		.av_debugaccess         (ddr4b_cross_to_host_m0_debugaccess),                                        //   input,    width = 1,                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                      // (terminated),                                         
		.av_begintransfer       (1'b0),                                                                      // (terminated),                                         
		.av_chipselect          (1'b0),                                                                      // (terminated),                                         
		.av_lock                (1'b0),                                                                      // (terminated),                                         
		.uav_clken              (),                                                                          // (terminated),                                         
		.av_clken               (1'b1),                                                                      // (terminated),                                         
		.uav_response           (2'b00),                                                                     // (terminated),                                         
		.av_response            (),                                                                          // (terminated),                                         
		.uav_writeresponsevalid (1'b0),                                                                      // (terminated),                                         
		.av_writeresponsevalid  ()                                                                           // (terminated),                                         
	);

	ddr_board_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (32),
		.AV_DATA_W                      (512),
		.UAV_DATA_W                     (512),
		.AV_BURSTCOUNT_W                (5),
		.AV_BYTEENABLE_W                (64),
		.UAV_BYTEENABLE_W               (64),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (11),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (64),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) ddr4b_pipe_1_burst16_s0_translator (
		.clk                    (ddr_clk_b_out_clk_clk),                                      //   input,    width = 1,                      clk.clk
		.reset                  (ddr4b_cross_to_kernel_m0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,                    reset.reset
		.uav_address            (ddr4b_pipe_1_burst16_s0_agent_m0_address),                   //   input,   width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (ddr4b_pipe_1_burst16_s0_agent_m0_burstcount),                //   input,   width = 11,                         .burstcount
		.uav_read               (ddr4b_pipe_1_burst16_s0_agent_m0_read),                      //   input,    width = 1,                         .read
		.uav_write              (ddr4b_pipe_1_burst16_s0_agent_m0_write),                     //   input,    width = 1,                         .write
		.uav_waitrequest        (ddr4b_pipe_1_burst16_s0_agent_m0_waitrequest),               //  output,    width = 1,                         .waitrequest
		.uav_readdatavalid      (ddr4b_pipe_1_burst16_s0_agent_m0_readdatavalid),             //  output,    width = 1,                         .readdatavalid
		.uav_byteenable         (ddr4b_pipe_1_burst16_s0_agent_m0_byteenable),                //   input,   width = 64,                         .byteenable
		.uav_readdata           (ddr4b_pipe_1_burst16_s0_agent_m0_readdata),                  //  output,  width = 512,                         .readdata
		.uav_writedata          (ddr4b_pipe_1_burst16_s0_agent_m0_writedata),                 //   input,  width = 512,                         .writedata
		.uav_lock               (ddr4b_pipe_1_burst16_s0_agent_m0_lock),                      //   input,    width = 1,                         .lock
		.uav_debugaccess        (ddr4b_pipe_1_burst16_s0_agent_m0_debugaccess),               //   input,    width = 1,                         .debugaccess
		.av_address             (ddr4b_pipe_1_burst16_s0_address),                            //  output,   width = 32,      avalon_anti_slave_0.address
		.av_write               (ddr4b_pipe_1_burst16_s0_write),                              //  output,    width = 1,                         .write
		.av_read                (ddr4b_pipe_1_burst16_s0_read),                               //  output,    width = 1,                         .read
		.av_readdata            (ddr4b_pipe_1_burst16_s0_readdata),                           //   input,  width = 512,                         .readdata
		.av_writedata           (ddr4b_pipe_1_burst16_s0_writedata),                          //  output,  width = 512,                         .writedata
		.av_burstcount          (ddr4b_pipe_1_burst16_s0_burstcount),                         //  output,    width = 5,                         .burstcount
		.av_byteenable          (ddr4b_pipe_1_burst16_s0_byteenable),                         //  output,   width = 64,                         .byteenable
		.av_readdatavalid       (ddr4b_pipe_1_burst16_s0_readdatavalid),                      //   input,    width = 1,                         .readdatavalid
		.av_waitrequest         (ddr4b_pipe_1_burst16_s0_waitrequest),                        //   input,    width = 1,                         .waitrequest
		.av_debugaccess         (ddr4b_pipe_1_burst16_s0_debugaccess),                        //  output,    width = 1,                         .debugaccess
		.av_begintransfer       (),                                                           // (terminated),                                        
		.av_beginbursttransfer  (),                                                           // (terminated),                                        
		.av_writebyteenable     (),                                                           // (terminated),                                        
		.av_lock                (),                                                           // (terminated),                                        
		.av_chipselect          (),                                                           // (terminated),                                        
		.av_clken               (),                                                           // (terminated),                                        
		.uav_clken              (1'b0),                                                       // (terminated),                                        
		.av_outputenable        (),                                                           // (terminated),                                        
		.uav_response           (),                                                           // (terminated),                                        
		.av_response            (2'b00),                                                      // (terminated),                                        
		.uav_writeresponsevalid (),                                                           // (terminated),                                        
		.av_writeresponsevalid  (1'b0)                                                        // (terminated),                                        
	);

	ddr_board_altera_merlin_master_agent_191_mpbm6tq #(
		.PKT_WUNIQUE               (658),
		.PKT_DOMAIN_H              (657),
		.PKT_DOMAIN_L              (656),
		.PKT_SNOOP_H               (655),
		.PKT_SNOOP_L               (652),
		.PKT_BARRIER_H             (651),
		.PKT_BARRIER_L             (650),
		.PKT_ORI_BURST_SIZE_H      (649),
		.PKT_ORI_BURST_SIZE_L      (647),
		.PKT_RESPONSE_STATUS_H     (646),
		.PKT_RESPONSE_STATUS_L     (645),
		.PKT_QOS_H                 (634),
		.PKT_QOS_L                 (634),
		.PKT_DATA_SIDEBAND_H       (632),
		.PKT_DATA_SIDEBAND_L       (632),
		.PKT_ADDR_SIDEBAND_H       (631),
		.PKT_ADDR_SIDEBAND_L       (631),
		.PKT_BURST_TYPE_H          (630),
		.PKT_BURST_TYPE_L          (629),
		.PKT_CACHE_H               (644),
		.PKT_CACHE_L               (641),
		.PKT_THREAD_ID_H           (637),
		.PKT_THREAD_ID_L           (637),
		.PKT_BURST_SIZE_H          (628),
		.PKT_BURST_SIZE_L          (626),
		.PKT_TRANS_EXCLUSIVE       (613),
		.PKT_TRANS_LOCK            (612),
		.PKT_BEGIN_BURST           (633),
		.PKT_PROTECTION_H          (640),
		.PKT_PROTECTION_L          (638),
		.PKT_BURSTWRAP_H           (625),
		.PKT_BURSTWRAP_L           (625),
		.PKT_BYTE_CNT_H            (624),
		.PKT_BYTE_CNT_L            (614),
		.PKT_ADDR_H                (607),
		.PKT_ADDR_L                (576),
		.PKT_TRANS_COMPRESSED_READ (608),
		.PKT_TRANS_POSTED          (609),
		.PKT_TRANS_WRITE           (610),
		.PKT_TRANS_READ            (611),
		.PKT_DATA_H                (511),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (575),
		.PKT_BYTEEN_L              (512),
		.PKT_SRC_ID_H              (635),
		.PKT_SRC_ID_L              (635),
		.PKT_DEST_ID_H             (636),
		.PKT_DEST_ID_L             (636),
		.ST_DATA_W                 (659),
		.ST_CHANNEL_W              (2),
		.AV_BURSTCOUNT_W           (11),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (0)
	) ddr4b_cross_to_kernel_m0_agent (
		.clk                   (ddr_clk_b_out_clk_clk),                                                       //   input,    width = 1,       clk.clk
		.reset                 (ddr4b_cross_to_kernel_m0_reset_reset_bridge_in_reset_reset),                  //   input,    width = 1, clk_reset.reset
		.av_address            (ddr4b_cross_to_kernel_m0_translator_avalon_universal_master_0_address),       //   input,   width = 32,        av.address
		.av_write              (ddr4b_cross_to_kernel_m0_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (ddr4b_cross_to_kernel_m0_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (ddr4b_cross_to_kernel_m0_translator_avalon_universal_master_0_writedata),     //   input,  width = 512,          .writedata
		.av_readdata           (ddr4b_cross_to_kernel_m0_translator_avalon_universal_master_0_readdata),      //  output,  width = 512,          .readdata
		.av_waitrequest        (ddr4b_cross_to_kernel_m0_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (ddr4b_cross_to_kernel_m0_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (ddr4b_cross_to_kernel_m0_translator_avalon_universal_master_0_byteenable),    //   input,   width = 64,          .byteenable
		.av_burstcount         (ddr4b_cross_to_kernel_m0_translator_avalon_universal_master_0_burstcount),    //   input,   width = 11,          .burstcount
		.av_debugaccess        (ddr4b_cross_to_kernel_m0_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (ddr4b_cross_to_kernel_m0_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (ddr4b_cross_to_kernel_m0_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (ddr4b_cross_to_kernel_m0_agent_cp_data),                                      //  output,  width = 659,          .data
		.cp_startofpacket      (ddr4b_cross_to_kernel_m0_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (ddr4b_cross_to_kernel_m0_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (ddr4b_cross_to_kernel_m0_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (rsp_mux_src_valid),                                                           //   input,    width = 1,        rp.valid
		.rp_data               (rsp_mux_src_data),                                                            //   input,  width = 659,          .data
		.rp_channel            (rsp_mux_src_channel),                                                         //   input,    width = 2,          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                                   //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                                     //   input,    width = 1,          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                           //  output,    width = 1,          .ready
		.av_response           (),                                                                            // (terminated),                         
		.av_writeresponsevalid ()                                                                             // (terminated),                         
	);

	ddr_board_altera_merlin_master_agent_191_mpbm6tq #(
		.PKT_WUNIQUE               (658),
		.PKT_DOMAIN_H              (657),
		.PKT_DOMAIN_L              (656),
		.PKT_SNOOP_H               (655),
		.PKT_SNOOP_L               (652),
		.PKT_BARRIER_H             (651),
		.PKT_BARRIER_L             (650),
		.PKT_ORI_BURST_SIZE_H      (649),
		.PKT_ORI_BURST_SIZE_L      (647),
		.PKT_RESPONSE_STATUS_H     (646),
		.PKT_RESPONSE_STATUS_L     (645),
		.PKT_QOS_H                 (634),
		.PKT_QOS_L                 (634),
		.PKT_DATA_SIDEBAND_H       (632),
		.PKT_DATA_SIDEBAND_L       (632),
		.PKT_ADDR_SIDEBAND_H       (631),
		.PKT_ADDR_SIDEBAND_L       (631),
		.PKT_BURST_TYPE_H          (630),
		.PKT_BURST_TYPE_L          (629),
		.PKT_CACHE_H               (644),
		.PKT_CACHE_L               (641),
		.PKT_THREAD_ID_H           (637),
		.PKT_THREAD_ID_L           (637),
		.PKT_BURST_SIZE_H          (628),
		.PKT_BURST_SIZE_L          (626),
		.PKT_TRANS_EXCLUSIVE       (613),
		.PKT_TRANS_LOCK            (612),
		.PKT_BEGIN_BURST           (633),
		.PKT_PROTECTION_H          (640),
		.PKT_PROTECTION_L          (638),
		.PKT_BURSTWRAP_H           (625),
		.PKT_BURSTWRAP_L           (625),
		.PKT_BYTE_CNT_H            (624),
		.PKT_BYTE_CNT_L            (614),
		.PKT_ADDR_H                (607),
		.PKT_ADDR_L                (576),
		.PKT_TRANS_COMPRESSED_READ (608),
		.PKT_TRANS_POSTED          (609),
		.PKT_TRANS_WRITE           (610),
		.PKT_TRANS_READ            (611),
		.PKT_DATA_H                (511),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (575),
		.PKT_BYTEEN_L              (512),
		.PKT_SRC_ID_H              (635),
		.PKT_SRC_ID_L              (635),
		.PKT_DEST_ID_H             (636),
		.PKT_DEST_ID_L             (636),
		.ST_DATA_W                 (659),
		.ST_CHANNEL_W              (2),
		.AV_BURSTCOUNT_W           (11),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (0)
	) ddr4b_cross_to_host_m0_agent (
		.clk                   (ddr_clk_b_out_clk_clk),                                                     //   input,    width = 1,       clk.clk
		.reset                 (ddr4b_cross_to_kernel_m0_reset_reset_bridge_in_reset_reset),                //   input,    width = 1, clk_reset.reset
		.av_address            (ddr4b_cross_to_host_m0_translator_avalon_universal_master_0_address),       //   input,   width = 32,        av.address
		.av_write              (ddr4b_cross_to_host_m0_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (ddr4b_cross_to_host_m0_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (ddr4b_cross_to_host_m0_translator_avalon_universal_master_0_writedata),     //   input,  width = 512,          .writedata
		.av_readdata           (ddr4b_cross_to_host_m0_translator_avalon_universal_master_0_readdata),      //  output,  width = 512,          .readdata
		.av_waitrequest        (ddr4b_cross_to_host_m0_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (ddr4b_cross_to_host_m0_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (ddr4b_cross_to_host_m0_translator_avalon_universal_master_0_byteenable),    //   input,   width = 64,          .byteenable
		.av_burstcount         (ddr4b_cross_to_host_m0_translator_avalon_universal_master_0_burstcount),    //   input,   width = 11,          .burstcount
		.av_debugaccess        (ddr4b_cross_to_host_m0_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (ddr4b_cross_to_host_m0_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (ddr4b_cross_to_host_m0_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (ddr4b_cross_to_host_m0_agent_cp_data),                                      //  output,  width = 659,          .data
		.cp_startofpacket      (ddr4b_cross_to_host_m0_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (ddr4b_cross_to_host_m0_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (ddr4b_cross_to_host_m0_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (rsp_mux_001_src_valid),                                                     //   input,    width = 1,        rp.valid
		.rp_data               (rsp_mux_001_src_data),                                                      //   input,  width = 659,          .data
		.rp_channel            (rsp_mux_001_src_channel),                                                   //   input,    width = 2,          .channel
		.rp_startofpacket      (rsp_mux_001_src_startofpacket),                                             //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (rsp_mux_001_src_endofpacket),                                               //   input,    width = 1,          .endofpacket
		.rp_ready              (rsp_mux_001_src_ready),                                                     //  output,    width = 1,          .ready
		.av_response           (),                                                                          // (terminated),                         
		.av_writeresponsevalid ()                                                                           // (terminated),                         
	);

	ddr_board_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (649),
		.PKT_ORI_BURST_SIZE_L      (647),
		.PKT_RESPONSE_STATUS_H     (646),
		.PKT_RESPONSE_STATUS_L     (645),
		.PKT_BURST_SIZE_H          (628),
		.PKT_BURST_SIZE_L          (626),
		.PKT_TRANS_LOCK            (612),
		.PKT_BEGIN_BURST           (633),
		.PKT_PROTECTION_H          (640),
		.PKT_PROTECTION_L          (638),
		.PKT_BURSTWRAP_H           (625),
		.PKT_BURSTWRAP_L           (625),
		.PKT_BYTE_CNT_H            (624),
		.PKT_BYTE_CNT_L            (614),
		.PKT_ADDR_H                (607),
		.PKT_ADDR_L                (576),
		.PKT_TRANS_COMPRESSED_READ (608),
		.PKT_TRANS_POSTED          (609),
		.PKT_TRANS_WRITE           (610),
		.PKT_TRANS_READ            (611),
		.PKT_DATA_H                (511),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (575),
		.PKT_BYTEEN_L              (512),
		.PKT_SRC_ID_H              (635),
		.PKT_SRC_ID_L              (635),
		.PKT_DEST_ID_H             (636),
		.PKT_DEST_ID_L             (636),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (2),
		.ST_DATA_W                 (659),
		.AVS_BURSTCOUNT_W          (11),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) ddr4b_pipe_1_burst16_s0_agent (
		.clk                     (ddr_clk_b_out_clk_clk),                                      //   input,    width = 1,             clk.clk
		.reset                   (ddr4b_cross_to_kernel_m0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (ddr4b_pipe_1_burst16_s0_agent_m0_address),                   //  output,   width = 32,              m0.address
		.m0_burstcount           (ddr4b_pipe_1_burst16_s0_agent_m0_burstcount),                //  output,   width = 11,                .burstcount
		.m0_byteenable           (ddr4b_pipe_1_burst16_s0_agent_m0_byteenable),                //  output,   width = 64,                .byteenable
		.m0_debugaccess          (ddr4b_pipe_1_burst16_s0_agent_m0_debugaccess),               //  output,    width = 1,                .debugaccess
		.m0_lock                 (ddr4b_pipe_1_burst16_s0_agent_m0_lock),                      //  output,    width = 1,                .lock
		.m0_readdata             (ddr4b_pipe_1_burst16_s0_agent_m0_readdata),                  //   input,  width = 512,                .readdata
		.m0_readdatavalid        (ddr4b_pipe_1_burst16_s0_agent_m0_readdatavalid),             //   input,    width = 1,                .readdatavalid
		.m0_read                 (ddr4b_pipe_1_burst16_s0_agent_m0_read),                      //  output,    width = 1,                .read
		.m0_waitrequest          (ddr4b_pipe_1_burst16_s0_agent_m0_waitrequest),               //   input,    width = 1,                .waitrequest
		.m0_writedata            (ddr4b_pipe_1_burst16_s0_agent_m0_writedata),                 //  output,  width = 512,                .writedata
		.m0_write                (ddr4b_pipe_1_burst16_s0_agent_m0_write),                     //  output,    width = 1,                .write
		.rp_endofpacket          (ddr4b_pipe_1_burst16_s0_agent_rp_endofpacket),               //  output,    width = 1,              rp.endofpacket
		.rp_ready                (ddr4b_pipe_1_burst16_s0_agent_rp_ready),                     //   input,    width = 1,                .ready
		.rp_valid                (ddr4b_pipe_1_burst16_s0_agent_rp_valid),                     //  output,    width = 1,                .valid
		.rp_data                 (ddr4b_pipe_1_burst16_s0_agent_rp_data),                      //  output,  width = 659,                .data
		.rp_startofpacket        (ddr4b_pipe_1_burst16_s0_agent_rp_startofpacket),             //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                          //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                          //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_src_data),                                           //   input,  width = 659,                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                  //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                    //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                        //   input,    width = 2,                .channel
		.rf_sink_ready           (ddr4b_pipe_1_burst16_s0_agent_rsp_fifo_out_ready),           //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (ddr4b_pipe_1_burst16_s0_agent_rsp_fifo_out_valid),           //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (ddr4b_pipe_1_burst16_s0_agent_rsp_fifo_out_startofpacket),   //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (ddr4b_pipe_1_burst16_s0_agent_rsp_fifo_out_endofpacket),     //   input,    width = 1,                .endofpacket
		.rf_sink_data            (ddr4b_pipe_1_burst16_s0_agent_rsp_fifo_out_data),            //   input,  width = 660,                .data
		.rf_source_ready         (ddr4b_pipe_1_burst16_s0_agent_rf_source_ready),              //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (ddr4b_pipe_1_burst16_s0_agent_rf_source_valid),              //  output,    width = 1,                .valid
		.rf_source_startofpacket (ddr4b_pipe_1_burst16_s0_agent_rf_source_startofpacket),      //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (ddr4b_pipe_1_burst16_s0_agent_rf_source_endofpacket),        //  output,    width = 1,                .endofpacket
		.rf_source_data          (ddr4b_pipe_1_burst16_s0_agent_rf_source_data),               //  output,  width = 660,                .data
		.rdata_fifo_sink_ready   (ddr4b_pipe_1_burst16_s0_agent_rdata_fifo_src_ready),         //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (ddr4b_pipe_1_burst16_s0_agent_rdata_fifo_src_valid),         //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (ddr4b_pipe_1_burst16_s0_agent_rdata_fifo_src_data),          //   input,  width = 514,                .data
		.rdata_fifo_src_ready    (ddr4b_pipe_1_burst16_s0_agent_rdata_fifo_src_ready),         //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ddr4b_pipe_1_burst16_s0_agent_rdata_fifo_src_valid),         //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (ddr4b_pipe_1_burst16_s0_agent_rdata_fifo_src_data),          //  output,  width = 514,                .data
		.m0_response             (2'b00),                                                      // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                       // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                        // (terminated),                               
	);

	ddr_board_altera_avalon_sc_fifo_191_e5eqkcq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (660),
		.FIFO_DEPTH          (17),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) ddr4b_pipe_1_burst16_s0_agent_rsp_fifo (
		.clk               (ddr_clk_b_out_clk_clk),                                      //   input,    width = 1,       clk.clk
		.reset             (ddr4b_cross_to_kernel_m0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (ddr4b_pipe_1_burst16_s0_agent_rf_source_data),               //   input,  width = 660,        in.data
		.in_valid          (ddr4b_pipe_1_burst16_s0_agent_rf_source_valid),              //   input,    width = 1,          .valid
		.in_ready          (ddr4b_pipe_1_burst16_s0_agent_rf_source_ready),              //  output,    width = 1,          .ready
		.in_startofpacket  (ddr4b_pipe_1_burst16_s0_agent_rf_source_startofpacket),      //   input,    width = 1,          .startofpacket
		.in_endofpacket    (ddr4b_pipe_1_burst16_s0_agent_rf_source_endofpacket),        //   input,    width = 1,          .endofpacket
		.out_data          (ddr4b_pipe_1_burst16_s0_agent_rsp_fifo_out_data),            //  output,  width = 660,       out.data
		.out_valid         (ddr4b_pipe_1_burst16_s0_agent_rsp_fifo_out_valid),           //  output,    width = 1,          .valid
		.out_ready         (ddr4b_pipe_1_burst16_s0_agent_rsp_fifo_out_ready),           //   input,    width = 1,          .ready
		.out_startofpacket (ddr4b_pipe_1_burst16_s0_agent_rsp_fifo_out_startofpacket),   //  output,    width = 1,          .startofpacket
		.out_endofpacket   (ddr4b_pipe_1_burst16_s0_agent_rsp_fifo_out_endofpacket),     //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated),                         
		.csr_read          (1'b0),                                                       // (terminated),                         
		.csr_write         (1'b0),                                                       // (terminated),                         
		.csr_readdata      (),                                                           // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated),                         
		.almost_full_data  (),                                                           // (terminated),                         
		.almost_empty_data (),                                                           // (terminated),                         
		.in_empty          (1'b0),                                                       // (terminated),                         
		.out_empty         (),                                                           // (terminated),                         
		.in_error          (1'b0),                                                       // (terminated),                         
		.out_error         (),                                                           // (terminated),                         
		.in_channel        (1'b0),                                                       // (terminated),                         
		.out_channel       ()                                                            // (terminated),                         
	);

	ddr_board_altera_merlin_router_191_n3jyaya router (
		.sink_ready         (ddr4b_cross_to_kernel_m0_agent_cp_ready),                    //  output,    width = 1,      sink.ready
		.sink_valid         (ddr4b_cross_to_kernel_m0_agent_cp_valid),                    //   input,    width = 1,          .valid
		.sink_data          (ddr4b_cross_to_kernel_m0_agent_cp_data),                     //   input,  width = 659,          .data
		.sink_startofpacket (ddr4b_cross_to_kernel_m0_agent_cp_startofpacket),            //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (ddr4b_cross_to_kernel_m0_agent_cp_endofpacket),              //   input,    width = 1,          .endofpacket
		.clk                (ddr_clk_b_out_clk_clk),                                      //   input,    width = 1,       clk.clk
		.reset              (ddr4b_cross_to_kernel_m0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_src_ready),                                           //   input,    width = 1,       src.ready
		.src_valid          (router_src_valid),                                           //  output,    width = 1,          .valid
		.src_data           (router_src_data),                                            //  output,  width = 659,          .data
		.src_channel        (router_src_channel),                                         //  output,    width = 2,          .channel
		.src_startofpacket  (router_src_startofpacket),                                   //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                      //  output,    width = 1,          .endofpacket
	);

	ddr_board_altera_merlin_router_191_n3jyaya router_001 (
		.sink_ready         (ddr4b_cross_to_host_m0_agent_cp_ready),                      //  output,    width = 1,      sink.ready
		.sink_valid         (ddr4b_cross_to_host_m0_agent_cp_valid),                      //   input,    width = 1,          .valid
		.sink_data          (ddr4b_cross_to_host_m0_agent_cp_data),                       //   input,  width = 659,          .data
		.sink_startofpacket (ddr4b_cross_to_host_m0_agent_cp_startofpacket),              //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (ddr4b_cross_to_host_m0_agent_cp_endofpacket),                //   input,    width = 1,          .endofpacket
		.clk                (ddr_clk_b_out_clk_clk),                                      //   input,    width = 1,       clk.clk
		.reset              (ddr4b_cross_to_kernel_m0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_001_src_ready),                                       //   input,    width = 1,       src.ready
		.src_valid          (router_001_src_valid),                                       //  output,    width = 1,          .valid
		.src_data           (router_001_src_data),                                        //  output,  width = 659,          .data
		.src_channel        (router_001_src_channel),                                     //  output,    width = 2,          .channel
		.src_startofpacket  (router_001_src_startofpacket),                               //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                  //  output,    width = 1,          .endofpacket
	);

	ddr_board_altera_merlin_router_191_gppop5a router_002 (
		.sink_ready         (ddr4b_pipe_1_burst16_s0_agent_rp_ready),                     //  output,    width = 1,      sink.ready
		.sink_valid         (ddr4b_pipe_1_burst16_s0_agent_rp_valid),                     //   input,    width = 1,          .valid
		.sink_data          (ddr4b_pipe_1_burst16_s0_agent_rp_data),                      //   input,  width = 659,          .data
		.sink_startofpacket (ddr4b_pipe_1_burst16_s0_agent_rp_startofpacket),             //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (ddr4b_pipe_1_burst16_s0_agent_rp_endofpacket),               //   input,    width = 1,          .endofpacket
		.clk                (ddr_clk_b_out_clk_clk),                                      //   input,    width = 1,       clk.clk
		.reset              (ddr4b_cross_to_kernel_m0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_002_src_ready),                                       //   input,    width = 1,       src.ready
		.src_valid          (router_002_src_valid),                                       //  output,    width = 1,          .valid
		.src_data           (router_002_src_data),                                        //  output,  width = 659,          .data
		.src_channel        (router_002_src_channel),                                     //  output,    width = 2,          .channel
		.src_startofpacket  (router_002_src_startofpacket),                               //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                  //  output,    width = 1,          .endofpacket
	);

	ddr_board_altera_merlin_demultiplexer_191_2o5jfji cmd_demux (
		.clk                (ddr_clk_b_out_clk_clk),                                      //   input,    width = 1,       clk.clk
		.reset              (ddr4b_cross_to_kernel_m0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_src_ready),                                           //  output,    width = 1,      sink.ready
		.sink_channel       (router_src_channel),                                         //   input,    width = 2,          .channel
		.sink_data          (router_src_data),                                            //   input,  width = 659,          .data
		.sink_startofpacket (router_src_startofpacket),                                   //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                                     //   input,    width = 1,          .endofpacket
		.sink_valid         (router_src_valid),                                           //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_src0_ready),                                       //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                       //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_src0_data),                                        //  output,  width = 659,          .data
		.src0_channel       (cmd_demux_src0_channel),                                     //  output,    width = 2,          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                               //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                                  //  output,    width = 1,          .endofpacket
	);

	ddr_board_altera_merlin_demultiplexer_191_2o5jfji cmd_demux_001 (
		.clk                (ddr_clk_b_out_clk_clk),                                      //   input,    width = 1,       clk.clk
		.reset              (ddr4b_cross_to_kernel_m0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_001_src_ready),                                       //  output,    width = 1,      sink.ready
		.sink_channel       (router_001_src_channel),                                     //   input,    width = 2,          .channel
		.sink_data          (router_001_src_data),                                        //   input,  width = 659,          .data
		.sink_startofpacket (router_001_src_startofpacket),                               //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                                 //   input,    width = 1,          .endofpacket
		.sink_valid         (router_001_src_valid),                                       //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                                   //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                   //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_001_src0_data),                                    //  output,  width = 659,          .data
		.src0_channel       (cmd_demux_001_src0_channel),                                 //  output,    width = 2,          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                           //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket)                              //  output,    width = 1,          .endofpacket
	);

	ddr_board_altera_merlin_multiplexer_191_4skcclq cmd_mux (
		.clk                 (ddr_clk_b_out_clk_clk),                                      //   input,    width = 1,       clk.clk
		.reset               (ddr4b_cross_to_kernel_m0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                          //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_src_valid),                                          //  output,    width = 1,          .valid
		.src_data            (cmd_mux_src_data),                                           //  output,  width = 659,          .data
		.src_channel         (cmd_mux_src_channel),                                        //  output,    width = 2,          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                  //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                    //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                       //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                       //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src0_channel),                                     //   input,    width = 2,          .channel
		.sink0_data          (cmd_demux_src0_data),                                        //   input,  width = 659,          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                               //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                                 //   input,    width = 1,          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                                   //  output,    width = 1,     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                                   //   input,    width = 1,          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                                 //   input,    width = 2,          .channel
		.sink1_data          (cmd_demux_001_src0_data),                                    //   input,  width = 659,          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),                           //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)                              //   input,    width = 1,          .endofpacket
	);

	ddr_board_altera_merlin_demultiplexer_191_blr3uci rsp_demux (
		.clk                (ddr_clk_b_out_clk_clk),                                      //   input,    width = 1,       clk.clk
		.reset              (ddr4b_cross_to_kernel_m0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_002_src_ready),                                       //  output,    width = 1,      sink.ready
		.sink_channel       (router_002_src_channel),                                     //   input,    width = 2,          .channel
		.sink_data          (router_002_src_data),                                        //   input,  width = 659,          .data
		.sink_startofpacket (router_002_src_startofpacket),                               //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                                 //   input,    width = 1,          .endofpacket
		.sink_valid         (router_002_src_valid),                                       //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_src0_ready),                                       //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                       //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_src0_data),                                        //  output,  width = 659,          .data
		.src0_channel       (rsp_demux_src0_channel),                                     //  output,    width = 2,          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                               //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                                 //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                                       //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                                       //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_src1_data),                                        //  output,  width = 659,          .data
		.src1_channel       (rsp_demux_src1_channel),                                     //  output,    width = 2,          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                               //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                                  //  output,    width = 1,          .endofpacket
	);

	ddr_board_altera_merlin_multiplexer_191_nwm5asy rsp_mux (
		.clk                 (ddr_clk_b_out_clk_clk),                                      //   input,    width = 1,       clk.clk
		.reset               (ddr4b_cross_to_kernel_m0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                          //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_src_valid),                                          //  output,    width = 1,          .valid
		.src_data            (rsp_mux_src_data),                                           //  output,  width = 659,          .data
		.src_channel         (rsp_mux_src_channel),                                        //  output,    width = 2,          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                  //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                    //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                       //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                       //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                     //   input,    width = 2,          .channel
		.sink0_data          (rsp_demux_src0_data),                                        //   input,  width = 659,          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                               //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket)                                  //   input,    width = 1,          .endofpacket
	);

	ddr_board_altera_merlin_multiplexer_191_nwm5asy rsp_mux_001 (
		.clk                 (ddr_clk_b_out_clk_clk),                                      //   input,    width = 1,       clk.clk
		.reset               (ddr4b_cross_to_kernel_m0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                      //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                      //  output,    width = 1,          .valid
		.src_data            (rsp_mux_001_src_data),                                       //  output,  width = 659,          .data
		.src_channel         (rsp_mux_001_src_channel),                                    //  output,    width = 2,          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                              //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                                //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_src1_ready),                                       //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_src1_valid),                                       //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_src1_channel),                                     //   input,    width = 2,          .channel
		.sink0_data          (rsp_demux_src1_data),                                        //   input,  width = 659,          .data
		.sink0_startofpacket (rsp_demux_src1_startofpacket),                               //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_src1_endofpacket)                                  //   input,    width = 1,          .endofpacket
	);

endmodule
