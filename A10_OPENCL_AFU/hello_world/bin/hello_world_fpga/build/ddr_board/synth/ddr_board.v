// ddr_board.v

// Generated using ACDS version 19.2 57

`timescale 1 ps / 1 ps
module ddr_board (
		output wire         kernel_ddr4a_waitrequest,            //          kernel_ddr4a.waitrequest
		output wire [511:0] kernel_ddr4a_readdata,               //                      .readdata
		output wire         kernel_ddr4a_readdatavalid,          //                      .readdatavalid
		input  wire [4:0]   kernel_ddr4a_burstcount,             //                      .burstcount
		input  wire [511:0] kernel_ddr4a_writedata,              //                      .writedata
		input  wire [31:0]  kernel_ddr4a_address,                //                      .address
		input  wire         kernel_ddr4a_write,                  //                      .write
		input  wire         kernel_ddr4a_read,                   //                      .read
		input  wire [63:0]  kernel_ddr4a_byteenable,             //                      .byteenable
		input  wire         kernel_ddr4a_debugaccess,            //                      .debugaccess
		input  wire         emif_ddr4a_waitrequest,              //            emif_ddr4a.waitrequest
		input  wire [511:0] emif_ddr4a_readdata,                 //                      .readdata
		input  wire         emif_ddr4a_readdatavalid,            //                      .readdatavalid
		output wire [6:0]   emif_ddr4a_burstcount,               //                      .burstcount
		output wire [511:0] emif_ddr4a_writedata,                //                      .writedata
		output wire [31:0]  emif_ddr4a_address,                  //                      .address
		output wire         emif_ddr4a_write,                    //                      .write
		output wire         emif_ddr4a_read,                     //                      .read
		output wire [63:0]  emif_ddr4a_byteenable,               //                      .byteenable
		output wire         emif_ddr4a_debugaccess,              //                      .debugaccess
		output wire         kernel_ddr4b_waitrequest,            //          kernel_ddr4b.waitrequest
		output wire [511:0] kernel_ddr4b_readdata,               //                      .readdata
		output wire         kernel_ddr4b_readdatavalid,          //                      .readdatavalid
		input  wire [4:0]   kernel_ddr4b_burstcount,             //                      .burstcount
		input  wire [511:0] kernel_ddr4b_writedata,              //                      .writedata
		input  wire [31:0]  kernel_ddr4b_address,                //                      .address
		input  wire         kernel_ddr4b_write,                  //                      .write
		input  wire         kernel_ddr4b_read,                   //                      .read
		input  wire [63:0]  kernel_ddr4b_byteenable,             //                      .byteenable
		input  wire         kernel_ddr4b_debugaccess,            //                      .debugaccess
		input  wire         emif_ddr4b_waitrequest,              //            emif_ddr4b.waitrequest
		input  wire [511:0] emif_ddr4b_readdata,                 //                      .readdata
		input  wire         emif_ddr4b_readdatavalid,            //                      .readdatavalid
		output wire [6:0]   emif_ddr4b_burstcount,               //                      .burstcount
		output wire [511:0] emif_ddr4b_writedata,                //                      .writedata
		output wire [31:0]  emif_ddr4b_address,                  //                      .address
		output wire         emif_ddr4b_write,                    //                      .write
		output wire         emif_ddr4b_read,                     //                      .read
		output wire [63:0]  emif_ddr4b_byteenable,               //                      .byteenable
		output wire         emif_ddr4b_debugaccess,              //                      .debugaccess
		input  wire [1:0]   acl_bsp_memorg_host_mode,            //   acl_bsp_memorg_host.mode
		output wire [32:0]  acl_bsp_snoop_data,                  //         acl_bsp_snoop.data
		output wire         acl_bsp_snoop_valid,                 //                      .valid
		input  wire         acl_bsp_snoop_ready,                 //                      .ready
		input  wire         ddr_clk_a_clk,                       //             ddr_clk_a.clk
		input  wire         ddr_clk_b_clk,                       //             ddr_clk_b.clk
		input  wire         host_rd_waitrequest,                 //               host_rd.waitrequest
		input  wire [511:0] host_rd_readdata,                    //                      .readdata
		input  wire         host_rd_readdatavalid,               //                      .readdatavalid
		output wire [2:0]   host_rd_burstcount,                  //                      .burstcount
		output wire [511:0] host_rd_writedata,                   //                      .writedata
		output wire [47:0]  host_rd_address,                     //                      .address
		output wire         host_rd_write,                       //                      .write
		output wire         host_rd_read,                        //                      .read
		output wire [63:0]  host_rd_byteenable,                  //                      .byteenable
		output wire         host_rd_debugaccess,                 //                      .debugaccess
		input  wire         host_wr_waitrequest,                 //               host_wr.waitrequest
		input  wire [511:0] host_wr_readdata,                    //                      .readdata
		input  wire         host_wr_readdatavalid,               //                      .readdatavalid
		output wire [2:0]   host_wr_burstcount,                  //                      .burstcount
		output wire [511:0] host_wr_writedata,                   //                      .writedata
		output wire [48:0]  host_wr_address,                     //                      .address
		output wire         host_wr_write,                       //                      .write
		output wire         host_wr_read,                        //                      .read
		output wire [63:0]  host_wr_byteenable,                  //                      .byteenable
		output wire         host_wr_debugaccess,                 //                      .debugaccess
		input  wire         global_reset_reset,                  //          global_reset.reset
		input  wire         host_clk_clk,                        //              host_clk.clk
		input  wire         kernel_clk_clk,                      //            kernel_clk.clk
		input  wire         kernel_reset_reset,                  //          kernel_reset.reset
		output wire [63:0]  null_dfh_afu_id_readdata,            //       null_dfh_afu_id.readdata
		input  wire [63:0]  null_dfh_afu_id_writedata,           //                      .writedata
		input  wire [2:0]   null_dfh_afu_id_address,             //                      .address
		input  wire         null_dfh_afu_id_write,               //                      .write
		input  wire         null_dfh_afu_id_read,                //                      .read
		output wire         ase_0_avmm_pipe_slave_waitrequest,   // ase_0_avmm_pipe_slave.waitrequest
		output wire [63:0]  ase_0_avmm_pipe_slave_readdata,      //                      .readdata
		output wire         ase_0_avmm_pipe_slave_readdatavalid, //                      .readdatavalid
		input  wire [0:0]   ase_0_avmm_pipe_slave_burstcount,    //                      .burstcount
		input  wire [63:0]  ase_0_avmm_pipe_slave_writedata,     //                      .writedata
		input  wire [12:0]  ase_0_avmm_pipe_slave_address,       //                      .address
		input  wire         ase_0_avmm_pipe_slave_write,         //                      .write
		input  wire         ase_0_avmm_pipe_slave_read,          //                      .read
		input  wire [7:0]   ase_0_avmm_pipe_slave_byteenable,    //                      .byteenable
		input  wire         ase_0_avmm_pipe_slave_debugaccess,   //                      .debugaccess
		output wire         msgdma_bbb_0_csr_waitrequest,        //      msgdma_bbb_0_csr.waitrequest
		output wire [63:0]  msgdma_bbb_0_csr_readdata,           //                      .readdata
		output wire         msgdma_bbb_0_csr_readdatavalid,      //                      .readdatavalid
		input  wire [0:0]   msgdma_bbb_0_csr_burstcount,         //                      .burstcount
		input  wire [63:0]  msgdma_bbb_0_csr_writedata,          //                      .writedata
		input  wire [6:0]   msgdma_bbb_0_csr_address,            //                      .address
		input  wire         msgdma_bbb_0_csr_write,              //                      .write
		input  wire         msgdma_bbb_0_csr_read,               //                      .read
		input  wire [7:0]   msgdma_bbb_0_csr_byteenable,         //                      .byteenable
		input  wire         msgdma_bbb_0_csr_debugaccess,        //                      .debugaccess
		output wire         msgdma_bbb_0_dma_irq_irq,            //  msgdma_bbb_0_dma_irq.irq
		output wire         msgdma_bbb_1_csr_waitrequest,        //      msgdma_bbb_1_csr.waitrequest
		output wire [63:0]  msgdma_bbb_1_csr_readdata,           //                      .readdata
		output wire         msgdma_bbb_1_csr_readdatavalid,      //                      .readdatavalid
		input  wire [0:0]   msgdma_bbb_1_csr_burstcount,         //                      .burstcount
		input  wire [63:0]  msgdma_bbb_1_csr_writedata,          //                      .writedata
		input  wire [6:0]   msgdma_bbb_1_csr_address,            //                      .address
		input  wire         msgdma_bbb_1_csr_write,              //                      .write
		input  wire         msgdma_bbb_1_csr_read,               //                      .read
		input  wire [7:0]   msgdma_bbb_1_csr_byteenable,         //                      .byteenable
		input  wire         msgdma_bbb_1_csr_debugaccess,        //                      .debugaccess
		output wire         msgdma_bbb_1_dma_irq_irq             //  msgdma_bbb_1_dma_irq.irq
	);

	wire          msgdma_bbb_inst_rd_host_rd_waitrequest;                                // dma_host_rd_pipe:s0_waitrequest -> msgdma_bbb_inst_rd:host_rd_waitrequest
	wire  [511:0] msgdma_bbb_inst_rd_host_rd_readdata;                                   // dma_host_rd_pipe:s0_readdata -> msgdma_bbb_inst_rd:host_rd_readdata
	wire          msgdma_bbb_inst_rd_host_rd_debugaccess;                                // msgdma_bbb_inst_rd:host_rd_debugaccess -> dma_host_rd_pipe:s0_debugaccess
	wire   [47:0] msgdma_bbb_inst_rd_host_rd_address;                                    // msgdma_bbb_inst_rd:host_rd_address -> dma_host_rd_pipe:s0_address
	wire          msgdma_bbb_inst_rd_host_rd_read;                                       // msgdma_bbb_inst_rd:host_rd_read -> dma_host_rd_pipe:s0_read
	wire   [63:0] msgdma_bbb_inst_rd_host_rd_byteenable;                                 // msgdma_bbb_inst_rd:host_rd_byteenable -> dma_host_rd_pipe:s0_byteenable
	wire          msgdma_bbb_inst_rd_host_rd_readdatavalid;                              // dma_host_rd_pipe:s0_readdatavalid -> msgdma_bbb_inst_rd:host_rd_readdatavalid
	wire  [511:0] msgdma_bbb_inst_rd_host_rd_writedata;                                  // msgdma_bbb_inst_rd:host_rd_writedata -> dma_host_rd_pipe:s0_writedata
	wire          msgdma_bbb_inst_rd_host_rd_write;                                      // msgdma_bbb_inst_rd:host_rd_write -> dma_host_rd_pipe:s0_write
	wire    [2:0] msgdma_bbb_inst_rd_host_rd_burstcount;                                 // msgdma_bbb_inst_rd:host_rd_burstcount -> dma_host_rd_pipe:s0_burstcount
	wire          msgdma_bbb_inst_wr_host_wr_waitrequest;                                // dma_host_wr_pipe:s0_waitrequest -> msgdma_bbb_inst_wr:host_wr_waitrequest
	wire  [511:0] msgdma_bbb_inst_wr_host_wr_readdata;                                   // dma_host_wr_pipe:s0_readdata -> msgdma_bbb_inst_wr:host_wr_readdata
	wire          msgdma_bbb_inst_wr_host_wr_debugaccess;                                // msgdma_bbb_inst_wr:host_wr_debugaccess -> dma_host_wr_pipe:s0_debugaccess
	wire   [48:0] msgdma_bbb_inst_wr_host_wr_address;                                    // msgdma_bbb_inst_wr:host_wr_address -> dma_host_wr_pipe:s0_address
	wire          msgdma_bbb_inst_wr_host_wr_read;                                       // msgdma_bbb_inst_wr:host_wr_read -> dma_host_wr_pipe:s0_read
	wire   [63:0] msgdma_bbb_inst_wr_host_wr_byteenable;                                 // msgdma_bbb_inst_wr:host_wr_byteenable -> dma_host_wr_pipe:s0_byteenable
	wire          msgdma_bbb_inst_wr_host_wr_readdatavalid;                              // dma_host_wr_pipe:s0_readdatavalid -> msgdma_bbb_inst_wr:host_wr_readdatavalid
	wire  [511:0] msgdma_bbb_inst_wr_host_wr_writedata;                                  // msgdma_bbb_inst_wr:host_wr_writedata -> dma_host_wr_pipe:s0_writedata
	wire          msgdma_bbb_inst_wr_host_wr_write;                                      // msgdma_bbb_inst_wr:host_wr_write -> dma_host_wr_pipe:s0_write
	wire    [2:0] msgdma_bbb_inst_wr_host_wr_burstcount;                                 // msgdma_bbb_inst_wr:host_wr_burstcount -> dma_host_wr_pipe:s0_burstcount
	wire          kernel_clk_out_clk_clk;                                                // kernel_clk:out_clk -> [ddr4a_cross_to_kernel:s0_clk, ddr4b_cross_to_kernel:s0_clk, ddr_board_acl_memory_bank_divider_0:kernel_clk_clk, kernel_reset:clk, rst_controller_001:clk]
	wire          host_clk_out_clk_clk;                                                  // host_clk:out_clk -> [ase_inst_0:clk_clk, ddr4a_cross_to_host:s0_clk, ddr4b_cross_to_host:s0_clk, ddr_board_acl_memory_bank_divider_0:clk_clk, dma_host_rd_pipe:clk, dma_host_wr_pipe:clk, global_reset:clk, mm_interconnect_0:host_clk_out_clk_clk, mm_interconnect_1:host_clk_out_clk_clk, mm_interconnect_2:host_clk_out_clk_clk, mm_interconnect_5:host_clk_out_clk_clk, msgdma_bbb_inst_rd:clk_clk, msgdma_bbb_inst_wr:clk_clk, null_dfh_afu_id:clk, pipe_stage_ase:clk]
	wire          ddr_clk_a_out_clk_clk;                                                 // ddr_clk_a:out_clk -> [ddr4a_cross_to_host:m0_clk, ddr4a_cross_to_kernel:m0_clk, ddr4a_pipe_0:clk, ddr4a_pipe_1_burst16:clk, mm_interconnect_6:ddr_clk_a_out_clk_clk, mm_interconnect_7:ddr_clk_a_out_clk_clk, rst_controller:clk]
	wire          ddr_clk_b_out_clk_clk;                                                 // ddr_clk_b:out_clk -> [ddr4b_cross_to_host:m0_clk, ddr4b_cross_to_kernel:m0_clk, ddr4b_pipe_0:clk, ddr4b_pipe_1_burst16:clk, mm_interconnect_8:ddr_clk_b_out_clk_clk, mm_interconnect_9:ddr_clk_b_out_clk_clk, rst_controller_002:clk]
	wire          kernel_reset_out_reset_reset;                                          // kernel_reset:out_reset -> ddr_board_acl_memory_bank_divider_0:kernel_reset_reset_n
	wire          global_reset_out_reset_reset;                                          // global_reset:out_reset -> [ase_inst_0:reset_reset, ddr4a_cross_to_host:s0_reset, ddr4b_cross_to_host:s0_reset, ddr_board_acl_memory_bank_divider_0:reset_reset_n, dma_host_rd_pipe:reset, dma_host_wr_pipe:reset, mm_interconnect_0:ddr_board_acl_memory_bank_divider_0_reset_reset_bridge_in_reset_reset, mm_interconnect_1:ddr_board_acl_memory_bank_divider_0_reset_reset_bridge_in_reset_reset, mm_interconnect_2:ase_inst_0_reset_reset_bridge_in_reset_reset, mm_interconnect_5:pipe_stage_ase_reset_reset_bridge_in_reset_reset, msgdma_bbb_inst_rd:reset_reset_n, msgdma_bbb_inst_wr:reset_reset_n, null_dfh_afu_id:reset, pipe_stage_ase:reset, rst_controller:reset_in0, rst_controller_001:reset_in0, rst_controller_002:reset_in0]
	wire          ddr_board_acl_memory_bank_divider_0_bank1_waitrequest;                 // mm_interconnect_0:ddr_board_acl_memory_bank_divider_0_bank1_waitrequest -> ddr_board_acl_memory_bank_divider_0:bank1_waitrequest
	wire  [511:0] ddr_board_acl_memory_bank_divider_0_bank1_readdata;                    // mm_interconnect_0:ddr_board_acl_memory_bank_divider_0_bank1_readdata -> ddr_board_acl_memory_bank_divider_0:bank1_readdata
	wire   [31:0] ddr_board_acl_memory_bank_divider_0_bank1_address;                     // ddr_board_acl_memory_bank_divider_0:bank1_address -> mm_interconnect_0:ddr_board_acl_memory_bank_divider_0_bank1_address
	wire          ddr_board_acl_memory_bank_divider_0_bank1_read;                        // ddr_board_acl_memory_bank_divider_0:bank1_read -> mm_interconnect_0:ddr_board_acl_memory_bank_divider_0_bank1_read
	wire   [63:0] ddr_board_acl_memory_bank_divider_0_bank1_byteenable;                  // ddr_board_acl_memory_bank_divider_0:bank1_byteenable -> mm_interconnect_0:ddr_board_acl_memory_bank_divider_0_bank1_byteenable
	wire          ddr_board_acl_memory_bank_divider_0_bank1_readdatavalid;               // mm_interconnect_0:ddr_board_acl_memory_bank_divider_0_bank1_readdatavalid -> ddr_board_acl_memory_bank_divider_0:bank1_readdatavalid
	wire  [511:0] ddr_board_acl_memory_bank_divider_0_bank1_writedata;                   // ddr_board_acl_memory_bank_divider_0:bank1_writedata -> mm_interconnect_0:ddr_board_acl_memory_bank_divider_0_bank1_writedata
	wire          ddr_board_acl_memory_bank_divider_0_bank1_write;                       // ddr_board_acl_memory_bank_divider_0:bank1_write -> mm_interconnect_0:ddr_board_acl_memory_bank_divider_0_bank1_write
	wire    [4:0] ddr_board_acl_memory_bank_divider_0_bank1_burstcount;                  // ddr_board_acl_memory_bank_divider_0:bank1_burstcount -> mm_interconnect_0:ddr_board_acl_memory_bank_divider_0_bank1_burstcount
	wire  [511:0] mm_interconnect_0_ddr4a_cross_to_host_s0_readdata;                     // ddr4a_cross_to_host:s0_readdata -> mm_interconnect_0:ddr4a_cross_to_host_s0_readdata
	wire          mm_interconnect_0_ddr4a_cross_to_host_s0_waitrequest;                  // ddr4a_cross_to_host:s0_waitrequest -> mm_interconnect_0:ddr4a_cross_to_host_s0_waitrequest
	wire          mm_interconnect_0_ddr4a_cross_to_host_s0_debugaccess;                  // mm_interconnect_0:ddr4a_cross_to_host_s0_debugaccess -> ddr4a_cross_to_host:s0_debugaccess
	wire   [31:0] mm_interconnect_0_ddr4a_cross_to_host_s0_address;                      // mm_interconnect_0:ddr4a_cross_to_host_s0_address -> ddr4a_cross_to_host:s0_address
	wire          mm_interconnect_0_ddr4a_cross_to_host_s0_read;                         // mm_interconnect_0:ddr4a_cross_to_host_s0_read -> ddr4a_cross_to_host:s0_read
	wire   [63:0] mm_interconnect_0_ddr4a_cross_to_host_s0_byteenable;                   // mm_interconnect_0:ddr4a_cross_to_host_s0_byteenable -> ddr4a_cross_to_host:s0_byteenable
	wire          mm_interconnect_0_ddr4a_cross_to_host_s0_readdatavalid;                // ddr4a_cross_to_host:s0_readdatavalid -> mm_interconnect_0:ddr4a_cross_to_host_s0_readdatavalid
	wire          mm_interconnect_0_ddr4a_cross_to_host_s0_write;                        // mm_interconnect_0:ddr4a_cross_to_host_s0_write -> ddr4a_cross_to_host:s0_write
	wire  [511:0] mm_interconnect_0_ddr4a_cross_to_host_s0_writedata;                    // mm_interconnect_0:ddr4a_cross_to_host_s0_writedata -> ddr4a_cross_to_host:s0_writedata
	wire    [4:0] mm_interconnect_0_ddr4a_cross_to_host_s0_burstcount;                   // mm_interconnect_0:ddr4a_cross_to_host_s0_burstcount -> ddr4a_cross_to_host:s0_burstcount
	wire          ddr_board_acl_memory_bank_divider_0_bank2_waitrequest;                 // mm_interconnect_1:ddr_board_acl_memory_bank_divider_0_bank2_waitrequest -> ddr_board_acl_memory_bank_divider_0:bank2_waitrequest
	wire  [511:0] ddr_board_acl_memory_bank_divider_0_bank2_readdata;                    // mm_interconnect_1:ddr_board_acl_memory_bank_divider_0_bank2_readdata -> ddr_board_acl_memory_bank_divider_0:bank2_readdata
	wire   [31:0] ddr_board_acl_memory_bank_divider_0_bank2_address;                     // ddr_board_acl_memory_bank_divider_0:bank2_address -> mm_interconnect_1:ddr_board_acl_memory_bank_divider_0_bank2_address
	wire          ddr_board_acl_memory_bank_divider_0_bank2_read;                        // ddr_board_acl_memory_bank_divider_0:bank2_read -> mm_interconnect_1:ddr_board_acl_memory_bank_divider_0_bank2_read
	wire   [63:0] ddr_board_acl_memory_bank_divider_0_bank2_byteenable;                  // ddr_board_acl_memory_bank_divider_0:bank2_byteenable -> mm_interconnect_1:ddr_board_acl_memory_bank_divider_0_bank2_byteenable
	wire          ddr_board_acl_memory_bank_divider_0_bank2_readdatavalid;               // mm_interconnect_1:ddr_board_acl_memory_bank_divider_0_bank2_readdatavalid -> ddr_board_acl_memory_bank_divider_0:bank2_readdatavalid
	wire  [511:0] ddr_board_acl_memory_bank_divider_0_bank2_writedata;                   // ddr_board_acl_memory_bank_divider_0:bank2_writedata -> mm_interconnect_1:ddr_board_acl_memory_bank_divider_0_bank2_writedata
	wire          ddr_board_acl_memory_bank_divider_0_bank2_write;                       // ddr_board_acl_memory_bank_divider_0:bank2_write -> mm_interconnect_1:ddr_board_acl_memory_bank_divider_0_bank2_write
	wire    [4:0] ddr_board_acl_memory_bank_divider_0_bank2_burstcount;                  // ddr_board_acl_memory_bank_divider_0:bank2_burstcount -> mm_interconnect_1:ddr_board_acl_memory_bank_divider_0_bank2_burstcount
	wire  [511:0] mm_interconnect_1_ddr4b_cross_to_host_s0_readdata;                     // ddr4b_cross_to_host:s0_readdata -> mm_interconnect_1:ddr4b_cross_to_host_s0_readdata
	wire          mm_interconnect_1_ddr4b_cross_to_host_s0_waitrequest;                  // ddr4b_cross_to_host:s0_waitrequest -> mm_interconnect_1:ddr4b_cross_to_host_s0_waitrequest
	wire          mm_interconnect_1_ddr4b_cross_to_host_s0_debugaccess;                  // mm_interconnect_1:ddr4b_cross_to_host_s0_debugaccess -> ddr4b_cross_to_host:s0_debugaccess
	wire   [31:0] mm_interconnect_1_ddr4b_cross_to_host_s0_address;                      // mm_interconnect_1:ddr4b_cross_to_host_s0_address -> ddr4b_cross_to_host:s0_address
	wire          mm_interconnect_1_ddr4b_cross_to_host_s0_read;                         // mm_interconnect_1:ddr4b_cross_to_host_s0_read -> ddr4b_cross_to_host:s0_read
	wire   [63:0] mm_interconnect_1_ddr4b_cross_to_host_s0_byteenable;                   // mm_interconnect_1:ddr4b_cross_to_host_s0_byteenable -> ddr4b_cross_to_host:s0_byteenable
	wire          mm_interconnect_1_ddr4b_cross_to_host_s0_readdatavalid;                // ddr4b_cross_to_host:s0_readdatavalid -> mm_interconnect_1:ddr4b_cross_to_host_s0_readdatavalid
	wire          mm_interconnect_1_ddr4b_cross_to_host_s0_write;                        // mm_interconnect_1:ddr4b_cross_to_host_s0_write -> ddr4b_cross_to_host:s0_write
	wire  [511:0] mm_interconnect_1_ddr4b_cross_to_host_s0_writedata;                    // mm_interconnect_1:ddr4b_cross_to_host_s0_writedata -> ddr4b_cross_to_host:s0_writedata
	wire    [4:0] mm_interconnect_1_ddr4b_cross_to_host_s0_burstcount;                   // mm_interconnect_1:ddr4b_cross_to_host_s0_burstcount -> ddr4b_cross_to_host:s0_burstcount
	wire          ase_inst_0_expanded_master_waitrequest;                                // mm_interconnect_2:ase_inst_0_expanded_master_waitrequest -> ase_inst_0:expanded_master_waitrequest
	wire  [511:0] ase_inst_0_expanded_master_readdata;                                   // mm_interconnect_2:ase_inst_0_expanded_master_readdata -> ase_inst_0:expanded_master_readdata
	wire   [47:0] ase_inst_0_expanded_master_address;                                    // ase_inst_0:expanded_master_address -> mm_interconnect_2:ase_inst_0_expanded_master_address
	wire          ase_inst_0_expanded_master_read;                                       // ase_inst_0:expanded_master_read -> mm_interconnect_2:ase_inst_0_expanded_master_read
	wire   [63:0] ase_inst_0_expanded_master_byteenable;                                 // ase_inst_0:expanded_master_byteenable -> mm_interconnect_2:ase_inst_0_expanded_master_byteenable
	wire          ase_inst_0_expanded_master_readdatavalid;                              // mm_interconnect_2:ase_inst_0_expanded_master_readdatavalid -> ase_inst_0:expanded_master_readdatavalid
	wire          ase_inst_0_expanded_master_write;                                      // ase_inst_0:expanded_master_write -> mm_interconnect_2:ase_inst_0_expanded_master_write
	wire  [511:0] ase_inst_0_expanded_master_writedata;                                  // ase_inst_0:expanded_master_writedata -> mm_interconnect_2:ase_inst_0_expanded_master_writedata
	wire    [3:0] ase_inst_0_expanded_master_burstcount;                                 // ase_inst_0:expanded_master_burstcount -> mm_interconnect_2:ase_inst_0_expanded_master_burstcount
	wire  [511:0] mm_interconnect_2_pipe_stage_ase_s0_readdata;                          // pipe_stage_ase:s0_readdata -> mm_interconnect_2:pipe_stage_ase_s0_readdata
	wire          mm_interconnect_2_pipe_stage_ase_s0_waitrequest;                       // pipe_stage_ase:s0_waitrequest -> mm_interconnect_2:pipe_stage_ase_s0_waitrequest
	wire          mm_interconnect_2_pipe_stage_ase_s0_debugaccess;                       // mm_interconnect_2:pipe_stage_ase_s0_debugaccess -> pipe_stage_ase:s0_debugaccess
	wire   [32:0] mm_interconnect_2_pipe_stage_ase_s0_address;                           // mm_interconnect_2:pipe_stage_ase_s0_address -> pipe_stage_ase:s0_address
	wire          mm_interconnect_2_pipe_stage_ase_s0_read;                              // mm_interconnect_2:pipe_stage_ase_s0_read -> pipe_stage_ase:s0_read
	wire   [63:0] mm_interconnect_2_pipe_stage_ase_s0_byteenable;                        // mm_interconnect_2:pipe_stage_ase_s0_byteenable -> pipe_stage_ase:s0_byteenable
	wire          mm_interconnect_2_pipe_stage_ase_s0_readdatavalid;                     // pipe_stage_ase:s0_readdatavalid -> mm_interconnect_2:pipe_stage_ase_s0_readdatavalid
	wire          mm_interconnect_2_pipe_stage_ase_s0_write;                             // mm_interconnect_2:pipe_stage_ase_s0_write -> pipe_stage_ase:s0_write
	wire  [511:0] mm_interconnect_2_pipe_stage_ase_s0_writedata;                         // mm_interconnect_2:pipe_stage_ase_s0_writedata -> pipe_stage_ase:s0_writedata
	wire    [4:0] mm_interconnect_2_pipe_stage_ase_s0_burstcount;                        // mm_interconnect_2:pipe_stage_ase_s0_burstcount -> pipe_stage_ase:s0_burstcount
	wire          pipe_stage_ase_m0_waitrequest;                                         // mm_interconnect_5:pipe_stage_ase_m0_waitrequest -> pipe_stage_ase:m0_waitrequest
	wire  [511:0] pipe_stage_ase_m0_readdata;                                            // mm_interconnect_5:pipe_stage_ase_m0_readdata -> pipe_stage_ase:m0_readdata
	wire          pipe_stage_ase_m0_debugaccess;                                         // pipe_stage_ase:m0_debugaccess -> mm_interconnect_5:pipe_stage_ase_m0_debugaccess
	wire   [32:0] pipe_stage_ase_m0_address;                                             // pipe_stage_ase:m0_address -> mm_interconnect_5:pipe_stage_ase_m0_address
	wire          pipe_stage_ase_m0_read;                                                // pipe_stage_ase:m0_read -> mm_interconnect_5:pipe_stage_ase_m0_read
	wire   [63:0] pipe_stage_ase_m0_byteenable;                                          // pipe_stage_ase:m0_byteenable -> mm_interconnect_5:pipe_stage_ase_m0_byteenable
	wire          pipe_stage_ase_m0_readdatavalid;                                       // mm_interconnect_5:pipe_stage_ase_m0_readdatavalid -> pipe_stage_ase:m0_readdatavalid
	wire  [511:0] pipe_stage_ase_m0_writedata;                                           // pipe_stage_ase:m0_writedata -> mm_interconnect_5:pipe_stage_ase_m0_writedata
	wire          pipe_stage_ase_m0_write;                                               // pipe_stage_ase:m0_write -> mm_interconnect_5:pipe_stage_ase_m0_write
	wire    [4:0] pipe_stage_ase_m0_burstcount;                                          // pipe_stage_ase:m0_burstcount -> mm_interconnect_5:pipe_stage_ase_m0_burstcount
	wire          msgdma_bbb_inst_rd_mem_waitrequest;                                    // mm_interconnect_5:msgdma_bbb_inst_rd_mem_waitrequest -> msgdma_bbb_inst_rd:mem_waitrequest
	wire  [511:0] msgdma_bbb_inst_rd_mem_readdata;                                       // mm_interconnect_5:msgdma_bbb_inst_rd_mem_readdata -> msgdma_bbb_inst_rd:mem_readdata
	wire          msgdma_bbb_inst_rd_mem_debugaccess;                                    // msgdma_bbb_inst_rd:mem_debugaccess -> mm_interconnect_5:msgdma_bbb_inst_rd_mem_debugaccess
	wire   [47:0] msgdma_bbb_inst_rd_mem_address;                                        // msgdma_bbb_inst_rd:mem_address -> mm_interconnect_5:msgdma_bbb_inst_rd_mem_address
	wire          msgdma_bbb_inst_rd_mem_read;                                           // msgdma_bbb_inst_rd:mem_read -> mm_interconnect_5:msgdma_bbb_inst_rd_mem_read
	wire   [63:0] msgdma_bbb_inst_rd_mem_byteenable;                                     // msgdma_bbb_inst_rd:mem_byteenable -> mm_interconnect_5:msgdma_bbb_inst_rd_mem_byteenable
	wire          msgdma_bbb_inst_rd_mem_readdatavalid;                                  // mm_interconnect_5:msgdma_bbb_inst_rd_mem_readdatavalid -> msgdma_bbb_inst_rd:mem_readdatavalid
	wire  [511:0] msgdma_bbb_inst_rd_mem_writedata;                                      // msgdma_bbb_inst_rd:mem_writedata -> mm_interconnect_5:msgdma_bbb_inst_rd_mem_writedata
	wire          msgdma_bbb_inst_rd_mem_write;                                          // msgdma_bbb_inst_rd:mem_write -> mm_interconnect_5:msgdma_bbb_inst_rd_mem_write
	wire    [2:0] msgdma_bbb_inst_rd_mem_burstcount;                                     // msgdma_bbb_inst_rd:mem_burstcount -> mm_interconnect_5:msgdma_bbb_inst_rd_mem_burstcount
	wire          msgdma_bbb_inst_wr_mem_waitrequest;                                    // mm_interconnect_5:msgdma_bbb_inst_wr_mem_waitrequest -> msgdma_bbb_inst_wr:mem_waitrequest
	wire  [511:0] msgdma_bbb_inst_wr_mem_readdata;                                       // mm_interconnect_5:msgdma_bbb_inst_wr_mem_readdata -> msgdma_bbb_inst_wr:mem_readdata
	wire          msgdma_bbb_inst_wr_mem_debugaccess;                                    // msgdma_bbb_inst_wr:mem_debugaccess -> mm_interconnect_5:msgdma_bbb_inst_wr_mem_debugaccess
	wire   [47:0] msgdma_bbb_inst_wr_mem_address;                                        // msgdma_bbb_inst_wr:mem_address -> mm_interconnect_5:msgdma_bbb_inst_wr_mem_address
	wire          msgdma_bbb_inst_wr_mem_read;                                           // msgdma_bbb_inst_wr:mem_read -> mm_interconnect_5:msgdma_bbb_inst_wr_mem_read
	wire   [63:0] msgdma_bbb_inst_wr_mem_byteenable;                                     // msgdma_bbb_inst_wr:mem_byteenable -> mm_interconnect_5:msgdma_bbb_inst_wr_mem_byteenable
	wire          msgdma_bbb_inst_wr_mem_readdatavalid;                                  // mm_interconnect_5:msgdma_bbb_inst_wr_mem_readdatavalid -> msgdma_bbb_inst_wr:mem_readdatavalid
	wire  [511:0] msgdma_bbb_inst_wr_mem_writedata;                                      // msgdma_bbb_inst_wr:mem_writedata -> mm_interconnect_5:msgdma_bbb_inst_wr_mem_writedata
	wire          msgdma_bbb_inst_wr_mem_write;                                          // msgdma_bbb_inst_wr:mem_write -> mm_interconnect_5:msgdma_bbb_inst_wr_mem_write
	wire    [2:0] msgdma_bbb_inst_wr_mem_burstcount;                                     // msgdma_bbb_inst_wr:mem_burstcount -> mm_interconnect_5:msgdma_bbb_inst_wr_mem_burstcount
	wire  [511:0] mm_interconnect_5_ddr_board_acl_memory_bank_divider_0_s_readdata;      // ddr_board_acl_memory_bank_divider_0:s_readdata -> mm_interconnect_5:ddr_board_acl_memory_bank_divider_0_s_readdata
	wire          mm_interconnect_5_ddr_board_acl_memory_bank_divider_0_s_waitrequest;   // ddr_board_acl_memory_bank_divider_0:s_waitrequest -> mm_interconnect_5:ddr_board_acl_memory_bank_divider_0_s_waitrequest
	wire   [26:0] mm_interconnect_5_ddr_board_acl_memory_bank_divider_0_s_address;       // mm_interconnect_5:ddr_board_acl_memory_bank_divider_0_s_address -> ddr_board_acl_memory_bank_divider_0:s_address
	wire          mm_interconnect_5_ddr_board_acl_memory_bank_divider_0_s_read;          // mm_interconnect_5:ddr_board_acl_memory_bank_divider_0_s_read -> ddr_board_acl_memory_bank_divider_0:s_read
	wire   [63:0] mm_interconnect_5_ddr_board_acl_memory_bank_divider_0_s_byteenable;    // mm_interconnect_5:ddr_board_acl_memory_bank_divider_0_s_byteenable -> ddr_board_acl_memory_bank_divider_0:s_byteenable
	wire          mm_interconnect_5_ddr_board_acl_memory_bank_divider_0_s_readdatavalid; // ddr_board_acl_memory_bank_divider_0:s_readdatavalid -> mm_interconnect_5:ddr_board_acl_memory_bank_divider_0_s_readdatavalid
	wire          mm_interconnect_5_ddr_board_acl_memory_bank_divider_0_s_write;         // mm_interconnect_5:ddr_board_acl_memory_bank_divider_0_s_write -> ddr_board_acl_memory_bank_divider_0:s_write
	wire  [511:0] mm_interconnect_5_ddr_board_acl_memory_bank_divider_0_s_writedata;     // mm_interconnect_5:ddr_board_acl_memory_bank_divider_0_s_writedata -> ddr_board_acl_memory_bank_divider_0:s_writedata
	wire    [4:0] mm_interconnect_5_ddr_board_acl_memory_bank_divider_0_s_burstcount;    // mm_interconnect_5:ddr_board_acl_memory_bank_divider_0_s_burstcount -> ddr_board_acl_memory_bank_divider_0:s_burstcount
	wire          ddr4a_pipe_1_burst16_m0_waitrequest;                                   // mm_interconnect_6:ddr4a_pipe_1_burst16_m0_waitrequest -> ddr4a_pipe_1_burst16:m0_waitrequest
	wire  [511:0] ddr4a_pipe_1_burst16_m0_readdata;                                      // mm_interconnect_6:ddr4a_pipe_1_burst16_m0_readdata -> ddr4a_pipe_1_burst16:m0_readdata
	wire          ddr4a_pipe_1_burst16_m0_debugaccess;                                   // ddr4a_pipe_1_burst16:m0_debugaccess -> mm_interconnect_6:ddr4a_pipe_1_burst16_m0_debugaccess
	wire   [31:0] ddr4a_pipe_1_burst16_m0_address;                                       // ddr4a_pipe_1_burst16:m0_address -> mm_interconnect_6:ddr4a_pipe_1_burst16_m0_address
	wire          ddr4a_pipe_1_burst16_m0_read;                                          // ddr4a_pipe_1_burst16:m0_read -> mm_interconnect_6:ddr4a_pipe_1_burst16_m0_read
	wire   [63:0] ddr4a_pipe_1_burst16_m0_byteenable;                                    // ddr4a_pipe_1_burst16:m0_byteenable -> mm_interconnect_6:ddr4a_pipe_1_burst16_m0_byteenable
	wire          ddr4a_pipe_1_burst16_m0_readdatavalid;                                 // mm_interconnect_6:ddr4a_pipe_1_burst16_m0_readdatavalid -> ddr4a_pipe_1_burst16:m0_readdatavalid
	wire  [511:0] ddr4a_pipe_1_burst16_m0_writedata;                                     // ddr4a_pipe_1_burst16:m0_writedata -> mm_interconnect_6:ddr4a_pipe_1_burst16_m0_writedata
	wire          ddr4a_pipe_1_burst16_m0_write;                                         // ddr4a_pipe_1_burst16:m0_write -> mm_interconnect_6:ddr4a_pipe_1_burst16_m0_write
	wire    [4:0] ddr4a_pipe_1_burst16_m0_burstcount;                                    // ddr4a_pipe_1_burst16:m0_burstcount -> mm_interconnect_6:ddr4a_pipe_1_burst16_m0_burstcount
	wire  [511:0] mm_interconnect_6_ddr4a_pipe_0_s0_readdata;                            // ddr4a_pipe_0:s0_readdata -> mm_interconnect_6:ddr4a_pipe_0_s0_readdata
	wire          mm_interconnect_6_ddr4a_pipe_0_s0_waitrequest;                         // ddr4a_pipe_0:s0_waitrequest -> mm_interconnect_6:ddr4a_pipe_0_s0_waitrequest
	wire          mm_interconnect_6_ddr4a_pipe_0_s0_debugaccess;                         // mm_interconnect_6:ddr4a_pipe_0_s0_debugaccess -> ddr4a_pipe_0:s0_debugaccess
	wire   [31:0] mm_interconnect_6_ddr4a_pipe_0_s0_address;                             // mm_interconnect_6:ddr4a_pipe_0_s0_address -> ddr4a_pipe_0:s0_address
	wire          mm_interconnect_6_ddr4a_pipe_0_s0_read;                                // mm_interconnect_6:ddr4a_pipe_0_s0_read -> ddr4a_pipe_0:s0_read
	wire   [63:0] mm_interconnect_6_ddr4a_pipe_0_s0_byteenable;                          // mm_interconnect_6:ddr4a_pipe_0_s0_byteenable -> ddr4a_pipe_0:s0_byteenable
	wire          mm_interconnect_6_ddr4a_pipe_0_s0_readdatavalid;                       // ddr4a_pipe_0:s0_readdatavalid -> mm_interconnect_6:ddr4a_pipe_0_s0_readdatavalid
	wire          mm_interconnect_6_ddr4a_pipe_0_s0_write;                               // mm_interconnect_6:ddr4a_pipe_0_s0_write -> ddr4a_pipe_0:s0_write
	wire  [511:0] mm_interconnect_6_ddr4a_pipe_0_s0_writedata;                           // mm_interconnect_6:ddr4a_pipe_0_s0_writedata -> ddr4a_pipe_0:s0_writedata
	wire    [6:0] mm_interconnect_6_ddr4a_pipe_0_s0_burstcount;                          // mm_interconnect_6:ddr4a_pipe_0_s0_burstcount -> ddr4a_pipe_0:s0_burstcount
	wire          ddr4a_cross_to_kernel_m0_waitrequest;                                  // mm_interconnect_7:ddr4a_cross_to_kernel_m0_waitrequest -> ddr4a_cross_to_kernel:m0_waitrequest
	wire  [511:0] ddr4a_cross_to_kernel_m0_readdata;                                     // mm_interconnect_7:ddr4a_cross_to_kernel_m0_readdata -> ddr4a_cross_to_kernel:m0_readdata
	wire          ddr4a_cross_to_kernel_m0_debugaccess;                                  // ddr4a_cross_to_kernel:m0_debugaccess -> mm_interconnect_7:ddr4a_cross_to_kernel_m0_debugaccess
	wire   [31:0] ddr4a_cross_to_kernel_m0_address;                                      // ddr4a_cross_to_kernel:m0_address -> mm_interconnect_7:ddr4a_cross_to_kernel_m0_address
	wire          ddr4a_cross_to_kernel_m0_read;                                         // ddr4a_cross_to_kernel:m0_read -> mm_interconnect_7:ddr4a_cross_to_kernel_m0_read
	wire   [63:0] ddr4a_cross_to_kernel_m0_byteenable;                                   // ddr4a_cross_to_kernel:m0_byteenable -> mm_interconnect_7:ddr4a_cross_to_kernel_m0_byteenable
	wire          ddr4a_cross_to_kernel_m0_readdatavalid;                                // mm_interconnect_7:ddr4a_cross_to_kernel_m0_readdatavalid -> ddr4a_cross_to_kernel:m0_readdatavalid
	wire  [511:0] ddr4a_cross_to_kernel_m0_writedata;                                    // ddr4a_cross_to_kernel:m0_writedata -> mm_interconnect_7:ddr4a_cross_to_kernel_m0_writedata
	wire          ddr4a_cross_to_kernel_m0_write;                                        // ddr4a_cross_to_kernel:m0_write -> mm_interconnect_7:ddr4a_cross_to_kernel_m0_write
	wire    [4:0] ddr4a_cross_to_kernel_m0_burstcount;                                   // ddr4a_cross_to_kernel:m0_burstcount -> mm_interconnect_7:ddr4a_cross_to_kernel_m0_burstcount
	wire          ddr4a_cross_to_host_m0_waitrequest;                                    // mm_interconnect_7:ddr4a_cross_to_host_m0_waitrequest -> ddr4a_cross_to_host:m0_waitrequest
	wire  [511:0] ddr4a_cross_to_host_m0_readdata;                                       // mm_interconnect_7:ddr4a_cross_to_host_m0_readdata -> ddr4a_cross_to_host:m0_readdata
	wire          ddr4a_cross_to_host_m0_debugaccess;                                    // ddr4a_cross_to_host:m0_debugaccess -> mm_interconnect_7:ddr4a_cross_to_host_m0_debugaccess
	wire   [31:0] ddr4a_cross_to_host_m0_address;                                        // ddr4a_cross_to_host:m0_address -> mm_interconnect_7:ddr4a_cross_to_host_m0_address
	wire          ddr4a_cross_to_host_m0_read;                                           // ddr4a_cross_to_host:m0_read -> mm_interconnect_7:ddr4a_cross_to_host_m0_read
	wire   [63:0] ddr4a_cross_to_host_m0_byteenable;                                     // ddr4a_cross_to_host:m0_byteenable -> mm_interconnect_7:ddr4a_cross_to_host_m0_byteenable
	wire          ddr4a_cross_to_host_m0_readdatavalid;                                  // mm_interconnect_7:ddr4a_cross_to_host_m0_readdatavalid -> ddr4a_cross_to_host:m0_readdatavalid
	wire  [511:0] ddr4a_cross_to_host_m0_writedata;                                      // ddr4a_cross_to_host:m0_writedata -> mm_interconnect_7:ddr4a_cross_to_host_m0_writedata
	wire          ddr4a_cross_to_host_m0_write;                                          // ddr4a_cross_to_host:m0_write -> mm_interconnect_7:ddr4a_cross_to_host_m0_write
	wire    [4:0] ddr4a_cross_to_host_m0_burstcount;                                     // ddr4a_cross_to_host:m0_burstcount -> mm_interconnect_7:ddr4a_cross_to_host_m0_burstcount
	wire  [511:0] mm_interconnect_7_ddr4a_pipe_1_burst16_s0_readdata;                    // ddr4a_pipe_1_burst16:s0_readdata -> mm_interconnect_7:ddr4a_pipe_1_burst16_s0_readdata
	wire          mm_interconnect_7_ddr4a_pipe_1_burst16_s0_waitrequest;                 // ddr4a_pipe_1_burst16:s0_waitrequest -> mm_interconnect_7:ddr4a_pipe_1_burst16_s0_waitrequest
	wire          mm_interconnect_7_ddr4a_pipe_1_burst16_s0_debugaccess;                 // mm_interconnect_7:ddr4a_pipe_1_burst16_s0_debugaccess -> ddr4a_pipe_1_burst16:s0_debugaccess
	wire   [31:0] mm_interconnect_7_ddr4a_pipe_1_burst16_s0_address;                     // mm_interconnect_7:ddr4a_pipe_1_burst16_s0_address -> ddr4a_pipe_1_burst16:s0_address
	wire          mm_interconnect_7_ddr4a_pipe_1_burst16_s0_read;                        // mm_interconnect_7:ddr4a_pipe_1_burst16_s0_read -> ddr4a_pipe_1_burst16:s0_read
	wire   [63:0] mm_interconnect_7_ddr4a_pipe_1_burst16_s0_byteenable;                  // mm_interconnect_7:ddr4a_pipe_1_burst16_s0_byteenable -> ddr4a_pipe_1_burst16:s0_byteenable
	wire          mm_interconnect_7_ddr4a_pipe_1_burst16_s0_readdatavalid;               // ddr4a_pipe_1_burst16:s0_readdatavalid -> mm_interconnect_7:ddr4a_pipe_1_burst16_s0_readdatavalid
	wire          mm_interconnect_7_ddr4a_pipe_1_burst16_s0_write;                       // mm_interconnect_7:ddr4a_pipe_1_burst16_s0_write -> ddr4a_pipe_1_burst16:s0_write
	wire  [511:0] mm_interconnect_7_ddr4a_pipe_1_burst16_s0_writedata;                   // mm_interconnect_7:ddr4a_pipe_1_burst16_s0_writedata -> ddr4a_pipe_1_burst16:s0_writedata
	wire    [4:0] mm_interconnect_7_ddr4a_pipe_1_burst16_s0_burstcount;                  // mm_interconnect_7:ddr4a_pipe_1_burst16_s0_burstcount -> ddr4a_pipe_1_burst16:s0_burstcount
	wire          ddr4b_pipe_1_burst16_m0_waitrequest;                                   // mm_interconnect_8:ddr4b_pipe_1_burst16_m0_waitrequest -> ddr4b_pipe_1_burst16:m0_waitrequest
	wire  [511:0] ddr4b_pipe_1_burst16_m0_readdata;                                      // mm_interconnect_8:ddr4b_pipe_1_burst16_m0_readdata -> ddr4b_pipe_1_burst16:m0_readdata
	wire          ddr4b_pipe_1_burst16_m0_debugaccess;                                   // ddr4b_pipe_1_burst16:m0_debugaccess -> mm_interconnect_8:ddr4b_pipe_1_burst16_m0_debugaccess
	wire   [31:0] ddr4b_pipe_1_burst16_m0_address;                                       // ddr4b_pipe_1_burst16:m0_address -> mm_interconnect_8:ddr4b_pipe_1_burst16_m0_address
	wire          ddr4b_pipe_1_burst16_m0_read;                                          // ddr4b_pipe_1_burst16:m0_read -> mm_interconnect_8:ddr4b_pipe_1_burst16_m0_read
	wire   [63:0] ddr4b_pipe_1_burst16_m0_byteenable;                                    // ddr4b_pipe_1_burst16:m0_byteenable -> mm_interconnect_8:ddr4b_pipe_1_burst16_m0_byteenable
	wire          ddr4b_pipe_1_burst16_m0_readdatavalid;                                 // mm_interconnect_8:ddr4b_pipe_1_burst16_m0_readdatavalid -> ddr4b_pipe_1_burst16:m0_readdatavalid
	wire  [511:0] ddr4b_pipe_1_burst16_m0_writedata;                                     // ddr4b_pipe_1_burst16:m0_writedata -> mm_interconnect_8:ddr4b_pipe_1_burst16_m0_writedata
	wire          ddr4b_pipe_1_burst16_m0_write;                                         // ddr4b_pipe_1_burst16:m0_write -> mm_interconnect_8:ddr4b_pipe_1_burst16_m0_write
	wire    [4:0] ddr4b_pipe_1_burst16_m0_burstcount;                                    // ddr4b_pipe_1_burst16:m0_burstcount -> mm_interconnect_8:ddr4b_pipe_1_burst16_m0_burstcount
	wire  [511:0] mm_interconnect_8_ddr4b_pipe_0_s0_readdata;                            // ddr4b_pipe_0:s0_readdata -> mm_interconnect_8:ddr4b_pipe_0_s0_readdata
	wire          mm_interconnect_8_ddr4b_pipe_0_s0_waitrequest;                         // ddr4b_pipe_0:s0_waitrequest -> mm_interconnect_8:ddr4b_pipe_0_s0_waitrequest
	wire          mm_interconnect_8_ddr4b_pipe_0_s0_debugaccess;                         // mm_interconnect_8:ddr4b_pipe_0_s0_debugaccess -> ddr4b_pipe_0:s0_debugaccess
	wire   [31:0] mm_interconnect_8_ddr4b_pipe_0_s0_address;                             // mm_interconnect_8:ddr4b_pipe_0_s0_address -> ddr4b_pipe_0:s0_address
	wire          mm_interconnect_8_ddr4b_pipe_0_s0_read;                                // mm_interconnect_8:ddr4b_pipe_0_s0_read -> ddr4b_pipe_0:s0_read
	wire   [63:0] mm_interconnect_8_ddr4b_pipe_0_s0_byteenable;                          // mm_interconnect_8:ddr4b_pipe_0_s0_byteenable -> ddr4b_pipe_0:s0_byteenable
	wire          mm_interconnect_8_ddr4b_pipe_0_s0_readdatavalid;                       // ddr4b_pipe_0:s0_readdatavalid -> mm_interconnect_8:ddr4b_pipe_0_s0_readdatavalid
	wire          mm_interconnect_8_ddr4b_pipe_0_s0_write;                               // mm_interconnect_8:ddr4b_pipe_0_s0_write -> ddr4b_pipe_0:s0_write
	wire  [511:0] mm_interconnect_8_ddr4b_pipe_0_s0_writedata;                           // mm_interconnect_8:ddr4b_pipe_0_s0_writedata -> ddr4b_pipe_0:s0_writedata
	wire    [6:0] mm_interconnect_8_ddr4b_pipe_0_s0_burstcount;                          // mm_interconnect_8:ddr4b_pipe_0_s0_burstcount -> ddr4b_pipe_0:s0_burstcount
	wire          ddr4b_cross_to_kernel_m0_waitrequest;                                  // mm_interconnect_9:ddr4b_cross_to_kernel_m0_waitrequest -> ddr4b_cross_to_kernel:m0_waitrequest
	wire  [511:0] ddr4b_cross_to_kernel_m0_readdata;                                     // mm_interconnect_9:ddr4b_cross_to_kernel_m0_readdata -> ddr4b_cross_to_kernel:m0_readdata
	wire          ddr4b_cross_to_kernel_m0_debugaccess;                                  // ddr4b_cross_to_kernel:m0_debugaccess -> mm_interconnect_9:ddr4b_cross_to_kernel_m0_debugaccess
	wire   [31:0] ddr4b_cross_to_kernel_m0_address;                                      // ddr4b_cross_to_kernel:m0_address -> mm_interconnect_9:ddr4b_cross_to_kernel_m0_address
	wire          ddr4b_cross_to_kernel_m0_read;                                         // ddr4b_cross_to_kernel:m0_read -> mm_interconnect_9:ddr4b_cross_to_kernel_m0_read
	wire   [63:0] ddr4b_cross_to_kernel_m0_byteenable;                                   // ddr4b_cross_to_kernel:m0_byteenable -> mm_interconnect_9:ddr4b_cross_to_kernel_m0_byteenable
	wire          ddr4b_cross_to_kernel_m0_readdatavalid;                                // mm_interconnect_9:ddr4b_cross_to_kernel_m0_readdatavalid -> ddr4b_cross_to_kernel:m0_readdatavalid
	wire  [511:0] ddr4b_cross_to_kernel_m0_writedata;                                    // ddr4b_cross_to_kernel:m0_writedata -> mm_interconnect_9:ddr4b_cross_to_kernel_m0_writedata
	wire          ddr4b_cross_to_kernel_m0_write;                                        // ddr4b_cross_to_kernel:m0_write -> mm_interconnect_9:ddr4b_cross_to_kernel_m0_write
	wire    [4:0] ddr4b_cross_to_kernel_m0_burstcount;                                   // ddr4b_cross_to_kernel:m0_burstcount -> mm_interconnect_9:ddr4b_cross_to_kernel_m0_burstcount
	wire          ddr4b_cross_to_host_m0_waitrequest;                                    // mm_interconnect_9:ddr4b_cross_to_host_m0_waitrequest -> ddr4b_cross_to_host:m0_waitrequest
	wire  [511:0] ddr4b_cross_to_host_m0_readdata;                                       // mm_interconnect_9:ddr4b_cross_to_host_m0_readdata -> ddr4b_cross_to_host:m0_readdata
	wire          ddr4b_cross_to_host_m0_debugaccess;                                    // ddr4b_cross_to_host:m0_debugaccess -> mm_interconnect_9:ddr4b_cross_to_host_m0_debugaccess
	wire   [31:0] ddr4b_cross_to_host_m0_address;                                        // ddr4b_cross_to_host:m0_address -> mm_interconnect_9:ddr4b_cross_to_host_m0_address
	wire          ddr4b_cross_to_host_m0_read;                                           // ddr4b_cross_to_host:m0_read -> mm_interconnect_9:ddr4b_cross_to_host_m0_read
	wire   [63:0] ddr4b_cross_to_host_m0_byteenable;                                     // ddr4b_cross_to_host:m0_byteenable -> mm_interconnect_9:ddr4b_cross_to_host_m0_byteenable
	wire          ddr4b_cross_to_host_m0_readdatavalid;                                  // mm_interconnect_9:ddr4b_cross_to_host_m0_readdatavalid -> ddr4b_cross_to_host:m0_readdatavalid
	wire  [511:0] ddr4b_cross_to_host_m0_writedata;                                      // ddr4b_cross_to_host:m0_writedata -> mm_interconnect_9:ddr4b_cross_to_host_m0_writedata
	wire          ddr4b_cross_to_host_m0_write;                                          // ddr4b_cross_to_host:m0_write -> mm_interconnect_9:ddr4b_cross_to_host_m0_write
	wire    [4:0] ddr4b_cross_to_host_m0_burstcount;                                     // ddr4b_cross_to_host:m0_burstcount -> mm_interconnect_9:ddr4b_cross_to_host_m0_burstcount
	wire  [511:0] mm_interconnect_9_ddr4b_pipe_1_burst16_s0_readdata;                    // ddr4b_pipe_1_burst16:s0_readdata -> mm_interconnect_9:ddr4b_pipe_1_burst16_s0_readdata
	wire          mm_interconnect_9_ddr4b_pipe_1_burst16_s0_waitrequest;                 // ddr4b_pipe_1_burst16:s0_waitrequest -> mm_interconnect_9:ddr4b_pipe_1_burst16_s0_waitrequest
	wire          mm_interconnect_9_ddr4b_pipe_1_burst16_s0_debugaccess;                 // mm_interconnect_9:ddr4b_pipe_1_burst16_s0_debugaccess -> ddr4b_pipe_1_burst16:s0_debugaccess
	wire   [31:0] mm_interconnect_9_ddr4b_pipe_1_burst16_s0_address;                     // mm_interconnect_9:ddr4b_pipe_1_burst16_s0_address -> ddr4b_pipe_1_burst16:s0_address
	wire          mm_interconnect_9_ddr4b_pipe_1_burst16_s0_read;                        // mm_interconnect_9:ddr4b_pipe_1_burst16_s0_read -> ddr4b_pipe_1_burst16:s0_read
	wire   [63:0] mm_interconnect_9_ddr4b_pipe_1_burst16_s0_byteenable;                  // mm_interconnect_9:ddr4b_pipe_1_burst16_s0_byteenable -> ddr4b_pipe_1_burst16:s0_byteenable
	wire          mm_interconnect_9_ddr4b_pipe_1_burst16_s0_readdatavalid;               // ddr4b_pipe_1_burst16:s0_readdatavalid -> mm_interconnect_9:ddr4b_pipe_1_burst16_s0_readdatavalid
	wire          mm_interconnect_9_ddr4b_pipe_1_burst16_s0_write;                       // mm_interconnect_9:ddr4b_pipe_1_burst16_s0_write -> ddr4b_pipe_1_burst16:s0_write
	wire  [511:0] mm_interconnect_9_ddr4b_pipe_1_burst16_s0_writedata;                   // mm_interconnect_9:ddr4b_pipe_1_burst16_s0_writedata -> ddr4b_pipe_1_burst16:s0_writedata
	wire    [4:0] mm_interconnect_9_ddr4b_pipe_1_burst16_s0_burstcount;                  // mm_interconnect_9:ddr4b_pipe_1_burst16_s0_burstcount -> ddr4b_pipe_1_burst16:s0_burstcount
	wire          rst_controller_reset_out_reset;                                        // rst_controller:reset_out -> [ddr4a_cross_to_host:m0_reset, ddr4a_cross_to_kernel:m0_reset, ddr4a_pipe_0:reset, ddr4a_pipe_1_burst16:reset, mm_interconnect_6:ddr4a_pipe_1_burst16_reset_reset_bridge_in_reset_reset, mm_interconnect_7:ddr4a_cross_to_kernel_m0_reset_reset_bridge_in_reset_reset]
	wire          rst_controller_001_reset_out_reset;                                    // rst_controller_001:reset_out -> [ddr4a_cross_to_kernel:s0_reset, ddr4b_cross_to_kernel:s0_reset]
	wire          rst_controller_002_reset_out_reset;                                    // rst_controller_002:reset_out -> [ddr4b_cross_to_host:m0_reset, ddr4b_cross_to_kernel:m0_reset, ddr4b_pipe_0:reset, ddr4b_pipe_1_burst16:reset, mm_interconnect_8:ddr4b_pipe_1_burst16_reset_reset_bridge_in_reset_reset, mm_interconnect_9:ddr4b_cross_to_kernel_m0_reset_reset_bridge_in_reset_reset]

	ddr_board_mm_clock_crossing_bridge_1 ddr4a_cross_to_host (
		.m0_waitrequest   (ddr4a_cross_to_host_m0_waitrequest),                     //   input,    width = 1,       m0.waitrequest
		.m0_readdata      (ddr4a_cross_to_host_m0_readdata),                        //   input,  width = 512,         .readdata
		.m0_readdatavalid (ddr4a_cross_to_host_m0_readdatavalid),                   //   input,    width = 1,         .readdatavalid
		.m0_burstcount    (ddr4a_cross_to_host_m0_burstcount),                      //  output,    width = 5,         .burstcount
		.m0_writedata     (ddr4a_cross_to_host_m0_writedata),                       //  output,  width = 512,         .writedata
		.m0_address       (ddr4a_cross_to_host_m0_address),                         //  output,   width = 32,         .address
		.m0_write         (ddr4a_cross_to_host_m0_write),                           //  output,    width = 1,         .write
		.m0_read          (ddr4a_cross_to_host_m0_read),                            //  output,    width = 1,         .read
		.m0_byteenable    (ddr4a_cross_to_host_m0_byteenable),                      //  output,   width = 64,         .byteenable
		.m0_debugaccess   (ddr4a_cross_to_host_m0_debugaccess),                     //  output,    width = 1,         .debugaccess
		.m0_clk           (ddr_clk_a_out_clk_clk),                                  //   input,    width = 1,   m0_clk.clk
		.m0_reset         (rst_controller_reset_out_reset),                         //   input,    width = 1, m0_reset.reset
		.s0_waitrequest   (mm_interconnect_0_ddr4a_cross_to_host_s0_waitrequest),   //  output,    width = 1,       s0.waitrequest
		.s0_readdata      (mm_interconnect_0_ddr4a_cross_to_host_s0_readdata),      //  output,  width = 512,         .readdata
		.s0_readdatavalid (mm_interconnect_0_ddr4a_cross_to_host_s0_readdatavalid), //  output,    width = 1,         .readdatavalid
		.s0_burstcount    (mm_interconnect_0_ddr4a_cross_to_host_s0_burstcount),    //   input,    width = 5,         .burstcount
		.s0_writedata     (mm_interconnect_0_ddr4a_cross_to_host_s0_writedata),     //   input,  width = 512,         .writedata
		.s0_address       (mm_interconnect_0_ddr4a_cross_to_host_s0_address),       //   input,   width = 32,         .address
		.s0_write         (mm_interconnect_0_ddr4a_cross_to_host_s0_write),         //   input,    width = 1,         .write
		.s0_read          (mm_interconnect_0_ddr4a_cross_to_host_s0_read),          //   input,    width = 1,         .read
		.s0_byteenable    (mm_interconnect_0_ddr4a_cross_to_host_s0_byteenable),    //   input,   width = 64,         .byteenable
		.s0_debugaccess   (mm_interconnect_0_ddr4a_cross_to_host_s0_debugaccess),   //   input,    width = 1,         .debugaccess
		.s0_clk           (host_clk_out_clk_clk),                                   //   input,    width = 1,   s0_clk.clk
		.s0_reset         (global_reset_out_reset_reset)                            //   input,    width = 1, s0_reset.reset
	);

	ddr_board_mm_clock_crossing_bridge_0 ddr4a_cross_to_kernel (
		.m0_waitrequest   (ddr4a_cross_to_kernel_m0_waitrequest),   //   input,    width = 1,       m0.waitrequest
		.m0_readdata      (ddr4a_cross_to_kernel_m0_readdata),      //   input,  width = 512,         .readdata
		.m0_readdatavalid (ddr4a_cross_to_kernel_m0_readdatavalid), //   input,    width = 1,         .readdatavalid
		.m0_burstcount    (ddr4a_cross_to_kernel_m0_burstcount),    //  output,    width = 5,         .burstcount
		.m0_writedata     (ddr4a_cross_to_kernel_m0_writedata),     //  output,  width = 512,         .writedata
		.m0_address       (ddr4a_cross_to_kernel_m0_address),       //  output,   width = 32,         .address
		.m0_write         (ddr4a_cross_to_kernel_m0_write),         //  output,    width = 1,         .write
		.m0_read          (ddr4a_cross_to_kernel_m0_read),          //  output,    width = 1,         .read
		.m0_byteenable    (ddr4a_cross_to_kernel_m0_byteenable),    //  output,   width = 64,         .byteenable
		.m0_debugaccess   (ddr4a_cross_to_kernel_m0_debugaccess),   //  output,    width = 1,         .debugaccess
		.m0_clk           (ddr_clk_a_out_clk_clk),                  //   input,    width = 1,   m0_clk.clk
		.m0_reset         (rst_controller_reset_out_reset),         //   input,    width = 1, m0_reset.reset
		.s0_waitrequest   (kernel_ddr4a_waitrequest),               //  output,    width = 1,       s0.waitrequest
		.s0_readdata      (kernel_ddr4a_readdata),                  //  output,  width = 512,         .readdata
		.s0_readdatavalid (kernel_ddr4a_readdatavalid),             //  output,    width = 1,         .readdatavalid
		.s0_burstcount    (kernel_ddr4a_burstcount),                //   input,    width = 5,         .burstcount
		.s0_writedata     (kernel_ddr4a_writedata),                 //   input,  width = 512,         .writedata
		.s0_address       (kernel_ddr4a_address),                   //   input,   width = 32,         .address
		.s0_write         (kernel_ddr4a_write),                     //   input,    width = 1,         .write
		.s0_read          (kernel_ddr4a_read),                      //   input,    width = 1,         .read
		.s0_byteenable    (kernel_ddr4a_byteenable),                //   input,   width = 64,         .byteenable
		.s0_debugaccess   (kernel_ddr4a_debugaccess),               //   input,    width = 1,         .debugaccess
		.s0_clk           (kernel_clk_out_clk_clk),                 //   input,    width = 1,   s0_clk.clk
		.s0_reset         (rst_controller_001_reset_out_reset)      //   input,    width = 1, s0_reset.reset
	);

	ddr_board_mm_bridge_2 ddr4a_pipe_0 (
		.clk              (ddr_clk_a_out_clk_clk),                           //   input,    width = 1,   clk.clk
		.m0_waitrequest   (emif_ddr4a_waitrequest),                          //   input,    width = 1,    m0.waitrequest
		.m0_readdata      (emif_ddr4a_readdata),                             //   input,  width = 512,      .readdata
		.m0_readdatavalid (emif_ddr4a_readdatavalid),                        //   input,    width = 1,      .readdatavalid
		.m0_burstcount    (emif_ddr4a_burstcount),                           //  output,    width = 7,      .burstcount
		.m0_writedata     (emif_ddr4a_writedata),                            //  output,  width = 512,      .writedata
		.m0_address       (emif_ddr4a_address),                              //  output,   width = 32,      .address
		.m0_write         (emif_ddr4a_write),                                //  output,    width = 1,      .write
		.m0_read          (emif_ddr4a_read),                                 //  output,    width = 1,      .read
		.m0_byteenable    (emif_ddr4a_byteenable),                           //  output,   width = 64,      .byteenable
		.m0_debugaccess   (emif_ddr4a_debugaccess),                          //  output,    width = 1,      .debugaccess
		.reset            (rst_controller_reset_out_reset),                  //   input,    width = 1, reset.reset
		.s0_waitrequest   (mm_interconnect_6_ddr4a_pipe_0_s0_waitrequest),   //  output,    width = 1,    s0.waitrequest
		.s0_readdata      (mm_interconnect_6_ddr4a_pipe_0_s0_readdata),      //  output,  width = 512,      .readdata
		.s0_readdatavalid (mm_interconnect_6_ddr4a_pipe_0_s0_readdatavalid), //  output,    width = 1,      .readdatavalid
		.s0_burstcount    (mm_interconnect_6_ddr4a_pipe_0_s0_burstcount),    //   input,    width = 7,      .burstcount
		.s0_writedata     (mm_interconnect_6_ddr4a_pipe_0_s0_writedata),     //   input,  width = 512,      .writedata
		.s0_address       (mm_interconnect_6_ddr4a_pipe_0_s0_address),       //   input,   width = 32,      .address
		.s0_write         (mm_interconnect_6_ddr4a_pipe_0_s0_write),         //   input,    width = 1,      .write
		.s0_read          (mm_interconnect_6_ddr4a_pipe_0_s0_read),          //   input,    width = 1,      .read
		.s0_byteenable    (mm_interconnect_6_ddr4a_pipe_0_s0_byteenable),    //   input,   width = 64,      .byteenable
		.s0_debugaccess   (mm_interconnect_6_ddr4a_pipe_0_s0_debugaccess)    //   input,    width = 1,      .debugaccess
	);

	ddr_board_mm_bridge_3 ddr4a_pipe_1_burst16 (
		.clk              (ddr_clk_a_out_clk_clk),                                   //   input,    width = 1,   clk.clk
		.m0_waitrequest   (ddr4a_pipe_1_burst16_m0_waitrequest),                     //   input,    width = 1,    m0.waitrequest
		.m0_readdata      (ddr4a_pipe_1_burst16_m0_readdata),                        //   input,  width = 512,      .readdata
		.m0_readdatavalid (ddr4a_pipe_1_burst16_m0_readdatavalid),                   //   input,    width = 1,      .readdatavalid
		.m0_burstcount    (ddr4a_pipe_1_burst16_m0_burstcount),                      //  output,    width = 5,      .burstcount
		.m0_writedata     (ddr4a_pipe_1_burst16_m0_writedata),                       //  output,  width = 512,      .writedata
		.m0_address       (ddr4a_pipe_1_burst16_m0_address),                         //  output,   width = 32,      .address
		.m0_write         (ddr4a_pipe_1_burst16_m0_write),                           //  output,    width = 1,      .write
		.m0_read          (ddr4a_pipe_1_burst16_m0_read),                            //  output,    width = 1,      .read
		.m0_byteenable    (ddr4a_pipe_1_burst16_m0_byteenable),                      //  output,   width = 64,      .byteenable
		.m0_debugaccess   (ddr4a_pipe_1_burst16_m0_debugaccess),                     //  output,    width = 1,      .debugaccess
		.reset            (rst_controller_reset_out_reset),                          //   input,    width = 1, reset.reset
		.s0_waitrequest   (mm_interconnect_7_ddr4a_pipe_1_burst16_s0_waitrequest),   //  output,    width = 1,    s0.waitrequest
		.s0_readdata      (mm_interconnect_7_ddr4a_pipe_1_burst16_s0_readdata),      //  output,  width = 512,      .readdata
		.s0_readdatavalid (mm_interconnect_7_ddr4a_pipe_1_burst16_s0_readdatavalid), //  output,    width = 1,      .readdatavalid
		.s0_burstcount    (mm_interconnect_7_ddr4a_pipe_1_burst16_s0_burstcount),    //   input,    width = 5,      .burstcount
		.s0_writedata     (mm_interconnect_7_ddr4a_pipe_1_burst16_s0_writedata),     //   input,  width = 512,      .writedata
		.s0_address       (mm_interconnect_7_ddr4a_pipe_1_burst16_s0_address),       //   input,   width = 32,      .address
		.s0_write         (mm_interconnect_7_ddr4a_pipe_1_burst16_s0_write),         //   input,    width = 1,      .write
		.s0_read          (mm_interconnect_7_ddr4a_pipe_1_burst16_s0_read),          //   input,    width = 1,      .read
		.s0_byteenable    (mm_interconnect_7_ddr4a_pipe_1_burst16_s0_byteenable),    //   input,   width = 64,      .byteenable
		.s0_debugaccess   (mm_interconnect_7_ddr4a_pipe_1_burst16_s0_debugaccess)    //   input,    width = 1,      .debugaccess
	);

	ddr_board_mm_clock_crossing_bridge_4 ddr4b_cross_to_host (
		.m0_waitrequest   (ddr4b_cross_to_host_m0_waitrequest),                     //   input,    width = 1,       m0.waitrequest
		.m0_readdata      (ddr4b_cross_to_host_m0_readdata),                        //   input,  width = 512,         .readdata
		.m0_readdatavalid (ddr4b_cross_to_host_m0_readdatavalid),                   //   input,    width = 1,         .readdatavalid
		.m0_burstcount    (ddr4b_cross_to_host_m0_burstcount),                      //  output,    width = 5,         .burstcount
		.m0_writedata     (ddr4b_cross_to_host_m0_writedata),                       //  output,  width = 512,         .writedata
		.m0_address       (ddr4b_cross_to_host_m0_address),                         //  output,   width = 32,         .address
		.m0_write         (ddr4b_cross_to_host_m0_write),                           //  output,    width = 1,         .write
		.m0_read          (ddr4b_cross_to_host_m0_read),                            //  output,    width = 1,         .read
		.m0_byteenable    (ddr4b_cross_to_host_m0_byteenable),                      //  output,   width = 64,         .byteenable
		.m0_debugaccess   (ddr4b_cross_to_host_m0_debugaccess),                     //  output,    width = 1,         .debugaccess
		.m0_clk           (ddr_clk_b_out_clk_clk),                                  //   input,    width = 1,   m0_clk.clk
		.m0_reset         (rst_controller_002_reset_out_reset),                     //   input,    width = 1, m0_reset.reset
		.s0_waitrequest   (mm_interconnect_1_ddr4b_cross_to_host_s0_waitrequest),   //  output,    width = 1,       s0.waitrequest
		.s0_readdata      (mm_interconnect_1_ddr4b_cross_to_host_s0_readdata),      //  output,  width = 512,         .readdata
		.s0_readdatavalid (mm_interconnect_1_ddr4b_cross_to_host_s0_readdatavalid), //  output,    width = 1,         .readdatavalid
		.s0_burstcount    (mm_interconnect_1_ddr4b_cross_to_host_s0_burstcount),    //   input,    width = 5,         .burstcount
		.s0_writedata     (mm_interconnect_1_ddr4b_cross_to_host_s0_writedata),     //   input,  width = 512,         .writedata
		.s0_address       (mm_interconnect_1_ddr4b_cross_to_host_s0_address),       //   input,   width = 32,         .address
		.s0_write         (mm_interconnect_1_ddr4b_cross_to_host_s0_write),         //   input,    width = 1,         .write
		.s0_read          (mm_interconnect_1_ddr4b_cross_to_host_s0_read),          //   input,    width = 1,         .read
		.s0_byteenable    (mm_interconnect_1_ddr4b_cross_to_host_s0_byteenable),    //   input,   width = 64,         .byteenable
		.s0_debugaccess   (mm_interconnect_1_ddr4b_cross_to_host_s0_debugaccess),   //   input,    width = 1,         .debugaccess
		.s0_clk           (host_clk_out_clk_clk),                                   //   input,    width = 1,   s0_clk.clk
		.s0_reset         (global_reset_out_reset_reset)                            //   input,    width = 1, s0_reset.reset
	);

	ddr_board_mm_clock_crossing_bridge_2 ddr4b_cross_to_kernel (
		.m0_waitrequest   (ddr4b_cross_to_kernel_m0_waitrequest),   //   input,    width = 1,       m0.waitrequest
		.m0_readdata      (ddr4b_cross_to_kernel_m0_readdata),      //   input,  width = 512,         .readdata
		.m0_readdatavalid (ddr4b_cross_to_kernel_m0_readdatavalid), //   input,    width = 1,         .readdatavalid
		.m0_burstcount    (ddr4b_cross_to_kernel_m0_burstcount),    //  output,    width = 5,         .burstcount
		.m0_writedata     (ddr4b_cross_to_kernel_m0_writedata),     //  output,  width = 512,         .writedata
		.m0_address       (ddr4b_cross_to_kernel_m0_address),       //  output,   width = 32,         .address
		.m0_write         (ddr4b_cross_to_kernel_m0_write),         //  output,    width = 1,         .write
		.m0_read          (ddr4b_cross_to_kernel_m0_read),          //  output,    width = 1,         .read
		.m0_byteenable    (ddr4b_cross_to_kernel_m0_byteenable),    //  output,   width = 64,         .byteenable
		.m0_debugaccess   (ddr4b_cross_to_kernel_m0_debugaccess),   //  output,    width = 1,         .debugaccess
		.m0_clk           (ddr_clk_b_out_clk_clk),                  //   input,    width = 1,   m0_clk.clk
		.m0_reset         (rst_controller_002_reset_out_reset),     //   input,    width = 1, m0_reset.reset
		.s0_waitrequest   (kernel_ddr4b_waitrequest),               //  output,    width = 1,       s0.waitrequest
		.s0_readdata      (kernel_ddr4b_readdata),                  //  output,  width = 512,         .readdata
		.s0_readdatavalid (kernel_ddr4b_readdatavalid),             //  output,    width = 1,         .readdatavalid
		.s0_burstcount    (kernel_ddr4b_burstcount),                //   input,    width = 5,         .burstcount
		.s0_writedata     (kernel_ddr4b_writedata),                 //   input,  width = 512,         .writedata
		.s0_address       (kernel_ddr4b_address),                   //   input,   width = 32,         .address
		.s0_write         (kernel_ddr4b_write),                     //   input,    width = 1,         .write
		.s0_read          (kernel_ddr4b_read),                      //   input,    width = 1,         .read
		.s0_byteenable    (kernel_ddr4b_byteenable),                //   input,   width = 64,         .byteenable
		.s0_debugaccess   (kernel_ddr4b_debugaccess),               //   input,    width = 1,         .debugaccess
		.s0_clk           (kernel_clk_out_clk_clk),                 //   input,    width = 1,   s0_clk.clk
		.s0_reset         (rst_controller_001_reset_out_reset)      //   input,    width = 1, s0_reset.reset
	);

	ddr_board_mm_bridge_4 ddr4b_pipe_0 (
		.clk              (ddr_clk_b_out_clk_clk),                           //   input,    width = 1,   clk.clk
		.m0_waitrequest   (emif_ddr4b_waitrequest),                          //   input,    width = 1,    m0.waitrequest
		.m0_readdata      (emif_ddr4b_readdata),                             //   input,  width = 512,      .readdata
		.m0_readdatavalid (emif_ddr4b_readdatavalid),                        //   input,    width = 1,      .readdatavalid
		.m0_burstcount    (emif_ddr4b_burstcount),                           //  output,    width = 7,      .burstcount
		.m0_writedata     (emif_ddr4b_writedata),                            //  output,  width = 512,      .writedata
		.m0_address       (emif_ddr4b_address),                              //  output,   width = 32,      .address
		.m0_write         (emif_ddr4b_write),                                //  output,    width = 1,      .write
		.m0_read          (emif_ddr4b_read),                                 //  output,    width = 1,      .read
		.m0_byteenable    (emif_ddr4b_byteenable),                           //  output,   width = 64,      .byteenable
		.m0_debugaccess   (emif_ddr4b_debugaccess),                          //  output,    width = 1,      .debugaccess
		.reset            (rst_controller_002_reset_out_reset),              //   input,    width = 1, reset.reset
		.s0_waitrequest   (mm_interconnect_8_ddr4b_pipe_0_s0_waitrequest),   //  output,    width = 1,    s0.waitrequest
		.s0_readdata      (mm_interconnect_8_ddr4b_pipe_0_s0_readdata),      //  output,  width = 512,      .readdata
		.s0_readdatavalid (mm_interconnect_8_ddr4b_pipe_0_s0_readdatavalid), //  output,    width = 1,      .readdatavalid
		.s0_burstcount    (mm_interconnect_8_ddr4b_pipe_0_s0_burstcount),    //   input,    width = 7,      .burstcount
		.s0_writedata     (mm_interconnect_8_ddr4b_pipe_0_s0_writedata),     //   input,  width = 512,      .writedata
		.s0_address       (mm_interconnect_8_ddr4b_pipe_0_s0_address),       //   input,   width = 32,      .address
		.s0_write         (mm_interconnect_8_ddr4b_pipe_0_s0_write),         //   input,    width = 1,      .write
		.s0_read          (mm_interconnect_8_ddr4b_pipe_0_s0_read),          //   input,    width = 1,      .read
		.s0_byteenable    (mm_interconnect_8_ddr4b_pipe_0_s0_byteenable),    //   input,   width = 64,      .byteenable
		.s0_debugaccess   (mm_interconnect_8_ddr4b_pipe_0_s0_debugaccess)    //   input,    width = 1,      .debugaccess
	);

	ddr_board_mm_bridge_5 ddr4b_pipe_1_burst16 (
		.clk              (ddr_clk_b_out_clk_clk),                                   //   input,    width = 1,   clk.clk
		.m0_waitrequest   (ddr4b_pipe_1_burst16_m0_waitrequest),                     //   input,    width = 1,    m0.waitrequest
		.m0_readdata      (ddr4b_pipe_1_burst16_m0_readdata),                        //   input,  width = 512,      .readdata
		.m0_readdatavalid (ddr4b_pipe_1_burst16_m0_readdatavalid),                   //   input,    width = 1,      .readdatavalid
		.m0_burstcount    (ddr4b_pipe_1_burst16_m0_burstcount),                      //  output,    width = 5,      .burstcount
		.m0_writedata     (ddr4b_pipe_1_burst16_m0_writedata),                       //  output,  width = 512,      .writedata
		.m0_address       (ddr4b_pipe_1_burst16_m0_address),                         //  output,   width = 32,      .address
		.m0_write         (ddr4b_pipe_1_burst16_m0_write),                           //  output,    width = 1,      .write
		.m0_read          (ddr4b_pipe_1_burst16_m0_read),                            //  output,    width = 1,      .read
		.m0_byteenable    (ddr4b_pipe_1_burst16_m0_byteenable),                      //  output,   width = 64,      .byteenable
		.m0_debugaccess   (ddr4b_pipe_1_burst16_m0_debugaccess),                     //  output,    width = 1,      .debugaccess
		.reset            (rst_controller_002_reset_out_reset),                      //   input,    width = 1, reset.reset
		.s0_waitrequest   (mm_interconnect_9_ddr4b_pipe_1_burst16_s0_waitrequest),   //  output,    width = 1,    s0.waitrequest
		.s0_readdata      (mm_interconnect_9_ddr4b_pipe_1_burst16_s0_readdata),      //  output,  width = 512,      .readdata
		.s0_readdatavalid (mm_interconnect_9_ddr4b_pipe_1_burst16_s0_readdatavalid), //  output,    width = 1,      .readdatavalid
		.s0_burstcount    (mm_interconnect_9_ddr4b_pipe_1_burst16_s0_burstcount),    //   input,    width = 5,      .burstcount
		.s0_writedata     (mm_interconnect_9_ddr4b_pipe_1_burst16_s0_writedata),     //   input,  width = 512,      .writedata
		.s0_address       (mm_interconnect_9_ddr4b_pipe_1_burst16_s0_address),       //   input,   width = 32,      .address
		.s0_write         (mm_interconnect_9_ddr4b_pipe_1_burst16_s0_write),         //   input,    width = 1,      .write
		.s0_read          (mm_interconnect_9_ddr4b_pipe_1_burst16_s0_read),          //   input,    width = 1,      .read
		.s0_byteenable    (mm_interconnect_9_ddr4b_pipe_1_burst16_s0_byteenable),    //   input,   width = 64,      .byteenable
		.s0_debugaccess   (mm_interconnect_9_ddr4b_pipe_1_burst16_s0_debugaccess)    //   input,    width = 1,      .debugaccess
	);

	ddr_board_acl_memory_bank_divider_0 ddr_board_acl_memory_bank_divider_0 (
		.acl_bsp_memorg_host_mode (acl_bsp_memorg_host_mode),                                              //   input,    width = 2, acl_bsp_memorg_host.mode
		.acl_bsp_snoop_data       (acl_bsp_snoop_data),                                                    //  output,   width = 33,       acl_bsp_snoop.data
		.acl_bsp_snoop_valid      (acl_bsp_snoop_valid),                                                   //  output,    width = 1,                    .valid
		.acl_bsp_snoop_ready      (acl_bsp_snoop_ready),                                                   //   input,    width = 1,                    .ready
		.bank1_address            (ddr_board_acl_memory_bank_divider_0_bank1_address),                     //  output,   width = 32,               bank1.address
		.bank1_writedata          (ddr_board_acl_memory_bank_divider_0_bank1_writedata),                   //  output,  width = 512,                    .writedata
		.bank1_read               (ddr_board_acl_memory_bank_divider_0_bank1_read),                        //  output,    width = 1,                    .read
		.bank1_write              (ddr_board_acl_memory_bank_divider_0_bank1_write),                       //  output,    width = 1,                    .write
		.bank1_burstcount         (ddr_board_acl_memory_bank_divider_0_bank1_burstcount),                  //  output,    width = 5,                    .burstcount
		.bank1_byteenable         (ddr_board_acl_memory_bank_divider_0_bank1_byteenable),                  //  output,   width = 64,                    .byteenable
		.bank1_waitrequest        (ddr_board_acl_memory_bank_divider_0_bank1_waitrequest),                 //   input,    width = 1,                    .waitrequest
		.bank1_readdata           (ddr_board_acl_memory_bank_divider_0_bank1_readdata),                    //   input,  width = 512,                    .readdata
		.bank1_readdatavalid      (ddr_board_acl_memory_bank_divider_0_bank1_readdatavalid),               //   input,    width = 1,                    .readdatavalid
		.bank2_address            (ddr_board_acl_memory_bank_divider_0_bank2_address),                     //  output,   width = 32,               bank2.address
		.bank2_writedata          (ddr_board_acl_memory_bank_divider_0_bank2_writedata),                   //  output,  width = 512,                    .writedata
		.bank2_read               (ddr_board_acl_memory_bank_divider_0_bank2_read),                        //  output,    width = 1,                    .read
		.bank2_write              (ddr_board_acl_memory_bank_divider_0_bank2_write),                       //  output,    width = 1,                    .write
		.bank2_burstcount         (ddr_board_acl_memory_bank_divider_0_bank2_burstcount),                  //  output,    width = 5,                    .burstcount
		.bank2_byteenable         (ddr_board_acl_memory_bank_divider_0_bank2_byteenable),                  //  output,   width = 64,                    .byteenable
		.bank2_waitrequest        (ddr_board_acl_memory_bank_divider_0_bank2_waitrequest),                 //   input,    width = 1,                    .waitrequest
		.bank2_readdata           (ddr_board_acl_memory_bank_divider_0_bank2_readdata),                    //   input,  width = 512,                    .readdata
		.bank2_readdatavalid      (ddr_board_acl_memory_bank_divider_0_bank2_readdatavalid),               //   input,    width = 1,                    .readdatavalid
		.clk_clk                  (host_clk_out_clk_clk),                                                  //   input,    width = 1,                 clk.clk
		.kernel_clk_clk           (kernel_clk_out_clk_clk),                                                //   input,    width = 1,          kernel_clk.clk
		.kernel_reset_reset_n     (~kernel_reset_out_reset_reset),                                         //   input,    width = 1,        kernel_reset.reset_n
		.reset_reset_n            (~global_reset_out_reset_reset),                                         //   input,    width = 1,               reset.reset_n
		.s_writedata              (mm_interconnect_5_ddr_board_acl_memory_bank_divider_0_s_writedata),     //   input,  width = 512,                   s.writedata
		.s_read                   (mm_interconnect_5_ddr_board_acl_memory_bank_divider_0_s_read),          //   input,    width = 1,                    .read
		.s_write                  (mm_interconnect_5_ddr_board_acl_memory_bank_divider_0_s_write),         //   input,    width = 1,                    .write
		.s_burstcount             (mm_interconnect_5_ddr_board_acl_memory_bank_divider_0_s_burstcount),    //   input,    width = 5,                    .burstcount
		.s_byteenable             (mm_interconnect_5_ddr_board_acl_memory_bank_divider_0_s_byteenable),    //   input,   width = 64,                    .byteenable
		.s_waitrequest            (mm_interconnect_5_ddr_board_acl_memory_bank_divider_0_s_waitrequest),   //  output,    width = 1,                    .waitrequest
		.s_readdata               (mm_interconnect_5_ddr_board_acl_memory_bank_divider_0_s_readdata),      //  output,  width = 512,                    .readdata
		.s_readdatavalid          (mm_interconnect_5_ddr_board_acl_memory_bank_divider_0_s_readdatavalid), //  output,    width = 1,                    .readdatavalid
		.s_address                (mm_interconnect_5_ddr_board_acl_memory_bank_divider_0_s_address)        //   input,   width = 27,                    .address
	);

	ddr_board_clock_bridge_0 ddr_clk_a (
		.in_clk  (ddr_clk_a_clk),         //   input,  width = 1,  in_clk.clk
		.out_clk (ddr_clk_a_out_clk_clk)  //  output,  width = 1, out_clk.clk
	);

	ddr_board_clock_bridge_1 ddr_clk_b (
		.in_clk  (ddr_clk_b_clk),         //   input,  width = 1,  in_clk.clk
		.out_clk (ddr_clk_b_out_clk_clk)  //  output,  width = 1, out_clk.clk
	);

	ddr_board_mm_bridge_6 dma_host_rd_pipe (
		.clk              (host_clk_out_clk_clk),                     //   input,    width = 1,   clk.clk
		.m0_waitrequest   (host_rd_waitrequest),                      //   input,    width = 1,    m0.waitrequest
		.m0_readdata      (host_rd_readdata),                         //   input,  width = 512,      .readdata
		.m0_readdatavalid (host_rd_readdatavalid),                    //   input,    width = 1,      .readdatavalid
		.m0_burstcount    (host_rd_burstcount),                       //  output,    width = 3,      .burstcount
		.m0_writedata     (host_rd_writedata),                        //  output,  width = 512,      .writedata
		.m0_address       (host_rd_address),                          //  output,   width = 48,      .address
		.m0_write         (host_rd_write),                            //  output,    width = 1,      .write
		.m0_read          (host_rd_read),                             //  output,    width = 1,      .read
		.m0_byteenable    (host_rd_byteenable),                       //  output,   width = 64,      .byteenable
		.m0_debugaccess   (host_rd_debugaccess),                      //  output,    width = 1,      .debugaccess
		.reset            (global_reset_out_reset_reset),             //   input,    width = 1, reset.reset
		.s0_waitrequest   (msgdma_bbb_inst_rd_host_rd_waitrequest),   //  output,    width = 1,    s0.waitrequest
		.s0_readdata      (msgdma_bbb_inst_rd_host_rd_readdata),      //  output,  width = 512,      .readdata
		.s0_readdatavalid (msgdma_bbb_inst_rd_host_rd_readdatavalid), //  output,    width = 1,      .readdatavalid
		.s0_burstcount    (msgdma_bbb_inst_rd_host_rd_burstcount),    //   input,    width = 3,      .burstcount
		.s0_writedata     (msgdma_bbb_inst_rd_host_rd_writedata),     //   input,  width = 512,      .writedata
		.s0_address       (msgdma_bbb_inst_rd_host_rd_address),       //   input,   width = 48,      .address
		.s0_write         (msgdma_bbb_inst_rd_host_rd_write),         //   input,    width = 1,      .write
		.s0_read          (msgdma_bbb_inst_rd_host_rd_read),          //   input,    width = 1,      .read
		.s0_byteenable    (msgdma_bbb_inst_rd_host_rd_byteenable),    //   input,   width = 64,      .byteenable
		.s0_debugaccess   (msgdma_bbb_inst_rd_host_rd_debugaccess)    //   input,    width = 1,      .debugaccess
	);

	ddr_board_mm_bridge_7 dma_host_wr_pipe (
		.clk              (host_clk_out_clk_clk),                     //   input,    width = 1,   clk.clk
		.m0_waitrequest   (host_wr_waitrequest),                      //   input,    width = 1,    m0.waitrequest
		.m0_readdata      (host_wr_readdata),                         //   input,  width = 512,      .readdata
		.m0_readdatavalid (host_wr_readdatavalid),                    //   input,    width = 1,      .readdatavalid
		.m0_burstcount    (host_wr_burstcount),                       //  output,    width = 3,      .burstcount
		.m0_writedata     (host_wr_writedata),                        //  output,  width = 512,      .writedata
		.m0_address       (host_wr_address),                          //  output,   width = 49,      .address
		.m0_write         (host_wr_write),                            //  output,    width = 1,      .write
		.m0_read          (host_wr_read),                             //  output,    width = 1,      .read
		.m0_byteenable    (host_wr_byteenable),                       //  output,   width = 64,      .byteenable
		.m0_debugaccess   (host_wr_debugaccess),                      //  output,    width = 1,      .debugaccess
		.reset            (global_reset_out_reset_reset),             //   input,    width = 1, reset.reset
		.s0_waitrequest   (msgdma_bbb_inst_wr_host_wr_waitrequest),   //  output,    width = 1,    s0.waitrequest
		.s0_readdata      (msgdma_bbb_inst_wr_host_wr_readdata),      //  output,  width = 512,      .readdata
		.s0_readdatavalid (msgdma_bbb_inst_wr_host_wr_readdatavalid), //  output,    width = 1,      .readdatavalid
		.s0_burstcount    (msgdma_bbb_inst_wr_host_wr_burstcount),    //   input,    width = 3,      .burstcount
		.s0_writedata     (msgdma_bbb_inst_wr_host_wr_writedata),     //   input,  width = 512,      .writedata
		.s0_address       (msgdma_bbb_inst_wr_host_wr_address),       //   input,   width = 49,      .address
		.s0_write         (msgdma_bbb_inst_wr_host_wr_write),         //   input,    width = 1,      .write
		.s0_read          (msgdma_bbb_inst_wr_host_wr_read),          //   input,    width = 1,      .read
		.s0_byteenable    (msgdma_bbb_inst_wr_host_wr_byteenable),    //   input,   width = 64,      .byteenable
		.s0_debugaccess   (msgdma_bbb_inst_wr_host_wr_debugaccess)    //   input,    width = 1,      .debugaccess
	);

	ddr_board_reset_bridge_0 global_reset (
		.clk       (host_clk_out_clk_clk),         //   input,  width = 1,       clk.clk
		.in_reset  (global_reset_reset),           //   input,  width = 1,  in_reset.reset
		.out_reset (global_reset_out_reset_reset)  //  output,  width = 1, out_reset.reset
	);

	ddr_clk host_clk (
		.in_clk  (host_clk_clk),         //   input,  width = 1,  in_clk.clk
		.out_clk (host_clk_out_clk_clk)  //  output,  width = 1, out_clk.clk
	);

	kernel_clk kernel_clk (
		.in_clk  (kernel_clk_clk),         //   input,  width = 1,  in_clk.clk
		.out_clk (kernel_clk_out_clk_clk)  //  output,  width = 1, out_clk.clk
	);

	ddr_board_reset_bridge_1 kernel_reset (
		.clk       (kernel_clk_out_clk_clk),       //   input,  width = 1,       clk.clk
		.in_reset  (kernel_reset_reset),           //   input,  width = 1,  in_reset.reset
		.out_reset (kernel_reset_out_reset_reset)  //  output,  width = 1, out_reset.reset
	);

	ddr_board_afu_id_avmm_slave_0 null_dfh_afu_id (
		.avmm_readdata  (null_dfh_afu_id_readdata),     //  output,  width = 64, afu_cfg_slave.readdata
		.avmm_writedata (null_dfh_afu_id_writedata),    //   input,  width = 64,              .writedata
		.avmm_address   (null_dfh_afu_id_address),      //   input,   width = 3,              .address
		.avmm_write     (null_dfh_afu_id_write),        //   input,   width = 1,              .write
		.avmm_read      (null_dfh_afu_id_read),         //   input,   width = 1,              .read
		.clk            (host_clk_out_clk_clk),         //   input,   width = 1,         clock.clk
		.reset          (global_reset_out_reset_reset)  //   input,   width = 1,         reset.reset
	);

	ddr4b_pipe_to_bankdiv_0 pipe_stage_ase (
		.clk              (host_clk_out_clk_clk),                              //   input,    width = 1,   clk.clk
		.m0_waitrequest   (pipe_stage_ase_m0_waitrequest),                     //   input,    width = 1,    m0.waitrequest
		.m0_readdata      (pipe_stage_ase_m0_readdata),                        //   input,  width = 512,      .readdata
		.m0_readdatavalid (pipe_stage_ase_m0_readdatavalid),                   //   input,    width = 1,      .readdatavalid
		.m0_burstcount    (pipe_stage_ase_m0_burstcount),                      //  output,    width = 5,      .burstcount
		.m0_writedata     (pipe_stage_ase_m0_writedata),                       //  output,  width = 512,      .writedata
		.m0_address       (pipe_stage_ase_m0_address),                         //  output,   width = 33,      .address
		.m0_write         (pipe_stage_ase_m0_write),                           //  output,    width = 1,      .write
		.m0_read          (pipe_stage_ase_m0_read),                            //  output,    width = 1,      .read
		.m0_byteenable    (pipe_stage_ase_m0_byteenable),                      //  output,   width = 64,      .byteenable
		.m0_debugaccess   (pipe_stage_ase_m0_debugaccess),                     //  output,    width = 1,      .debugaccess
		.reset            (global_reset_out_reset_reset),                      //   input,    width = 1, reset.reset
		.s0_waitrequest   (mm_interconnect_2_pipe_stage_ase_s0_waitrequest),   //  output,    width = 1,    s0.waitrequest
		.s0_readdata      (mm_interconnect_2_pipe_stage_ase_s0_readdata),      //  output,  width = 512,      .readdata
		.s0_readdatavalid (mm_interconnect_2_pipe_stage_ase_s0_readdatavalid), //  output,    width = 1,      .readdatavalid
		.s0_burstcount    (mm_interconnect_2_pipe_stage_ase_s0_burstcount),    //   input,    width = 5,      .burstcount
		.s0_writedata     (mm_interconnect_2_pipe_stage_ase_s0_writedata),     //   input,  width = 512,      .writedata
		.s0_address       (mm_interconnect_2_pipe_stage_ase_s0_address),       //   input,   width = 33,      .address
		.s0_write         (mm_interconnect_2_pipe_stage_ase_s0_write),         //   input,    width = 1,      .write
		.s0_read          (mm_interconnect_2_pipe_stage_ase_s0_read),          //   input,    width = 1,      .read
		.s0_byteenable    (mm_interconnect_2_pipe_stage_ase_s0_byteenable),    //   input,   width = 64,      .byteenable
		.s0_debugaccess   (mm_interconnect_2_pipe_stage_ase_s0_debugaccess)    //   input,    width = 1,      .debugaccess
	);

	ase ase_inst_0 (
		.expanded_master_address       (ase_inst_0_expanded_master_address),       //  output,   width = 48, expanded_master.address
		.expanded_master_read          (ase_inst_0_expanded_master_read),          //  output,    width = 1,                .read
		.expanded_master_waitrequest   (ase_inst_0_expanded_master_waitrequest),   //   input,    width = 1,                .waitrequest
		.expanded_master_readdata      (ase_inst_0_expanded_master_readdata),      //   input,  width = 512,                .readdata
		.expanded_master_write         (ase_inst_0_expanded_master_write),         //  output,    width = 1,                .write
		.expanded_master_writedata     (ase_inst_0_expanded_master_writedata),     //  output,  width = 512,                .writedata
		.expanded_master_readdatavalid (ase_inst_0_expanded_master_readdatavalid), //   input,    width = 1,                .readdatavalid
		.expanded_master_byteenable    (ase_inst_0_expanded_master_byteenable),    //  output,   width = 64,                .byteenable
		.expanded_master_burstcount    (ase_inst_0_expanded_master_burstcount),    //  output,    width = 4,                .burstcount
		.avmm_pipe_slave_waitrequest   (ase_0_avmm_pipe_slave_waitrequest),        //  output,    width = 1, avmm_pipe_slave.waitrequest
		.avmm_pipe_slave_readdata      (ase_0_avmm_pipe_slave_readdata),           //  output,   width = 64,                .readdata
		.avmm_pipe_slave_readdatavalid (ase_0_avmm_pipe_slave_readdatavalid),      //  output,    width = 1,                .readdatavalid
		.avmm_pipe_slave_burstcount    (ase_0_avmm_pipe_slave_burstcount),         //   input,    width = 1,                .burstcount
		.avmm_pipe_slave_writedata     (ase_0_avmm_pipe_slave_writedata),          //   input,   width = 64,                .writedata
		.avmm_pipe_slave_address       (ase_0_avmm_pipe_slave_address),            //   input,   width = 13,                .address
		.avmm_pipe_slave_write         (ase_0_avmm_pipe_slave_write),              //   input,    width = 1,                .write
		.avmm_pipe_slave_read          (ase_0_avmm_pipe_slave_read),               //   input,    width = 1,                .read
		.avmm_pipe_slave_byteenable    (ase_0_avmm_pipe_slave_byteenable),         //   input,    width = 8,                .byteenable
		.avmm_pipe_slave_debugaccess   (ase_0_avmm_pipe_slave_debugaccess),        //   input,    width = 1,                .debugaccess
		.clk_clk                       (host_clk_out_clk_clk),                     //   input,    width = 1,             clk.clk
		.reset_reset                   (global_reset_out_reset_reset)              //   input,    width = 1,           reset.reset
	);

	msgdma_bbb msgdma_bbb_inst_rd (
		.clk_clk               (host_clk_out_clk_clk),                     //   input,    width = 1,     clk.clk
		.reset_reset_n         (~global_reset_out_reset_reset),            //   input,    width = 1,   reset.reset_n
		.csr_waitrequest       (msgdma_bbb_0_csr_waitrequest),             //  output,    width = 1,     csr.waitrequest
		.csr_readdata          (msgdma_bbb_0_csr_readdata),                //  output,   width = 64,        .readdata
		.csr_readdatavalid     (msgdma_bbb_0_csr_readdatavalid),           //  output,    width = 1,        .readdatavalid
		.csr_burstcount        (msgdma_bbb_0_csr_burstcount),              //   input,    width = 1,        .burstcount
		.csr_writedata         (msgdma_bbb_0_csr_writedata),               //   input,   width = 64,        .writedata
		.csr_address           (msgdma_bbb_0_csr_address),                 //   input,    width = 7,        .address
		.csr_write             (msgdma_bbb_0_csr_write),                   //   input,    width = 1,        .write
		.csr_read              (msgdma_bbb_0_csr_read),                    //   input,    width = 1,        .read
		.csr_byteenable        (msgdma_bbb_0_csr_byteenable),              //   input,    width = 8,        .byteenable
		.csr_debugaccess       (msgdma_bbb_0_csr_debugaccess),             //   input,    width = 1,        .debugaccess
		.dma_irq_irq           (msgdma_bbb_0_dma_irq_irq),                 //  output,    width = 1, dma_irq.irq
		.host_rd_waitrequest   (msgdma_bbb_inst_rd_host_rd_waitrequest),   //   input,    width = 1, host_rd.waitrequest
		.host_rd_readdata      (msgdma_bbb_inst_rd_host_rd_readdata),      //   input,  width = 512,        .readdata
		.host_rd_readdatavalid (msgdma_bbb_inst_rd_host_rd_readdatavalid), //   input,    width = 1,        .readdatavalid
		.host_rd_burstcount    (msgdma_bbb_inst_rd_host_rd_burstcount),    //  output,    width = 3,        .burstcount
		.host_rd_writedata     (msgdma_bbb_inst_rd_host_rd_writedata),     //  output,  width = 512,        .writedata
		.host_rd_address       (msgdma_bbb_inst_rd_host_rd_address),       //  output,   width = 48,        .address
		.host_rd_write         (msgdma_bbb_inst_rd_host_rd_write),         //  output,    width = 1,        .write
		.host_rd_read          (msgdma_bbb_inst_rd_host_rd_read),          //  output,    width = 1,        .read
		.host_rd_byteenable    (msgdma_bbb_inst_rd_host_rd_byteenable),    //  output,   width = 64,        .byteenable
		.host_rd_debugaccess   (msgdma_bbb_inst_rd_host_rd_debugaccess),   //  output,    width = 1,        .debugaccess
		.host_wr_waitrequest   (),                                         //   input,    width = 1, host_wr.waitrequest
		.host_wr_readdata      (),                                         //   input,  width = 512,        .readdata
		.host_wr_readdatavalid (),                                         //   input,    width = 1,        .readdatavalid
		.host_wr_burstcount    (),                                         //  output,    width = 3,        .burstcount
		.host_wr_writedata     (),                                         //  output,  width = 512,        .writedata
		.host_wr_address       (),                                         //  output,   width = 49,        .address
		.host_wr_write         (),                                         //  output,    width = 1,        .write
		.host_wr_read          (),                                         //  output,    width = 1,        .read
		.host_wr_byteenable    (),                                         //  output,   width = 64,        .byteenable
		.host_wr_debugaccess   (),                                         //  output,    width = 1,        .debugaccess
		.mem_waitrequest       (msgdma_bbb_inst_rd_mem_waitrequest),       //   input,    width = 1,     mem.waitrequest
		.mem_readdata          (msgdma_bbb_inst_rd_mem_readdata),          //   input,  width = 512,        .readdata
		.mem_readdatavalid     (msgdma_bbb_inst_rd_mem_readdatavalid),     //   input,    width = 1,        .readdatavalid
		.mem_burstcount        (msgdma_bbb_inst_rd_mem_burstcount),        //  output,    width = 3,        .burstcount
		.mem_writedata         (msgdma_bbb_inst_rd_mem_writedata),         //  output,  width = 512,        .writedata
		.mem_address           (msgdma_bbb_inst_rd_mem_address),           //  output,   width = 48,        .address
		.mem_write             (msgdma_bbb_inst_rd_mem_write),             //  output,    width = 1,        .write
		.mem_read              (msgdma_bbb_inst_rd_mem_read),              //  output,    width = 1,        .read
		.mem_byteenable        (msgdma_bbb_inst_rd_mem_byteenable),        //  output,   width = 64,        .byteenable
		.mem_debugaccess       (msgdma_bbb_inst_rd_mem_debugaccess)        //  output,    width = 1,        .debugaccess
	);

	msgdma_bbb msgdma_bbb_inst_wr (
		.clk_clk               (host_clk_out_clk_clk),                     //   input,    width = 1,     clk.clk
		.reset_reset_n         (~global_reset_out_reset_reset),            //   input,    width = 1,   reset.reset_n
		.csr_waitrequest       (msgdma_bbb_1_csr_waitrequest),             //  output,    width = 1,     csr.waitrequest
		.csr_readdata          (msgdma_bbb_1_csr_readdata),                //  output,   width = 64,        .readdata
		.csr_readdatavalid     (msgdma_bbb_1_csr_readdatavalid),           //  output,    width = 1,        .readdatavalid
		.csr_burstcount        (msgdma_bbb_1_csr_burstcount),              //   input,    width = 1,        .burstcount
		.csr_writedata         (msgdma_bbb_1_csr_writedata),               //   input,   width = 64,        .writedata
		.csr_address           (msgdma_bbb_1_csr_address),                 //   input,    width = 7,        .address
		.csr_write             (msgdma_bbb_1_csr_write),                   //   input,    width = 1,        .write
		.csr_read              (msgdma_bbb_1_csr_read),                    //   input,    width = 1,        .read
		.csr_byteenable        (msgdma_bbb_1_csr_byteenable),              //   input,    width = 8,        .byteenable
		.csr_debugaccess       (msgdma_bbb_1_csr_debugaccess),             //   input,    width = 1,        .debugaccess
		.dma_irq_irq           (msgdma_bbb_1_dma_irq_irq),                 //  output,    width = 1, dma_irq.irq
		.host_rd_waitrequest   (),                                         //   input,    width = 1, host_rd.waitrequest
		.host_rd_readdata      (),                                         //   input,  width = 512,        .readdata
		.host_rd_readdatavalid (),                                         //   input,    width = 1,        .readdatavalid
		.host_rd_burstcount    (),                                         //  output,    width = 3,        .burstcount
		.host_rd_writedata     (),                                         //  output,  width = 512,        .writedata
		.host_rd_address       (),                                         //  output,   width = 48,        .address
		.host_rd_write         (),                                         //  output,    width = 1,        .write
		.host_rd_read          (),                                         //  output,    width = 1,        .read
		.host_rd_byteenable    (),                                         //  output,   width = 64,        .byteenable
		.host_rd_debugaccess   (),                                         //  output,    width = 1,        .debugaccess
		.host_wr_waitrequest   (msgdma_bbb_inst_wr_host_wr_waitrequest),   //   input,    width = 1, host_wr.waitrequest
		.host_wr_readdata      (msgdma_bbb_inst_wr_host_wr_readdata),      //   input,  width = 512,        .readdata
		.host_wr_readdatavalid (msgdma_bbb_inst_wr_host_wr_readdatavalid), //   input,    width = 1,        .readdatavalid
		.host_wr_burstcount    (msgdma_bbb_inst_wr_host_wr_burstcount),    //  output,    width = 3,        .burstcount
		.host_wr_writedata     (msgdma_bbb_inst_wr_host_wr_writedata),     //  output,  width = 512,        .writedata
		.host_wr_address       (msgdma_bbb_inst_wr_host_wr_address),       //  output,   width = 49,        .address
		.host_wr_write         (msgdma_bbb_inst_wr_host_wr_write),         //  output,    width = 1,        .write
		.host_wr_read          (msgdma_bbb_inst_wr_host_wr_read),          //  output,    width = 1,        .read
		.host_wr_byteenable    (msgdma_bbb_inst_wr_host_wr_byteenable),    //  output,   width = 64,        .byteenable
		.host_wr_debugaccess   (msgdma_bbb_inst_wr_host_wr_debugaccess),   //  output,    width = 1,        .debugaccess
		.mem_waitrequest       (msgdma_bbb_inst_wr_mem_waitrequest),       //   input,    width = 1,     mem.waitrequest
		.mem_readdata          (msgdma_bbb_inst_wr_mem_readdata),          //   input,  width = 512,        .readdata
		.mem_readdatavalid     (msgdma_bbb_inst_wr_mem_readdatavalid),     //   input,    width = 1,        .readdatavalid
		.mem_burstcount        (msgdma_bbb_inst_wr_mem_burstcount),        //  output,    width = 3,        .burstcount
		.mem_writedata         (msgdma_bbb_inst_wr_mem_writedata),         //  output,  width = 512,        .writedata
		.mem_address           (msgdma_bbb_inst_wr_mem_address),           //  output,   width = 48,        .address
		.mem_write             (msgdma_bbb_inst_wr_mem_write),             //  output,    width = 1,        .write
		.mem_read              (msgdma_bbb_inst_wr_mem_read),              //  output,    width = 1,        .read
		.mem_byteenable        (msgdma_bbb_inst_wr_mem_byteenable),        //  output,   width = 64,        .byteenable
		.mem_debugaccess       (msgdma_bbb_inst_wr_mem_debugaccess)        //  output,    width = 1,        .debugaccess
	);

	ddr_board_altera_mm_interconnect_191_2tormkq mm_interconnect_0 (
		.ddr_board_acl_memory_bank_divider_0_bank1_address                     (ddr_board_acl_memory_bank_divider_0_bank1_address),       //   input,   width = 32,                       ddr_board_acl_memory_bank_divider_0_bank1.address
		.ddr_board_acl_memory_bank_divider_0_bank1_waitrequest                 (ddr_board_acl_memory_bank_divider_0_bank1_waitrequest),   //  output,    width = 1,                                                                .waitrequest
		.ddr_board_acl_memory_bank_divider_0_bank1_burstcount                  (ddr_board_acl_memory_bank_divider_0_bank1_burstcount),    //   input,    width = 5,                                                                .burstcount
		.ddr_board_acl_memory_bank_divider_0_bank1_byteenable                  (ddr_board_acl_memory_bank_divider_0_bank1_byteenable),    //   input,   width = 64,                                                                .byteenable
		.ddr_board_acl_memory_bank_divider_0_bank1_read                        (ddr_board_acl_memory_bank_divider_0_bank1_read),          //   input,    width = 1,                                                                .read
		.ddr_board_acl_memory_bank_divider_0_bank1_readdata                    (ddr_board_acl_memory_bank_divider_0_bank1_readdata),      //  output,  width = 512,                                                                .readdata
		.ddr_board_acl_memory_bank_divider_0_bank1_readdatavalid               (ddr_board_acl_memory_bank_divider_0_bank1_readdatavalid), //  output,    width = 1,                                                                .readdatavalid
		.ddr_board_acl_memory_bank_divider_0_bank1_write                       (ddr_board_acl_memory_bank_divider_0_bank1_write),         //   input,    width = 1,                                                                .write
		.ddr_board_acl_memory_bank_divider_0_bank1_writedata                   (ddr_board_acl_memory_bank_divider_0_bank1_writedata),     //   input,  width = 512,                                                                .writedata
		.ddr4a_cross_to_host_s0_address                                        (mm_interconnect_0_ddr4a_cross_to_host_s0_address),        //  output,   width = 32,                                          ddr4a_cross_to_host_s0.address
		.ddr4a_cross_to_host_s0_write                                          (mm_interconnect_0_ddr4a_cross_to_host_s0_write),          //  output,    width = 1,                                                                .write
		.ddr4a_cross_to_host_s0_read                                           (mm_interconnect_0_ddr4a_cross_to_host_s0_read),           //  output,    width = 1,                                                                .read
		.ddr4a_cross_to_host_s0_readdata                                       (mm_interconnect_0_ddr4a_cross_to_host_s0_readdata),       //   input,  width = 512,                                                                .readdata
		.ddr4a_cross_to_host_s0_writedata                                      (mm_interconnect_0_ddr4a_cross_to_host_s0_writedata),      //  output,  width = 512,                                                                .writedata
		.ddr4a_cross_to_host_s0_burstcount                                     (mm_interconnect_0_ddr4a_cross_to_host_s0_burstcount),     //  output,    width = 5,                                                                .burstcount
		.ddr4a_cross_to_host_s0_byteenable                                     (mm_interconnect_0_ddr4a_cross_to_host_s0_byteenable),     //  output,   width = 64,                                                                .byteenable
		.ddr4a_cross_to_host_s0_readdatavalid                                  (mm_interconnect_0_ddr4a_cross_to_host_s0_readdatavalid),  //   input,    width = 1,                                                                .readdatavalid
		.ddr4a_cross_to_host_s0_waitrequest                                    (mm_interconnect_0_ddr4a_cross_to_host_s0_waitrequest),    //   input,    width = 1,                                                                .waitrequest
		.ddr4a_cross_to_host_s0_debugaccess                                    (mm_interconnect_0_ddr4a_cross_to_host_s0_debugaccess),    //  output,    width = 1,                                                                .debugaccess
		.ddr_board_acl_memory_bank_divider_0_reset_reset_bridge_in_reset_reset (global_reset_out_reset_reset),                            //   input,    width = 1, ddr_board_acl_memory_bank_divider_0_reset_reset_bridge_in_reset.reset
		.host_clk_out_clk_clk                                                  (host_clk_out_clk_clk)                                     //   input,    width = 1,                                                host_clk_out_clk.clk
	);

	ddr_board_altera_mm_interconnect_191_g4uwyui mm_interconnect_1 (
		.ddr_board_acl_memory_bank_divider_0_bank2_address                     (ddr_board_acl_memory_bank_divider_0_bank2_address),       //   input,   width = 32,                       ddr_board_acl_memory_bank_divider_0_bank2.address
		.ddr_board_acl_memory_bank_divider_0_bank2_waitrequest                 (ddr_board_acl_memory_bank_divider_0_bank2_waitrequest),   //  output,    width = 1,                                                                .waitrequest
		.ddr_board_acl_memory_bank_divider_0_bank2_burstcount                  (ddr_board_acl_memory_bank_divider_0_bank2_burstcount),    //   input,    width = 5,                                                                .burstcount
		.ddr_board_acl_memory_bank_divider_0_bank2_byteenable                  (ddr_board_acl_memory_bank_divider_0_bank2_byteenable),    //   input,   width = 64,                                                                .byteenable
		.ddr_board_acl_memory_bank_divider_0_bank2_read                        (ddr_board_acl_memory_bank_divider_0_bank2_read),          //   input,    width = 1,                                                                .read
		.ddr_board_acl_memory_bank_divider_0_bank2_readdata                    (ddr_board_acl_memory_bank_divider_0_bank2_readdata),      //  output,  width = 512,                                                                .readdata
		.ddr_board_acl_memory_bank_divider_0_bank2_readdatavalid               (ddr_board_acl_memory_bank_divider_0_bank2_readdatavalid), //  output,    width = 1,                                                                .readdatavalid
		.ddr_board_acl_memory_bank_divider_0_bank2_write                       (ddr_board_acl_memory_bank_divider_0_bank2_write),         //   input,    width = 1,                                                                .write
		.ddr_board_acl_memory_bank_divider_0_bank2_writedata                   (ddr_board_acl_memory_bank_divider_0_bank2_writedata),     //   input,  width = 512,                                                                .writedata
		.ddr4b_cross_to_host_s0_address                                        (mm_interconnect_1_ddr4b_cross_to_host_s0_address),        //  output,   width = 32,                                          ddr4b_cross_to_host_s0.address
		.ddr4b_cross_to_host_s0_write                                          (mm_interconnect_1_ddr4b_cross_to_host_s0_write),          //  output,    width = 1,                                                                .write
		.ddr4b_cross_to_host_s0_read                                           (mm_interconnect_1_ddr4b_cross_to_host_s0_read),           //  output,    width = 1,                                                                .read
		.ddr4b_cross_to_host_s0_readdata                                       (mm_interconnect_1_ddr4b_cross_to_host_s0_readdata),       //   input,  width = 512,                                                                .readdata
		.ddr4b_cross_to_host_s0_writedata                                      (mm_interconnect_1_ddr4b_cross_to_host_s0_writedata),      //  output,  width = 512,                                                                .writedata
		.ddr4b_cross_to_host_s0_burstcount                                     (mm_interconnect_1_ddr4b_cross_to_host_s0_burstcount),     //  output,    width = 5,                                                                .burstcount
		.ddr4b_cross_to_host_s0_byteenable                                     (mm_interconnect_1_ddr4b_cross_to_host_s0_byteenable),     //  output,   width = 64,                                                                .byteenable
		.ddr4b_cross_to_host_s0_readdatavalid                                  (mm_interconnect_1_ddr4b_cross_to_host_s0_readdatavalid),  //   input,    width = 1,                                                                .readdatavalid
		.ddr4b_cross_to_host_s0_waitrequest                                    (mm_interconnect_1_ddr4b_cross_to_host_s0_waitrequest),    //   input,    width = 1,                                                                .waitrequest
		.ddr4b_cross_to_host_s0_debugaccess                                    (mm_interconnect_1_ddr4b_cross_to_host_s0_debugaccess),    //  output,    width = 1,                                                                .debugaccess
		.ddr_board_acl_memory_bank_divider_0_reset_reset_bridge_in_reset_reset (global_reset_out_reset_reset),                            //   input,    width = 1, ddr_board_acl_memory_bank_divider_0_reset_reset_bridge_in_reset.reset
		.host_clk_out_clk_clk                                                  (host_clk_out_clk_clk)                                     //   input,    width = 1,                                                host_clk_out_clk.clk
	);

	ddr_board_altera_mm_interconnect_191_4cea3xq mm_interconnect_2 (
		.ase_inst_0_expanded_master_address           (ase_inst_0_expanded_master_address),                //   input,   width = 48,             ase_inst_0_expanded_master.address
		.ase_inst_0_expanded_master_waitrequest       (ase_inst_0_expanded_master_waitrequest),            //  output,    width = 1,                                       .waitrequest
		.ase_inst_0_expanded_master_burstcount        (ase_inst_0_expanded_master_burstcount),             //   input,    width = 4,                                       .burstcount
		.ase_inst_0_expanded_master_byteenable        (ase_inst_0_expanded_master_byteenable),             //   input,   width = 64,                                       .byteenable
		.ase_inst_0_expanded_master_read              (ase_inst_0_expanded_master_read),                   //   input,    width = 1,                                       .read
		.ase_inst_0_expanded_master_readdata          (ase_inst_0_expanded_master_readdata),               //  output,  width = 512,                                       .readdata
		.ase_inst_0_expanded_master_readdatavalid     (ase_inst_0_expanded_master_readdatavalid),          //  output,    width = 1,                                       .readdatavalid
		.ase_inst_0_expanded_master_write             (ase_inst_0_expanded_master_write),                  //   input,    width = 1,                                       .write
		.ase_inst_0_expanded_master_writedata         (ase_inst_0_expanded_master_writedata),              //   input,  width = 512,                                       .writedata
		.pipe_stage_ase_s0_address                    (mm_interconnect_2_pipe_stage_ase_s0_address),       //  output,   width = 33,                      pipe_stage_ase_s0.address
		.pipe_stage_ase_s0_write                      (mm_interconnect_2_pipe_stage_ase_s0_write),         //  output,    width = 1,                                       .write
		.pipe_stage_ase_s0_read                       (mm_interconnect_2_pipe_stage_ase_s0_read),          //  output,    width = 1,                                       .read
		.pipe_stage_ase_s0_readdata                   (mm_interconnect_2_pipe_stage_ase_s0_readdata),      //   input,  width = 512,                                       .readdata
		.pipe_stage_ase_s0_writedata                  (mm_interconnect_2_pipe_stage_ase_s0_writedata),     //  output,  width = 512,                                       .writedata
		.pipe_stage_ase_s0_burstcount                 (mm_interconnect_2_pipe_stage_ase_s0_burstcount),    //  output,    width = 5,                                       .burstcount
		.pipe_stage_ase_s0_byteenable                 (mm_interconnect_2_pipe_stage_ase_s0_byteenable),    //  output,   width = 64,                                       .byteenable
		.pipe_stage_ase_s0_readdatavalid              (mm_interconnect_2_pipe_stage_ase_s0_readdatavalid), //   input,    width = 1,                                       .readdatavalid
		.pipe_stage_ase_s0_waitrequest                (mm_interconnect_2_pipe_stage_ase_s0_waitrequest),   //   input,    width = 1,                                       .waitrequest
		.pipe_stage_ase_s0_debugaccess                (mm_interconnect_2_pipe_stage_ase_s0_debugaccess),   //  output,    width = 1,                                       .debugaccess
		.ase_inst_0_reset_reset_bridge_in_reset_reset (global_reset_out_reset_reset),                      //   input,    width = 1, ase_inst_0_reset_reset_bridge_in_reset.reset
		.host_clk_out_clk_clk                         (host_clk_out_clk_clk)                               //   input,    width = 1,                       host_clk_out_clk.clk
	);

	ddr_board_altera_mm_interconnect_191_cxkivqy mm_interconnect_5 (
		.pipe_stage_ase_m0_address                           (pipe_stage_ase_m0_address),                                             //   input,   width = 33,                          pipe_stage_ase_m0.address
		.pipe_stage_ase_m0_waitrequest                       (pipe_stage_ase_m0_waitrequest),                                         //  output,    width = 1,                                           .waitrequest
		.pipe_stage_ase_m0_burstcount                        (pipe_stage_ase_m0_burstcount),                                          //   input,    width = 5,                                           .burstcount
		.pipe_stage_ase_m0_byteenable                        (pipe_stage_ase_m0_byteenable),                                          //   input,   width = 64,                                           .byteenable
		.pipe_stage_ase_m0_read                              (pipe_stage_ase_m0_read),                                                //   input,    width = 1,                                           .read
		.pipe_stage_ase_m0_readdata                          (pipe_stage_ase_m0_readdata),                                            //  output,  width = 512,                                           .readdata
		.pipe_stage_ase_m0_readdatavalid                     (pipe_stage_ase_m0_readdatavalid),                                       //  output,    width = 1,                                           .readdatavalid
		.pipe_stage_ase_m0_write                             (pipe_stage_ase_m0_write),                                               //   input,    width = 1,                                           .write
		.pipe_stage_ase_m0_writedata                         (pipe_stage_ase_m0_writedata),                                           //   input,  width = 512,                                           .writedata
		.pipe_stage_ase_m0_debugaccess                       (pipe_stage_ase_m0_debugaccess),                                         //   input,    width = 1,                                           .debugaccess
		.msgdma_bbb_inst_rd_mem_address                      (msgdma_bbb_inst_rd_mem_address),                                        //   input,   width = 48,                     msgdma_bbb_inst_rd_mem.address
		.msgdma_bbb_inst_rd_mem_waitrequest                  (msgdma_bbb_inst_rd_mem_waitrequest),                                    //  output,    width = 1,                                           .waitrequest
		.msgdma_bbb_inst_rd_mem_burstcount                   (msgdma_bbb_inst_rd_mem_burstcount),                                     //   input,    width = 3,                                           .burstcount
		.msgdma_bbb_inst_rd_mem_byteenable                   (msgdma_bbb_inst_rd_mem_byteenable),                                     //   input,   width = 64,                                           .byteenable
		.msgdma_bbb_inst_rd_mem_read                         (msgdma_bbb_inst_rd_mem_read),                                           //   input,    width = 1,                                           .read
		.msgdma_bbb_inst_rd_mem_readdata                     (msgdma_bbb_inst_rd_mem_readdata),                                       //  output,  width = 512,                                           .readdata
		.msgdma_bbb_inst_rd_mem_readdatavalid                (msgdma_bbb_inst_rd_mem_readdatavalid),                                  //  output,    width = 1,                                           .readdatavalid
		.msgdma_bbb_inst_rd_mem_write                        (msgdma_bbb_inst_rd_mem_write),                                          //   input,    width = 1,                                           .write
		.msgdma_bbb_inst_rd_mem_writedata                    (msgdma_bbb_inst_rd_mem_writedata),                                      //   input,  width = 512,                                           .writedata
		.msgdma_bbb_inst_rd_mem_debugaccess                  (msgdma_bbb_inst_rd_mem_debugaccess),                                    //   input,    width = 1,                                           .debugaccess
		.msgdma_bbb_inst_wr_mem_address                      (msgdma_bbb_inst_wr_mem_address),                                        //   input,   width = 48,                     msgdma_bbb_inst_wr_mem.address
		.msgdma_bbb_inst_wr_mem_waitrequest                  (msgdma_bbb_inst_wr_mem_waitrequest),                                    //  output,    width = 1,                                           .waitrequest
		.msgdma_bbb_inst_wr_mem_burstcount                   (msgdma_bbb_inst_wr_mem_burstcount),                                     //   input,    width = 3,                                           .burstcount
		.msgdma_bbb_inst_wr_mem_byteenable                   (msgdma_bbb_inst_wr_mem_byteenable),                                     //   input,   width = 64,                                           .byteenable
		.msgdma_bbb_inst_wr_mem_read                         (msgdma_bbb_inst_wr_mem_read),                                           //   input,    width = 1,                                           .read
		.msgdma_bbb_inst_wr_mem_readdata                     (msgdma_bbb_inst_wr_mem_readdata),                                       //  output,  width = 512,                                           .readdata
		.msgdma_bbb_inst_wr_mem_readdatavalid                (msgdma_bbb_inst_wr_mem_readdatavalid),                                  //  output,    width = 1,                                           .readdatavalid
		.msgdma_bbb_inst_wr_mem_write                        (msgdma_bbb_inst_wr_mem_write),                                          //   input,    width = 1,                                           .write
		.msgdma_bbb_inst_wr_mem_writedata                    (msgdma_bbb_inst_wr_mem_writedata),                                      //   input,  width = 512,                                           .writedata
		.msgdma_bbb_inst_wr_mem_debugaccess                  (msgdma_bbb_inst_wr_mem_debugaccess),                                    //   input,    width = 1,                                           .debugaccess
		.ddr_board_acl_memory_bank_divider_0_s_address       (mm_interconnect_5_ddr_board_acl_memory_bank_divider_0_s_address),       //  output,   width = 27,      ddr_board_acl_memory_bank_divider_0_s.address
		.ddr_board_acl_memory_bank_divider_0_s_write         (mm_interconnect_5_ddr_board_acl_memory_bank_divider_0_s_write),         //  output,    width = 1,                                           .write
		.ddr_board_acl_memory_bank_divider_0_s_read          (mm_interconnect_5_ddr_board_acl_memory_bank_divider_0_s_read),          //  output,    width = 1,                                           .read
		.ddr_board_acl_memory_bank_divider_0_s_readdata      (mm_interconnect_5_ddr_board_acl_memory_bank_divider_0_s_readdata),      //   input,  width = 512,                                           .readdata
		.ddr_board_acl_memory_bank_divider_0_s_writedata     (mm_interconnect_5_ddr_board_acl_memory_bank_divider_0_s_writedata),     //  output,  width = 512,                                           .writedata
		.ddr_board_acl_memory_bank_divider_0_s_burstcount    (mm_interconnect_5_ddr_board_acl_memory_bank_divider_0_s_burstcount),    //  output,    width = 5,                                           .burstcount
		.ddr_board_acl_memory_bank_divider_0_s_byteenable    (mm_interconnect_5_ddr_board_acl_memory_bank_divider_0_s_byteenable),    //  output,   width = 64,                                           .byteenable
		.ddr_board_acl_memory_bank_divider_0_s_readdatavalid (mm_interconnect_5_ddr_board_acl_memory_bank_divider_0_s_readdatavalid), //   input,    width = 1,                                           .readdatavalid
		.ddr_board_acl_memory_bank_divider_0_s_waitrequest   (mm_interconnect_5_ddr_board_acl_memory_bank_divider_0_s_waitrequest),   //   input,    width = 1,                                           .waitrequest
		.pipe_stage_ase_reset_reset_bridge_in_reset_reset    (global_reset_out_reset_reset),                                          //   input,    width = 1, pipe_stage_ase_reset_reset_bridge_in_reset.reset
		.host_clk_out_clk_clk                                (host_clk_out_clk_clk)                                                   //   input,    width = 1,                           host_clk_out_clk.clk
	);

	ddr_board_altera_mm_interconnect_191_xijtqqi mm_interconnect_6 (
		.ddr4a_pipe_1_burst16_m0_address                        (ddr4a_pipe_1_burst16_m0_address),                 //   input,   width = 32,                          ddr4a_pipe_1_burst16_m0.address
		.ddr4a_pipe_1_burst16_m0_waitrequest                    (ddr4a_pipe_1_burst16_m0_waitrequest),             //  output,    width = 1,                                                 .waitrequest
		.ddr4a_pipe_1_burst16_m0_burstcount                     (ddr4a_pipe_1_burst16_m0_burstcount),              //   input,    width = 5,                                                 .burstcount
		.ddr4a_pipe_1_burst16_m0_byteenable                     (ddr4a_pipe_1_burst16_m0_byteenable),              //   input,   width = 64,                                                 .byteenable
		.ddr4a_pipe_1_burst16_m0_read                           (ddr4a_pipe_1_burst16_m0_read),                    //   input,    width = 1,                                                 .read
		.ddr4a_pipe_1_burst16_m0_readdata                       (ddr4a_pipe_1_burst16_m0_readdata),                //  output,  width = 512,                                                 .readdata
		.ddr4a_pipe_1_burst16_m0_readdatavalid                  (ddr4a_pipe_1_burst16_m0_readdatavalid),           //  output,    width = 1,                                                 .readdatavalid
		.ddr4a_pipe_1_burst16_m0_write                          (ddr4a_pipe_1_burst16_m0_write),                   //   input,    width = 1,                                                 .write
		.ddr4a_pipe_1_burst16_m0_writedata                      (ddr4a_pipe_1_burst16_m0_writedata),               //   input,  width = 512,                                                 .writedata
		.ddr4a_pipe_1_burst16_m0_debugaccess                    (ddr4a_pipe_1_burst16_m0_debugaccess),             //   input,    width = 1,                                                 .debugaccess
		.ddr4a_pipe_0_s0_address                                (mm_interconnect_6_ddr4a_pipe_0_s0_address),       //  output,   width = 32,                                  ddr4a_pipe_0_s0.address
		.ddr4a_pipe_0_s0_write                                  (mm_interconnect_6_ddr4a_pipe_0_s0_write),         //  output,    width = 1,                                                 .write
		.ddr4a_pipe_0_s0_read                                   (mm_interconnect_6_ddr4a_pipe_0_s0_read),          //  output,    width = 1,                                                 .read
		.ddr4a_pipe_0_s0_readdata                               (mm_interconnect_6_ddr4a_pipe_0_s0_readdata),      //   input,  width = 512,                                                 .readdata
		.ddr4a_pipe_0_s0_writedata                              (mm_interconnect_6_ddr4a_pipe_0_s0_writedata),     //  output,  width = 512,                                                 .writedata
		.ddr4a_pipe_0_s0_burstcount                             (mm_interconnect_6_ddr4a_pipe_0_s0_burstcount),    //  output,    width = 7,                                                 .burstcount
		.ddr4a_pipe_0_s0_byteenable                             (mm_interconnect_6_ddr4a_pipe_0_s0_byteenable),    //  output,   width = 64,                                                 .byteenable
		.ddr4a_pipe_0_s0_readdatavalid                          (mm_interconnect_6_ddr4a_pipe_0_s0_readdatavalid), //   input,    width = 1,                                                 .readdatavalid
		.ddr4a_pipe_0_s0_waitrequest                            (mm_interconnect_6_ddr4a_pipe_0_s0_waitrequest),   //   input,    width = 1,                                                 .waitrequest
		.ddr4a_pipe_0_s0_debugaccess                            (mm_interconnect_6_ddr4a_pipe_0_s0_debugaccess),   //  output,    width = 1,                                                 .debugaccess
		.ddr4a_pipe_1_burst16_reset_reset_bridge_in_reset_reset (rst_controller_reset_out_reset),                  //   input,    width = 1, ddr4a_pipe_1_burst16_reset_reset_bridge_in_reset.reset
		.ddr_clk_a_out_clk_clk                                  (ddr_clk_a_out_clk_clk)                            //   input,    width = 1,                                ddr_clk_a_out_clk.clk
	);

	ddr_board_altera_mm_interconnect_191_bae5eky mm_interconnect_7 (
		.ddr4a_cross_to_kernel_m0_address                           (ddr4a_cross_to_kernel_m0_address),                        //   input,   width = 32,                             ddr4a_cross_to_kernel_m0.address
		.ddr4a_cross_to_kernel_m0_waitrequest                       (ddr4a_cross_to_kernel_m0_waitrequest),                    //  output,    width = 1,                                                     .waitrequest
		.ddr4a_cross_to_kernel_m0_burstcount                        (ddr4a_cross_to_kernel_m0_burstcount),                     //   input,    width = 5,                                                     .burstcount
		.ddr4a_cross_to_kernel_m0_byteenable                        (ddr4a_cross_to_kernel_m0_byteenable),                     //   input,   width = 64,                                                     .byteenable
		.ddr4a_cross_to_kernel_m0_read                              (ddr4a_cross_to_kernel_m0_read),                           //   input,    width = 1,                                                     .read
		.ddr4a_cross_to_kernel_m0_readdata                          (ddr4a_cross_to_kernel_m0_readdata),                       //  output,  width = 512,                                                     .readdata
		.ddr4a_cross_to_kernel_m0_readdatavalid                     (ddr4a_cross_to_kernel_m0_readdatavalid),                  //  output,    width = 1,                                                     .readdatavalid
		.ddr4a_cross_to_kernel_m0_write                             (ddr4a_cross_to_kernel_m0_write),                          //   input,    width = 1,                                                     .write
		.ddr4a_cross_to_kernel_m0_writedata                         (ddr4a_cross_to_kernel_m0_writedata),                      //   input,  width = 512,                                                     .writedata
		.ddr4a_cross_to_kernel_m0_debugaccess                       (ddr4a_cross_to_kernel_m0_debugaccess),                    //   input,    width = 1,                                                     .debugaccess
		.ddr4a_cross_to_host_m0_address                             (ddr4a_cross_to_host_m0_address),                          //   input,   width = 32,                               ddr4a_cross_to_host_m0.address
		.ddr4a_cross_to_host_m0_waitrequest                         (ddr4a_cross_to_host_m0_waitrequest),                      //  output,    width = 1,                                                     .waitrequest
		.ddr4a_cross_to_host_m0_burstcount                          (ddr4a_cross_to_host_m0_burstcount),                       //   input,    width = 5,                                                     .burstcount
		.ddr4a_cross_to_host_m0_byteenable                          (ddr4a_cross_to_host_m0_byteenable),                       //   input,   width = 64,                                                     .byteenable
		.ddr4a_cross_to_host_m0_read                                (ddr4a_cross_to_host_m0_read),                             //   input,    width = 1,                                                     .read
		.ddr4a_cross_to_host_m0_readdata                            (ddr4a_cross_to_host_m0_readdata),                         //  output,  width = 512,                                                     .readdata
		.ddr4a_cross_to_host_m0_readdatavalid                       (ddr4a_cross_to_host_m0_readdatavalid),                    //  output,    width = 1,                                                     .readdatavalid
		.ddr4a_cross_to_host_m0_write                               (ddr4a_cross_to_host_m0_write),                            //   input,    width = 1,                                                     .write
		.ddr4a_cross_to_host_m0_writedata                           (ddr4a_cross_to_host_m0_writedata),                        //   input,  width = 512,                                                     .writedata
		.ddr4a_cross_to_host_m0_debugaccess                         (ddr4a_cross_to_host_m0_debugaccess),                      //   input,    width = 1,                                                     .debugaccess
		.ddr4a_pipe_1_burst16_s0_address                            (mm_interconnect_7_ddr4a_pipe_1_burst16_s0_address),       //  output,   width = 32,                              ddr4a_pipe_1_burst16_s0.address
		.ddr4a_pipe_1_burst16_s0_write                              (mm_interconnect_7_ddr4a_pipe_1_burst16_s0_write),         //  output,    width = 1,                                                     .write
		.ddr4a_pipe_1_burst16_s0_read                               (mm_interconnect_7_ddr4a_pipe_1_burst16_s0_read),          //  output,    width = 1,                                                     .read
		.ddr4a_pipe_1_burst16_s0_readdata                           (mm_interconnect_7_ddr4a_pipe_1_burst16_s0_readdata),      //   input,  width = 512,                                                     .readdata
		.ddr4a_pipe_1_burst16_s0_writedata                          (mm_interconnect_7_ddr4a_pipe_1_burst16_s0_writedata),     //  output,  width = 512,                                                     .writedata
		.ddr4a_pipe_1_burst16_s0_burstcount                         (mm_interconnect_7_ddr4a_pipe_1_burst16_s0_burstcount),    //  output,    width = 5,                                                     .burstcount
		.ddr4a_pipe_1_burst16_s0_byteenable                         (mm_interconnect_7_ddr4a_pipe_1_burst16_s0_byteenable),    //  output,   width = 64,                                                     .byteenable
		.ddr4a_pipe_1_burst16_s0_readdatavalid                      (mm_interconnect_7_ddr4a_pipe_1_burst16_s0_readdatavalid), //   input,    width = 1,                                                     .readdatavalid
		.ddr4a_pipe_1_burst16_s0_waitrequest                        (mm_interconnect_7_ddr4a_pipe_1_burst16_s0_waitrequest),   //   input,    width = 1,                                                     .waitrequest
		.ddr4a_pipe_1_burst16_s0_debugaccess                        (mm_interconnect_7_ddr4a_pipe_1_burst16_s0_debugaccess),   //  output,    width = 1,                                                     .debugaccess
		.ddr4a_cross_to_kernel_m0_reset_reset_bridge_in_reset_reset (rst_controller_reset_out_reset),                          //   input,    width = 1, ddr4a_cross_to_kernel_m0_reset_reset_bridge_in_reset.reset
		.ddr_clk_a_out_clk_clk                                      (ddr_clk_a_out_clk_clk)                                    //   input,    width = 1,                                    ddr_clk_a_out_clk.clk
	);

	ddr_board_altera_mm_interconnect_191_f25fkey mm_interconnect_8 (
		.ddr4b_pipe_1_burst16_m0_address                        (ddr4b_pipe_1_burst16_m0_address),                 //   input,   width = 32,                          ddr4b_pipe_1_burst16_m0.address
		.ddr4b_pipe_1_burst16_m0_waitrequest                    (ddr4b_pipe_1_burst16_m0_waitrequest),             //  output,    width = 1,                                                 .waitrequest
		.ddr4b_pipe_1_burst16_m0_burstcount                     (ddr4b_pipe_1_burst16_m0_burstcount),              //   input,    width = 5,                                                 .burstcount
		.ddr4b_pipe_1_burst16_m0_byteenable                     (ddr4b_pipe_1_burst16_m0_byteenable),              //   input,   width = 64,                                                 .byteenable
		.ddr4b_pipe_1_burst16_m0_read                           (ddr4b_pipe_1_burst16_m0_read),                    //   input,    width = 1,                                                 .read
		.ddr4b_pipe_1_burst16_m0_readdata                       (ddr4b_pipe_1_burst16_m0_readdata),                //  output,  width = 512,                                                 .readdata
		.ddr4b_pipe_1_burst16_m0_readdatavalid                  (ddr4b_pipe_1_burst16_m0_readdatavalid),           //  output,    width = 1,                                                 .readdatavalid
		.ddr4b_pipe_1_burst16_m0_write                          (ddr4b_pipe_1_burst16_m0_write),                   //   input,    width = 1,                                                 .write
		.ddr4b_pipe_1_burst16_m0_writedata                      (ddr4b_pipe_1_burst16_m0_writedata),               //   input,  width = 512,                                                 .writedata
		.ddr4b_pipe_1_burst16_m0_debugaccess                    (ddr4b_pipe_1_burst16_m0_debugaccess),             //   input,    width = 1,                                                 .debugaccess
		.ddr4b_pipe_0_s0_address                                (mm_interconnect_8_ddr4b_pipe_0_s0_address),       //  output,   width = 32,                                  ddr4b_pipe_0_s0.address
		.ddr4b_pipe_0_s0_write                                  (mm_interconnect_8_ddr4b_pipe_0_s0_write),         //  output,    width = 1,                                                 .write
		.ddr4b_pipe_0_s0_read                                   (mm_interconnect_8_ddr4b_pipe_0_s0_read),          //  output,    width = 1,                                                 .read
		.ddr4b_pipe_0_s0_readdata                               (mm_interconnect_8_ddr4b_pipe_0_s0_readdata),      //   input,  width = 512,                                                 .readdata
		.ddr4b_pipe_0_s0_writedata                              (mm_interconnect_8_ddr4b_pipe_0_s0_writedata),     //  output,  width = 512,                                                 .writedata
		.ddr4b_pipe_0_s0_burstcount                             (mm_interconnect_8_ddr4b_pipe_0_s0_burstcount),    //  output,    width = 7,                                                 .burstcount
		.ddr4b_pipe_0_s0_byteenable                             (mm_interconnect_8_ddr4b_pipe_0_s0_byteenable),    //  output,   width = 64,                                                 .byteenable
		.ddr4b_pipe_0_s0_readdatavalid                          (mm_interconnect_8_ddr4b_pipe_0_s0_readdatavalid), //   input,    width = 1,                                                 .readdatavalid
		.ddr4b_pipe_0_s0_waitrequest                            (mm_interconnect_8_ddr4b_pipe_0_s0_waitrequest),   //   input,    width = 1,                                                 .waitrequest
		.ddr4b_pipe_0_s0_debugaccess                            (mm_interconnect_8_ddr4b_pipe_0_s0_debugaccess),   //  output,    width = 1,                                                 .debugaccess
		.ddr4b_pipe_1_burst16_reset_reset_bridge_in_reset_reset (rst_controller_002_reset_out_reset),              //   input,    width = 1, ddr4b_pipe_1_burst16_reset_reset_bridge_in_reset.reset
		.ddr_clk_b_out_clk_clk                                  (ddr_clk_b_out_clk_clk)                            //   input,    width = 1,                                ddr_clk_b_out_clk.clk
	);

	ddr_board_altera_mm_interconnect_191_rcnfcta mm_interconnect_9 (
		.ddr4b_cross_to_kernel_m0_address                           (ddr4b_cross_to_kernel_m0_address),                        //   input,   width = 32,                             ddr4b_cross_to_kernel_m0.address
		.ddr4b_cross_to_kernel_m0_waitrequest                       (ddr4b_cross_to_kernel_m0_waitrequest),                    //  output,    width = 1,                                                     .waitrequest
		.ddr4b_cross_to_kernel_m0_burstcount                        (ddr4b_cross_to_kernel_m0_burstcount),                     //   input,    width = 5,                                                     .burstcount
		.ddr4b_cross_to_kernel_m0_byteenable                        (ddr4b_cross_to_kernel_m0_byteenable),                     //   input,   width = 64,                                                     .byteenable
		.ddr4b_cross_to_kernel_m0_read                              (ddr4b_cross_to_kernel_m0_read),                           //   input,    width = 1,                                                     .read
		.ddr4b_cross_to_kernel_m0_readdata                          (ddr4b_cross_to_kernel_m0_readdata),                       //  output,  width = 512,                                                     .readdata
		.ddr4b_cross_to_kernel_m0_readdatavalid                     (ddr4b_cross_to_kernel_m0_readdatavalid),                  //  output,    width = 1,                                                     .readdatavalid
		.ddr4b_cross_to_kernel_m0_write                             (ddr4b_cross_to_kernel_m0_write),                          //   input,    width = 1,                                                     .write
		.ddr4b_cross_to_kernel_m0_writedata                         (ddr4b_cross_to_kernel_m0_writedata),                      //   input,  width = 512,                                                     .writedata
		.ddr4b_cross_to_kernel_m0_debugaccess                       (ddr4b_cross_to_kernel_m0_debugaccess),                    //   input,    width = 1,                                                     .debugaccess
		.ddr4b_cross_to_host_m0_address                             (ddr4b_cross_to_host_m0_address),                          //   input,   width = 32,                               ddr4b_cross_to_host_m0.address
		.ddr4b_cross_to_host_m0_waitrequest                         (ddr4b_cross_to_host_m0_waitrequest),                      //  output,    width = 1,                                                     .waitrequest
		.ddr4b_cross_to_host_m0_burstcount                          (ddr4b_cross_to_host_m0_burstcount),                       //   input,    width = 5,                                                     .burstcount
		.ddr4b_cross_to_host_m0_byteenable                          (ddr4b_cross_to_host_m0_byteenable),                       //   input,   width = 64,                                                     .byteenable
		.ddr4b_cross_to_host_m0_read                                (ddr4b_cross_to_host_m0_read),                             //   input,    width = 1,                                                     .read
		.ddr4b_cross_to_host_m0_readdata                            (ddr4b_cross_to_host_m0_readdata),                         //  output,  width = 512,                                                     .readdata
		.ddr4b_cross_to_host_m0_readdatavalid                       (ddr4b_cross_to_host_m0_readdatavalid),                    //  output,    width = 1,                                                     .readdatavalid
		.ddr4b_cross_to_host_m0_write                               (ddr4b_cross_to_host_m0_write),                            //   input,    width = 1,                                                     .write
		.ddr4b_cross_to_host_m0_writedata                           (ddr4b_cross_to_host_m0_writedata),                        //   input,  width = 512,                                                     .writedata
		.ddr4b_cross_to_host_m0_debugaccess                         (ddr4b_cross_to_host_m0_debugaccess),                      //   input,    width = 1,                                                     .debugaccess
		.ddr4b_pipe_1_burst16_s0_address                            (mm_interconnect_9_ddr4b_pipe_1_burst16_s0_address),       //  output,   width = 32,                              ddr4b_pipe_1_burst16_s0.address
		.ddr4b_pipe_1_burst16_s0_write                              (mm_interconnect_9_ddr4b_pipe_1_burst16_s0_write),         //  output,    width = 1,                                                     .write
		.ddr4b_pipe_1_burst16_s0_read                               (mm_interconnect_9_ddr4b_pipe_1_burst16_s0_read),          //  output,    width = 1,                                                     .read
		.ddr4b_pipe_1_burst16_s0_readdata                           (mm_interconnect_9_ddr4b_pipe_1_burst16_s0_readdata),      //   input,  width = 512,                                                     .readdata
		.ddr4b_pipe_1_burst16_s0_writedata                          (mm_interconnect_9_ddr4b_pipe_1_burst16_s0_writedata),     //  output,  width = 512,                                                     .writedata
		.ddr4b_pipe_1_burst16_s0_burstcount                         (mm_interconnect_9_ddr4b_pipe_1_burst16_s0_burstcount),    //  output,    width = 5,                                                     .burstcount
		.ddr4b_pipe_1_burst16_s0_byteenable                         (mm_interconnect_9_ddr4b_pipe_1_burst16_s0_byteenable),    //  output,   width = 64,                                                     .byteenable
		.ddr4b_pipe_1_burst16_s0_readdatavalid                      (mm_interconnect_9_ddr4b_pipe_1_burst16_s0_readdatavalid), //   input,    width = 1,                                                     .readdatavalid
		.ddr4b_pipe_1_burst16_s0_waitrequest                        (mm_interconnect_9_ddr4b_pipe_1_burst16_s0_waitrequest),   //   input,    width = 1,                                                     .waitrequest
		.ddr4b_pipe_1_burst16_s0_debugaccess                        (mm_interconnect_9_ddr4b_pipe_1_burst16_s0_debugaccess),   //  output,    width = 1,                                                     .debugaccess
		.ddr4b_cross_to_kernel_m0_reset_reset_bridge_in_reset_reset (rst_controller_002_reset_out_reset),                      //   input,    width = 1, ddr4b_cross_to_kernel_m0_reset_reset_bridge_in_reset.reset
		.ddr_clk_b_out_clk_clk                                      (ddr_clk_b_out_clk_clk)                                    //   input,    width = 1,                                    ddr_clk_b_out_clk.clk
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (global_reset_out_reset_reset),   //   input,  width = 1, reset_in0.reset
		.clk            (ddr_clk_a_out_clk_clk),          //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_reset_out_reset), //  output,  width = 1, reset_out.reset
		.reset_req      (),                               // (terminated),                       
		.reset_req_in0  (1'b0),                           // (terminated),                       
		.reset_in1      (1'b0),                           // (terminated),                       
		.reset_req_in1  (1'b0),                           // (terminated),                       
		.reset_in2      (1'b0),                           // (terminated),                       
		.reset_req_in2  (1'b0),                           // (terminated),                       
		.reset_in3      (1'b0),                           // (terminated),                       
		.reset_req_in3  (1'b0),                           // (terminated),                       
		.reset_in4      (1'b0),                           // (terminated),                       
		.reset_req_in4  (1'b0),                           // (terminated),                       
		.reset_in5      (1'b0),                           // (terminated),                       
		.reset_req_in5  (1'b0),                           // (terminated),                       
		.reset_in6      (1'b0),                           // (terminated),                       
		.reset_req_in6  (1'b0),                           // (terminated),                       
		.reset_in7      (1'b0),                           // (terminated),                       
		.reset_req_in7  (1'b0),                           // (terminated),                       
		.reset_in8      (1'b0),                           // (terminated),                       
		.reset_req_in8  (1'b0),                           // (terminated),                       
		.reset_in9      (1'b0),                           // (terminated),                       
		.reset_req_in9  (1'b0),                           // (terminated),                       
		.reset_in10     (1'b0),                           // (terminated),                       
		.reset_req_in10 (1'b0),                           // (terminated),                       
		.reset_in11     (1'b0),                           // (terminated),                       
		.reset_req_in11 (1'b0),                           // (terminated),                       
		.reset_in12     (1'b0),                           // (terminated),                       
		.reset_req_in12 (1'b0),                           // (terminated),                       
		.reset_in13     (1'b0),                           // (terminated),                       
		.reset_req_in13 (1'b0),                           // (terminated),                       
		.reset_in14     (1'b0),                           // (terminated),                       
		.reset_req_in14 (1'b0),                           // (terminated),                       
		.reset_in15     (1'b0),                           // (terminated),                       
		.reset_req_in15 (1'b0)                            // (terminated),                       
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_001 (
		.reset_in0      (global_reset_out_reset_reset),       //   input,  width = 1, reset_in0.reset
		.clk            (kernel_clk_out_clk_clk),             //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_001_reset_out_reset), //  output,  width = 1, reset_out.reset
		.reset_req      (),                                   // (terminated),                       
		.reset_req_in0  (1'b0),                               // (terminated),                       
		.reset_in1      (1'b0),                               // (terminated),                       
		.reset_req_in1  (1'b0),                               // (terminated),                       
		.reset_in2      (1'b0),                               // (terminated),                       
		.reset_req_in2  (1'b0),                               // (terminated),                       
		.reset_in3      (1'b0),                               // (terminated),                       
		.reset_req_in3  (1'b0),                               // (terminated),                       
		.reset_in4      (1'b0),                               // (terminated),                       
		.reset_req_in4  (1'b0),                               // (terminated),                       
		.reset_in5      (1'b0),                               // (terminated),                       
		.reset_req_in5  (1'b0),                               // (terminated),                       
		.reset_in6      (1'b0),                               // (terminated),                       
		.reset_req_in6  (1'b0),                               // (terminated),                       
		.reset_in7      (1'b0),                               // (terminated),                       
		.reset_req_in7  (1'b0),                               // (terminated),                       
		.reset_in8      (1'b0),                               // (terminated),                       
		.reset_req_in8  (1'b0),                               // (terminated),                       
		.reset_in9      (1'b0),                               // (terminated),                       
		.reset_req_in9  (1'b0),                               // (terminated),                       
		.reset_in10     (1'b0),                               // (terminated),                       
		.reset_req_in10 (1'b0),                               // (terminated),                       
		.reset_in11     (1'b0),                               // (terminated),                       
		.reset_req_in11 (1'b0),                               // (terminated),                       
		.reset_in12     (1'b0),                               // (terminated),                       
		.reset_req_in12 (1'b0),                               // (terminated),                       
		.reset_in13     (1'b0),                               // (terminated),                       
		.reset_req_in13 (1'b0),                               // (terminated),                       
		.reset_in14     (1'b0),                               // (terminated),                       
		.reset_req_in14 (1'b0),                               // (terminated),                       
		.reset_in15     (1'b0),                               // (terminated),                       
		.reset_req_in15 (1'b0)                                // (terminated),                       
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_002 (
		.reset_in0      (global_reset_out_reset_reset),       //   input,  width = 1, reset_in0.reset
		.clk            (ddr_clk_b_out_clk_clk),              //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_002_reset_out_reset), //  output,  width = 1, reset_out.reset
		.reset_req      (),                                   // (terminated),                       
		.reset_req_in0  (1'b0),                               // (terminated),                       
		.reset_in1      (1'b0),                               // (terminated),                       
		.reset_req_in1  (1'b0),                               // (terminated),                       
		.reset_in2      (1'b0),                               // (terminated),                       
		.reset_req_in2  (1'b0),                               // (terminated),                       
		.reset_in3      (1'b0),                               // (terminated),                       
		.reset_req_in3  (1'b0),                               // (terminated),                       
		.reset_in4      (1'b0),                               // (terminated),                       
		.reset_req_in4  (1'b0),                               // (terminated),                       
		.reset_in5      (1'b0),                               // (terminated),                       
		.reset_req_in5  (1'b0),                               // (terminated),                       
		.reset_in6      (1'b0),                               // (terminated),                       
		.reset_req_in6  (1'b0),                               // (terminated),                       
		.reset_in7      (1'b0),                               // (terminated),                       
		.reset_req_in7  (1'b0),                               // (terminated),                       
		.reset_in8      (1'b0),                               // (terminated),                       
		.reset_req_in8  (1'b0),                               // (terminated),                       
		.reset_in9      (1'b0),                               // (terminated),                       
		.reset_req_in9  (1'b0),                               // (terminated),                       
		.reset_in10     (1'b0),                               // (terminated),                       
		.reset_req_in10 (1'b0),                               // (terminated),                       
		.reset_in11     (1'b0),                               // (terminated),                       
		.reset_req_in11 (1'b0),                               // (terminated),                       
		.reset_in12     (1'b0),                               // (terminated),                       
		.reset_req_in12 (1'b0),                               // (terminated),                       
		.reset_in13     (1'b0),                               // (terminated),                       
		.reset_req_in13 (1'b0),                               // (terminated),                       
		.reset_in14     (1'b0),                               // (terminated),                       
		.reset_req_in14 (1'b0),                               // (terminated),                       
		.reset_in15     (1'b0),                               // (terminated),                       
		.reset_req_in15 (1'b0)                                // (terminated),                       
	);

endmodule
