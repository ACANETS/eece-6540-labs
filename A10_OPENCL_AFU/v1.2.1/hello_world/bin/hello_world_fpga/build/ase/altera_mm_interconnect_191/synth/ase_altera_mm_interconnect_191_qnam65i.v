// ase_altera_mm_interconnect_191_qnam65i.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 19.2 57

`timescale 1 ps / 1 ps
module ase_altera_mm_interconnect_191_qnam65i (
		input  wire [12:0]  ase_avmm_pipe_0_m0_address,                           //                          ase_avmm_pipe_0_m0.address
		output wire         ase_avmm_pipe_0_m0_waitrequest,                       //                                            .waitrequest
		input  wire [0:0]   ase_avmm_pipe_0_m0_burstcount,                        //                                            .burstcount
		input  wire [7:0]   ase_avmm_pipe_0_m0_byteenable,                        //                                            .byteenable
		input  wire         ase_avmm_pipe_0_m0_read,                              //                                            .read
		output wire [63:0]  ase_avmm_pipe_0_m0_readdata,                          //                                            .readdata
		output wire         ase_avmm_pipe_0_m0_readdatavalid,                     //                                            .readdatavalid
		input  wire         ase_avmm_pipe_0_m0_write,                             //                                            .write
		input  wire [63:0]  ase_avmm_pipe_0_m0_writedata,                         //                                            .writedata
		input  wire         ase_avmm_pipe_0_m0_debugaccess,                       //                                            .debugaccess
		output wire [2:0]   afu_id_avmm_slave_0_afu_cfg_slave_address,            //           afu_id_avmm_slave_0_afu_cfg_slave.address
		output wire         afu_id_avmm_slave_0_afu_cfg_slave_write,              //                                            .write
		output wire         afu_id_avmm_slave_0_afu_cfg_slave_read,               //                                            .read
		input  wire [63:0]  afu_id_avmm_slave_0_afu_cfg_slave_readdata,           //                                            .readdata
		output wire [63:0]  afu_id_avmm_slave_0_afu_cfg_slave_writedata,          //                                            .writedata
		output wire         address_span_extender_0_cntl_write,                   //                address_span_extender_0_cntl.write
		output wire         address_span_extender_0_cntl_read,                    //                                            .read
		input  wire [63:0]  address_span_extender_0_cntl_readdata,                //                                            .readdata
		output wire [63:0]  address_span_extender_0_cntl_writedata,               //                                            .writedata
		output wire [7:0]   address_span_extender_0_cntl_byteenable,              //                                            .byteenable
		output wire [5:0]   address_span_extender_0_windowed_slave_address,       //      address_span_extender_0_windowed_slave.address
		output wire         address_span_extender_0_windowed_slave_write,         //                                            .write
		output wire         address_span_extender_0_windowed_slave_read,          //                                            .read
		input  wire [511:0] address_span_extender_0_windowed_slave_readdata,      //                                            .readdata
		output wire [511:0] address_span_extender_0_windowed_slave_writedata,     //                                            .writedata
		output wire [3:0]   address_span_extender_0_windowed_slave_burstcount,    //                                            .burstcount
		output wire [63:0]  address_span_extender_0_windowed_slave_byteenable,    //                                            .byteenable
		input  wire         address_span_extender_0_windowed_slave_readdatavalid, //                                            .readdatavalid
		input  wire         address_span_extender_0_windowed_slave_waitrequest,   //                                            .waitrequest
		input  wire         ase_avmm_pipe_0_reset_reset_bridge_in_reset_reset,    // ase_avmm_pipe_0_reset_reset_bridge_in_reset.reset
		input  wire         clock_in_out_clk_clk                                  //                            clock_in_out_clk.clk
	);

	wire          ase_avmm_pipe_0_m0_translator_avalon_universal_master_0_waitrequest;        // ase_avmm_pipe_0_m0_agent:av_waitrequest -> ase_avmm_pipe_0_m0_translator:uav_waitrequest
	wire   [63:0] ase_avmm_pipe_0_m0_translator_avalon_universal_master_0_readdata;           // ase_avmm_pipe_0_m0_agent:av_readdata -> ase_avmm_pipe_0_m0_translator:uav_readdata
	wire          ase_avmm_pipe_0_m0_translator_avalon_universal_master_0_debugaccess;        // ase_avmm_pipe_0_m0_translator:uav_debugaccess -> ase_avmm_pipe_0_m0_agent:av_debugaccess
	wire   [12:0] ase_avmm_pipe_0_m0_translator_avalon_universal_master_0_address;            // ase_avmm_pipe_0_m0_translator:uav_address -> ase_avmm_pipe_0_m0_agent:av_address
	wire          ase_avmm_pipe_0_m0_translator_avalon_universal_master_0_read;               // ase_avmm_pipe_0_m0_translator:uav_read -> ase_avmm_pipe_0_m0_agent:av_read
	wire    [7:0] ase_avmm_pipe_0_m0_translator_avalon_universal_master_0_byteenable;         // ase_avmm_pipe_0_m0_translator:uav_byteenable -> ase_avmm_pipe_0_m0_agent:av_byteenable
	wire          ase_avmm_pipe_0_m0_translator_avalon_universal_master_0_readdatavalid;      // ase_avmm_pipe_0_m0_agent:av_readdatavalid -> ase_avmm_pipe_0_m0_translator:uav_readdatavalid
	wire          ase_avmm_pipe_0_m0_translator_avalon_universal_master_0_lock;               // ase_avmm_pipe_0_m0_translator:uav_lock -> ase_avmm_pipe_0_m0_agent:av_lock
	wire          ase_avmm_pipe_0_m0_translator_avalon_universal_master_0_write;              // ase_avmm_pipe_0_m0_translator:uav_write -> ase_avmm_pipe_0_m0_agent:av_write
	wire   [63:0] ase_avmm_pipe_0_m0_translator_avalon_universal_master_0_writedata;          // ase_avmm_pipe_0_m0_translator:uav_writedata -> ase_avmm_pipe_0_m0_agent:av_writedata
	wire    [3:0] ase_avmm_pipe_0_m0_translator_avalon_universal_master_0_burstcount;         // ase_avmm_pipe_0_m0_translator:uav_burstcount -> ase_avmm_pipe_0_m0_agent:av_burstcount
	wire   [63:0] afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_readdata;                        // afu_id_avmm_slave_0_afu_cfg_slave_translator:uav_readdata -> afu_id_avmm_slave_0_afu_cfg_slave_agent:m0_readdata
	wire          afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_waitrequest;                     // afu_id_avmm_slave_0_afu_cfg_slave_translator:uav_waitrequest -> afu_id_avmm_slave_0_afu_cfg_slave_agent:m0_waitrequest
	wire          afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_debugaccess;                     // afu_id_avmm_slave_0_afu_cfg_slave_agent:m0_debugaccess -> afu_id_avmm_slave_0_afu_cfg_slave_translator:uav_debugaccess
	wire   [12:0] afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_address;                         // afu_id_avmm_slave_0_afu_cfg_slave_agent:m0_address -> afu_id_avmm_slave_0_afu_cfg_slave_translator:uav_address
	wire    [7:0] afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_byteenable;                      // afu_id_avmm_slave_0_afu_cfg_slave_agent:m0_byteenable -> afu_id_avmm_slave_0_afu_cfg_slave_translator:uav_byteenable
	wire          afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_read;                            // afu_id_avmm_slave_0_afu_cfg_slave_agent:m0_read -> afu_id_avmm_slave_0_afu_cfg_slave_translator:uav_read
	wire          afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_readdatavalid;                   // afu_id_avmm_slave_0_afu_cfg_slave_translator:uav_readdatavalid -> afu_id_avmm_slave_0_afu_cfg_slave_agent:m0_readdatavalid
	wire          afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_lock;                            // afu_id_avmm_slave_0_afu_cfg_slave_agent:m0_lock -> afu_id_avmm_slave_0_afu_cfg_slave_translator:uav_lock
	wire   [63:0] afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_writedata;                       // afu_id_avmm_slave_0_afu_cfg_slave_agent:m0_writedata -> afu_id_avmm_slave_0_afu_cfg_slave_translator:uav_writedata
	wire          afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_write;                           // afu_id_avmm_slave_0_afu_cfg_slave_agent:m0_write -> afu_id_avmm_slave_0_afu_cfg_slave_translator:uav_write
	wire    [3:0] afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_burstcount;                      // afu_id_avmm_slave_0_afu_cfg_slave_agent:m0_burstcount -> afu_id_avmm_slave_0_afu_cfg_slave_translator:uav_burstcount
	wire          afu_id_avmm_slave_0_afu_cfg_slave_agent_rf_source_valid;                    // afu_id_avmm_slave_0_afu_cfg_slave_agent:rf_source_valid -> afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo:in_valid
	wire  [137:0] afu_id_avmm_slave_0_afu_cfg_slave_agent_rf_source_data;                     // afu_id_avmm_slave_0_afu_cfg_slave_agent:rf_source_data -> afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo:in_data
	wire          afu_id_avmm_slave_0_afu_cfg_slave_agent_rf_source_ready;                    // afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo:in_ready -> afu_id_avmm_slave_0_afu_cfg_slave_agent:rf_source_ready
	wire          afu_id_avmm_slave_0_afu_cfg_slave_agent_rf_source_startofpacket;            // afu_id_avmm_slave_0_afu_cfg_slave_agent:rf_source_startofpacket -> afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo:in_startofpacket
	wire          afu_id_avmm_slave_0_afu_cfg_slave_agent_rf_source_endofpacket;              // afu_id_avmm_slave_0_afu_cfg_slave_agent:rf_source_endofpacket -> afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo:in_endofpacket
	wire          afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo_out_valid;                 // afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo:out_valid -> afu_id_avmm_slave_0_afu_cfg_slave_agent:rf_sink_valid
	wire  [137:0] afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo_out_data;                  // afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo:out_data -> afu_id_avmm_slave_0_afu_cfg_slave_agent:rf_sink_data
	wire          afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo_out_ready;                 // afu_id_avmm_slave_0_afu_cfg_slave_agent:rf_sink_ready -> afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo:out_ready
	wire          afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo_out_startofpacket;         // afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo:out_startofpacket -> afu_id_avmm_slave_0_afu_cfg_slave_agent:rf_sink_startofpacket
	wire          afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo_out_endofpacket;           // afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo:out_endofpacket -> afu_id_avmm_slave_0_afu_cfg_slave_agent:rf_sink_endofpacket
	wire          afu_id_avmm_slave_0_afu_cfg_slave_agent_rdata_fifo_src_valid;               // afu_id_avmm_slave_0_afu_cfg_slave_agent:rdata_fifo_src_valid -> afu_id_avmm_slave_0_afu_cfg_slave_agent:rdata_fifo_sink_valid
	wire   [65:0] afu_id_avmm_slave_0_afu_cfg_slave_agent_rdata_fifo_src_data;                // afu_id_avmm_slave_0_afu_cfg_slave_agent:rdata_fifo_src_data -> afu_id_avmm_slave_0_afu_cfg_slave_agent:rdata_fifo_sink_data
	wire          afu_id_avmm_slave_0_afu_cfg_slave_agent_rdata_fifo_src_ready;               // afu_id_avmm_slave_0_afu_cfg_slave_agent:rdata_fifo_sink_ready -> afu_id_avmm_slave_0_afu_cfg_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_src_valid;                                                          // cmd_mux:src_valid -> afu_id_avmm_slave_0_afu_cfg_slave_agent:cp_valid
	wire  [136:0] cmd_mux_src_data;                                                           // cmd_mux:src_data -> afu_id_avmm_slave_0_afu_cfg_slave_agent:cp_data
	wire          cmd_mux_src_ready;                                                          // afu_id_avmm_slave_0_afu_cfg_slave_agent:cp_ready -> cmd_mux:src_ready
	wire    [2:0] cmd_mux_src_channel;                                                        // cmd_mux:src_channel -> afu_id_avmm_slave_0_afu_cfg_slave_agent:cp_channel
	wire          cmd_mux_src_startofpacket;                                                  // cmd_mux:src_startofpacket -> afu_id_avmm_slave_0_afu_cfg_slave_agent:cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                                    // cmd_mux:src_endofpacket -> afu_id_avmm_slave_0_afu_cfg_slave_agent:cp_endofpacket
	wire   [63:0] address_span_extender_0_cntl_agent_m0_readdata;                             // address_span_extender_0_cntl_translator:uav_readdata -> address_span_extender_0_cntl_agent:m0_readdata
	wire          address_span_extender_0_cntl_agent_m0_waitrequest;                          // address_span_extender_0_cntl_translator:uav_waitrequest -> address_span_extender_0_cntl_agent:m0_waitrequest
	wire          address_span_extender_0_cntl_agent_m0_debugaccess;                          // address_span_extender_0_cntl_agent:m0_debugaccess -> address_span_extender_0_cntl_translator:uav_debugaccess
	wire   [12:0] address_span_extender_0_cntl_agent_m0_address;                              // address_span_extender_0_cntl_agent:m0_address -> address_span_extender_0_cntl_translator:uav_address
	wire    [7:0] address_span_extender_0_cntl_agent_m0_byteenable;                           // address_span_extender_0_cntl_agent:m0_byteenable -> address_span_extender_0_cntl_translator:uav_byteenable
	wire          address_span_extender_0_cntl_agent_m0_read;                                 // address_span_extender_0_cntl_agent:m0_read -> address_span_extender_0_cntl_translator:uav_read
	wire          address_span_extender_0_cntl_agent_m0_readdatavalid;                        // address_span_extender_0_cntl_translator:uav_readdatavalid -> address_span_extender_0_cntl_agent:m0_readdatavalid
	wire          address_span_extender_0_cntl_agent_m0_lock;                                 // address_span_extender_0_cntl_agent:m0_lock -> address_span_extender_0_cntl_translator:uav_lock
	wire   [63:0] address_span_extender_0_cntl_agent_m0_writedata;                            // address_span_extender_0_cntl_agent:m0_writedata -> address_span_extender_0_cntl_translator:uav_writedata
	wire          address_span_extender_0_cntl_agent_m0_write;                                // address_span_extender_0_cntl_agent:m0_write -> address_span_extender_0_cntl_translator:uav_write
	wire    [3:0] address_span_extender_0_cntl_agent_m0_burstcount;                           // address_span_extender_0_cntl_agent:m0_burstcount -> address_span_extender_0_cntl_translator:uav_burstcount
	wire          address_span_extender_0_cntl_agent_rf_source_valid;                         // address_span_extender_0_cntl_agent:rf_source_valid -> address_span_extender_0_cntl_agent_rsp_fifo:in_valid
	wire  [137:0] address_span_extender_0_cntl_agent_rf_source_data;                          // address_span_extender_0_cntl_agent:rf_source_data -> address_span_extender_0_cntl_agent_rsp_fifo:in_data
	wire          address_span_extender_0_cntl_agent_rf_source_ready;                         // address_span_extender_0_cntl_agent_rsp_fifo:in_ready -> address_span_extender_0_cntl_agent:rf_source_ready
	wire          address_span_extender_0_cntl_agent_rf_source_startofpacket;                 // address_span_extender_0_cntl_agent:rf_source_startofpacket -> address_span_extender_0_cntl_agent_rsp_fifo:in_startofpacket
	wire          address_span_extender_0_cntl_agent_rf_source_endofpacket;                   // address_span_extender_0_cntl_agent:rf_source_endofpacket -> address_span_extender_0_cntl_agent_rsp_fifo:in_endofpacket
	wire          address_span_extender_0_cntl_agent_rsp_fifo_out_valid;                      // address_span_extender_0_cntl_agent_rsp_fifo:out_valid -> address_span_extender_0_cntl_agent:rf_sink_valid
	wire  [137:0] address_span_extender_0_cntl_agent_rsp_fifo_out_data;                       // address_span_extender_0_cntl_agent_rsp_fifo:out_data -> address_span_extender_0_cntl_agent:rf_sink_data
	wire          address_span_extender_0_cntl_agent_rsp_fifo_out_ready;                      // address_span_extender_0_cntl_agent:rf_sink_ready -> address_span_extender_0_cntl_agent_rsp_fifo:out_ready
	wire          address_span_extender_0_cntl_agent_rsp_fifo_out_startofpacket;              // address_span_extender_0_cntl_agent_rsp_fifo:out_startofpacket -> address_span_extender_0_cntl_agent:rf_sink_startofpacket
	wire          address_span_extender_0_cntl_agent_rsp_fifo_out_endofpacket;                // address_span_extender_0_cntl_agent_rsp_fifo:out_endofpacket -> address_span_extender_0_cntl_agent:rf_sink_endofpacket
	wire          address_span_extender_0_cntl_agent_rdata_fifo_src_valid;                    // address_span_extender_0_cntl_agent:rdata_fifo_src_valid -> address_span_extender_0_cntl_agent:rdata_fifo_sink_valid
	wire   [65:0] address_span_extender_0_cntl_agent_rdata_fifo_src_data;                     // address_span_extender_0_cntl_agent:rdata_fifo_src_data -> address_span_extender_0_cntl_agent:rdata_fifo_sink_data
	wire          address_span_extender_0_cntl_agent_rdata_fifo_src_ready;                    // address_span_extender_0_cntl_agent:rdata_fifo_sink_ready -> address_span_extender_0_cntl_agent:rdata_fifo_src_ready
	wire          cmd_mux_001_src_valid;                                                      // cmd_mux_001:src_valid -> address_span_extender_0_cntl_agent:cp_valid
	wire  [136:0] cmd_mux_001_src_data;                                                       // cmd_mux_001:src_data -> address_span_extender_0_cntl_agent:cp_data
	wire          cmd_mux_001_src_ready;                                                      // address_span_extender_0_cntl_agent:cp_ready -> cmd_mux_001:src_ready
	wire    [2:0] cmd_mux_001_src_channel;                                                    // cmd_mux_001:src_channel -> address_span_extender_0_cntl_agent:cp_channel
	wire          cmd_mux_001_src_startofpacket;                                              // cmd_mux_001:src_startofpacket -> address_span_extender_0_cntl_agent:cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                // cmd_mux_001:src_endofpacket -> address_span_extender_0_cntl_agent:cp_endofpacket
	wire  [511:0] address_span_extender_0_windowed_slave_agent_m0_readdata;                   // address_span_extender_0_windowed_slave_translator:uav_readdata -> address_span_extender_0_windowed_slave_agent:m0_readdata
	wire          address_span_extender_0_windowed_slave_agent_m0_waitrequest;                // address_span_extender_0_windowed_slave_translator:uav_waitrequest -> address_span_extender_0_windowed_slave_agent:m0_waitrequest
	wire          address_span_extender_0_windowed_slave_agent_m0_debugaccess;                // address_span_extender_0_windowed_slave_agent:m0_debugaccess -> address_span_extender_0_windowed_slave_translator:uav_debugaccess
	wire   [12:0] address_span_extender_0_windowed_slave_agent_m0_address;                    // address_span_extender_0_windowed_slave_agent:m0_address -> address_span_extender_0_windowed_slave_translator:uav_address
	wire   [63:0] address_span_extender_0_windowed_slave_agent_m0_byteenable;                 // address_span_extender_0_windowed_slave_agent:m0_byteenable -> address_span_extender_0_windowed_slave_translator:uav_byteenable
	wire          address_span_extender_0_windowed_slave_agent_m0_read;                       // address_span_extender_0_windowed_slave_agent:m0_read -> address_span_extender_0_windowed_slave_translator:uav_read
	wire          address_span_extender_0_windowed_slave_agent_m0_readdatavalid;              // address_span_extender_0_windowed_slave_translator:uav_readdatavalid -> address_span_extender_0_windowed_slave_agent:m0_readdatavalid
	wire          address_span_extender_0_windowed_slave_agent_m0_lock;                       // address_span_extender_0_windowed_slave_agent:m0_lock -> address_span_extender_0_windowed_slave_translator:uav_lock
	wire  [511:0] address_span_extender_0_windowed_slave_agent_m0_writedata;                  // address_span_extender_0_windowed_slave_agent:m0_writedata -> address_span_extender_0_windowed_slave_translator:uav_writedata
	wire          address_span_extender_0_windowed_slave_agent_m0_write;                      // address_span_extender_0_windowed_slave_agent:m0_write -> address_span_extender_0_windowed_slave_translator:uav_write
	wire    [9:0] address_span_extender_0_windowed_slave_agent_m0_burstcount;                 // address_span_extender_0_windowed_slave_agent:m0_burstcount -> address_span_extender_0_windowed_slave_translator:uav_burstcount
	wire          address_span_extender_0_windowed_slave_agent_rf_source_valid;               // address_span_extender_0_windowed_slave_agent:rf_source_valid -> address_span_extender_0_windowed_slave_agent_rsp_fifo:in_valid
	wire  [641:0] address_span_extender_0_windowed_slave_agent_rf_source_data;                // address_span_extender_0_windowed_slave_agent:rf_source_data -> address_span_extender_0_windowed_slave_agent_rsp_fifo:in_data
	wire          address_span_extender_0_windowed_slave_agent_rf_source_ready;               // address_span_extender_0_windowed_slave_agent_rsp_fifo:in_ready -> address_span_extender_0_windowed_slave_agent:rf_source_ready
	wire          address_span_extender_0_windowed_slave_agent_rf_source_startofpacket;       // address_span_extender_0_windowed_slave_agent:rf_source_startofpacket -> address_span_extender_0_windowed_slave_agent_rsp_fifo:in_startofpacket
	wire          address_span_extender_0_windowed_slave_agent_rf_source_endofpacket;         // address_span_extender_0_windowed_slave_agent:rf_source_endofpacket -> address_span_extender_0_windowed_slave_agent_rsp_fifo:in_endofpacket
	wire          address_span_extender_0_windowed_slave_agent_rsp_fifo_out_valid;            // address_span_extender_0_windowed_slave_agent_rsp_fifo:out_valid -> address_span_extender_0_windowed_slave_agent:rf_sink_valid
	wire  [641:0] address_span_extender_0_windowed_slave_agent_rsp_fifo_out_data;             // address_span_extender_0_windowed_slave_agent_rsp_fifo:out_data -> address_span_extender_0_windowed_slave_agent:rf_sink_data
	wire          address_span_extender_0_windowed_slave_agent_rsp_fifo_out_ready;            // address_span_extender_0_windowed_slave_agent:rf_sink_ready -> address_span_extender_0_windowed_slave_agent_rsp_fifo:out_ready
	wire          address_span_extender_0_windowed_slave_agent_rsp_fifo_out_startofpacket;    // address_span_extender_0_windowed_slave_agent_rsp_fifo:out_startofpacket -> address_span_extender_0_windowed_slave_agent:rf_sink_startofpacket
	wire          address_span_extender_0_windowed_slave_agent_rsp_fifo_out_endofpacket;      // address_span_extender_0_windowed_slave_agent_rsp_fifo:out_endofpacket -> address_span_extender_0_windowed_slave_agent:rf_sink_endofpacket
	wire          address_span_extender_0_windowed_slave_agent_rdata_fifo_src_valid;          // address_span_extender_0_windowed_slave_agent:rdata_fifo_src_valid -> address_span_extender_0_windowed_slave_agent:rdata_fifo_sink_valid
	wire  [513:0] address_span_extender_0_windowed_slave_agent_rdata_fifo_src_data;           // address_span_extender_0_windowed_slave_agent:rdata_fifo_src_data -> address_span_extender_0_windowed_slave_agent:rdata_fifo_sink_data
	wire          address_span_extender_0_windowed_slave_agent_rdata_fifo_src_ready;          // address_span_extender_0_windowed_slave_agent:rdata_fifo_sink_ready -> address_span_extender_0_windowed_slave_agent:rdata_fifo_src_ready
	wire          ase_avmm_pipe_0_m0_agent_cp_valid;                                          // ase_avmm_pipe_0_m0_agent:cp_valid -> router:sink_valid
	wire  [136:0] ase_avmm_pipe_0_m0_agent_cp_data;                                           // ase_avmm_pipe_0_m0_agent:cp_data -> router:sink_data
	wire          ase_avmm_pipe_0_m0_agent_cp_ready;                                          // router:sink_ready -> ase_avmm_pipe_0_m0_agent:cp_ready
	wire          ase_avmm_pipe_0_m0_agent_cp_startofpacket;                                  // ase_avmm_pipe_0_m0_agent:cp_startofpacket -> router:sink_startofpacket
	wire          ase_avmm_pipe_0_m0_agent_cp_endofpacket;                                    // ase_avmm_pipe_0_m0_agent:cp_endofpacket -> router:sink_endofpacket
	wire          afu_id_avmm_slave_0_afu_cfg_slave_agent_rp_valid;                           // afu_id_avmm_slave_0_afu_cfg_slave_agent:rp_valid -> router_001:sink_valid
	wire  [136:0] afu_id_avmm_slave_0_afu_cfg_slave_agent_rp_data;                            // afu_id_avmm_slave_0_afu_cfg_slave_agent:rp_data -> router_001:sink_data
	wire          afu_id_avmm_slave_0_afu_cfg_slave_agent_rp_ready;                           // router_001:sink_ready -> afu_id_avmm_slave_0_afu_cfg_slave_agent:rp_ready
	wire          afu_id_avmm_slave_0_afu_cfg_slave_agent_rp_startofpacket;                   // afu_id_avmm_slave_0_afu_cfg_slave_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire          afu_id_avmm_slave_0_afu_cfg_slave_agent_rp_endofpacket;                     // afu_id_avmm_slave_0_afu_cfg_slave_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                       // router_001:src_valid -> rsp_demux:sink_valid
	wire  [136:0] router_001_src_data;                                                        // router_001:src_data -> rsp_demux:sink_data
	wire          router_001_src_ready;                                                       // rsp_demux:sink_ready -> router_001:src_ready
	wire    [2:0] router_001_src_channel;                                                     // router_001:src_channel -> rsp_demux:sink_channel
	wire          router_001_src_startofpacket;                                               // router_001:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_001_src_endofpacket;                                                 // router_001:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          address_span_extender_0_cntl_agent_rp_valid;                                // address_span_extender_0_cntl_agent:rp_valid -> router_002:sink_valid
	wire  [136:0] address_span_extender_0_cntl_agent_rp_data;                                 // address_span_extender_0_cntl_agent:rp_data -> router_002:sink_data
	wire          address_span_extender_0_cntl_agent_rp_ready;                                // router_002:sink_ready -> address_span_extender_0_cntl_agent:rp_ready
	wire          address_span_extender_0_cntl_agent_rp_startofpacket;                        // address_span_extender_0_cntl_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          address_span_extender_0_cntl_agent_rp_endofpacket;                          // address_span_extender_0_cntl_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                       // router_002:src_valid -> rsp_demux_001:sink_valid
	wire  [136:0] router_002_src_data;                                                        // router_002:src_data -> rsp_demux_001:sink_data
	wire          router_002_src_ready;                                                       // rsp_demux_001:sink_ready -> router_002:src_ready
	wire    [2:0] router_002_src_channel;                                                     // router_002:src_channel -> rsp_demux_001:sink_channel
	wire          router_002_src_startofpacket;                                               // router_002:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_002_src_endofpacket;                                                 // router_002:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          address_span_extender_0_windowed_slave_agent_rp_valid;                      // address_span_extender_0_windowed_slave_agent:rp_valid -> router_003:sink_valid
	wire  [640:0] address_span_extender_0_windowed_slave_agent_rp_data;                       // address_span_extender_0_windowed_slave_agent:rp_data -> router_003:sink_data
	wire          address_span_extender_0_windowed_slave_agent_rp_ready;                      // router_003:sink_ready -> address_span_extender_0_windowed_slave_agent:rp_ready
	wire          address_span_extender_0_windowed_slave_agent_rp_startofpacket;              // address_span_extender_0_windowed_slave_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          address_span_extender_0_windowed_slave_agent_rp_endofpacket;                // address_span_extender_0_windowed_slave_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          router_src_valid;                                                           // router:src_valid -> ase_avmm_pipe_0_m0_limiter:cmd_sink_valid
	wire  [136:0] router_src_data;                                                            // router:src_data -> ase_avmm_pipe_0_m0_limiter:cmd_sink_data
	wire          router_src_ready;                                                           // ase_avmm_pipe_0_m0_limiter:cmd_sink_ready -> router:src_ready
	wire    [2:0] router_src_channel;                                                         // router:src_channel -> ase_avmm_pipe_0_m0_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                   // router:src_startofpacket -> ase_avmm_pipe_0_m0_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                     // router:src_endofpacket -> ase_avmm_pipe_0_m0_limiter:cmd_sink_endofpacket
	wire  [136:0] ase_avmm_pipe_0_m0_limiter_cmd_src_data;                                    // ase_avmm_pipe_0_m0_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          ase_avmm_pipe_0_m0_limiter_cmd_src_ready;                                   // cmd_demux:sink_ready -> ase_avmm_pipe_0_m0_limiter:cmd_src_ready
	wire    [2:0] ase_avmm_pipe_0_m0_limiter_cmd_src_channel;                                 // ase_avmm_pipe_0_m0_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          ase_avmm_pipe_0_m0_limiter_cmd_src_startofpacket;                           // ase_avmm_pipe_0_m0_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          ase_avmm_pipe_0_m0_limiter_cmd_src_endofpacket;                             // ase_avmm_pipe_0_m0_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                          // rsp_mux:src_valid -> ase_avmm_pipe_0_m0_limiter:rsp_sink_valid
	wire  [136:0] rsp_mux_src_data;                                                           // rsp_mux:src_data -> ase_avmm_pipe_0_m0_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                          // ase_avmm_pipe_0_m0_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire    [2:0] rsp_mux_src_channel;                                                        // rsp_mux:src_channel -> ase_avmm_pipe_0_m0_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                                  // rsp_mux:src_startofpacket -> ase_avmm_pipe_0_m0_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                                    // rsp_mux:src_endofpacket -> ase_avmm_pipe_0_m0_limiter:rsp_sink_endofpacket
	wire          ase_avmm_pipe_0_m0_limiter_rsp_src_valid;                                   // ase_avmm_pipe_0_m0_limiter:rsp_src_valid -> ase_avmm_pipe_0_m0_agent:rp_valid
	wire  [136:0] ase_avmm_pipe_0_m0_limiter_rsp_src_data;                                    // ase_avmm_pipe_0_m0_limiter:rsp_src_data -> ase_avmm_pipe_0_m0_agent:rp_data
	wire          ase_avmm_pipe_0_m0_limiter_rsp_src_ready;                                   // ase_avmm_pipe_0_m0_agent:rp_ready -> ase_avmm_pipe_0_m0_limiter:rsp_src_ready
	wire    [2:0] ase_avmm_pipe_0_m0_limiter_rsp_src_channel;                                 // ase_avmm_pipe_0_m0_limiter:rsp_src_channel -> ase_avmm_pipe_0_m0_agent:rp_channel
	wire          ase_avmm_pipe_0_m0_limiter_rsp_src_startofpacket;                           // ase_avmm_pipe_0_m0_limiter:rsp_src_startofpacket -> ase_avmm_pipe_0_m0_agent:rp_startofpacket
	wire          ase_avmm_pipe_0_m0_limiter_rsp_src_endofpacket;                             // ase_avmm_pipe_0_m0_limiter:rsp_src_endofpacket -> ase_avmm_pipe_0_m0_agent:rp_endofpacket
	wire          cmd_demux_src0_valid;                                                       // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [136:0] cmd_demux_src0_data;                                                        // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                       // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [2:0] cmd_demux_src0_channel;                                                     // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                               // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                 // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                       // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [136:0] cmd_demux_src1_data;                                                        // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                       // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire    [2:0] cmd_demux_src1_channel;                                                     // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                               // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                 // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                       // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [136:0] cmd_demux_src2_data;                                                        // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                                       // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire    [2:0] cmd_demux_src2_channel;                                                     // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                               // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                 // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                                       // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [136:0] rsp_demux_src0_data;                                                        // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                       // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [2:0] rsp_demux_src0_channel;                                                     // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                               // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                 // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                   // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [136:0] rsp_demux_001_src0_data;                                                    // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                                   // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire    [2:0] rsp_demux_001_src0_channel;                                                 // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                           // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                             // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                   // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [136:0] rsp_demux_002_src0_data;                                                    // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                                   // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire    [2:0] rsp_demux_002_src0_channel;                                                 // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                           // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                             // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          cmd_mux_002_src_valid;                                                      // cmd_mux_002:src_valid -> address_span_extender_0_windowed_slave_cmd_width_adapter:in_valid
	wire  [136:0] cmd_mux_002_src_data;                                                       // cmd_mux_002:src_data -> address_span_extender_0_windowed_slave_cmd_width_adapter:in_data
	wire          cmd_mux_002_src_ready;                                                      // address_span_extender_0_windowed_slave_cmd_width_adapter:in_ready -> cmd_mux_002:src_ready
	wire    [2:0] cmd_mux_002_src_channel;                                                    // cmd_mux_002:src_channel -> address_span_extender_0_windowed_slave_cmd_width_adapter:in_channel
	wire          cmd_mux_002_src_startofpacket;                                              // cmd_mux_002:src_startofpacket -> address_span_extender_0_windowed_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                // cmd_mux_002:src_endofpacket -> address_span_extender_0_windowed_slave_cmd_width_adapter:in_endofpacket
	wire          address_span_extender_0_windowed_slave_cmd_width_adapter_src_valid;         // address_span_extender_0_windowed_slave_cmd_width_adapter:out_valid -> address_span_extender_0_windowed_slave_agent:cp_valid
	wire  [640:0] address_span_extender_0_windowed_slave_cmd_width_adapter_src_data;          // address_span_extender_0_windowed_slave_cmd_width_adapter:out_data -> address_span_extender_0_windowed_slave_agent:cp_data
	wire          address_span_extender_0_windowed_slave_cmd_width_adapter_src_ready;         // address_span_extender_0_windowed_slave_agent:cp_ready -> address_span_extender_0_windowed_slave_cmd_width_adapter:out_ready
	wire    [2:0] address_span_extender_0_windowed_slave_cmd_width_adapter_src_channel;       // address_span_extender_0_windowed_slave_cmd_width_adapter:out_channel -> address_span_extender_0_windowed_slave_agent:cp_channel
	wire          address_span_extender_0_windowed_slave_cmd_width_adapter_src_startofpacket; // address_span_extender_0_windowed_slave_cmd_width_adapter:out_startofpacket -> address_span_extender_0_windowed_slave_agent:cp_startofpacket
	wire          address_span_extender_0_windowed_slave_cmd_width_adapter_src_endofpacket;   // address_span_extender_0_windowed_slave_cmd_width_adapter:out_endofpacket -> address_span_extender_0_windowed_slave_agent:cp_endofpacket
	wire          router_003_src_valid;                                                       // router_003:src_valid -> address_span_extender_0_windowed_slave_rsp_width_adapter:in_valid
	wire  [640:0] router_003_src_data;                                                        // router_003:src_data -> address_span_extender_0_windowed_slave_rsp_width_adapter:in_data
	wire          router_003_src_ready;                                                       // address_span_extender_0_windowed_slave_rsp_width_adapter:in_ready -> router_003:src_ready
	wire    [2:0] router_003_src_channel;                                                     // router_003:src_channel -> address_span_extender_0_windowed_slave_rsp_width_adapter:in_channel
	wire          router_003_src_startofpacket;                                               // router_003:src_startofpacket -> address_span_extender_0_windowed_slave_rsp_width_adapter:in_startofpacket
	wire          router_003_src_endofpacket;                                                 // router_003:src_endofpacket -> address_span_extender_0_windowed_slave_rsp_width_adapter:in_endofpacket
	wire          address_span_extender_0_windowed_slave_rsp_width_adapter_src_valid;         // address_span_extender_0_windowed_slave_rsp_width_adapter:out_valid -> rsp_demux_002:sink_valid
	wire  [136:0] address_span_extender_0_windowed_slave_rsp_width_adapter_src_data;          // address_span_extender_0_windowed_slave_rsp_width_adapter:out_data -> rsp_demux_002:sink_data
	wire          address_span_extender_0_windowed_slave_rsp_width_adapter_src_ready;         // rsp_demux_002:sink_ready -> address_span_extender_0_windowed_slave_rsp_width_adapter:out_ready
	wire    [2:0] address_span_extender_0_windowed_slave_rsp_width_adapter_src_channel;       // address_span_extender_0_windowed_slave_rsp_width_adapter:out_channel -> rsp_demux_002:sink_channel
	wire          address_span_extender_0_windowed_slave_rsp_width_adapter_src_startofpacket; // address_span_extender_0_windowed_slave_rsp_width_adapter:out_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          address_span_extender_0_windowed_slave_rsp_width_adapter_src_endofpacket;   // address_span_extender_0_windowed_slave_rsp_width_adapter:out_endofpacket -> rsp_demux_002:sink_endofpacket
	wire    [2:0] ase_avmm_pipe_0_m0_limiter_cmd_valid_data;                                  // ase_avmm_pipe_0_m0_limiter:cmd_src_valid -> cmd_demux:sink_valid

	ase_altera_merlin_master_translator_191_g7h47bq #(
		.AV_ADDRESS_W                (13),
		.AV_DATA_W                   (64),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (8),
		.UAV_ADDRESS_W               (13),
		.UAV_BURSTCOUNT_W            (4),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (8),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (0),
		.WAITREQUEST_ALLOWANCE       (0)
	) ase_avmm_pipe_0_m0_translator (
		.clk                    (clock_in_out_clk_clk),                                                  //   input,   width = 1,                       clk.clk
		.reset                  (ase_avmm_pipe_0_reset_reset_bridge_in_reset_reset),                     //   input,   width = 1,                     reset.reset
		.uav_address            (ase_avmm_pipe_0_m0_translator_avalon_universal_master_0_address),       //  output,  width = 13, avalon_universal_master_0.address
		.uav_burstcount         (ase_avmm_pipe_0_m0_translator_avalon_universal_master_0_burstcount),    //  output,   width = 4,                          .burstcount
		.uav_read               (ase_avmm_pipe_0_m0_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (ase_avmm_pipe_0_m0_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (ase_avmm_pipe_0_m0_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (ase_avmm_pipe_0_m0_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (ase_avmm_pipe_0_m0_translator_avalon_universal_master_0_byteenable),    //  output,   width = 8,                          .byteenable
		.uav_readdata           (ase_avmm_pipe_0_m0_translator_avalon_universal_master_0_readdata),      //   input,  width = 64,                          .readdata
		.uav_writedata          (ase_avmm_pipe_0_m0_translator_avalon_universal_master_0_writedata),     //  output,  width = 64,                          .writedata
		.uav_lock               (ase_avmm_pipe_0_m0_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (ase_avmm_pipe_0_m0_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (ase_avmm_pipe_0_m0_address),                                            //   input,  width = 13,      avalon_anti_master_0.address
		.av_waitrequest         (ase_avmm_pipe_0_m0_waitrequest),                                        //  output,   width = 1,                          .waitrequest
		.av_burstcount          (ase_avmm_pipe_0_m0_burstcount),                                         //   input,   width = 1,                          .burstcount
		.av_byteenable          (ase_avmm_pipe_0_m0_byteenable),                                         //   input,   width = 8,                          .byteenable
		.av_read                (ase_avmm_pipe_0_m0_read),                                               //   input,   width = 1,                          .read
		.av_readdata            (ase_avmm_pipe_0_m0_readdata),                                           //  output,  width = 64,                          .readdata
		.av_readdatavalid       (ase_avmm_pipe_0_m0_readdatavalid),                                      //  output,   width = 1,                          .readdatavalid
		.av_write               (ase_avmm_pipe_0_m0_write),                                              //   input,   width = 1,                          .write
		.av_writedata           (ase_avmm_pipe_0_m0_writedata),                                          //   input,  width = 64,                          .writedata
		.av_debugaccess         (ase_avmm_pipe_0_m0_debugaccess),                                        //   input,   width = 1,                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                  // (terminated),                                        
		.av_begintransfer       (1'b0),                                                                  // (terminated),                                        
		.av_chipselect          (1'b0),                                                                  // (terminated),                                        
		.av_lock                (1'b0),                                                                  // (terminated),                                        
		.uav_clken              (),                                                                      // (terminated),                                        
		.av_clken               (1'b1),                                                                  // (terminated),                                        
		.uav_response           (2'b00),                                                                 // (terminated),                                        
		.av_response            (),                                                                      // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                                  // (terminated),                                        
		.av_writeresponsevalid  ()                                                                       // (terminated),                                        
	);

	ase_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (64),
		.UAV_DATA_W                     (64),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (8),
		.UAV_BYTEENABLE_W               (8),
		.UAV_ADDRESS_W                  (13),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (8),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) afu_id_avmm_slave_0_afu_cfg_slave_translator (
		.clk                    (clock_in_out_clk_clk),                                     //   input,   width = 1,                      clk.clk
		.reset                  (ase_avmm_pipe_0_reset_reset_bridge_in_reset_reset),        //   input,   width = 1,                    reset.reset
		.uav_address            (afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_address),       //   input,  width = 13, avalon_universal_slave_0.address
		.uav_burstcount         (afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_burstcount),    //   input,   width = 4,                         .burstcount
		.uav_read               (afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_byteenable),    //   input,   width = 8,                         .byteenable
		.uav_readdata           (afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_readdata),      //  output,  width = 64,                         .readdata
		.uav_writedata          (afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_writedata),     //   input,  width = 64,                         .writedata
		.uav_lock               (afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (afu_id_avmm_slave_0_afu_cfg_slave_address),                //  output,   width = 3,      avalon_anti_slave_0.address
		.av_write               (afu_id_avmm_slave_0_afu_cfg_slave_write),                  //  output,   width = 1,                         .write
		.av_read                (afu_id_avmm_slave_0_afu_cfg_slave_read),                   //  output,   width = 1,                         .read
		.av_readdata            (afu_id_avmm_slave_0_afu_cfg_slave_readdata),               //   input,  width = 64,                         .readdata
		.av_writedata           (afu_id_avmm_slave_0_afu_cfg_slave_writedata),              //  output,  width = 64,                         .writedata
		.av_begintransfer       (),                                                         // (terminated),                                       
		.av_beginbursttransfer  (),                                                         // (terminated),                                       
		.av_burstcount          (),                                                         // (terminated),                                       
		.av_byteenable          (),                                                         // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                     // (terminated),                                       
		.av_waitrequest         (1'b0),                                                     // (terminated),                                       
		.av_writebyteenable     (),                                                         // (terminated),                                       
		.av_lock                (),                                                         // (terminated),                                       
		.av_chipselect          (),                                                         // (terminated),                                       
		.av_clken               (),                                                         // (terminated),                                       
		.uav_clken              (1'b0),                                                     // (terminated),                                       
		.av_debugaccess         (),                                                         // (terminated),                                       
		.av_outputenable        (),                                                         // (terminated),                                       
		.uav_response           (),                                                         // (terminated),                                       
		.av_response            (2'b00),                                                    // (terminated),                                       
		.uav_writeresponsevalid (),                                                         // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                      // (terminated),                                       
	);

	ase_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (64),
		.UAV_DATA_W                     (64),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (8),
		.UAV_BYTEENABLE_W               (8),
		.UAV_ADDRESS_W                  (13),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (8),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) address_span_extender_0_cntl_translator (
		.clk                    (clock_in_out_clk_clk),                                //   input,   width = 1,                      clk.clk
		.reset                  (ase_avmm_pipe_0_reset_reset_bridge_in_reset_reset),   //   input,   width = 1,                    reset.reset
		.uav_address            (address_span_extender_0_cntl_agent_m0_address),       //   input,  width = 13, avalon_universal_slave_0.address
		.uav_burstcount         (address_span_extender_0_cntl_agent_m0_burstcount),    //   input,   width = 4,                         .burstcount
		.uav_read               (address_span_extender_0_cntl_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (address_span_extender_0_cntl_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (address_span_extender_0_cntl_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (address_span_extender_0_cntl_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (address_span_extender_0_cntl_agent_m0_byteenable),    //   input,   width = 8,                         .byteenable
		.uav_readdata           (address_span_extender_0_cntl_agent_m0_readdata),      //  output,  width = 64,                         .readdata
		.uav_writedata          (address_span_extender_0_cntl_agent_m0_writedata),     //   input,  width = 64,                         .writedata
		.uav_lock               (address_span_extender_0_cntl_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (address_span_extender_0_cntl_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_write               (address_span_extender_0_cntl_write),                  //  output,   width = 1,      avalon_anti_slave_0.write
		.av_read                (address_span_extender_0_cntl_read),                   //  output,   width = 1,                         .read
		.av_readdata            (address_span_extender_0_cntl_readdata),               //   input,  width = 64,                         .readdata
		.av_writedata           (address_span_extender_0_cntl_writedata),              //  output,  width = 64,                         .writedata
		.av_byteenable          (address_span_extender_0_cntl_byteenable),             //  output,   width = 8,                         .byteenable
		.av_address             (),                                                    // (terminated),                                       
		.av_begintransfer       (),                                                    // (terminated),                                       
		.av_beginbursttransfer  (),                                                    // (terminated),                                       
		.av_burstcount          (),                                                    // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                // (terminated),                                       
		.av_waitrequest         (1'b0),                                                // (terminated),                                       
		.av_writebyteenable     (),                                                    // (terminated),                                       
		.av_lock                (),                                                    // (terminated),                                       
		.av_chipselect          (),                                                    // (terminated),                                       
		.av_clken               (),                                                    // (terminated),                                       
		.uav_clken              (1'b0),                                                // (terminated),                                       
		.av_debugaccess         (),                                                    // (terminated),                                       
		.av_outputenable        (),                                                    // (terminated),                                       
		.uav_response           (),                                                    // (terminated),                                       
		.av_response            (2'b00),                                               // (terminated),                                       
		.uav_writeresponsevalid (),                                                    // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                 // (terminated),                                       
	);

	ase_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (6),
		.AV_DATA_W                      (512),
		.UAV_DATA_W                     (512),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (64),
		.UAV_BYTEENABLE_W               (64),
		.UAV_ADDRESS_W                  (13),
		.UAV_BURSTCOUNT_W               (10),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (64),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) address_span_extender_0_windowed_slave_translator (
		.clk                    (clock_in_out_clk_clk),                                          //   input,    width = 1,                      clk.clk
		.reset                  (ase_avmm_pipe_0_reset_reset_bridge_in_reset_reset),             //   input,    width = 1,                    reset.reset
		.uav_address            (address_span_extender_0_windowed_slave_agent_m0_address),       //   input,   width = 13, avalon_universal_slave_0.address
		.uav_burstcount         (address_span_extender_0_windowed_slave_agent_m0_burstcount),    //   input,   width = 10,                         .burstcount
		.uav_read               (address_span_extender_0_windowed_slave_agent_m0_read),          //   input,    width = 1,                         .read
		.uav_write              (address_span_extender_0_windowed_slave_agent_m0_write),         //   input,    width = 1,                         .write
		.uav_waitrequest        (address_span_extender_0_windowed_slave_agent_m0_waitrequest),   //  output,    width = 1,                         .waitrequest
		.uav_readdatavalid      (address_span_extender_0_windowed_slave_agent_m0_readdatavalid), //  output,    width = 1,                         .readdatavalid
		.uav_byteenable         (address_span_extender_0_windowed_slave_agent_m0_byteenable),    //   input,   width = 64,                         .byteenable
		.uav_readdata           (address_span_extender_0_windowed_slave_agent_m0_readdata),      //  output,  width = 512,                         .readdata
		.uav_writedata          (address_span_extender_0_windowed_slave_agent_m0_writedata),     //   input,  width = 512,                         .writedata
		.uav_lock               (address_span_extender_0_windowed_slave_agent_m0_lock),          //   input,    width = 1,                         .lock
		.uav_debugaccess        (address_span_extender_0_windowed_slave_agent_m0_debugaccess),   //   input,    width = 1,                         .debugaccess
		.av_address             (address_span_extender_0_windowed_slave_address),                //  output,    width = 6,      avalon_anti_slave_0.address
		.av_write               (address_span_extender_0_windowed_slave_write),                  //  output,    width = 1,                         .write
		.av_read                (address_span_extender_0_windowed_slave_read),                   //  output,    width = 1,                         .read
		.av_readdata            (address_span_extender_0_windowed_slave_readdata),               //   input,  width = 512,                         .readdata
		.av_writedata           (address_span_extender_0_windowed_slave_writedata),              //  output,  width = 512,                         .writedata
		.av_burstcount          (address_span_extender_0_windowed_slave_burstcount),             //  output,    width = 4,                         .burstcount
		.av_byteenable          (address_span_extender_0_windowed_slave_byteenable),             //  output,   width = 64,                         .byteenable
		.av_readdatavalid       (address_span_extender_0_windowed_slave_readdatavalid),          //   input,    width = 1,                         .readdatavalid
		.av_waitrequest         (address_span_extender_0_windowed_slave_waitrequest),            //   input,    width = 1,                         .waitrequest
		.av_begintransfer       (),                                                              // (terminated),                                        
		.av_beginbursttransfer  (),                                                              // (terminated),                                        
		.av_writebyteenable     (),                                                              // (terminated),                                        
		.av_lock                (),                                                              // (terminated),                                        
		.av_chipselect          (),                                                              // (terminated),                                        
		.av_clken               (),                                                              // (terminated),                                        
		.uav_clken              (1'b0),                                                          // (terminated),                                        
		.av_debugaccess         (),                                                              // (terminated),                                        
		.av_outputenable        (),                                                              // (terminated),                                        
		.uav_response           (),                                                              // (terminated),                                        
		.av_response            (2'b00),                                                         // (terminated),                                        
		.uav_writeresponsevalid (),                                                              // (terminated),                                        
		.av_writeresponsevalid  (1'b0)                                                           // (terminated),                                        
	);

	ase_altera_merlin_master_agent_191_mpbm6tq #(
		.PKT_WUNIQUE               (136),
		.PKT_DOMAIN_H              (135),
		.PKT_DOMAIN_L              (134),
		.PKT_SNOOP_H               (133),
		.PKT_SNOOP_L               (130),
		.PKT_BARRIER_H             (129),
		.PKT_BARRIER_L             (128),
		.PKT_ORI_BURST_SIZE_H      (127),
		.PKT_ORI_BURST_SIZE_L      (125),
		.PKT_RESPONSE_STATUS_H     (124),
		.PKT_RESPONSE_STATUS_L     (123),
		.PKT_QOS_H                 (110),
		.PKT_QOS_L                 (110),
		.PKT_DATA_SIDEBAND_H       (108),
		.PKT_DATA_SIDEBAND_L       (108),
		.PKT_ADDR_SIDEBAND_H       (107),
		.PKT_ADDR_SIDEBAND_L       (107),
		.PKT_BURST_TYPE_H          (106),
		.PKT_BURST_TYPE_L          (105),
		.PKT_CACHE_H               (122),
		.PKT_CACHE_L               (119),
		.PKT_THREAD_ID_H           (115),
		.PKT_THREAD_ID_L           (115),
		.PKT_BURST_SIZE_H          (104),
		.PKT_BURST_SIZE_L          (102),
		.PKT_TRANS_EXCLUSIVE       (90),
		.PKT_TRANS_LOCK            (89),
		.PKT_BEGIN_BURST           (109),
		.PKT_PROTECTION_H          (118),
		.PKT_PROTECTION_L          (116),
		.PKT_BURSTWRAP_H           (101),
		.PKT_BURSTWRAP_L           (101),
		.PKT_BYTE_CNT_H            (100),
		.PKT_BYTE_CNT_L            (91),
		.PKT_ADDR_H                (84),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (85),
		.PKT_TRANS_POSTED          (86),
		.PKT_TRANS_WRITE           (87),
		.PKT_TRANS_READ            (88),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (112),
		.PKT_SRC_ID_L              (111),
		.PKT_DEST_ID_H             (114),
		.PKT_DEST_ID_L             (113),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (3),
		.AV_BURSTCOUNT_W           (4),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (0)
	) ase_avmm_pipe_0_m0_agent (
		.clk                   (clock_in_out_clk_clk),                                                  //   input,    width = 1,       clk.clk
		.reset                 (ase_avmm_pipe_0_reset_reset_bridge_in_reset_reset),                     //   input,    width = 1, clk_reset.reset
		.av_address            (ase_avmm_pipe_0_m0_translator_avalon_universal_master_0_address),       //   input,   width = 13,        av.address
		.av_write              (ase_avmm_pipe_0_m0_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (ase_avmm_pipe_0_m0_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (ase_avmm_pipe_0_m0_translator_avalon_universal_master_0_writedata),     //   input,   width = 64,          .writedata
		.av_readdata           (ase_avmm_pipe_0_m0_translator_avalon_universal_master_0_readdata),      //  output,   width = 64,          .readdata
		.av_waitrequest        (ase_avmm_pipe_0_m0_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (ase_avmm_pipe_0_m0_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (ase_avmm_pipe_0_m0_translator_avalon_universal_master_0_byteenable),    //   input,    width = 8,          .byteenable
		.av_burstcount         (ase_avmm_pipe_0_m0_translator_avalon_universal_master_0_burstcount),    //   input,    width = 4,          .burstcount
		.av_debugaccess        (ase_avmm_pipe_0_m0_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (ase_avmm_pipe_0_m0_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (ase_avmm_pipe_0_m0_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (ase_avmm_pipe_0_m0_agent_cp_data),                                      //  output,  width = 137,          .data
		.cp_startofpacket      (ase_avmm_pipe_0_m0_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (ase_avmm_pipe_0_m0_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (ase_avmm_pipe_0_m0_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (ase_avmm_pipe_0_m0_limiter_rsp_src_valid),                              //   input,    width = 1,        rp.valid
		.rp_data               (ase_avmm_pipe_0_m0_limiter_rsp_src_data),                               //   input,  width = 137,          .data
		.rp_channel            (ase_avmm_pipe_0_m0_limiter_rsp_src_channel),                            //   input,    width = 3,          .channel
		.rp_startofpacket      (ase_avmm_pipe_0_m0_limiter_rsp_src_startofpacket),                      //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (ase_avmm_pipe_0_m0_limiter_rsp_src_endofpacket),                        //   input,    width = 1,          .endofpacket
		.rp_ready              (ase_avmm_pipe_0_m0_limiter_rsp_src_ready),                              //  output,    width = 1,          .ready
		.av_response           (),                                                                      // (terminated),                         
		.av_writeresponsevalid ()                                                                       // (terminated),                         
	);

	ase_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (127),
		.PKT_ORI_BURST_SIZE_L      (125),
		.PKT_RESPONSE_STATUS_H     (124),
		.PKT_RESPONSE_STATUS_L     (123),
		.PKT_BURST_SIZE_H          (104),
		.PKT_BURST_SIZE_L          (102),
		.PKT_TRANS_LOCK            (89),
		.PKT_BEGIN_BURST           (109),
		.PKT_PROTECTION_H          (118),
		.PKT_PROTECTION_L          (116),
		.PKT_BURSTWRAP_H           (101),
		.PKT_BURSTWRAP_L           (101),
		.PKT_BYTE_CNT_H            (100),
		.PKT_BYTE_CNT_L            (91),
		.PKT_ADDR_H                (84),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (85),
		.PKT_TRANS_POSTED          (86),
		.PKT_TRANS_WRITE           (87),
		.PKT_TRANS_READ            (88),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (112),
		.PKT_SRC_ID_L              (111),
		.PKT_DEST_ID_H             (114),
		.PKT_DEST_ID_L             (113),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (3),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) afu_id_avmm_slave_0_afu_cfg_slave_agent (
		.clk                     (clock_in_out_clk_clk),                                               //   input,    width = 1,             clk.clk
		.reset                   (ase_avmm_pipe_0_reset_reset_bridge_in_reset_reset),                  //   input,    width = 1,       clk_reset.reset
		.m0_address              (afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_address),                 //  output,   width = 13,              m0.address
		.m0_burstcount           (afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_burstcount),              //  output,    width = 4,                .burstcount
		.m0_byteenable           (afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_byteenable),              //  output,    width = 8,                .byteenable
		.m0_debugaccess          (afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_readdata),                //   input,   width = 64,                .readdata
		.m0_readdatavalid        (afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_writedata),               //  output,   width = 64,                .writedata
		.m0_write                (afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (afu_id_avmm_slave_0_afu_cfg_slave_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (afu_id_avmm_slave_0_afu_cfg_slave_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (afu_id_avmm_slave_0_afu_cfg_slave_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (afu_id_avmm_slave_0_afu_cfg_slave_agent_rp_data),                    //  output,  width = 137,                .data
		.rp_startofpacket        (afu_id_avmm_slave_0_afu_cfg_slave_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                                  //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                                  //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_src_data),                                                   //   input,  width = 137,                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                          //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                            //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                                //   input,    width = 3,                .channel
		.rf_sink_ready           (afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo_out_data),          //   input,  width = 138,                .data
		.rf_source_ready         (afu_id_avmm_slave_0_afu_cfg_slave_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (afu_id_avmm_slave_0_afu_cfg_slave_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (afu_id_avmm_slave_0_afu_cfg_slave_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (afu_id_avmm_slave_0_afu_cfg_slave_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (afu_id_avmm_slave_0_afu_cfg_slave_agent_rf_source_data),             //  output,  width = 138,                .data
		.rdata_fifo_sink_ready   (afu_id_avmm_slave_0_afu_cfg_slave_agent_rdata_fifo_src_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (afu_id_avmm_slave_0_afu_cfg_slave_agent_rdata_fifo_src_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (afu_id_avmm_slave_0_afu_cfg_slave_agent_rdata_fifo_src_data),        //   input,   width = 66,                .data
		.rdata_fifo_src_ready    (afu_id_avmm_slave_0_afu_cfg_slave_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (afu_id_avmm_slave_0_afu_cfg_slave_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (afu_id_avmm_slave_0_afu_cfg_slave_agent_rdata_fifo_src_data),        //  output,   width = 66,                .data
		.m0_response             (2'b00),                                                              // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                               // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                // (terminated),                               
	);

	ase_altera_avalon_sc_fifo_191_e5eqkcq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo (
		.clk               (clock_in_out_clk_clk),                                               //   input,    width = 1,       clk.clk
		.reset             (ase_avmm_pipe_0_reset_reset_bridge_in_reset_reset),                  //   input,    width = 1, clk_reset.reset
		.in_data           (afu_id_avmm_slave_0_afu_cfg_slave_agent_rf_source_data),             //   input,  width = 138,        in.data
		.in_valid          (afu_id_avmm_slave_0_afu_cfg_slave_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (afu_id_avmm_slave_0_afu_cfg_slave_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (afu_id_avmm_slave_0_afu_cfg_slave_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (afu_id_avmm_slave_0_afu_cfg_slave_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo_out_data),          //  output,  width = 138,       out.data
		.out_valid         (afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                              // (terminated),                         
		.csr_read          (1'b0),                                                               // (terminated),                         
		.csr_write         (1'b0),                                                               // (terminated),                         
		.csr_readdata      (),                                                                   // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                               // (terminated),                         
		.almost_full_data  (),                                                                   // (terminated),                         
		.almost_empty_data (),                                                                   // (terminated),                         
		.in_empty          (1'b0),                                                               // (terminated),                         
		.out_empty         (),                                                                   // (terminated),                         
		.in_error          (1'b0),                                                               // (terminated),                         
		.out_error         (),                                                                   // (terminated),                         
		.in_channel        (1'b0),                                                               // (terminated),                         
		.out_channel       ()                                                                    // (terminated),                         
	);

	ase_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (127),
		.PKT_ORI_BURST_SIZE_L      (125),
		.PKT_RESPONSE_STATUS_H     (124),
		.PKT_RESPONSE_STATUS_L     (123),
		.PKT_BURST_SIZE_H          (104),
		.PKT_BURST_SIZE_L          (102),
		.PKT_TRANS_LOCK            (89),
		.PKT_BEGIN_BURST           (109),
		.PKT_PROTECTION_H          (118),
		.PKT_PROTECTION_L          (116),
		.PKT_BURSTWRAP_H           (101),
		.PKT_BURSTWRAP_L           (101),
		.PKT_BYTE_CNT_H            (100),
		.PKT_BYTE_CNT_L            (91),
		.PKT_ADDR_H                (84),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (85),
		.PKT_TRANS_POSTED          (86),
		.PKT_TRANS_WRITE           (87),
		.PKT_TRANS_READ            (88),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (112),
		.PKT_SRC_ID_L              (111),
		.PKT_DEST_ID_H             (114),
		.PKT_DEST_ID_L             (113),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (3),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) address_span_extender_0_cntl_agent (
		.clk                     (clock_in_out_clk_clk),                                          //   input,    width = 1,             clk.clk
		.reset                   (ase_avmm_pipe_0_reset_reset_bridge_in_reset_reset),             //   input,    width = 1,       clk_reset.reset
		.m0_address              (address_span_extender_0_cntl_agent_m0_address),                 //  output,   width = 13,              m0.address
		.m0_burstcount           (address_span_extender_0_cntl_agent_m0_burstcount),              //  output,    width = 4,                .burstcount
		.m0_byteenable           (address_span_extender_0_cntl_agent_m0_byteenable),              //  output,    width = 8,                .byteenable
		.m0_debugaccess          (address_span_extender_0_cntl_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (address_span_extender_0_cntl_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (address_span_extender_0_cntl_agent_m0_readdata),                //   input,   width = 64,                .readdata
		.m0_readdatavalid        (address_span_extender_0_cntl_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (address_span_extender_0_cntl_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (address_span_extender_0_cntl_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (address_span_extender_0_cntl_agent_m0_writedata),               //  output,   width = 64,                .writedata
		.m0_write                (address_span_extender_0_cntl_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (address_span_extender_0_cntl_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (address_span_extender_0_cntl_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (address_span_extender_0_cntl_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (address_span_extender_0_cntl_agent_rp_data),                    //  output,  width = 137,                .data
		.rp_startofpacket        (address_span_extender_0_cntl_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                         //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                         //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_001_src_data),                                          //   input,  width = 137,                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                                 //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                                   //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                       //   input,    width = 3,                .channel
		.rf_sink_ready           (address_span_extender_0_cntl_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (address_span_extender_0_cntl_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (address_span_extender_0_cntl_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (address_span_extender_0_cntl_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (address_span_extender_0_cntl_agent_rsp_fifo_out_data),          //   input,  width = 138,                .data
		.rf_source_ready         (address_span_extender_0_cntl_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (address_span_extender_0_cntl_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (address_span_extender_0_cntl_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (address_span_extender_0_cntl_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (address_span_extender_0_cntl_agent_rf_source_data),             //  output,  width = 138,                .data
		.rdata_fifo_sink_ready   (address_span_extender_0_cntl_agent_rdata_fifo_src_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (address_span_extender_0_cntl_agent_rdata_fifo_src_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (address_span_extender_0_cntl_agent_rdata_fifo_src_data),        //   input,   width = 66,                .data
		.rdata_fifo_src_ready    (address_span_extender_0_cntl_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (address_span_extender_0_cntl_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (address_span_extender_0_cntl_agent_rdata_fifo_src_data),        //  output,   width = 66,                .data
		.m0_response             (2'b00),                                                         // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                          // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                           // (terminated),                               
	);

	ase_altera_avalon_sc_fifo_191_e5eqkcq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) address_span_extender_0_cntl_agent_rsp_fifo (
		.clk               (clock_in_out_clk_clk),                                          //   input,    width = 1,       clk.clk
		.reset             (ase_avmm_pipe_0_reset_reset_bridge_in_reset_reset),             //   input,    width = 1, clk_reset.reset
		.in_data           (address_span_extender_0_cntl_agent_rf_source_data),             //   input,  width = 138,        in.data
		.in_valid          (address_span_extender_0_cntl_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (address_span_extender_0_cntl_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (address_span_extender_0_cntl_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (address_span_extender_0_cntl_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (address_span_extender_0_cntl_agent_rsp_fifo_out_data),          //  output,  width = 138,       out.data
		.out_valid         (address_span_extender_0_cntl_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (address_span_extender_0_cntl_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (address_span_extender_0_cntl_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (address_span_extender_0_cntl_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                         // (terminated),                         
		.csr_read          (1'b0),                                                          // (terminated),                         
		.csr_write         (1'b0),                                                          // (terminated),                         
		.csr_readdata      (),                                                              // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated),                         
		.almost_full_data  (),                                                              // (terminated),                         
		.almost_empty_data (),                                                              // (terminated),                         
		.in_empty          (1'b0),                                                          // (terminated),                         
		.out_empty         (),                                                              // (terminated),                         
		.in_error          (1'b0),                                                          // (terminated),                         
		.out_error         (),                                                              // (terminated),                         
		.in_channel        (1'b0),                                                          // (terminated),                         
		.out_channel       ()                                                               // (terminated),                         
	);

	ase_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (631),
		.PKT_ORI_BURST_SIZE_L      (629),
		.PKT_RESPONSE_STATUS_H     (628),
		.PKT_RESPONSE_STATUS_L     (627),
		.PKT_BURST_SIZE_H          (608),
		.PKT_BURST_SIZE_L          (606),
		.PKT_TRANS_LOCK            (593),
		.PKT_BEGIN_BURST           (613),
		.PKT_PROTECTION_H          (622),
		.PKT_PROTECTION_L          (620),
		.PKT_BURSTWRAP_H           (605),
		.PKT_BURSTWRAP_L           (605),
		.PKT_BYTE_CNT_H            (604),
		.PKT_BYTE_CNT_L            (595),
		.PKT_ADDR_H                (588),
		.PKT_ADDR_L                (576),
		.PKT_TRANS_COMPRESSED_READ (589),
		.PKT_TRANS_POSTED          (590),
		.PKT_TRANS_WRITE           (591),
		.PKT_TRANS_READ            (592),
		.PKT_DATA_H                (511),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (575),
		.PKT_BYTEEN_L              (512),
		.PKT_SRC_ID_H              (616),
		.PKT_SRC_ID_L              (615),
		.PKT_DEST_ID_H             (618),
		.PKT_DEST_ID_L             (617),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (3),
		.ST_DATA_W                 (641),
		.AVS_BURSTCOUNT_W          (10),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) address_span_extender_0_windowed_slave_agent (
		.clk                     (clock_in_out_clk_clk),                                                       //   input,    width = 1,             clk.clk
		.reset                   (ase_avmm_pipe_0_reset_reset_bridge_in_reset_reset),                          //   input,    width = 1,       clk_reset.reset
		.m0_address              (address_span_extender_0_windowed_slave_agent_m0_address),                    //  output,   width = 13,              m0.address
		.m0_burstcount           (address_span_extender_0_windowed_slave_agent_m0_burstcount),                 //  output,   width = 10,                .burstcount
		.m0_byteenable           (address_span_extender_0_windowed_slave_agent_m0_byteenable),                 //  output,   width = 64,                .byteenable
		.m0_debugaccess          (address_span_extender_0_windowed_slave_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (address_span_extender_0_windowed_slave_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (address_span_extender_0_windowed_slave_agent_m0_readdata),                   //   input,  width = 512,                .readdata
		.m0_readdatavalid        (address_span_extender_0_windowed_slave_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (address_span_extender_0_windowed_slave_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (address_span_extender_0_windowed_slave_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (address_span_extender_0_windowed_slave_agent_m0_writedata),                  //  output,  width = 512,                .writedata
		.m0_write                (address_span_extender_0_windowed_slave_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (address_span_extender_0_windowed_slave_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (address_span_extender_0_windowed_slave_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (address_span_extender_0_windowed_slave_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (address_span_extender_0_windowed_slave_agent_rp_data),                       //  output,  width = 641,                .data
		.rp_startofpacket        (address_span_extender_0_windowed_slave_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (address_span_extender_0_windowed_slave_cmd_width_adapter_src_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (address_span_extender_0_windowed_slave_cmd_width_adapter_src_valid),         //   input,    width = 1,                .valid
		.cp_data                 (address_span_extender_0_windowed_slave_cmd_width_adapter_src_data),          //   input,  width = 641,                .data
		.cp_startofpacket        (address_span_extender_0_windowed_slave_cmd_width_adapter_src_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (address_span_extender_0_windowed_slave_cmd_width_adapter_src_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (address_span_extender_0_windowed_slave_cmd_width_adapter_src_channel),       //   input,    width = 3,                .channel
		.rf_sink_ready           (address_span_extender_0_windowed_slave_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (address_span_extender_0_windowed_slave_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (address_span_extender_0_windowed_slave_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (address_span_extender_0_windowed_slave_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (address_span_extender_0_windowed_slave_agent_rsp_fifo_out_data),             //   input,  width = 642,                .data
		.rf_source_ready         (address_span_extender_0_windowed_slave_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (address_span_extender_0_windowed_slave_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (address_span_extender_0_windowed_slave_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (address_span_extender_0_windowed_slave_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (address_span_extender_0_windowed_slave_agent_rf_source_data),                //  output,  width = 642,                .data
		.rdata_fifo_sink_ready   (address_span_extender_0_windowed_slave_agent_rdata_fifo_src_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (address_span_extender_0_windowed_slave_agent_rdata_fifo_src_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (address_span_extender_0_windowed_slave_agent_rdata_fifo_src_data),           //   input,  width = 514,                .data
		.rdata_fifo_src_ready    (address_span_extender_0_windowed_slave_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (address_span_extender_0_windowed_slave_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (address_span_extender_0_windowed_slave_agent_rdata_fifo_src_data),           //  output,  width = 514,                .data
		.m0_response             (2'b00),                                                                      // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                       // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                        // (terminated),                               
	);

	ase_altera_avalon_sc_fifo_191_e5eqkcq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (642),
		.FIFO_DEPTH          (17),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) address_span_extender_0_windowed_slave_agent_rsp_fifo (
		.clk               (clock_in_out_clk_clk),                                                    //   input,    width = 1,       clk.clk
		.reset             (ase_avmm_pipe_0_reset_reset_bridge_in_reset_reset),                       //   input,    width = 1, clk_reset.reset
		.in_data           (address_span_extender_0_windowed_slave_agent_rf_source_data),             //   input,  width = 642,        in.data
		.in_valid          (address_span_extender_0_windowed_slave_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (address_span_extender_0_windowed_slave_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (address_span_extender_0_windowed_slave_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (address_span_extender_0_windowed_slave_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (address_span_extender_0_windowed_slave_agent_rsp_fifo_out_data),          //  output,  width = 642,       out.data
		.out_valid         (address_span_extender_0_windowed_slave_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (address_span_extender_0_windowed_slave_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (address_span_extender_0_windowed_slave_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (address_span_extender_0_windowed_slave_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                   // (terminated),                         
		.csr_read          (1'b0),                                                                    // (terminated),                         
		.csr_write         (1'b0),                                                                    // (terminated),                         
		.csr_readdata      (),                                                                        // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                    // (terminated),                         
		.almost_full_data  (),                                                                        // (terminated),                         
		.almost_empty_data (),                                                                        // (terminated),                         
		.in_empty          (1'b0),                                                                    // (terminated),                         
		.out_empty         (),                                                                        // (terminated),                         
		.in_error          (1'b0),                                                                    // (terminated),                         
		.out_error         (),                                                                        // (terminated),                         
		.in_channel        (1'b0),                                                                    // (terminated),                         
		.out_channel       ()                                                                         // (terminated),                         
	);

	ase_altera_merlin_router_191_5ynji2a router (
		.sink_ready         (ase_avmm_pipe_0_m0_agent_cp_ready),                 //  output,    width = 1,      sink.ready
		.sink_valid         (ase_avmm_pipe_0_m0_agent_cp_valid),                 //   input,    width = 1,          .valid
		.sink_data          (ase_avmm_pipe_0_m0_agent_cp_data),                  //   input,  width = 137,          .data
		.sink_startofpacket (ase_avmm_pipe_0_m0_agent_cp_startofpacket),         //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (ase_avmm_pipe_0_m0_agent_cp_endofpacket),           //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                              //   input,    width = 1,       clk.clk
		.reset              (ase_avmm_pipe_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_src_ready),                                  //   input,    width = 1,       src.ready
		.src_valid          (router_src_valid),                                  //  output,    width = 1,          .valid
		.src_data           (router_src_data),                                   //  output,  width = 137,          .data
		.src_channel        (router_src_channel),                                //  output,    width = 3,          .channel
		.src_startofpacket  (router_src_startofpacket),                          //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                             //  output,    width = 1,          .endofpacket
	);

	ase_altera_merlin_router_191_ufvzb3a router_001 (
		.sink_ready         (afu_id_avmm_slave_0_afu_cfg_slave_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (afu_id_avmm_slave_0_afu_cfg_slave_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (afu_id_avmm_slave_0_afu_cfg_slave_agent_rp_data),          //   input,  width = 137,          .data
		.sink_startofpacket (afu_id_avmm_slave_0_afu_cfg_slave_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (afu_id_avmm_slave_0_afu_cfg_slave_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                     //   input,    width = 1,       clk.clk
		.reset              (ase_avmm_pipe_0_reset_reset_bridge_in_reset_reset),        //   input,    width = 1, clk_reset.reset
		.src_ready          (router_001_src_ready),                                     //   input,    width = 1,       src.ready
		.src_valid          (router_001_src_valid),                                     //  output,    width = 1,          .valid
		.src_data           (router_001_src_data),                                      //  output,  width = 137,          .data
		.src_channel        (router_001_src_channel),                                   //  output,    width = 3,          .channel
		.src_startofpacket  (router_001_src_startofpacket),                             //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                //  output,    width = 1,          .endofpacket
	);

	ase_altera_merlin_router_191_ufvzb3a router_002 (
		.sink_ready         (address_span_extender_0_cntl_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (address_span_extender_0_cntl_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (address_span_extender_0_cntl_agent_rp_data),          //   input,  width = 137,          .data
		.sink_startofpacket (address_span_extender_0_cntl_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (address_span_extender_0_cntl_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                //   input,    width = 1,       clk.clk
		.reset              (ase_avmm_pipe_0_reset_reset_bridge_in_reset_reset),   //   input,    width = 1, clk_reset.reset
		.src_ready          (router_002_src_ready),                                //   input,    width = 1,       src.ready
		.src_valid          (router_002_src_valid),                                //  output,    width = 1,          .valid
		.src_data           (router_002_src_data),                                 //  output,  width = 137,          .data
		.src_channel        (router_002_src_channel),                              //  output,    width = 3,          .channel
		.src_startofpacket  (router_002_src_startofpacket),                        //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                           //  output,    width = 1,          .endofpacket
	);

	ase_altera_merlin_router_191_7pqg3ia router_003 (
		.sink_ready         (address_span_extender_0_windowed_slave_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (address_span_extender_0_windowed_slave_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (address_span_extender_0_windowed_slave_agent_rp_data),          //   input,  width = 641,          .data
		.sink_startofpacket (address_span_extender_0_windowed_slave_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (address_span_extender_0_windowed_slave_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clock_in_out_clk_clk),                                          //   input,    width = 1,       clk.clk
		.reset              (ase_avmm_pipe_0_reset_reset_bridge_in_reset_reset),             //   input,    width = 1, clk_reset.reset
		.src_ready          (router_003_src_ready),                                          //   input,    width = 1,       src.ready
		.src_valid          (router_003_src_valid),                                          //  output,    width = 1,          .valid
		.src_data           (router_003_src_data),                                           //  output,  width = 641,          .data
		.src_channel        (router_003_src_channel),                                        //  output,    width = 3,          .channel
		.src_startofpacket  (router_003_src_startofpacket),                                  //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                     //  output,    width = 1,          .endofpacket
	);

	ase_altera_merlin_traffic_limiter_191_kcba44q #(
		.SYNC_RESET                (0),
		.PKT_DEST_ID_H             (114),
		.PKT_DEST_ID_L             (113),
		.PKT_SRC_ID_H              (112),
		.PKT_SRC_ID_L              (111),
		.PKT_BYTE_CNT_H            (100),
		.PKT_BYTE_CNT_L            (91),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_TRANS_POSTED          (86),
		.PKT_TRANS_WRITE           (87),
		.MAX_OUTSTANDING_RESPONSES (17),
		.PIPELINED                 (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (3),
		.VALID_WIDTH               (3),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) ase_avmm_pipe_0_m0_limiter (
		.clk                    (clock_in_out_clk_clk),                              //   input,    width = 1,       clk.clk
		.reset                  (ase_avmm_pipe_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                  //  output,    width = 1,  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                  //   input,    width = 1,          .valid
		.cmd_sink_data          (router_src_data),                                   //   input,  width = 137,          .data
		.cmd_sink_channel       (router_src_channel),                                //   input,    width = 3,          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                          //   input,    width = 1,          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                            //   input,    width = 1,          .endofpacket
		.cmd_src_ready          (ase_avmm_pipe_0_m0_limiter_cmd_src_ready),          //   input,    width = 1,   cmd_src.ready
		.cmd_src_data           (ase_avmm_pipe_0_m0_limiter_cmd_src_data),           //  output,  width = 137,          .data
		.cmd_src_channel        (ase_avmm_pipe_0_m0_limiter_cmd_src_channel),        //  output,    width = 3,          .channel
		.cmd_src_startofpacket  (ase_avmm_pipe_0_m0_limiter_cmd_src_startofpacket),  //  output,    width = 1,          .startofpacket
		.cmd_src_endofpacket    (ase_avmm_pipe_0_m0_limiter_cmd_src_endofpacket),    //  output,    width = 1,          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                 //  output,    width = 1,  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                 //   input,    width = 1,          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                               //   input,    width = 3,          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                  //   input,  width = 137,          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                         //   input,    width = 1,          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                           //   input,    width = 1,          .endofpacket
		.rsp_src_ready          (ase_avmm_pipe_0_m0_limiter_rsp_src_ready),          //   input,    width = 1,   rsp_src.ready
		.rsp_src_valid          (ase_avmm_pipe_0_m0_limiter_rsp_src_valid),          //  output,    width = 1,          .valid
		.rsp_src_data           (ase_avmm_pipe_0_m0_limiter_rsp_src_data),           //  output,  width = 137,          .data
		.rsp_src_channel        (ase_avmm_pipe_0_m0_limiter_rsp_src_channel),        //  output,    width = 3,          .channel
		.rsp_src_startofpacket  (ase_avmm_pipe_0_m0_limiter_rsp_src_startofpacket),  //  output,    width = 1,          .startofpacket
		.rsp_src_endofpacket    (ase_avmm_pipe_0_m0_limiter_rsp_src_endofpacket),    //  output,    width = 1,          .endofpacket
		.cmd_src_valid          (ase_avmm_pipe_0_m0_limiter_cmd_valid_data)          //  output,    width = 3, cmd_valid.data
	);

	ase_altera_merlin_demultiplexer_191_vvvok5y cmd_demux (
		.clk                (clock_in_out_clk_clk),                              //   input,    width = 1,        clk.clk
		.reset              (ase_avmm_pipe_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  clk_reset.reset
		.sink_ready         (ase_avmm_pipe_0_m0_limiter_cmd_src_ready),          //  output,    width = 1,       sink.ready
		.sink_channel       (ase_avmm_pipe_0_m0_limiter_cmd_src_channel),        //   input,    width = 3,           .channel
		.sink_data          (ase_avmm_pipe_0_m0_limiter_cmd_src_data),           //   input,  width = 137,           .data
		.sink_startofpacket (ase_avmm_pipe_0_m0_limiter_cmd_src_startofpacket),  //   input,    width = 1,           .startofpacket
		.sink_endofpacket   (ase_avmm_pipe_0_m0_limiter_cmd_src_endofpacket),    //   input,    width = 1,           .endofpacket
		.sink_valid         (ase_avmm_pipe_0_m0_limiter_cmd_valid_data),         //   input,    width = 3, sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                              //   input,    width = 1,       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                              //  output,    width = 1,           .valid
		.src0_data          (cmd_demux_src0_data),                               //  output,  width = 137,           .data
		.src0_channel       (cmd_demux_src0_channel),                            //  output,    width = 3,           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                      //  output,    width = 1,           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                        //  output,    width = 1,           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                              //   input,    width = 1,       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                              //  output,    width = 1,           .valid
		.src1_data          (cmd_demux_src1_data),                               //  output,  width = 137,           .data
		.src1_channel       (cmd_demux_src1_channel),                            //  output,    width = 3,           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                      //  output,    width = 1,           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                        //  output,    width = 1,           .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                              //   input,    width = 1,       src2.ready
		.src2_valid         (cmd_demux_src2_valid),                              //  output,    width = 1,           .valid
		.src2_data          (cmd_demux_src2_data),                               //  output,  width = 137,           .data
		.src2_channel       (cmd_demux_src2_channel),                            //  output,    width = 3,           .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                      //  output,    width = 1,           .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket)                         //  output,    width = 1,           .endofpacket
	);

	ase_altera_merlin_multiplexer_191_oexvttq cmd_mux (
		.clk                 (clock_in_out_clk_clk),                              //   input,    width = 1,       clk.clk
		.reset               (ase_avmm_pipe_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                 //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_src_valid),                                 //  output,    width = 1,          .valid
		.src_data            (cmd_mux_src_data),                                  //  output,  width = 137,          .data
		.src_channel         (cmd_mux_src_channel),                               //  output,    width = 3,          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                           //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                              //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                              //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src0_channel),                            //   input,    width = 3,          .channel
		.sink0_data          (cmd_demux_src0_data),                               //   input,  width = 137,          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                         //   input,    width = 1,          .endofpacket
	);

	ase_altera_merlin_multiplexer_191_oexvttq cmd_mux_001 (
		.clk                 (clock_in_out_clk_clk),                              //   input,    width = 1,       clk.clk
		.reset               (ase_avmm_pipe_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                             //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_001_src_valid),                             //  output,    width = 1,          .valid
		.src_data            (cmd_mux_001_src_data),                              //  output,  width = 137,          .data
		.src_channel         (cmd_mux_001_src_channel),                           //  output,    width = 3,          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                     //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                       //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                              //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                              //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src1_channel),                            //   input,    width = 3,          .channel
		.sink0_data          (cmd_demux_src1_data),                               //   input,  width = 137,          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                         //   input,    width = 1,          .endofpacket
	);

	ase_altera_merlin_multiplexer_191_oexvttq cmd_mux_002 (
		.clk                 (clock_in_out_clk_clk),                              //   input,    width = 1,       clk.clk
		.reset               (ase_avmm_pipe_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                             //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_002_src_valid),                             //  output,    width = 1,          .valid
		.src_data            (cmd_mux_002_src_data),                              //  output,  width = 137,          .data
		.src_channel         (cmd_mux_002_src_channel),                           //  output,    width = 3,          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                     //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                       //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                              //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                              //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src2_channel),                            //   input,    width = 3,          .channel
		.sink0_data          (cmd_demux_src2_data),                               //   input,  width = 137,          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket)                         //   input,    width = 1,          .endofpacket
	);

	ase_altera_merlin_demultiplexer_191_ys6zx5a rsp_demux (
		.clk                (clock_in_out_clk_clk),                              //   input,    width = 1,       clk.clk
		.reset              (ase_avmm_pipe_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_001_src_ready),                              //  output,    width = 1,      sink.ready
		.sink_channel       (router_001_src_channel),                            //   input,    width = 3,          .channel
		.sink_data          (router_001_src_data),                               //   input,  width = 137,          .data
		.sink_startofpacket (router_001_src_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                        //   input,    width = 1,          .endofpacket
		.sink_valid         (router_001_src_valid),                              //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_src0_ready),                              //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                              //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_src0_data),                               //  output,  width = 137,          .data
		.src0_channel       (rsp_demux_src0_channel),                            //  output,    width = 3,          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                         //  output,    width = 1,          .endofpacket
	);

	ase_altera_merlin_demultiplexer_191_ys6zx5a rsp_demux_001 (
		.clk                (clock_in_out_clk_clk),                              //   input,    width = 1,       clk.clk
		.reset              (ase_avmm_pipe_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_002_src_ready),                              //  output,    width = 1,      sink.ready
		.sink_channel       (router_002_src_channel),                            //   input,    width = 3,          .channel
		.sink_data          (router_002_src_data),                               //   input,  width = 137,          .data
		.sink_startofpacket (router_002_src_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                        //   input,    width = 1,          .endofpacket
		.sink_valid         (router_002_src_valid),                              //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                          //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                          //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_001_src0_data),                           //  output,  width = 137,          .data
		.src0_channel       (rsp_demux_001_src0_channel),                        //  output,    width = 3,          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                     //  output,    width = 1,          .endofpacket
	);

	ase_altera_merlin_demultiplexer_191_ys6zx5a rsp_demux_002 (
		.clk                (clock_in_out_clk_clk),                                                       //   input,    width = 1,       clk.clk
		.reset              (ase_avmm_pipe_0_reset_reset_bridge_in_reset_reset),                          //   input,    width = 1, clk_reset.reset
		.sink_ready         (address_span_extender_0_windowed_slave_rsp_width_adapter_src_ready),         //  output,    width = 1,      sink.ready
		.sink_channel       (address_span_extender_0_windowed_slave_rsp_width_adapter_src_channel),       //   input,    width = 3,          .channel
		.sink_data          (address_span_extender_0_windowed_slave_rsp_width_adapter_src_data),          //   input,  width = 137,          .data
		.sink_startofpacket (address_span_extender_0_windowed_slave_rsp_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (address_span_extender_0_windowed_slave_rsp_width_adapter_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.sink_valid         (address_span_extender_0_windowed_slave_rsp_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                                                   //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                                                   //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_002_src0_data),                                                    //  output,  width = 137,          .data
		.src0_channel       (rsp_demux_002_src0_channel),                                                 //  output,    width = 3,          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                                           //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                                              //  output,    width = 1,          .endofpacket
	);

	ase_altera_merlin_multiplexer_191_jnfoxei rsp_mux (
		.clk                 (clock_in_out_clk_clk),                              //   input,    width = 1,       clk.clk
		.reset               (ase_avmm_pipe_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                 //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_src_valid),                                 //  output,    width = 1,          .valid
		.src_data            (rsp_mux_src_data),                                  //  output,  width = 137,          .data
		.src_channel         (rsp_mux_src_channel),                               //  output,    width = 3,          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                           //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                              //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                              //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_src0_channel),                            //   input,    width = 3,          .channel
		.sink0_data          (rsp_demux_src0_data),                               //   input,  width = 137,          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                        //   input,    width = 1,          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                          //  output,    width = 1,     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                          //   input,    width = 1,          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                        //   input,    width = 3,          .channel
		.sink1_data          (rsp_demux_001_src0_data),                           //   input,  width = 137,          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),                    //   input,    width = 1,          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                          //  output,    width = 1,     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                          //   input,    width = 1,          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),                        //   input,    width = 3,          .channel
		.sink2_data          (rsp_demux_002_src0_data),                           //   input,  width = 137,          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket)                     //   input,    width = 1,          .endofpacket
	);

	ase_altera_merlin_width_adapter_191_dr5bt7a #(
		.IN_PKT_ADDR_H                 (84),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (100),
		.IN_PKT_BYTE_CNT_L             (91),
		.IN_PKT_TRANS_COMPRESSED_READ  (85),
		.IN_PKT_TRANS_WRITE            (87),
		.IN_PKT_BURSTWRAP_H            (101),
		.IN_PKT_BURSTWRAP_L            (101),
		.IN_PKT_BURST_SIZE_H           (104),
		.IN_PKT_BURST_SIZE_L           (102),
		.IN_PKT_RESPONSE_STATUS_H      (124),
		.IN_PKT_RESPONSE_STATUS_L      (123),
		.IN_PKT_TRANS_EXCLUSIVE        (90),
		.IN_PKT_BURST_TYPE_H           (106),
		.IN_PKT_BURST_TYPE_L           (105),
		.IN_PKT_ORI_BURST_SIZE_L       (125),
		.IN_PKT_ORI_BURST_SIZE_H       (127),
		.IN_ST_DATA_W                  (137),
		.OUT_PKT_ADDR_H                (588),
		.OUT_PKT_ADDR_L                (576),
		.OUT_PKT_DATA_H                (511),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (575),
		.OUT_PKT_BYTEEN_L              (512),
		.OUT_PKT_BYTE_CNT_H            (604),
		.OUT_PKT_BYTE_CNT_L            (595),
		.OUT_PKT_TRANS_COMPRESSED_READ (589),
		.OUT_PKT_BURST_SIZE_H          (608),
		.OUT_PKT_BURST_SIZE_L          (606),
		.OUT_PKT_RESPONSE_STATUS_H     (628),
		.OUT_PKT_RESPONSE_STATUS_L     (627),
		.OUT_PKT_TRANS_EXCLUSIVE       (594),
		.OUT_PKT_BURST_TYPE_H          (610),
		.OUT_PKT_BURST_TYPE_L          (609),
		.OUT_PKT_ORI_BURST_SIZE_L      (629),
		.OUT_PKT_ORI_BURST_SIZE_H      (631),
		.OUT_ST_DATA_W                 (641),
		.ST_CHANNEL_W                  (3),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) address_span_extender_0_windowed_slave_cmd_width_adapter (
		.clk                  (clock_in_out_clk_clk),                                                       //   input,    width = 1,       clk.clk
		.reset                (ase_avmm_pipe_0_reset_reset_bridge_in_reset_reset),                          //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_mux_002_src_valid),                                                      //   input,    width = 1,      sink.valid
		.in_channel           (cmd_mux_002_src_channel),                                                    //   input,    width = 3,          .channel
		.in_startofpacket     (cmd_mux_002_src_startofpacket),                                              //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_mux_002_src_endofpacket),                                                //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_mux_002_src_ready),                                                      //  output,    width = 1,          .ready
		.in_data              (cmd_mux_002_src_data),                                                       //   input,  width = 137,          .data
		.out_endofpacket      (address_span_extender_0_windowed_slave_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (address_span_extender_0_windowed_slave_cmd_width_adapter_src_data),          //  output,  width = 641,          .data
		.out_channel          (address_span_extender_0_windowed_slave_cmd_width_adapter_src_channel),       //  output,    width = 3,          .channel
		.out_valid            (address_span_extender_0_windowed_slave_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (address_span_extender_0_windowed_slave_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (address_span_extender_0_windowed_slave_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                      // (terminated),                         
	);

	ase_altera_merlin_width_adapter_191_hpofrwy #(
		.IN_PKT_ADDR_H                 (588),
		.IN_PKT_ADDR_L                 (576),
		.IN_PKT_DATA_H                 (511),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (575),
		.IN_PKT_BYTEEN_L               (512),
		.IN_PKT_BYTE_CNT_H             (604),
		.IN_PKT_BYTE_CNT_L             (595),
		.IN_PKT_TRANS_COMPRESSED_READ  (589),
		.IN_PKT_TRANS_WRITE            (591),
		.IN_PKT_BURSTWRAP_H            (605),
		.IN_PKT_BURSTWRAP_L            (605),
		.IN_PKT_BURST_SIZE_H           (608),
		.IN_PKT_BURST_SIZE_L           (606),
		.IN_PKT_RESPONSE_STATUS_H      (628),
		.IN_PKT_RESPONSE_STATUS_L      (627),
		.IN_PKT_TRANS_EXCLUSIVE        (594),
		.IN_PKT_BURST_TYPE_H           (610),
		.IN_PKT_BURST_TYPE_L           (609),
		.IN_PKT_ORI_BURST_SIZE_L       (629),
		.IN_PKT_ORI_BURST_SIZE_H       (631),
		.IN_ST_DATA_W                  (641),
		.OUT_PKT_ADDR_H                (84),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (100),
		.OUT_PKT_BYTE_CNT_L            (91),
		.OUT_PKT_TRANS_COMPRESSED_READ (85),
		.OUT_PKT_BURST_SIZE_H          (104),
		.OUT_PKT_BURST_SIZE_L          (102),
		.OUT_PKT_RESPONSE_STATUS_H     (124),
		.OUT_PKT_RESPONSE_STATUS_L     (123),
		.OUT_PKT_TRANS_EXCLUSIVE       (90),
		.OUT_PKT_BURST_TYPE_H          (106),
		.OUT_PKT_BURST_TYPE_L          (105),
		.OUT_PKT_ORI_BURST_SIZE_L      (125),
		.OUT_PKT_ORI_BURST_SIZE_H      (127),
		.OUT_ST_DATA_W                 (137),
		.ST_CHANNEL_W                  (3),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) address_span_extender_0_windowed_slave_rsp_width_adapter (
		.clk                  (clock_in_out_clk_clk),                                                       //   input,    width = 1,       clk.clk
		.reset                (ase_avmm_pipe_0_reset_reset_bridge_in_reset_reset),                          //   input,    width = 1, clk_reset.reset
		.in_valid             (router_003_src_valid),                                                       //   input,    width = 1,      sink.valid
		.in_channel           (router_003_src_channel),                                                     //   input,    width = 3,          .channel
		.in_startofpacket     (router_003_src_startofpacket),                                               //   input,    width = 1,          .startofpacket
		.in_endofpacket       (router_003_src_endofpacket),                                                 //   input,    width = 1,          .endofpacket
		.in_ready             (router_003_src_ready),                                                       //  output,    width = 1,          .ready
		.in_data              (router_003_src_data),                                                        //   input,  width = 641,          .data
		.out_endofpacket      (address_span_extender_0_windowed_slave_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (address_span_extender_0_windowed_slave_rsp_width_adapter_src_data),          //  output,  width = 137,          .data
		.out_channel          (address_span_extender_0_windowed_slave_rsp_width_adapter_src_channel),       //  output,    width = 3,          .channel
		.out_valid            (address_span_extender_0_windowed_slave_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (address_span_extender_0_windowed_slave_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (address_span_extender_0_windowed_slave_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                      // (terminated),                         
	);

endmodule
