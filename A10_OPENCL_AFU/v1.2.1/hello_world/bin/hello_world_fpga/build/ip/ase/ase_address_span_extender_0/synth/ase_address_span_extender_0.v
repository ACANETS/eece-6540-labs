// ase_address_span_extender_0.v

// Generated using ACDS version 19.2 57

`timescale 1 ps / 1 ps
module ase_address_span_extender_0 #(
		parameter SYNC_RESET = 0
	) (
		input  wire         clk,                  //           clock.clk
		input  wire         reset,                //           reset.reset
		input  wire [5:0]   avs_s0_address,       //  windowed_slave.address
		input  wire         avs_s0_read,          //                .read
		output wire [511:0] avs_s0_readdata,      //                .readdata
		input  wire         avs_s0_write,         //                .write
		input  wire [511:0] avs_s0_writedata,     //                .writedata
		output wire         avs_s0_readdatavalid, //                .readdatavalid
		output wire         avs_s0_waitrequest,   //                .waitrequest
		input  wire [63:0]  avs_s0_byteenable,    //                .byteenable
		input  wire [3:0]   avs_s0_burstcount,    //                .burstcount
		output wire [47:0]  avm_m0_address,       // expanded_master.address
		output wire         avm_m0_read,          //                .read
		input  wire         avm_m0_waitrequest,   //                .waitrequest
		input  wire [511:0] avm_m0_readdata,      //                .readdata
		output wire         avm_m0_write,         //                .write
		output wire [511:0] avm_m0_writedata,     //                .writedata
		input  wire         avm_m0_readdatavalid, //                .readdatavalid
		output wire [63:0]  avm_m0_byteenable,    //                .byteenable
		output wire [3:0]   avm_m0_burstcount,    //                .burstcount
		input  wire         avs_cntl_read,        //            cntl.read
		output wire [63:0]  avs_cntl_readdata,    //                .readdata
		input  wire         avs_cntl_write,       //                .write
		input  wire [63:0]  avs_cntl_writedata,   //                .writedata
		input  wire [7:0]   avs_cntl_byteenable   //                .byteenable
	);

	ase_address_span_extender_0_altera_address_span_extender_191_z2icwqi #(
		.DATA_WIDTH           (512),
		.BYTEENABLE_WIDTH     (64),
		.MASTER_ADDRESS_WIDTH (48),
		.SLAVE_ADDRESS_WIDTH  (6),
		.SLAVE_ADDRESS_SHIFT  (6),
		.BURSTCOUNT_WIDTH     (4),
		.CNTL_ADDRESS_WIDTH   (1),
		.SUB_WINDOW_COUNT     (1),
		.MASTER_ADDRESS_DEF   (64'b0000000000000000000000000000000000000000000000000000000000000000),
		.SYNC_RESET           (SYNC_RESET)
	) address_span_extender_0 (
		.clk                  (clk),                  //   input,    width = 1,           clock.clk
		.reset                (reset),                //   input,    width = 1,           reset.reset
		.avs_s0_address       (avs_s0_address),       //   input,    width = 6,  windowed_slave.address
		.avs_s0_read          (avs_s0_read),          //   input,    width = 1,                .read
		.avs_s0_readdata      (avs_s0_readdata),      //  output,  width = 512,                .readdata
		.avs_s0_write         (avs_s0_write),         //   input,    width = 1,                .write
		.avs_s0_writedata     (avs_s0_writedata),     //   input,  width = 512,                .writedata
		.avs_s0_readdatavalid (avs_s0_readdatavalid), //  output,    width = 1,                .readdatavalid
		.avs_s0_waitrequest   (avs_s0_waitrequest),   //  output,    width = 1,                .waitrequest
		.avs_s0_byteenable    (avs_s0_byteenable),    //   input,   width = 64,                .byteenable
		.avs_s0_burstcount    (avs_s0_burstcount),    //   input,    width = 4,                .burstcount
		.avm_m0_address       (avm_m0_address),       //  output,   width = 48, expanded_master.address
		.avm_m0_read          (avm_m0_read),          //  output,    width = 1,                .read
		.avm_m0_waitrequest   (avm_m0_waitrequest),   //   input,    width = 1,                .waitrequest
		.avm_m0_readdata      (avm_m0_readdata),      //   input,  width = 512,                .readdata
		.avm_m0_write         (avm_m0_write),         //  output,    width = 1,                .write
		.avm_m0_writedata     (avm_m0_writedata),     //  output,  width = 512,                .writedata
		.avm_m0_readdatavalid (avm_m0_readdatavalid), //   input,    width = 1,                .readdatavalid
		.avm_m0_byteenable    (avm_m0_byteenable),    //  output,   width = 64,                .byteenable
		.avm_m0_burstcount    (avm_m0_burstcount),    //  output,    width = 4,                .burstcount
		.avs_cntl_read        (avs_cntl_read),        //   input,    width = 1,            cntl.read
		.avs_cntl_readdata    (avs_cntl_readdata),    //  output,   width = 64,                .readdata
		.avs_cntl_write       (avs_cntl_write),       //   input,    width = 1,                .write
		.avs_cntl_writedata   (avs_cntl_writedata),   //   input,   width = 64,                .writedata
		.avs_cntl_byteenable  (avs_cntl_byteenable),  //   input,    width = 8,                .byteenable
		.avs_cntl_address     (1'b0)                  // (terminated),                               
	);

endmodule
