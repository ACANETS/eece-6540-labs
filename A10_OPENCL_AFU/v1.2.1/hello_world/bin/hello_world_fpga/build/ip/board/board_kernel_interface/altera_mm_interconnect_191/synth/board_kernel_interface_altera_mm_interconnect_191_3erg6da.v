// board_kernel_interface_altera_mm_interconnect_191_3erg6da.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 19.2 57

`timescale 1 ps / 1 ps
module board_kernel_interface_altera_mm_interconnect_191_3erg6da (
		input  wire [29:0] address_span_extender_0_expanded_master_address,           //             address_span_extender_0_expanded_master.address
		output wire        address_span_extender_0_expanded_master_waitrequest,       //                                                    .waitrequest
		input  wire [0:0]  address_span_extender_0_expanded_master_burstcount,        //                                                    .burstcount
		input  wire [7:0]  address_span_extender_0_expanded_master_byteenable,        //                                                    .byteenable
		input  wire        address_span_extender_0_expanded_master_read,              //                                                    .read
		output wire [63:0] address_span_extender_0_expanded_master_readdata,          //                                                    .readdata
		output wire        address_span_extender_0_expanded_master_readdatavalid,     //                                                    .readdatavalid
		input  wire        address_span_extender_0_expanded_master_write,             //                                                    .write
		input  wire [63:0] address_span_extender_0_expanded_master_writedata,         //                                                    .writedata
		output wire [29:0] kernel_cra_s0_address,                                     //                                       kernel_cra_s0.address
		output wire        kernel_cra_s0_write,                                       //                                                    .write
		output wire        kernel_cra_s0_read,                                        //                                                    .read
		input  wire [63:0] kernel_cra_s0_readdata,                                    //                                                    .readdata
		output wire [63:0] kernel_cra_s0_writedata,                                   //                                                    .writedata
		output wire [0:0]  kernel_cra_s0_burstcount,                                  //                                                    .burstcount
		output wire [7:0]  kernel_cra_s0_byteenable,                                  //                                                    .byteenable
		input  wire        kernel_cra_s0_readdatavalid,                               //                                                    .readdatavalid
		input  wire        kernel_cra_s0_waitrequest,                                 //                                                    .waitrequest
		output wire        kernel_cra_s0_debugaccess,                                 //                                                    .debugaccess
		input  wire        address_span_extender_0_reset_reset_bridge_in_reset_reset, // address_span_extender_0_reset_reset_bridge_in_reset.reset
		input  wire        kernel_cra_reset_reset_bridge_in_reset_reset,              //              kernel_cra_reset_reset_bridge_in_reset.reset
		input  wire        clk_reset_clk_clk,                                         //                                       clk_reset_clk.clk
		input  wire        kernel_clk_out_clk_clk                                     //                                  kernel_clk_out_clk.clk
	);

	wire          address_span_extender_0_expanded_master_translator_avalon_universal_master_0_waitrequest;   // address_span_extender_0_expanded_master_agent:av_waitrequest -> address_span_extender_0_expanded_master_translator:uav_waitrequest
	wire   [63:0] address_span_extender_0_expanded_master_translator_avalon_universal_master_0_readdata;      // address_span_extender_0_expanded_master_agent:av_readdata -> address_span_extender_0_expanded_master_translator:uav_readdata
	wire          address_span_extender_0_expanded_master_translator_avalon_universal_master_0_debugaccess;   // address_span_extender_0_expanded_master_translator:uav_debugaccess -> address_span_extender_0_expanded_master_agent:av_debugaccess
	wire   [29:0] address_span_extender_0_expanded_master_translator_avalon_universal_master_0_address;       // address_span_extender_0_expanded_master_translator:uav_address -> address_span_extender_0_expanded_master_agent:av_address
	wire          address_span_extender_0_expanded_master_translator_avalon_universal_master_0_read;          // address_span_extender_0_expanded_master_translator:uav_read -> address_span_extender_0_expanded_master_agent:av_read
	wire    [7:0] address_span_extender_0_expanded_master_translator_avalon_universal_master_0_byteenable;    // address_span_extender_0_expanded_master_translator:uav_byteenable -> address_span_extender_0_expanded_master_agent:av_byteenable
	wire          address_span_extender_0_expanded_master_translator_avalon_universal_master_0_readdatavalid; // address_span_extender_0_expanded_master_agent:av_readdatavalid -> address_span_extender_0_expanded_master_translator:uav_readdatavalid
	wire          address_span_extender_0_expanded_master_translator_avalon_universal_master_0_lock;          // address_span_extender_0_expanded_master_translator:uav_lock -> address_span_extender_0_expanded_master_agent:av_lock
	wire          address_span_extender_0_expanded_master_translator_avalon_universal_master_0_write;         // address_span_extender_0_expanded_master_translator:uav_write -> address_span_extender_0_expanded_master_agent:av_write
	wire   [63:0] address_span_extender_0_expanded_master_translator_avalon_universal_master_0_writedata;     // address_span_extender_0_expanded_master_translator:uav_writedata -> address_span_extender_0_expanded_master_agent:av_writedata
	wire    [3:0] address_span_extender_0_expanded_master_translator_avalon_universal_master_0_burstcount;    // address_span_extender_0_expanded_master_translator:uav_burstcount -> address_span_extender_0_expanded_master_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                                          // rsp_mux:src_valid -> address_span_extender_0_expanded_master_agent:rp_valid
	wire  [145:0] rsp_mux_src_data;                                                                           // rsp_mux:src_data -> address_span_extender_0_expanded_master_agent:rp_data
	wire          rsp_mux_src_ready;                                                                          // address_span_extender_0_expanded_master_agent:rp_ready -> rsp_mux:src_ready
	wire    [0:0] rsp_mux_src_channel;                                                                        // rsp_mux:src_channel -> address_span_extender_0_expanded_master_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                                                  // rsp_mux:src_startofpacket -> address_span_extender_0_expanded_master_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                                                    // rsp_mux:src_endofpacket -> address_span_extender_0_expanded_master_agent:rp_endofpacket
	wire   [63:0] kernel_cra_s0_agent_m0_readdata;                                                            // kernel_cra_s0_translator:uav_readdata -> kernel_cra_s0_agent:m0_readdata
	wire          kernel_cra_s0_agent_m0_waitrequest;                                                         // kernel_cra_s0_translator:uav_waitrequest -> kernel_cra_s0_agent:m0_waitrequest
	wire          kernel_cra_s0_agent_m0_debugaccess;                                                         // kernel_cra_s0_agent:m0_debugaccess -> kernel_cra_s0_translator:uav_debugaccess
	wire   [29:0] kernel_cra_s0_agent_m0_address;                                                             // kernel_cra_s0_agent:m0_address -> kernel_cra_s0_translator:uav_address
	wire    [7:0] kernel_cra_s0_agent_m0_byteenable;                                                          // kernel_cra_s0_agent:m0_byteenable -> kernel_cra_s0_translator:uav_byteenable
	wire          kernel_cra_s0_agent_m0_read;                                                                // kernel_cra_s0_agent:m0_read -> kernel_cra_s0_translator:uav_read
	wire          kernel_cra_s0_agent_m0_readdatavalid;                                                       // kernel_cra_s0_translator:uav_readdatavalid -> kernel_cra_s0_agent:m0_readdatavalid
	wire          kernel_cra_s0_agent_m0_lock;                                                                // kernel_cra_s0_agent:m0_lock -> kernel_cra_s0_translator:uav_lock
	wire   [63:0] kernel_cra_s0_agent_m0_writedata;                                                           // kernel_cra_s0_agent:m0_writedata -> kernel_cra_s0_translator:uav_writedata
	wire          kernel_cra_s0_agent_m0_write;                                                               // kernel_cra_s0_agent:m0_write -> kernel_cra_s0_translator:uav_write
	wire    [3:0] kernel_cra_s0_agent_m0_burstcount;                                                          // kernel_cra_s0_agent:m0_burstcount -> kernel_cra_s0_translator:uav_burstcount
	wire          kernel_cra_s0_agent_rf_source_valid;                                                        // kernel_cra_s0_agent:rf_source_valid -> kernel_cra_s0_agent_rsp_fifo:in_valid
	wire  [146:0] kernel_cra_s0_agent_rf_source_data;                                                         // kernel_cra_s0_agent:rf_source_data -> kernel_cra_s0_agent_rsp_fifo:in_data
	wire          kernel_cra_s0_agent_rf_source_ready;                                                        // kernel_cra_s0_agent_rsp_fifo:in_ready -> kernel_cra_s0_agent:rf_source_ready
	wire          kernel_cra_s0_agent_rf_source_startofpacket;                                                // kernel_cra_s0_agent:rf_source_startofpacket -> kernel_cra_s0_agent_rsp_fifo:in_startofpacket
	wire          kernel_cra_s0_agent_rf_source_endofpacket;                                                  // kernel_cra_s0_agent:rf_source_endofpacket -> kernel_cra_s0_agent_rsp_fifo:in_endofpacket
	wire          kernel_cra_s0_agent_rsp_fifo_out_valid;                                                     // kernel_cra_s0_agent_rsp_fifo:out_valid -> kernel_cra_s0_agent:rf_sink_valid
	wire  [146:0] kernel_cra_s0_agent_rsp_fifo_out_data;                                                      // kernel_cra_s0_agent_rsp_fifo:out_data -> kernel_cra_s0_agent:rf_sink_data
	wire          kernel_cra_s0_agent_rsp_fifo_out_ready;                                                     // kernel_cra_s0_agent:rf_sink_ready -> kernel_cra_s0_agent_rsp_fifo:out_ready
	wire          kernel_cra_s0_agent_rsp_fifo_out_startofpacket;                                             // kernel_cra_s0_agent_rsp_fifo:out_startofpacket -> kernel_cra_s0_agent:rf_sink_startofpacket
	wire          kernel_cra_s0_agent_rsp_fifo_out_endofpacket;                                               // kernel_cra_s0_agent_rsp_fifo:out_endofpacket -> kernel_cra_s0_agent:rf_sink_endofpacket
	wire          kernel_cra_s0_agent_rdata_fifo_src_valid;                                                   // kernel_cra_s0_agent:rdata_fifo_src_valid -> kernel_cra_s0_agent_rdata_fifo:in_valid
	wire   [65:0] kernel_cra_s0_agent_rdata_fifo_src_data;                                                    // kernel_cra_s0_agent:rdata_fifo_src_data -> kernel_cra_s0_agent_rdata_fifo:in_data
	wire          kernel_cra_s0_agent_rdata_fifo_src_ready;                                                   // kernel_cra_s0_agent_rdata_fifo:in_ready -> kernel_cra_s0_agent:rdata_fifo_src_ready
	wire          kernel_cra_s0_agent_rdata_fifo_out_valid;                                                   // kernel_cra_s0_agent_rdata_fifo:out_valid -> kernel_cra_s0_agent:rdata_fifo_sink_valid
	wire   [65:0] kernel_cra_s0_agent_rdata_fifo_out_data;                                                    // kernel_cra_s0_agent_rdata_fifo:out_data -> kernel_cra_s0_agent:rdata_fifo_sink_data
	wire          kernel_cra_s0_agent_rdata_fifo_out_ready;                                                   // kernel_cra_s0_agent:rdata_fifo_sink_ready -> kernel_cra_s0_agent_rdata_fifo:out_ready
	wire          cmd_mux_src_valid;                                                                          // cmd_mux:src_valid -> kernel_cra_s0_agent:cp_valid
	wire  [145:0] cmd_mux_src_data;                                                                           // cmd_mux:src_data -> kernel_cra_s0_agent:cp_data
	wire          cmd_mux_src_ready;                                                                          // kernel_cra_s0_agent:cp_ready -> cmd_mux:src_ready
	wire    [0:0] cmd_mux_src_channel;                                                                        // cmd_mux:src_channel -> kernel_cra_s0_agent:cp_channel
	wire          cmd_mux_src_startofpacket;                                                                  // cmd_mux:src_startofpacket -> kernel_cra_s0_agent:cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                                                    // cmd_mux:src_endofpacket -> kernel_cra_s0_agent:cp_endofpacket
	wire          address_span_extender_0_expanded_master_agent_cp_valid;                                     // address_span_extender_0_expanded_master_agent:cp_valid -> router:sink_valid
	wire  [145:0] address_span_extender_0_expanded_master_agent_cp_data;                                      // address_span_extender_0_expanded_master_agent:cp_data -> router:sink_data
	wire          address_span_extender_0_expanded_master_agent_cp_ready;                                     // router:sink_ready -> address_span_extender_0_expanded_master_agent:cp_ready
	wire          address_span_extender_0_expanded_master_agent_cp_startofpacket;                             // address_span_extender_0_expanded_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          address_span_extender_0_expanded_master_agent_cp_endofpacket;                               // address_span_extender_0_expanded_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                                           // router:src_valid -> cmd_demux:sink_valid
	wire  [145:0] router_src_data;                                                                            // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                                           // cmd_demux:sink_ready -> router:src_ready
	wire    [0:0] router_src_channel;                                                                         // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                                                   // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                                                     // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          kernel_cra_s0_agent_rp_valid;                                                               // kernel_cra_s0_agent:rp_valid -> router_001:sink_valid
	wire  [145:0] kernel_cra_s0_agent_rp_data;                                                                // kernel_cra_s0_agent:rp_data -> router_001:sink_data
	wire          kernel_cra_s0_agent_rp_ready;                                                               // router_001:sink_ready -> kernel_cra_s0_agent:rp_ready
	wire          kernel_cra_s0_agent_rp_startofpacket;                                                       // kernel_cra_s0_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire          kernel_cra_s0_agent_rp_endofpacket;                                                         // kernel_cra_s0_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                                       // router_001:src_valid -> rsp_demux:sink_valid
	wire  [145:0] router_001_src_data;                                                                        // router_001:src_data -> rsp_demux:sink_data
	wire          router_001_src_ready;                                                                       // rsp_demux:sink_ready -> router_001:src_ready
	wire    [0:0] router_001_src_channel;                                                                     // router_001:src_channel -> rsp_demux:sink_channel
	wire          router_001_src_startofpacket;                                                               // router_001:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_001_src_endofpacket;                                                                 // router_001:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          cmd_demux_src0_valid;                                                                       // cmd_demux:src0_valid -> crosser:in_valid
	wire  [145:0] cmd_demux_src0_data;                                                                        // cmd_demux:src0_data -> crosser:in_data
	wire          cmd_demux_src0_ready;                                                                       // crosser:in_ready -> cmd_demux:src0_ready
	wire    [0:0] cmd_demux_src0_channel;                                                                     // cmd_demux:src0_channel -> crosser:in_channel
	wire          cmd_demux_src0_startofpacket;                                                               // cmd_demux:src0_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                                 // cmd_demux:src0_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                                                          // crosser:out_valid -> cmd_mux:sink0_valid
	wire  [145:0] crosser_out_data;                                                                           // crosser:out_data -> cmd_mux:sink0_data
	wire          crosser_out_ready;                                                                          // cmd_mux:sink0_ready -> crosser:out_ready
	wire    [0:0] crosser_out_channel;                                                                        // crosser:out_channel -> cmd_mux:sink0_channel
	wire          crosser_out_startofpacket;                                                                  // crosser:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          crosser_out_endofpacket;                                                                    // crosser:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                                                       // rsp_demux:src0_valid -> crosser_001:in_valid
	wire  [145:0] rsp_demux_src0_data;                                                                        // rsp_demux:src0_data -> crosser_001:in_data
	wire          rsp_demux_src0_ready;                                                                       // crosser_001:in_ready -> rsp_demux:src0_ready
	wire    [0:0] rsp_demux_src0_channel;                                                                     // rsp_demux:src0_channel -> crosser_001:in_channel
	wire          rsp_demux_src0_startofpacket;                                                               // rsp_demux:src0_startofpacket -> crosser_001:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                                 // rsp_demux:src0_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                                                      // crosser_001:out_valid -> rsp_mux:sink0_valid
	wire  [145:0] crosser_001_out_data;                                                                       // crosser_001:out_data -> rsp_mux:sink0_data
	wire          crosser_001_out_ready;                                                                      // rsp_mux:sink0_ready -> crosser_001:out_ready
	wire    [0:0] crosser_001_out_channel;                                                                    // crosser_001:out_channel -> rsp_mux:sink0_channel
	wire          crosser_001_out_startofpacket;                                                              // crosser_001:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          crosser_001_out_endofpacket;                                                                // crosser_001:out_endofpacket -> rsp_mux:sink0_endofpacket

	board_kernel_interface_altera_merlin_master_translator_191_g7h47bq #(
		.AV_ADDRESS_W                (30),
		.AV_DATA_W                   (64),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (8),
		.UAV_ADDRESS_W               (30),
		.UAV_BURSTCOUNT_W            (4),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (8),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (0),
		.WAITREQUEST_ALLOWANCE       (0)
	) address_span_extender_0_expanded_master_translator (
		.clk                    (clk_reset_clk_clk),                                                                          //   input,   width = 1,                       clk.clk
		.reset                  (address_span_extender_0_reset_reset_bridge_in_reset_reset),                                  //   input,   width = 1,                     reset.reset
		.uav_address            (address_span_extender_0_expanded_master_translator_avalon_universal_master_0_address),       //  output,  width = 30, avalon_universal_master_0.address
		.uav_burstcount         (address_span_extender_0_expanded_master_translator_avalon_universal_master_0_burstcount),    //  output,   width = 4,                          .burstcount
		.uav_read               (address_span_extender_0_expanded_master_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (address_span_extender_0_expanded_master_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (address_span_extender_0_expanded_master_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (address_span_extender_0_expanded_master_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (address_span_extender_0_expanded_master_translator_avalon_universal_master_0_byteenable),    //  output,   width = 8,                          .byteenable
		.uav_readdata           (address_span_extender_0_expanded_master_translator_avalon_universal_master_0_readdata),      //   input,  width = 64,                          .readdata
		.uav_writedata          (address_span_extender_0_expanded_master_translator_avalon_universal_master_0_writedata),     //  output,  width = 64,                          .writedata
		.uav_lock               (address_span_extender_0_expanded_master_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (address_span_extender_0_expanded_master_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (address_span_extender_0_expanded_master_address),                                            //   input,  width = 30,      avalon_anti_master_0.address
		.av_waitrequest         (address_span_extender_0_expanded_master_waitrequest),                                        //  output,   width = 1,                          .waitrequest
		.av_burstcount          (address_span_extender_0_expanded_master_burstcount),                                         //   input,   width = 1,                          .burstcount
		.av_byteenable          (address_span_extender_0_expanded_master_byteenable),                                         //   input,   width = 8,                          .byteenable
		.av_read                (address_span_extender_0_expanded_master_read),                                               //   input,   width = 1,                          .read
		.av_readdata            (address_span_extender_0_expanded_master_readdata),                                           //  output,  width = 64,                          .readdata
		.av_readdatavalid       (address_span_extender_0_expanded_master_readdatavalid),                                      //  output,   width = 1,                          .readdatavalid
		.av_write               (address_span_extender_0_expanded_master_write),                                              //   input,   width = 1,                          .write
		.av_writedata           (address_span_extender_0_expanded_master_writedata),                                          //   input,  width = 64,                          .writedata
		.av_beginbursttransfer  (1'b0),                                                                                       // (terminated),                                        
		.av_begintransfer       (1'b0),                                                                                       // (terminated),                                        
		.av_chipselect          (1'b0),                                                                                       // (terminated),                                        
		.av_lock                (1'b0),                                                                                       // (terminated),                                        
		.av_debugaccess         (1'b0),                                                                                       // (terminated),                                        
		.uav_clken              (),                                                                                           // (terminated),                                        
		.av_clken               (1'b1),                                                                                       // (terminated),                                        
		.uav_response           (2'b00),                                                                                      // (terminated),                                        
		.av_response            (),                                                                                           // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                                                       // (terminated),                                        
		.av_writeresponsevalid  ()                                                                                            // (terminated),                                        
	);

	board_kernel_interface_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (30),
		.AV_DATA_W                      (64),
		.UAV_DATA_W                     (64),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (8),
		.UAV_BYTEENABLE_W               (8),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (8),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) kernel_cra_s0_translator (
		.clk                    (kernel_clk_out_clk_clk),                       //   input,   width = 1,                      clk.clk
		.reset                  (kernel_cra_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (kernel_cra_s0_agent_m0_address),               //   input,  width = 30, avalon_universal_slave_0.address
		.uav_burstcount         (kernel_cra_s0_agent_m0_burstcount),            //   input,   width = 4,                         .burstcount
		.uav_read               (kernel_cra_s0_agent_m0_read),                  //   input,   width = 1,                         .read
		.uav_write              (kernel_cra_s0_agent_m0_write),                 //   input,   width = 1,                         .write
		.uav_waitrequest        (kernel_cra_s0_agent_m0_waitrequest),           //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (kernel_cra_s0_agent_m0_readdatavalid),         //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (kernel_cra_s0_agent_m0_byteenable),            //   input,   width = 8,                         .byteenable
		.uav_readdata           (kernel_cra_s0_agent_m0_readdata),              //  output,  width = 64,                         .readdata
		.uav_writedata          (kernel_cra_s0_agent_m0_writedata),             //   input,  width = 64,                         .writedata
		.uav_lock               (kernel_cra_s0_agent_m0_lock),                  //   input,   width = 1,                         .lock
		.uav_debugaccess        (kernel_cra_s0_agent_m0_debugaccess),           //   input,   width = 1,                         .debugaccess
		.av_address             (kernel_cra_s0_address),                        //  output,  width = 30,      avalon_anti_slave_0.address
		.av_write               (kernel_cra_s0_write),                          //  output,   width = 1,                         .write
		.av_read                (kernel_cra_s0_read),                           //  output,   width = 1,                         .read
		.av_readdata            (kernel_cra_s0_readdata),                       //   input,  width = 64,                         .readdata
		.av_writedata           (kernel_cra_s0_writedata),                      //  output,  width = 64,                         .writedata
		.av_burstcount          (kernel_cra_s0_burstcount),                     //  output,   width = 1,                         .burstcount
		.av_byteenable          (kernel_cra_s0_byteenable),                     //  output,   width = 8,                         .byteenable
		.av_readdatavalid       (kernel_cra_s0_readdatavalid),                  //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (kernel_cra_s0_waitrequest),                    //   input,   width = 1,                         .waitrequest
		.av_debugaccess         (kernel_cra_s0_debugaccess),                    //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                             // (terminated),                                       
		.av_beginbursttransfer  (),                                             // (terminated),                                       
		.av_writebyteenable     (),                                             // (terminated),                                       
		.av_lock                (),                                             // (terminated),                                       
		.av_chipselect          (),                                             // (terminated),                                       
		.av_clken               (),                                             // (terminated),                                       
		.uav_clken              (1'b0),                                         // (terminated),                                       
		.av_outputenable        (),                                             // (terminated),                                       
		.uav_response           (),                                             // (terminated),                                       
		.av_response            (2'b00),                                        // (terminated),                                       
		.uav_writeresponsevalid (),                                             // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                          // (terminated),                                       
	);

	board_kernel_interface_altera_merlin_master_agent_191_mpbm6tq #(
		.PKT_WUNIQUE               (145),
		.PKT_DOMAIN_H              (144),
		.PKT_DOMAIN_L              (143),
		.PKT_SNOOP_H               (142),
		.PKT_SNOOP_L               (139),
		.PKT_BARRIER_H             (138),
		.PKT_BARRIER_L             (137),
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_QOS_H                 (121),
		.PKT_QOS_L                 (121),
		.PKT_DATA_SIDEBAND_H       (119),
		.PKT_DATA_SIDEBAND_L       (119),
		.PKT_ADDR_SIDEBAND_H       (118),
		.PKT_ADDR_SIDEBAND_L       (118),
		.PKT_BURST_TYPE_H          (117),
		.PKT_BURST_TYPE_L          (116),
		.PKT_CACHE_H               (131),
		.PKT_CACHE_L               (128),
		.PKT_THREAD_ID_H           (124),
		.PKT_THREAD_ID_L           (124),
		.PKT_BURST_SIZE_H          (115),
		.PKT_BURST_SIZE_L          (113),
		.PKT_TRANS_EXCLUSIVE       (107),
		.PKT_TRANS_LOCK            (106),
		.PKT_BEGIN_BURST           (120),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (112),
		.PKT_BURSTWRAP_L           (112),
		.PKT_BYTE_CNT_H            (111),
		.PKT_BYTE_CNT_L            (108),
		.PKT_ADDR_H                (101),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (102),
		.PKT_TRANS_POSTED          (103),
		.PKT_TRANS_WRITE           (104),
		.PKT_TRANS_READ            (105),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (122),
		.PKT_SRC_ID_L              (122),
		.PKT_DEST_ID_H             (123),
		.PKT_DEST_ID_L             (123),
		.ST_DATA_W                 (146),
		.ST_CHANNEL_W              (1),
		.AV_BURSTCOUNT_W           (4),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (0)
	) address_span_extender_0_expanded_master_agent (
		.clk                   (clk_reset_clk_clk),                                                                          //   input,    width = 1,       clk.clk
		.reset                 (address_span_extender_0_reset_reset_bridge_in_reset_reset),                                  //   input,    width = 1, clk_reset.reset
		.av_address            (address_span_extender_0_expanded_master_translator_avalon_universal_master_0_address),       //   input,   width = 30,        av.address
		.av_write              (address_span_extender_0_expanded_master_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (address_span_extender_0_expanded_master_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (address_span_extender_0_expanded_master_translator_avalon_universal_master_0_writedata),     //   input,   width = 64,          .writedata
		.av_readdata           (address_span_extender_0_expanded_master_translator_avalon_universal_master_0_readdata),      //  output,   width = 64,          .readdata
		.av_waitrequest        (address_span_extender_0_expanded_master_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (address_span_extender_0_expanded_master_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (address_span_extender_0_expanded_master_translator_avalon_universal_master_0_byteenable),    //   input,    width = 8,          .byteenable
		.av_burstcount         (address_span_extender_0_expanded_master_translator_avalon_universal_master_0_burstcount),    //   input,    width = 4,          .burstcount
		.av_debugaccess        (address_span_extender_0_expanded_master_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (address_span_extender_0_expanded_master_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (address_span_extender_0_expanded_master_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (address_span_extender_0_expanded_master_agent_cp_data),                                      //  output,  width = 146,          .data
		.cp_startofpacket      (address_span_extender_0_expanded_master_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (address_span_extender_0_expanded_master_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (address_span_extender_0_expanded_master_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (rsp_mux_src_valid),                                                                          //   input,    width = 1,        rp.valid
		.rp_data               (rsp_mux_src_data),                                                                           //   input,  width = 146,          .data
		.rp_channel            (rsp_mux_src_channel),                                                                        //   input,    width = 1,          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                                                  //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                                                    //   input,    width = 1,          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                                          //  output,    width = 1,          .ready
		.av_response           (),                                                                                           // (terminated),                         
		.av_writeresponsevalid ()                                                                                            // (terminated),                         
	);

	board_kernel_interface_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (115),
		.PKT_BURST_SIZE_L          (113),
		.PKT_TRANS_LOCK            (106),
		.PKT_BEGIN_BURST           (120),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (112),
		.PKT_BURSTWRAP_L           (112),
		.PKT_BYTE_CNT_H            (111),
		.PKT_BYTE_CNT_L            (108),
		.PKT_ADDR_H                (101),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (102),
		.PKT_TRANS_POSTED          (103),
		.PKT_TRANS_WRITE           (104),
		.PKT_TRANS_READ            (105),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (122),
		.PKT_SRC_ID_L              (122),
		.PKT_DEST_ID_H             (123),
		.PKT_DEST_ID_L             (123),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (1),
		.ST_DATA_W                 (146),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) kernel_cra_s0_agent (
		.clk                     (kernel_clk_out_clk_clk),                         //   input,    width = 1,             clk.clk
		.reset                   (kernel_cra_reset_reset_bridge_in_reset_reset),   //   input,    width = 1,       clk_reset.reset
		.m0_address              (kernel_cra_s0_agent_m0_address),                 //  output,   width = 30,              m0.address
		.m0_burstcount           (kernel_cra_s0_agent_m0_burstcount),              //  output,    width = 4,                .burstcount
		.m0_byteenable           (kernel_cra_s0_agent_m0_byteenable),              //  output,    width = 8,                .byteenable
		.m0_debugaccess          (kernel_cra_s0_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (kernel_cra_s0_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (kernel_cra_s0_agent_m0_readdata),                //   input,   width = 64,                .readdata
		.m0_readdatavalid        (kernel_cra_s0_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (kernel_cra_s0_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (kernel_cra_s0_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (kernel_cra_s0_agent_m0_writedata),               //  output,   width = 64,                .writedata
		.m0_write                (kernel_cra_s0_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (kernel_cra_s0_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (kernel_cra_s0_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (kernel_cra_s0_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (kernel_cra_s0_agent_rp_data),                    //  output,  width = 146,                .data
		.rp_startofpacket        (kernel_cra_s0_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                              //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_src_valid),                              //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_src_data),                               //   input,  width = 146,                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                      //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                        //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                            //   input,    width = 1,                .channel
		.rf_sink_ready           (kernel_cra_s0_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (kernel_cra_s0_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (kernel_cra_s0_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (kernel_cra_s0_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (kernel_cra_s0_agent_rsp_fifo_out_data),          //   input,  width = 147,                .data
		.rf_source_ready         (kernel_cra_s0_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (kernel_cra_s0_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (kernel_cra_s0_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (kernel_cra_s0_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (kernel_cra_s0_agent_rf_source_data),             //  output,  width = 147,                .data
		.rdata_fifo_sink_ready   (kernel_cra_s0_agent_rdata_fifo_out_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (kernel_cra_s0_agent_rdata_fifo_out_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (kernel_cra_s0_agent_rdata_fifo_out_data),        //   input,   width = 66,                .data
		.rdata_fifo_src_ready    (kernel_cra_s0_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (kernel_cra_s0_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (kernel_cra_s0_agent_rdata_fifo_src_data),        //  output,   width = 66,                .data
		.m0_response             (2'b00),                                          // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                           // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                            // (terminated),                               
	);

	board_kernel_interface_altera_avalon_sc_fifo_191_e5eqkcq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (147),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) kernel_cra_s0_agent_rsp_fifo (
		.clk               (kernel_clk_out_clk_clk),                         //   input,    width = 1,       clk.clk
		.reset             (kernel_cra_reset_reset_bridge_in_reset_reset),   //   input,    width = 1, clk_reset.reset
		.in_data           (kernel_cra_s0_agent_rf_source_data),             //   input,  width = 147,        in.data
		.in_valid          (kernel_cra_s0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (kernel_cra_s0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (kernel_cra_s0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (kernel_cra_s0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (kernel_cra_s0_agent_rsp_fifo_out_data),          //  output,  width = 147,       out.data
		.out_valid         (kernel_cra_s0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (kernel_cra_s0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (kernel_cra_s0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (kernel_cra_s0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                          // (terminated),                         
		.csr_read          (1'b0),                                           // (terminated),                         
		.csr_write         (1'b0),                                           // (terminated),                         
		.csr_readdata      (),                                               // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated),                         
		.almost_full_data  (),                                               // (terminated),                         
		.almost_empty_data (),                                               // (terminated),                         
		.in_empty          (1'b0),                                           // (terminated),                         
		.out_empty         (),                                               // (terminated),                         
		.in_error          (1'b0),                                           // (terminated),                         
		.out_error         (),                                               // (terminated),                         
		.in_channel        (1'b0),                                           // (terminated),                         
		.out_channel       ()                                                // (terminated),                         
	);

	board_kernel_interface_altera_avalon_sc_fifo_191_e5eqkcq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (66),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) kernel_cra_s0_agent_rdata_fifo (
		.clk               (kernel_clk_out_clk_clk),                       //   input,   width = 1,       clk.clk
		.reset             (kernel_cra_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.in_data           (kernel_cra_s0_agent_rdata_fifo_src_data),      //   input,  width = 66,        in.data
		.in_valid          (kernel_cra_s0_agent_rdata_fifo_src_valid),     //   input,   width = 1,          .valid
		.in_ready          (kernel_cra_s0_agent_rdata_fifo_src_ready),     //  output,   width = 1,          .ready
		.out_data          (kernel_cra_s0_agent_rdata_fifo_out_data),      //  output,  width = 66,       out.data
		.out_valid         (kernel_cra_s0_agent_rdata_fifo_out_valid),     //  output,   width = 1,          .valid
		.out_ready         (kernel_cra_s0_agent_rdata_fifo_out_ready),     //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                        // (terminated),                        
		.csr_read          (1'b0),                                         // (terminated),                        
		.csr_write         (1'b0),                                         // (terminated),                        
		.csr_readdata      (),                                             // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated),                        
		.almost_full_data  (),                                             // (terminated),                        
		.almost_empty_data (),                                             // (terminated),                        
		.in_startofpacket  (1'b0),                                         // (terminated),                        
		.in_endofpacket    (1'b0),                                         // (terminated),                        
		.out_startofpacket (),                                             // (terminated),                        
		.out_endofpacket   (),                                             // (terminated),                        
		.in_empty          (1'b0),                                         // (terminated),                        
		.out_empty         (),                                             // (terminated),                        
		.in_error          (1'b0),                                         // (terminated),                        
		.out_error         (),                                             // (terminated),                        
		.in_channel        (1'b0),                                         // (terminated),                        
		.out_channel       ()                                              // (terminated),                        
	);

	board_kernel_interface_altera_merlin_router_191_bltz7la router (
		.sink_ready         (address_span_extender_0_expanded_master_agent_cp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (address_span_extender_0_expanded_master_agent_cp_valid),         //   input,    width = 1,          .valid
		.sink_data          (address_span_extender_0_expanded_master_agent_cp_data),          //   input,  width = 146,          .data
		.sink_startofpacket (address_span_extender_0_expanded_master_agent_cp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (address_span_extender_0_expanded_master_agent_cp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clk_reset_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset              (address_span_extender_0_reset_reset_bridge_in_reset_reset),      //   input,    width = 1, clk_reset.reset
		.src_ready          (router_src_ready),                                               //   input,    width = 1,       src.ready
		.src_valid          (router_src_valid),                                               //  output,    width = 1,          .valid
		.src_data           (router_src_data),                                                //  output,  width = 146,          .data
		.src_channel        (router_src_channel),                                             //  output,    width = 1,          .channel
		.src_startofpacket  (router_src_startofpacket),                                       //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                          //  output,    width = 1,          .endofpacket
	);

	board_kernel_interface_altera_merlin_router_191_2sg6etq router_001 (
		.sink_ready         (kernel_cra_s0_agent_rp_ready),                 //  output,    width = 1,      sink.ready
		.sink_valid         (kernel_cra_s0_agent_rp_valid),                 //   input,    width = 1,          .valid
		.sink_data          (kernel_cra_s0_agent_rp_data),                  //   input,  width = 146,          .data
		.sink_startofpacket (kernel_cra_s0_agent_rp_startofpacket),         //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (kernel_cra_s0_agent_rp_endofpacket),           //   input,    width = 1,          .endofpacket
		.clk                (kernel_clk_out_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset              (kernel_cra_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_001_src_ready),                         //   input,    width = 1,       src.ready
		.src_valid          (router_001_src_valid),                         //  output,    width = 1,          .valid
		.src_data           (router_001_src_data),                          //  output,  width = 146,          .data
		.src_channel        (router_001_src_channel),                       //  output,    width = 1,          .channel
		.src_startofpacket  (router_001_src_startofpacket),                 //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                    //  output,    width = 1,          .endofpacket
	);

	board_kernel_interface_altera_merlin_demultiplexer_191_kdgtooq cmd_demux (
		.clk                (clk_reset_clk_clk),                                         //   input,    width = 1,       clk.clk
		.reset              (address_span_extender_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_src_ready),                                          //  output,    width = 1,      sink.ready
		.sink_channel       (router_src_channel),                                        //   input,    width = 1,          .channel
		.sink_data          (router_src_data),                                           //   input,  width = 146,          .data
		.sink_startofpacket (router_src_startofpacket),                                  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                                    //   input,    width = 1,          .endofpacket
		.sink_valid         (router_src_valid),                                          //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_src0_ready),                                      //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                      //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_src0_data),                                       //  output,  width = 146,          .data
		.src0_channel       (cmd_demux_src0_channel),                                    //  output,    width = 1,          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                              //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                                 //  output,    width = 1,          .endofpacket
	);

	board_kernel_interface_altera_merlin_multiplexer_191_crqkdba cmd_mux (
		.clk                 (kernel_clk_out_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset               (kernel_cra_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                            //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_src_valid),                            //  output,    width = 1,          .valid
		.src_data            (cmd_mux_src_data),                             //  output,  width = 146,          .data
		.src_channel         (cmd_mux_src_channel),                          //  output,    width = 1,          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                    //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                      //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_out_ready),                            //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_out_valid),                            //   input,    width = 1,          .valid
		.sink0_channel       (crosser_out_channel),                          //   input,    width = 1,          .channel
		.sink0_data          (crosser_out_data),                             //   input,  width = 146,          .data
		.sink0_startofpacket (crosser_out_startofpacket),                    //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket)                       //   input,    width = 1,          .endofpacket
	);

	board_kernel_interface_altera_merlin_demultiplexer_191_kdgtooq rsp_demux (
		.clk                (kernel_clk_out_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset              (kernel_cra_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_001_src_ready),                         //  output,    width = 1,      sink.ready
		.sink_channel       (router_001_src_channel),                       //   input,    width = 1,          .channel
		.sink_data          (router_001_src_data),                          //   input,  width = 146,          .data
		.sink_startofpacket (router_001_src_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                   //   input,    width = 1,          .endofpacket
		.sink_valid         (router_001_src_valid),                         //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_src0_ready),                         //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                         //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_src0_data),                          //  output,  width = 146,          .data
		.src0_channel       (rsp_demux_src0_channel),                       //  output,    width = 1,          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                 //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                    //  output,    width = 1,          .endofpacket
	);

	board_kernel_interface_altera_merlin_multiplexer_191_6deerpq rsp_mux (
		.clk                 (clk_reset_clk_clk),                                         //   input,    width = 1,       clk.clk
		.reset               (address_span_extender_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                         //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_src_valid),                                         //  output,    width = 1,          .valid
		.src_data            (rsp_mux_src_data),                                          //  output,  width = 146,          .data
		.src_channel         (rsp_mux_src_channel),                                       //  output,    width = 1,          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                 //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                   //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_001_out_ready),                                     //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_001_out_valid),                                     //   input,    width = 1,          .valid
		.sink0_channel       (crosser_001_out_channel),                                   //   input,    width = 1,          .channel
		.sink0_data          (crosser_001_out_data),                                      //   input,  width = 146,          .data
		.sink0_startofpacket (crosser_001_out_startofpacket),                             //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_001_out_endofpacket)                                //   input,    width = 1,          .endofpacket
	);

	board_kernel_interface_altera_avalon_st_handshake_clock_crosser_191_4chvkja #(
		.DATA_WIDTH          (146),
		.BITS_PER_SYMBOL     (146),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (1),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser (
		.in_clk            (clk_reset_clk_clk),                                         //   input,    width = 1,        in_clk.clk
		.in_reset          (address_span_extender_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (kernel_clk_out_clk_clk),                                    //   input,    width = 1,       out_clk.clk
		.out_reset         (kernel_cra_reset_reset_bridge_in_reset_reset),              //   input,    width = 1, out_clk_reset.reset
		.in_ready          (cmd_demux_src0_ready),                                      //  output,    width = 1,            in.ready
		.in_valid          (cmd_demux_src0_valid),                                      //   input,    width = 1,              .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),                              //   input,    width = 1,              .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                                //   input,    width = 1,              .endofpacket
		.in_channel        (cmd_demux_src0_channel),                                    //   input,    width = 1,              .channel
		.in_data           (cmd_demux_src0_data),                                       //   input,  width = 146,              .data
		.out_ready         (crosser_out_ready),                                         //   input,    width = 1,           out.ready
		.out_valid         (crosser_out_valid),                                         //  output,    width = 1,              .valid
		.out_startofpacket (crosser_out_startofpacket),                                 //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                                   //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_out_channel),                                       //  output,    width = 1,              .channel
		.out_data          (crosser_out_data),                                          //  output,  width = 146,              .data
		.in_empty          (1'b0),                                                      // (terminated),                             
		.in_error          (1'b0),                                                      // (terminated),                             
		.out_empty         (),                                                          // (terminated),                             
		.out_error         ()                                                           // (terminated),                             
	);

	board_kernel_interface_altera_avalon_st_handshake_clock_crosser_191_4chvkja #(
		.DATA_WIDTH          (146),
		.BITS_PER_SYMBOL     (146),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (1),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_001 (
		.in_clk            (kernel_clk_out_clk_clk),                                    //   input,    width = 1,        in_clk.clk
		.in_reset          (kernel_cra_reset_reset_bridge_in_reset_reset),              //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (clk_reset_clk_clk),                                         //   input,    width = 1,       out_clk.clk
		.out_reset         (address_span_extender_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset
		.in_ready          (rsp_demux_src0_ready),                                      //  output,    width = 1,            in.ready
		.in_valid          (rsp_demux_src0_valid),                                      //   input,    width = 1,              .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                              //   input,    width = 1,              .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                                //   input,    width = 1,              .endofpacket
		.in_channel        (rsp_demux_src0_channel),                                    //   input,    width = 1,              .channel
		.in_data           (rsp_demux_src0_data),                                       //   input,  width = 146,              .data
		.out_ready         (crosser_001_out_ready),                                     //   input,    width = 1,           out.ready
		.out_valid         (crosser_001_out_valid),                                     //  output,    width = 1,              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                             //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                               //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_001_out_channel),                                   //  output,    width = 1,              .channel
		.out_data          (crosser_001_out_data),                                      //  output,  width = 146,              .data
		.in_empty          (1'b0),                                                      // (terminated),                             
		.in_error          (1'b0),                                                      // (terminated),                             
		.out_empty         (),                                                          // (terminated),                             
		.out_error         ()                                                           // (terminated),                             
	);

endmodule
