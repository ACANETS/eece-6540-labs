// ase.v

// Generated using ACDS version 19.2 57

`timescale 1 ps / 1 ps
module ase (
		output wire [47:0]  expanded_master_address,       // expanded_master.address
		output wire         expanded_master_read,          //                .read
		input  wire         expanded_master_waitrequest,   //                .waitrequest
		input  wire [511:0] expanded_master_readdata,      //                .readdata
		output wire         expanded_master_write,         //                .write
		output wire [511:0] expanded_master_writedata,     //                .writedata
		input  wire         expanded_master_readdatavalid, //                .readdatavalid
		output wire [63:0]  expanded_master_byteenable,    //                .byteenable
		output wire [3:0]   expanded_master_burstcount,    //                .burstcount
		output wire         avmm_pipe_slave_waitrequest,   // avmm_pipe_slave.waitrequest
		output wire [63:0]  avmm_pipe_slave_readdata,      //                .readdata
		output wire         avmm_pipe_slave_readdatavalid, //                .readdatavalid
		input  wire [0:0]   avmm_pipe_slave_burstcount,    //                .burstcount
		input  wire [63:0]  avmm_pipe_slave_writedata,     //                .writedata
		input  wire [12:0]  avmm_pipe_slave_address,       //                .address
		input  wire         avmm_pipe_slave_write,         //                .write
		input  wire         avmm_pipe_slave_read,          //                .read
		input  wire [7:0]   avmm_pipe_slave_byteenable,    //                .byteenable
		input  wire         avmm_pipe_slave_debugaccess,   //                .debugaccess
		input  wire         clk_clk,                       //             clk.clk
		input  wire         reset_reset                    //           reset.reset
	);

	wire          clock_in_out_clk_clk;                                                   // clock_in:out_clk -> [address_span_extender_0:clk, afu_id_avmm_slave_0:clk, ase_avmm_pipe_0:clk, mm_interconnect_0:clock_in_out_clk_clk, reset_in:clk, rst_controller:clk]
	wire          reset_in_out_reset_reset;                                               // reset_in:out_reset -> [address_span_extender_0:reset, ase_avmm_pipe_0:reset, mm_interconnect_0:ase_avmm_pipe_0_reset_reset_bridge_in_reset_reset, rst_controller:reset_in0]
	wire          ase_avmm_pipe_0_m0_waitrequest;                                         // mm_interconnect_0:ase_avmm_pipe_0_m0_waitrequest -> ase_avmm_pipe_0:m0_waitrequest
	wire   [63:0] ase_avmm_pipe_0_m0_readdata;                                            // mm_interconnect_0:ase_avmm_pipe_0_m0_readdata -> ase_avmm_pipe_0:m0_readdata
	wire          ase_avmm_pipe_0_m0_debugaccess;                                         // ase_avmm_pipe_0:m0_debugaccess -> mm_interconnect_0:ase_avmm_pipe_0_m0_debugaccess
	wire   [12:0] ase_avmm_pipe_0_m0_address;                                             // ase_avmm_pipe_0:m0_address -> mm_interconnect_0:ase_avmm_pipe_0_m0_address
	wire          ase_avmm_pipe_0_m0_read;                                                // ase_avmm_pipe_0:m0_read -> mm_interconnect_0:ase_avmm_pipe_0_m0_read
	wire    [7:0] ase_avmm_pipe_0_m0_byteenable;                                          // ase_avmm_pipe_0:m0_byteenable -> mm_interconnect_0:ase_avmm_pipe_0_m0_byteenable
	wire          ase_avmm_pipe_0_m0_readdatavalid;                                       // mm_interconnect_0:ase_avmm_pipe_0_m0_readdatavalid -> ase_avmm_pipe_0:m0_readdatavalid
	wire   [63:0] ase_avmm_pipe_0_m0_writedata;                                           // ase_avmm_pipe_0:m0_writedata -> mm_interconnect_0:ase_avmm_pipe_0_m0_writedata
	wire          ase_avmm_pipe_0_m0_write;                                               // ase_avmm_pipe_0:m0_write -> mm_interconnect_0:ase_avmm_pipe_0_m0_write
	wire    [0:0] ase_avmm_pipe_0_m0_burstcount;                                          // ase_avmm_pipe_0:m0_burstcount -> mm_interconnect_0:ase_avmm_pipe_0_m0_burstcount
	wire   [63:0] mm_interconnect_0_afu_id_avmm_slave_0_afu_cfg_slave_readdata;           // afu_id_avmm_slave_0:avmm_readdata -> mm_interconnect_0:afu_id_avmm_slave_0_afu_cfg_slave_readdata
	wire    [2:0] mm_interconnect_0_afu_id_avmm_slave_0_afu_cfg_slave_address;            // mm_interconnect_0:afu_id_avmm_slave_0_afu_cfg_slave_address -> afu_id_avmm_slave_0:avmm_address
	wire          mm_interconnect_0_afu_id_avmm_slave_0_afu_cfg_slave_read;               // mm_interconnect_0:afu_id_avmm_slave_0_afu_cfg_slave_read -> afu_id_avmm_slave_0:avmm_read
	wire          mm_interconnect_0_afu_id_avmm_slave_0_afu_cfg_slave_write;              // mm_interconnect_0:afu_id_avmm_slave_0_afu_cfg_slave_write -> afu_id_avmm_slave_0:avmm_write
	wire   [63:0] mm_interconnect_0_afu_id_avmm_slave_0_afu_cfg_slave_writedata;          // mm_interconnect_0:afu_id_avmm_slave_0_afu_cfg_slave_writedata -> afu_id_avmm_slave_0:avmm_writedata
	wire   [63:0] mm_interconnect_0_address_span_extender_0_cntl_readdata;                // address_span_extender_0:avs_cntl_readdata -> mm_interconnect_0:address_span_extender_0_cntl_readdata
	wire          mm_interconnect_0_address_span_extender_0_cntl_read;                    // mm_interconnect_0:address_span_extender_0_cntl_read -> address_span_extender_0:avs_cntl_read
	wire    [7:0] mm_interconnect_0_address_span_extender_0_cntl_byteenable;              // mm_interconnect_0:address_span_extender_0_cntl_byteenable -> address_span_extender_0:avs_cntl_byteenable
	wire          mm_interconnect_0_address_span_extender_0_cntl_write;                   // mm_interconnect_0:address_span_extender_0_cntl_write -> address_span_extender_0:avs_cntl_write
	wire   [63:0] mm_interconnect_0_address_span_extender_0_cntl_writedata;               // mm_interconnect_0:address_span_extender_0_cntl_writedata -> address_span_extender_0:avs_cntl_writedata
	wire  [511:0] mm_interconnect_0_address_span_extender_0_windowed_slave_readdata;      // address_span_extender_0:avs_s0_readdata -> mm_interconnect_0:address_span_extender_0_windowed_slave_readdata
	wire          mm_interconnect_0_address_span_extender_0_windowed_slave_waitrequest;   // address_span_extender_0:avs_s0_waitrequest -> mm_interconnect_0:address_span_extender_0_windowed_slave_waitrequest
	wire    [5:0] mm_interconnect_0_address_span_extender_0_windowed_slave_address;       // mm_interconnect_0:address_span_extender_0_windowed_slave_address -> address_span_extender_0:avs_s0_address
	wire          mm_interconnect_0_address_span_extender_0_windowed_slave_read;          // mm_interconnect_0:address_span_extender_0_windowed_slave_read -> address_span_extender_0:avs_s0_read
	wire   [63:0] mm_interconnect_0_address_span_extender_0_windowed_slave_byteenable;    // mm_interconnect_0:address_span_extender_0_windowed_slave_byteenable -> address_span_extender_0:avs_s0_byteenable
	wire          mm_interconnect_0_address_span_extender_0_windowed_slave_readdatavalid; // address_span_extender_0:avs_s0_readdatavalid -> mm_interconnect_0:address_span_extender_0_windowed_slave_readdatavalid
	wire          mm_interconnect_0_address_span_extender_0_windowed_slave_write;         // mm_interconnect_0:address_span_extender_0_windowed_slave_write -> address_span_extender_0:avs_s0_write
	wire  [511:0] mm_interconnect_0_address_span_extender_0_windowed_slave_writedata;     // mm_interconnect_0:address_span_extender_0_windowed_slave_writedata -> address_span_extender_0:avs_s0_writedata
	wire    [3:0] mm_interconnect_0_address_span_extender_0_windowed_slave_burstcount;    // mm_interconnect_0:address_span_extender_0_windowed_slave_burstcount -> address_span_extender_0:avs_s0_burstcount
	wire          rst_controller_reset_out_reset;                                         // rst_controller:reset_out -> afu_id_avmm_slave_0:reset

	ase_address_span_extender_0 address_span_extender_0 (
		.clk                  (clock_in_out_clk_clk),                                                   //   input,    width = 1,           clock.clk
		.avs_cntl_read        (mm_interconnect_0_address_span_extender_0_cntl_read),                    //   input,    width = 1,            cntl.read
		.avs_cntl_readdata    (mm_interconnect_0_address_span_extender_0_cntl_readdata),                //  output,   width = 64,                .readdata
		.avs_cntl_write       (mm_interconnect_0_address_span_extender_0_cntl_write),                   //   input,    width = 1,                .write
		.avs_cntl_writedata   (mm_interconnect_0_address_span_extender_0_cntl_writedata),               //   input,   width = 64,                .writedata
		.avs_cntl_byteenable  (mm_interconnect_0_address_span_extender_0_cntl_byteenable),              //   input,    width = 8,                .byteenable
		.avm_m0_address       (expanded_master_address),                                                //  output,   width = 48, expanded_master.address
		.avm_m0_read          (expanded_master_read),                                                   //  output,    width = 1,                .read
		.avm_m0_waitrequest   (expanded_master_waitrequest),                                            //   input,    width = 1,                .waitrequest
		.avm_m0_readdata      (expanded_master_readdata),                                               //   input,  width = 512,                .readdata
		.avm_m0_write         (expanded_master_write),                                                  //  output,    width = 1,                .write
		.avm_m0_writedata     (expanded_master_writedata),                                              //  output,  width = 512,                .writedata
		.avm_m0_readdatavalid (expanded_master_readdatavalid),                                          //   input,    width = 1,                .readdatavalid
		.avm_m0_byteenable    (expanded_master_byteenable),                                             //  output,   width = 64,                .byteenable
		.avm_m0_burstcount    (expanded_master_burstcount),                                             //  output,    width = 4,                .burstcount
		.reset                (reset_in_out_reset_reset),                                               //   input,    width = 1,           reset.reset
		.avs_s0_address       (mm_interconnect_0_address_span_extender_0_windowed_slave_address),       //   input,    width = 6,  windowed_slave.address
		.avs_s0_read          (mm_interconnect_0_address_span_extender_0_windowed_slave_read),          //   input,    width = 1,                .read
		.avs_s0_readdata      (mm_interconnect_0_address_span_extender_0_windowed_slave_readdata),      //  output,  width = 512,                .readdata
		.avs_s0_write         (mm_interconnect_0_address_span_extender_0_windowed_slave_write),         //   input,    width = 1,                .write
		.avs_s0_writedata     (mm_interconnect_0_address_span_extender_0_windowed_slave_writedata),     //   input,  width = 512,                .writedata
		.avs_s0_readdatavalid (mm_interconnect_0_address_span_extender_0_windowed_slave_readdatavalid), //  output,    width = 1,                .readdatavalid
		.avs_s0_waitrequest   (mm_interconnect_0_address_span_extender_0_windowed_slave_waitrequest),   //  output,    width = 1,                .waitrequest
		.avs_s0_byteenable    (mm_interconnect_0_address_span_extender_0_windowed_slave_byteenable),    //   input,   width = 64,                .byteenable
		.avs_s0_burstcount    (mm_interconnect_0_address_span_extender_0_windowed_slave_burstcount)     //   input,    width = 4,                .burstcount
	);

	ase_afu_id_avmm_slave_0 afu_id_avmm_slave_0 (
		.avmm_readdata  (mm_interconnect_0_afu_id_avmm_slave_0_afu_cfg_slave_readdata),  //  output,  width = 64, afu_cfg_slave.readdata
		.avmm_writedata (mm_interconnect_0_afu_id_avmm_slave_0_afu_cfg_slave_writedata), //   input,  width = 64,              .writedata
		.avmm_address   (mm_interconnect_0_afu_id_avmm_slave_0_afu_cfg_slave_address),   //   input,   width = 3,              .address
		.avmm_write     (mm_interconnect_0_afu_id_avmm_slave_0_afu_cfg_slave_write),     //   input,   width = 1,              .write
		.avmm_read      (mm_interconnect_0_afu_id_avmm_slave_0_afu_cfg_slave_read),      //   input,   width = 1,              .read
		.clk            (clock_in_out_clk_clk),                                          //   input,   width = 1,         clock.clk
		.reset          (rst_controller_reset_out_reset)                                 //   input,   width = 1,         reset.reset
	);

	ase_mm_bridge_0 ase_avmm_pipe_0 (
		.clk              (clock_in_out_clk_clk),             //   input,   width = 1,   clk.clk
		.m0_waitrequest   (ase_avmm_pipe_0_m0_waitrequest),   //   input,   width = 1,    m0.waitrequest
		.m0_readdata      (ase_avmm_pipe_0_m0_readdata),      //   input,  width = 64,      .readdata
		.m0_readdatavalid (ase_avmm_pipe_0_m0_readdatavalid), //   input,   width = 1,      .readdatavalid
		.m0_burstcount    (ase_avmm_pipe_0_m0_burstcount),    //  output,   width = 1,      .burstcount
		.m0_writedata     (ase_avmm_pipe_0_m0_writedata),     //  output,  width = 64,      .writedata
		.m0_address       (ase_avmm_pipe_0_m0_address),       //  output,  width = 13,      .address
		.m0_write         (ase_avmm_pipe_0_m0_write),         //  output,   width = 1,      .write
		.m0_read          (ase_avmm_pipe_0_m0_read),          //  output,   width = 1,      .read
		.m0_byteenable    (ase_avmm_pipe_0_m0_byteenable),    //  output,   width = 8,      .byteenable
		.m0_debugaccess   (ase_avmm_pipe_0_m0_debugaccess),   //  output,   width = 1,      .debugaccess
		.reset            (reset_in_out_reset_reset),         //   input,   width = 1, reset.reset
		.s0_waitrequest   (avmm_pipe_slave_waitrequest),      //  output,   width = 1,    s0.waitrequest
		.s0_readdata      (avmm_pipe_slave_readdata),         //  output,  width = 64,      .readdata
		.s0_readdatavalid (avmm_pipe_slave_readdatavalid),    //  output,   width = 1,      .readdatavalid
		.s0_burstcount    (avmm_pipe_slave_burstcount),       //   input,   width = 1,      .burstcount
		.s0_writedata     (avmm_pipe_slave_writedata),        //   input,  width = 64,      .writedata
		.s0_address       (avmm_pipe_slave_address),          //   input,  width = 13,      .address
		.s0_write         (avmm_pipe_slave_write),            //   input,   width = 1,      .write
		.s0_read          (avmm_pipe_slave_read),             //   input,   width = 1,      .read
		.s0_byteenable    (avmm_pipe_slave_byteenable),       //   input,   width = 8,      .byteenable
		.s0_debugaccess   (avmm_pipe_slave_debugaccess)       //   input,   width = 1,      .debugaccess
	);

	ase_clock_in clock_in (
		.in_clk  (clk_clk),              //   input,  width = 1,  in_clk.clk
		.out_clk (clock_in_out_clk_clk)  //  output,  width = 1, out_clk.clk
	);

	ase_reset_in reset_in (
		.clk       (clock_in_out_clk_clk),     //   input,  width = 1,       clk.clk
		.in_reset  (reset_reset),              //   input,  width = 1,  in_reset.reset
		.out_reset (reset_in_out_reset_reset)  //  output,  width = 1, out_reset.reset
	);

	ase_altera_mm_interconnect_191_qnam65i mm_interconnect_0 (
		.ase_avmm_pipe_0_m0_address                           (ase_avmm_pipe_0_m0_address),                                             //   input,   width = 13,                          ase_avmm_pipe_0_m0.address
		.ase_avmm_pipe_0_m0_waitrequest                       (ase_avmm_pipe_0_m0_waitrequest),                                         //  output,    width = 1,                                            .waitrequest
		.ase_avmm_pipe_0_m0_burstcount                        (ase_avmm_pipe_0_m0_burstcount),                                          //   input,    width = 1,                                            .burstcount
		.ase_avmm_pipe_0_m0_byteenable                        (ase_avmm_pipe_0_m0_byteenable),                                          //   input,    width = 8,                                            .byteenable
		.ase_avmm_pipe_0_m0_read                              (ase_avmm_pipe_0_m0_read),                                                //   input,    width = 1,                                            .read
		.ase_avmm_pipe_0_m0_readdata                          (ase_avmm_pipe_0_m0_readdata),                                            //  output,   width = 64,                                            .readdata
		.ase_avmm_pipe_0_m0_readdatavalid                     (ase_avmm_pipe_0_m0_readdatavalid),                                       //  output,    width = 1,                                            .readdatavalid
		.ase_avmm_pipe_0_m0_write                             (ase_avmm_pipe_0_m0_write),                                               //   input,    width = 1,                                            .write
		.ase_avmm_pipe_0_m0_writedata                         (ase_avmm_pipe_0_m0_writedata),                                           //   input,   width = 64,                                            .writedata
		.ase_avmm_pipe_0_m0_debugaccess                       (ase_avmm_pipe_0_m0_debugaccess),                                         //   input,    width = 1,                                            .debugaccess
		.afu_id_avmm_slave_0_afu_cfg_slave_address            (mm_interconnect_0_afu_id_avmm_slave_0_afu_cfg_slave_address),            //  output,    width = 3,           afu_id_avmm_slave_0_afu_cfg_slave.address
		.afu_id_avmm_slave_0_afu_cfg_slave_write              (mm_interconnect_0_afu_id_avmm_slave_0_afu_cfg_slave_write),              //  output,    width = 1,                                            .write
		.afu_id_avmm_slave_0_afu_cfg_slave_read               (mm_interconnect_0_afu_id_avmm_slave_0_afu_cfg_slave_read),               //  output,    width = 1,                                            .read
		.afu_id_avmm_slave_0_afu_cfg_slave_readdata           (mm_interconnect_0_afu_id_avmm_slave_0_afu_cfg_slave_readdata),           //   input,   width = 64,                                            .readdata
		.afu_id_avmm_slave_0_afu_cfg_slave_writedata          (mm_interconnect_0_afu_id_avmm_slave_0_afu_cfg_slave_writedata),          //  output,   width = 64,                                            .writedata
		.address_span_extender_0_cntl_write                   (mm_interconnect_0_address_span_extender_0_cntl_write),                   //  output,    width = 1,                address_span_extender_0_cntl.write
		.address_span_extender_0_cntl_read                    (mm_interconnect_0_address_span_extender_0_cntl_read),                    //  output,    width = 1,                                            .read
		.address_span_extender_0_cntl_readdata                (mm_interconnect_0_address_span_extender_0_cntl_readdata),                //   input,   width = 64,                                            .readdata
		.address_span_extender_0_cntl_writedata               (mm_interconnect_0_address_span_extender_0_cntl_writedata),               //  output,   width = 64,                                            .writedata
		.address_span_extender_0_cntl_byteenable              (mm_interconnect_0_address_span_extender_0_cntl_byteenable),              //  output,    width = 8,                                            .byteenable
		.address_span_extender_0_windowed_slave_address       (mm_interconnect_0_address_span_extender_0_windowed_slave_address),       //  output,    width = 6,      address_span_extender_0_windowed_slave.address
		.address_span_extender_0_windowed_slave_write         (mm_interconnect_0_address_span_extender_0_windowed_slave_write),         //  output,    width = 1,                                            .write
		.address_span_extender_0_windowed_slave_read          (mm_interconnect_0_address_span_extender_0_windowed_slave_read),          //  output,    width = 1,                                            .read
		.address_span_extender_0_windowed_slave_readdata      (mm_interconnect_0_address_span_extender_0_windowed_slave_readdata),      //   input,  width = 512,                                            .readdata
		.address_span_extender_0_windowed_slave_writedata     (mm_interconnect_0_address_span_extender_0_windowed_slave_writedata),     //  output,  width = 512,                                            .writedata
		.address_span_extender_0_windowed_slave_burstcount    (mm_interconnect_0_address_span_extender_0_windowed_slave_burstcount),    //  output,    width = 4,                                            .burstcount
		.address_span_extender_0_windowed_slave_byteenable    (mm_interconnect_0_address_span_extender_0_windowed_slave_byteenable),    //  output,   width = 64,                                            .byteenable
		.address_span_extender_0_windowed_slave_readdatavalid (mm_interconnect_0_address_span_extender_0_windowed_slave_readdatavalid), //   input,    width = 1,                                            .readdatavalid
		.address_span_extender_0_windowed_slave_waitrequest   (mm_interconnect_0_address_span_extender_0_windowed_slave_waitrequest),   //   input,    width = 1,                                            .waitrequest
		.ase_avmm_pipe_0_reset_reset_bridge_in_reset_reset    (reset_in_out_reset_reset),                                               //   input,    width = 1, ase_avmm_pipe_0_reset_reset_bridge_in_reset.reset
		.clock_in_out_clk_clk                                 (clock_in_out_clk_clk)                                                    //   input,    width = 1,                            clock_in_out_clk.clk
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("both"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (reset_in_out_reset_reset),       //   input,  width = 1, reset_in0.reset
		.clk            (clock_in_out_clk_clk),           //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_reset_out_reset), //  output,  width = 1, reset_out.reset
		.reset_req      (),                               // (terminated),                       
		.reset_req_in0  (1'b0),                           // (terminated),                       
		.reset_in1      (1'b0),                           // (terminated),                       
		.reset_req_in1  (1'b0),                           // (terminated),                       
		.reset_in2      (1'b0),                           // (terminated),                       
		.reset_req_in2  (1'b0),                           // (terminated),                       
		.reset_in3      (1'b0),                           // (terminated),                       
		.reset_req_in3  (1'b0),                           // (terminated),                       
		.reset_in4      (1'b0),                           // (terminated),                       
		.reset_req_in4  (1'b0),                           // (terminated),                       
		.reset_in5      (1'b0),                           // (terminated),                       
		.reset_req_in5  (1'b0),                           // (terminated),                       
		.reset_in6      (1'b0),                           // (terminated),                       
		.reset_req_in6  (1'b0),                           // (terminated),                       
		.reset_in7      (1'b0),                           // (terminated),                       
		.reset_req_in7  (1'b0),                           // (terminated),                       
		.reset_in8      (1'b0),                           // (terminated),                       
		.reset_req_in8  (1'b0),                           // (terminated),                       
		.reset_in9      (1'b0),                           // (terminated),                       
		.reset_req_in9  (1'b0),                           // (terminated),                       
		.reset_in10     (1'b0),                           // (terminated),                       
		.reset_req_in10 (1'b0),                           // (terminated),                       
		.reset_in11     (1'b0),                           // (terminated),                       
		.reset_req_in11 (1'b0),                           // (terminated),                       
		.reset_in12     (1'b0),                           // (terminated),                       
		.reset_req_in12 (1'b0),                           // (terminated),                       
		.reset_in13     (1'b0),                           // (terminated),                       
		.reset_req_in13 (1'b0),                           // (terminated),                       
		.reset_in14     (1'b0),                           // (terminated),                       
		.reset_req_in14 (1'b0),                           // (terminated),                       
		.reset_in15     (1'b0),                           // (terminated),                       
		.reset_req_in15 (1'b0)                            // (terminated),                       
	);

endmodule
