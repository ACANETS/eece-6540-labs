// msgdma_bbb_altera_mm_interconnect_191_shqzigy.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 19.2 57

`timescale 1 ps / 1 ps
module msgdma_bbb_altera_mm_interconnect_191_shqzigy (
		input  wire [6:0]   csr_m0_address,                                          //                                       csr_m0.address
		output wire         csr_m0_waitrequest,                                      //                                             .waitrequest
		input  wire [0:0]   csr_m0_burstcount,                                       //                                             .burstcount
		input  wire [7:0]   csr_m0_byteenable,                                       //                                             .byteenable
		input  wire         csr_m0_read,                                             //                                             .read
		output wire [63:0]  csr_m0_readdata,                                         //                                             .readdata
		output wire         csr_m0_readdatavalid,                                    //                                             .readdatavalid
		input  wire         csr_m0_write,                                            //                                             .write
		input  wire [63:0]  csr_m0_writedata,                                        //                                             .writedata
		input  wire         csr_m0_debugaccess,                                      //                                             .debugaccess
		output wire [2:0]   modular_sgdma_dispatcher_0_CSR_address,                  //               modular_sgdma_dispatcher_0_CSR.address
		output wire         modular_sgdma_dispatcher_0_CSR_write,                    //                                             .write
		output wire         modular_sgdma_dispatcher_0_CSR_read,                     //                                             .read
		input  wire [31:0]  modular_sgdma_dispatcher_0_CSR_readdata,                 //                                             .readdata
		output wire [31:0]  modular_sgdma_dispatcher_0_CSR_writedata,                //                                             .writedata
		output wire [3:0]   modular_sgdma_dispatcher_0_CSR_byteenable,               //                                             .byteenable
		output wire         modular_sgdma_dispatcher_0_Descriptor_Slave_write,       //  modular_sgdma_dispatcher_0_Descriptor_Slave.write
		output wire [255:0] modular_sgdma_dispatcher_0_Descriptor_Slave_writedata,   //                                             .writedata
		output wire [31:0]  modular_sgdma_dispatcher_0_Descriptor_Slave_byteenable,  //                                             .byteenable
		input  wire         modular_sgdma_dispatcher_0_Descriptor_Slave_waitrequest, //                                             .waitrequest
		output wire [2:0]   msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_address,    // msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave.address
		output wire         msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_write,      //                                             .write
		output wire         msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_read,       //                                             .read
		input  wire [63:0]  msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_readdata,   //                                             .readdata
		output wire [63:0]  msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_writedata,  //                                             .writedata
		input  wire         csr_reset_reset_bridge_in_reset_reset,                   //              csr_reset_reset_bridge_in_reset.reset
		input  wire         clk_clk_clk                                              //                                      clk_clk.clk
	);

	wire          csr_m0_translator_avalon_universal_master_0_waitrequest;                         // csr_m0_agent:av_waitrequest -> csr_m0_translator:uav_waitrequest
	wire   [63:0] csr_m0_translator_avalon_universal_master_0_readdata;                            // csr_m0_agent:av_readdata -> csr_m0_translator:uav_readdata
	wire          csr_m0_translator_avalon_universal_master_0_debugaccess;                         // csr_m0_translator:uav_debugaccess -> csr_m0_agent:av_debugaccess
	wire    [6:0] csr_m0_translator_avalon_universal_master_0_address;                             // csr_m0_translator:uav_address -> csr_m0_agent:av_address
	wire          csr_m0_translator_avalon_universal_master_0_read;                                // csr_m0_translator:uav_read -> csr_m0_agent:av_read
	wire    [7:0] csr_m0_translator_avalon_universal_master_0_byteenable;                          // csr_m0_translator:uav_byteenable -> csr_m0_agent:av_byteenable
	wire          csr_m0_translator_avalon_universal_master_0_readdatavalid;                       // csr_m0_agent:av_readdatavalid -> csr_m0_translator:uav_readdatavalid
	wire          csr_m0_translator_avalon_universal_master_0_lock;                                // csr_m0_translator:uav_lock -> csr_m0_agent:av_lock
	wire          csr_m0_translator_avalon_universal_master_0_write;                               // csr_m0_translator:uav_write -> csr_m0_agent:av_write
	wire   [63:0] csr_m0_translator_avalon_universal_master_0_writedata;                           // csr_m0_translator:uav_writedata -> csr_m0_agent:av_writedata
	wire    [3:0] csr_m0_translator_avalon_universal_master_0_burstcount;                          // csr_m0_translator:uav_burstcount -> csr_m0_agent:av_burstcount
	wire   [31:0] modular_sgdma_dispatcher_0_csr_agent_m0_readdata;                                // modular_sgdma_dispatcher_0_CSR_translator:uav_readdata -> modular_sgdma_dispatcher_0_CSR_agent:m0_readdata
	wire          modular_sgdma_dispatcher_0_csr_agent_m0_waitrequest;                             // modular_sgdma_dispatcher_0_CSR_translator:uav_waitrequest -> modular_sgdma_dispatcher_0_CSR_agent:m0_waitrequest
	wire          modular_sgdma_dispatcher_0_csr_agent_m0_debugaccess;                             // modular_sgdma_dispatcher_0_CSR_agent:m0_debugaccess -> modular_sgdma_dispatcher_0_CSR_translator:uav_debugaccess
	wire    [6:0] modular_sgdma_dispatcher_0_csr_agent_m0_address;                                 // modular_sgdma_dispatcher_0_CSR_agent:m0_address -> modular_sgdma_dispatcher_0_CSR_translator:uav_address
	wire    [3:0] modular_sgdma_dispatcher_0_csr_agent_m0_byteenable;                              // modular_sgdma_dispatcher_0_CSR_agent:m0_byteenable -> modular_sgdma_dispatcher_0_CSR_translator:uav_byteenable
	wire          modular_sgdma_dispatcher_0_csr_agent_m0_read;                                    // modular_sgdma_dispatcher_0_CSR_agent:m0_read -> modular_sgdma_dispatcher_0_CSR_translator:uav_read
	wire          modular_sgdma_dispatcher_0_csr_agent_m0_readdatavalid;                           // modular_sgdma_dispatcher_0_CSR_translator:uav_readdatavalid -> modular_sgdma_dispatcher_0_CSR_agent:m0_readdatavalid
	wire          modular_sgdma_dispatcher_0_csr_agent_m0_lock;                                    // modular_sgdma_dispatcher_0_CSR_agent:m0_lock -> modular_sgdma_dispatcher_0_CSR_translator:uav_lock
	wire   [31:0] modular_sgdma_dispatcher_0_csr_agent_m0_writedata;                               // modular_sgdma_dispatcher_0_CSR_agent:m0_writedata -> modular_sgdma_dispatcher_0_CSR_translator:uav_writedata
	wire          modular_sgdma_dispatcher_0_csr_agent_m0_write;                                   // modular_sgdma_dispatcher_0_CSR_agent:m0_write -> modular_sgdma_dispatcher_0_CSR_translator:uav_write
	wire    [2:0] modular_sgdma_dispatcher_0_csr_agent_m0_burstcount;                              // modular_sgdma_dispatcher_0_CSR_agent:m0_burstcount -> modular_sgdma_dispatcher_0_CSR_translator:uav_burstcount
	wire          modular_sgdma_dispatcher_0_csr_agent_rf_source_valid;                            // modular_sgdma_dispatcher_0_CSR_agent:rf_source_valid -> modular_sgdma_dispatcher_0_CSR_agent_rsp_fifo:in_valid
	wire   [91:0] modular_sgdma_dispatcher_0_csr_agent_rf_source_data;                             // modular_sgdma_dispatcher_0_CSR_agent:rf_source_data -> modular_sgdma_dispatcher_0_CSR_agent_rsp_fifo:in_data
	wire          modular_sgdma_dispatcher_0_csr_agent_rf_source_ready;                            // modular_sgdma_dispatcher_0_CSR_agent_rsp_fifo:in_ready -> modular_sgdma_dispatcher_0_CSR_agent:rf_source_ready
	wire          modular_sgdma_dispatcher_0_csr_agent_rf_source_startofpacket;                    // modular_sgdma_dispatcher_0_CSR_agent:rf_source_startofpacket -> modular_sgdma_dispatcher_0_CSR_agent_rsp_fifo:in_startofpacket
	wire          modular_sgdma_dispatcher_0_csr_agent_rf_source_endofpacket;                      // modular_sgdma_dispatcher_0_CSR_agent:rf_source_endofpacket -> modular_sgdma_dispatcher_0_CSR_agent_rsp_fifo:in_endofpacket
	wire          modular_sgdma_dispatcher_0_csr_agent_rsp_fifo_out_valid;                         // modular_sgdma_dispatcher_0_CSR_agent_rsp_fifo:out_valid -> modular_sgdma_dispatcher_0_CSR_agent:rf_sink_valid
	wire   [91:0] modular_sgdma_dispatcher_0_csr_agent_rsp_fifo_out_data;                          // modular_sgdma_dispatcher_0_CSR_agent_rsp_fifo:out_data -> modular_sgdma_dispatcher_0_CSR_agent:rf_sink_data
	wire          modular_sgdma_dispatcher_0_csr_agent_rsp_fifo_out_ready;                         // modular_sgdma_dispatcher_0_CSR_agent:rf_sink_ready -> modular_sgdma_dispatcher_0_CSR_agent_rsp_fifo:out_ready
	wire          modular_sgdma_dispatcher_0_csr_agent_rsp_fifo_out_startofpacket;                 // modular_sgdma_dispatcher_0_CSR_agent_rsp_fifo:out_startofpacket -> modular_sgdma_dispatcher_0_CSR_agent:rf_sink_startofpacket
	wire          modular_sgdma_dispatcher_0_csr_agent_rsp_fifo_out_endofpacket;                   // modular_sgdma_dispatcher_0_CSR_agent_rsp_fifo:out_endofpacket -> modular_sgdma_dispatcher_0_CSR_agent:rf_sink_endofpacket
	wire          modular_sgdma_dispatcher_0_csr_agent_rdata_fifo_src_valid;                       // modular_sgdma_dispatcher_0_CSR_agent:rdata_fifo_src_valid -> modular_sgdma_dispatcher_0_CSR_agent:rdata_fifo_sink_valid
	wire   [33:0] modular_sgdma_dispatcher_0_csr_agent_rdata_fifo_src_data;                        // modular_sgdma_dispatcher_0_CSR_agent:rdata_fifo_src_data -> modular_sgdma_dispatcher_0_CSR_agent:rdata_fifo_sink_data
	wire          modular_sgdma_dispatcher_0_csr_agent_rdata_fifo_src_ready;                       // modular_sgdma_dispatcher_0_CSR_agent:rdata_fifo_sink_ready -> modular_sgdma_dispatcher_0_CSR_agent:rdata_fifo_src_ready
	wire  [255:0] modular_sgdma_dispatcher_0_descriptor_slave_agent_m0_readdata;                   // modular_sgdma_dispatcher_0_Descriptor_Slave_translator:uav_readdata -> modular_sgdma_dispatcher_0_Descriptor_Slave_agent:m0_readdata
	wire          modular_sgdma_dispatcher_0_descriptor_slave_agent_m0_waitrequest;                // modular_sgdma_dispatcher_0_Descriptor_Slave_translator:uav_waitrequest -> modular_sgdma_dispatcher_0_Descriptor_Slave_agent:m0_waitrequest
	wire          modular_sgdma_dispatcher_0_descriptor_slave_agent_m0_debugaccess;                // modular_sgdma_dispatcher_0_Descriptor_Slave_agent:m0_debugaccess -> modular_sgdma_dispatcher_0_Descriptor_Slave_translator:uav_debugaccess
	wire    [6:0] modular_sgdma_dispatcher_0_descriptor_slave_agent_m0_address;                    // modular_sgdma_dispatcher_0_Descriptor_Slave_agent:m0_address -> modular_sgdma_dispatcher_0_Descriptor_Slave_translator:uav_address
	wire   [31:0] modular_sgdma_dispatcher_0_descriptor_slave_agent_m0_byteenable;                 // modular_sgdma_dispatcher_0_Descriptor_Slave_agent:m0_byteenable -> modular_sgdma_dispatcher_0_Descriptor_Slave_translator:uav_byteenable
	wire          modular_sgdma_dispatcher_0_descriptor_slave_agent_m0_read;                       // modular_sgdma_dispatcher_0_Descriptor_Slave_agent:m0_read -> modular_sgdma_dispatcher_0_Descriptor_Slave_translator:uav_read
	wire          modular_sgdma_dispatcher_0_descriptor_slave_agent_m0_readdatavalid;              // modular_sgdma_dispatcher_0_Descriptor_Slave_translator:uav_readdatavalid -> modular_sgdma_dispatcher_0_Descriptor_Slave_agent:m0_readdatavalid
	wire          modular_sgdma_dispatcher_0_descriptor_slave_agent_m0_lock;                       // modular_sgdma_dispatcher_0_Descriptor_Slave_agent:m0_lock -> modular_sgdma_dispatcher_0_Descriptor_Slave_translator:uav_lock
	wire  [255:0] modular_sgdma_dispatcher_0_descriptor_slave_agent_m0_writedata;                  // modular_sgdma_dispatcher_0_Descriptor_Slave_agent:m0_writedata -> modular_sgdma_dispatcher_0_Descriptor_Slave_translator:uav_writedata
	wire          modular_sgdma_dispatcher_0_descriptor_slave_agent_m0_write;                      // modular_sgdma_dispatcher_0_Descriptor_Slave_agent:m0_write -> modular_sgdma_dispatcher_0_Descriptor_Slave_translator:uav_write
	wire    [5:0] modular_sgdma_dispatcher_0_descriptor_slave_agent_m0_burstcount;                 // modular_sgdma_dispatcher_0_Descriptor_Slave_agent:m0_burstcount -> modular_sgdma_dispatcher_0_Descriptor_Slave_translator:uav_burstcount
	wire          modular_sgdma_dispatcher_0_descriptor_slave_agent_rf_source_valid;               // modular_sgdma_dispatcher_0_Descriptor_Slave_agent:rf_source_valid -> modular_sgdma_dispatcher_0_Descriptor_Slave_agent_rsp_fifo:in_valid
	wire  [343:0] modular_sgdma_dispatcher_0_descriptor_slave_agent_rf_source_data;                // modular_sgdma_dispatcher_0_Descriptor_Slave_agent:rf_source_data -> modular_sgdma_dispatcher_0_Descriptor_Slave_agent_rsp_fifo:in_data
	wire          modular_sgdma_dispatcher_0_descriptor_slave_agent_rf_source_ready;               // modular_sgdma_dispatcher_0_Descriptor_Slave_agent_rsp_fifo:in_ready -> modular_sgdma_dispatcher_0_Descriptor_Slave_agent:rf_source_ready
	wire          modular_sgdma_dispatcher_0_descriptor_slave_agent_rf_source_startofpacket;       // modular_sgdma_dispatcher_0_Descriptor_Slave_agent:rf_source_startofpacket -> modular_sgdma_dispatcher_0_Descriptor_Slave_agent_rsp_fifo:in_startofpacket
	wire          modular_sgdma_dispatcher_0_descriptor_slave_agent_rf_source_endofpacket;         // modular_sgdma_dispatcher_0_Descriptor_Slave_agent:rf_source_endofpacket -> modular_sgdma_dispatcher_0_Descriptor_Slave_agent_rsp_fifo:in_endofpacket
	wire          modular_sgdma_dispatcher_0_descriptor_slave_agent_rsp_fifo_out_valid;            // modular_sgdma_dispatcher_0_Descriptor_Slave_agent_rsp_fifo:out_valid -> modular_sgdma_dispatcher_0_Descriptor_Slave_agent:rf_sink_valid
	wire  [343:0] modular_sgdma_dispatcher_0_descriptor_slave_agent_rsp_fifo_out_data;             // modular_sgdma_dispatcher_0_Descriptor_Slave_agent_rsp_fifo:out_data -> modular_sgdma_dispatcher_0_Descriptor_Slave_agent:rf_sink_data
	wire          modular_sgdma_dispatcher_0_descriptor_slave_agent_rsp_fifo_out_ready;            // modular_sgdma_dispatcher_0_Descriptor_Slave_agent:rf_sink_ready -> modular_sgdma_dispatcher_0_Descriptor_Slave_agent_rsp_fifo:out_ready
	wire          modular_sgdma_dispatcher_0_descriptor_slave_agent_rsp_fifo_out_startofpacket;    // modular_sgdma_dispatcher_0_Descriptor_Slave_agent_rsp_fifo:out_startofpacket -> modular_sgdma_dispatcher_0_Descriptor_Slave_agent:rf_sink_startofpacket
	wire          modular_sgdma_dispatcher_0_descriptor_slave_agent_rsp_fifo_out_endofpacket;      // modular_sgdma_dispatcher_0_Descriptor_Slave_agent_rsp_fifo:out_endofpacket -> modular_sgdma_dispatcher_0_Descriptor_Slave_agent:rf_sink_endofpacket
	wire          modular_sgdma_dispatcher_0_descriptor_slave_agent_rdata_fifo_src_valid;          // modular_sgdma_dispatcher_0_Descriptor_Slave_agent:rdata_fifo_src_valid -> modular_sgdma_dispatcher_0_Descriptor_Slave_agent:rdata_fifo_sink_valid
	wire  [257:0] modular_sgdma_dispatcher_0_descriptor_slave_agent_rdata_fifo_src_data;           // modular_sgdma_dispatcher_0_Descriptor_Slave_agent:rdata_fifo_src_data -> modular_sgdma_dispatcher_0_Descriptor_Slave_agent:rdata_fifo_sink_data
	wire          modular_sgdma_dispatcher_0_descriptor_slave_agent_rdata_fifo_src_ready;          // modular_sgdma_dispatcher_0_Descriptor_Slave_agent:rdata_fifo_sink_ready -> modular_sgdma_dispatcher_0_Descriptor_Slave_agent:rdata_fifo_src_ready
	wire   [63:0] msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_readdata;                  // msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_translator:uav_readdata -> msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent:m0_readdata
	wire          msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_waitrequest;               // msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_translator:uav_waitrequest -> msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent:m0_waitrequest
	wire          msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_debugaccess;               // msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent:m0_debugaccess -> msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_translator:uav_debugaccess
	wire    [6:0] msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_address;                   // msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent:m0_address -> msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_translator:uav_address
	wire    [7:0] msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_byteenable;                // msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent:m0_byteenable -> msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_translator:uav_byteenable
	wire          msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_read;                      // msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent:m0_read -> msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_translator:uav_read
	wire          msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_readdatavalid;             // msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_translator:uav_readdatavalid -> msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent:m0_readdatavalid
	wire          msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_lock;                      // msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent:m0_lock -> msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_translator:uav_lock
	wire   [63:0] msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_writedata;                 // msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent:m0_writedata -> msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_translator:uav_writedata
	wire          msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_write;                     // msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent:m0_write -> msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_translator:uav_write
	wire    [3:0] msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_burstcount;                // msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent:m0_burstcount -> msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_translator:uav_burstcount
	wire          msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_rf_source_valid;              // msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent:rf_source_valid -> msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo:in_valid
	wire  [127:0] msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_rf_source_data;               // msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent:rf_source_data -> msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo:in_data
	wire          msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_rf_source_ready;              // msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo:in_ready -> msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent:rf_source_ready
	wire          msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_rf_source_startofpacket;      // msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent:rf_source_startofpacket -> msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo:in_startofpacket
	wire          msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_rf_source_endofpacket;        // msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent:rf_source_endofpacket -> msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo:in_endofpacket
	wire          msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo_out_valid;           // msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo:out_valid -> msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent:rf_sink_valid
	wire  [127:0] msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo_out_data;            // msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo:out_data -> msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent:rf_sink_data
	wire          msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo_out_ready;           // msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent:rf_sink_ready -> msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo:out_ready
	wire          msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo_out_startofpacket;   // msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo:out_startofpacket -> msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent:rf_sink_startofpacket
	wire          msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo_out_endofpacket;     // msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo:out_endofpacket -> msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent:rf_sink_endofpacket
	wire          msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_rdata_fifo_src_valid;         // msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent:rdata_fifo_src_valid -> msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent:rdata_fifo_sink_valid
	wire   [65:0] msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_rdata_fifo_src_data;          // msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent:rdata_fifo_src_data -> msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent:rdata_fifo_sink_data
	wire          msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_rdata_fifo_src_ready;         // msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent:rdata_fifo_sink_ready -> msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_002_src_valid;                                                           // cmd_mux_002:src_valid -> msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent:cp_valid
	wire  [126:0] cmd_mux_002_src_data;                                                            // cmd_mux_002:src_data -> msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent:cp_data
	wire          cmd_mux_002_src_ready;                                                           // msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent:cp_ready -> cmd_mux_002:src_ready
	wire    [2:0] cmd_mux_002_src_channel;                                                         // cmd_mux_002:src_channel -> msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent:cp_channel
	wire          cmd_mux_002_src_startofpacket;                                                   // cmd_mux_002:src_startofpacket -> msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent:cp_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                     // cmd_mux_002:src_endofpacket -> msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent:cp_endofpacket
	wire          csr_m0_agent_cp_valid;                                                           // csr_m0_agent:cp_valid -> router:sink_valid
	wire  [126:0] csr_m0_agent_cp_data;                                                            // csr_m0_agent:cp_data -> router:sink_data
	wire          csr_m0_agent_cp_ready;                                                           // router:sink_ready -> csr_m0_agent:cp_ready
	wire          csr_m0_agent_cp_startofpacket;                                                   // csr_m0_agent:cp_startofpacket -> router:sink_startofpacket
	wire          csr_m0_agent_cp_endofpacket;                                                     // csr_m0_agent:cp_endofpacket -> router:sink_endofpacket
	wire          modular_sgdma_dispatcher_0_csr_agent_rp_valid;                                   // modular_sgdma_dispatcher_0_CSR_agent:rp_valid -> router_001:sink_valid
	wire   [90:0] modular_sgdma_dispatcher_0_csr_agent_rp_data;                                    // modular_sgdma_dispatcher_0_CSR_agent:rp_data -> router_001:sink_data
	wire          modular_sgdma_dispatcher_0_csr_agent_rp_ready;                                   // router_001:sink_ready -> modular_sgdma_dispatcher_0_CSR_agent:rp_ready
	wire          modular_sgdma_dispatcher_0_csr_agent_rp_startofpacket;                           // modular_sgdma_dispatcher_0_CSR_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire          modular_sgdma_dispatcher_0_csr_agent_rp_endofpacket;                             // modular_sgdma_dispatcher_0_CSR_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire          modular_sgdma_dispatcher_0_descriptor_slave_agent_rp_valid;                      // modular_sgdma_dispatcher_0_Descriptor_Slave_agent:rp_valid -> router_002:sink_valid
	wire  [342:0] modular_sgdma_dispatcher_0_descriptor_slave_agent_rp_data;                       // modular_sgdma_dispatcher_0_Descriptor_Slave_agent:rp_data -> router_002:sink_data
	wire          modular_sgdma_dispatcher_0_descriptor_slave_agent_rp_ready;                      // router_002:sink_ready -> modular_sgdma_dispatcher_0_Descriptor_Slave_agent:rp_ready
	wire          modular_sgdma_dispatcher_0_descriptor_slave_agent_rp_startofpacket;              // modular_sgdma_dispatcher_0_Descriptor_Slave_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          modular_sgdma_dispatcher_0_descriptor_slave_agent_rp_endofpacket;                // modular_sgdma_dispatcher_0_Descriptor_Slave_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_rp_valid;                     // msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent:rp_valid -> router_003:sink_valid
	wire  [126:0] msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_rp_data;                      // msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent:rp_data -> router_003:sink_data
	wire          msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_rp_ready;                     // router_003:sink_ready -> msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent:rp_ready
	wire          msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_rp_startofpacket;             // msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_rp_endofpacket;               // msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                            // router_003:src_valid -> rsp_demux_002:sink_valid
	wire  [126:0] router_003_src_data;                                                             // router_003:src_data -> rsp_demux_002:sink_data
	wire          router_003_src_ready;                                                            // rsp_demux_002:sink_ready -> router_003:src_ready
	wire    [2:0] router_003_src_channel;                                                          // router_003:src_channel -> rsp_demux_002:sink_channel
	wire          router_003_src_startofpacket;                                                    // router_003:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_003_src_endofpacket;                                                      // router_003:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          router_src_valid;                                                                // router:src_valid -> csr_m0_limiter:cmd_sink_valid
	wire  [126:0] router_src_data;                                                                 // router:src_data -> csr_m0_limiter:cmd_sink_data
	wire          router_src_ready;                                                                // csr_m0_limiter:cmd_sink_ready -> router:src_ready
	wire    [2:0] router_src_channel;                                                              // router:src_channel -> csr_m0_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                        // router:src_startofpacket -> csr_m0_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                          // router:src_endofpacket -> csr_m0_limiter:cmd_sink_endofpacket
	wire  [126:0] csr_m0_limiter_cmd_src_data;                                                     // csr_m0_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          csr_m0_limiter_cmd_src_ready;                                                    // cmd_demux:sink_ready -> csr_m0_limiter:cmd_src_ready
	wire    [2:0] csr_m0_limiter_cmd_src_channel;                                                  // csr_m0_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          csr_m0_limiter_cmd_src_startofpacket;                                            // csr_m0_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          csr_m0_limiter_cmd_src_endofpacket;                                              // csr_m0_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                               // rsp_mux:src_valid -> csr_m0_limiter:rsp_sink_valid
	wire  [126:0] rsp_mux_src_data;                                                                // rsp_mux:src_data -> csr_m0_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                               // csr_m0_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire    [2:0] rsp_mux_src_channel;                                                             // rsp_mux:src_channel -> csr_m0_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                                       // rsp_mux:src_startofpacket -> csr_m0_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                                         // rsp_mux:src_endofpacket -> csr_m0_limiter:rsp_sink_endofpacket
	wire          csr_m0_limiter_rsp_src_valid;                                                    // csr_m0_limiter:rsp_src_valid -> csr_m0_agent:rp_valid
	wire  [126:0] csr_m0_limiter_rsp_src_data;                                                     // csr_m0_limiter:rsp_src_data -> csr_m0_agent:rp_data
	wire          csr_m0_limiter_rsp_src_ready;                                                    // csr_m0_agent:rp_ready -> csr_m0_limiter:rsp_src_ready
	wire    [2:0] csr_m0_limiter_rsp_src_channel;                                                  // csr_m0_limiter:rsp_src_channel -> csr_m0_agent:rp_channel
	wire          csr_m0_limiter_rsp_src_startofpacket;                                            // csr_m0_limiter:rsp_src_startofpacket -> csr_m0_agent:rp_startofpacket
	wire          csr_m0_limiter_rsp_src_endofpacket;                                              // csr_m0_limiter:rsp_src_endofpacket -> csr_m0_agent:rp_endofpacket
	wire          modular_sgdma_dispatcher_0_csr_burst_adapter_source0_valid;                      // modular_sgdma_dispatcher_0_CSR_burst_adapter:source0_valid -> modular_sgdma_dispatcher_0_CSR_agent:cp_valid
	wire   [90:0] modular_sgdma_dispatcher_0_csr_burst_adapter_source0_data;                       // modular_sgdma_dispatcher_0_CSR_burst_adapter:source0_data -> modular_sgdma_dispatcher_0_CSR_agent:cp_data
	wire          modular_sgdma_dispatcher_0_csr_burst_adapter_source0_ready;                      // modular_sgdma_dispatcher_0_CSR_agent:cp_ready -> modular_sgdma_dispatcher_0_CSR_burst_adapter:source0_ready
	wire    [2:0] modular_sgdma_dispatcher_0_csr_burst_adapter_source0_channel;                    // modular_sgdma_dispatcher_0_CSR_burst_adapter:source0_channel -> modular_sgdma_dispatcher_0_CSR_agent:cp_channel
	wire          modular_sgdma_dispatcher_0_csr_burst_adapter_source0_startofpacket;              // modular_sgdma_dispatcher_0_CSR_burst_adapter:source0_startofpacket -> modular_sgdma_dispatcher_0_CSR_agent:cp_startofpacket
	wire          modular_sgdma_dispatcher_0_csr_burst_adapter_source0_endofpacket;                // modular_sgdma_dispatcher_0_CSR_burst_adapter:source0_endofpacket -> modular_sgdma_dispatcher_0_CSR_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                            // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [126:0] cmd_demux_src0_data;                                                             // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                            // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [2:0] cmd_demux_src0_channel;                                                          // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                    // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                      // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                            // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [126:0] cmd_demux_src1_data;                                                             // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                            // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire    [2:0] cmd_demux_src1_channel;                                                          // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                                    // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                      // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                            // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [126:0] cmd_demux_src2_data;                                                             // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                                            // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire    [2:0] cmd_demux_src2_channel;                                                          // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                                    // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                      // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                                            // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [126:0] rsp_demux_src0_data;                                                             // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                            // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [2:0] rsp_demux_src0_channel;                                                          // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                    // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                      // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                        // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [126:0] rsp_demux_001_src0_data;                                                         // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                                        // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire    [2:0] rsp_demux_001_src0_channel;                                                      // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                                // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                  // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                        // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [126:0] rsp_demux_002_src0_data;                                                         // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                                        // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire    [2:0] rsp_demux_002_src0_channel;                                                      // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                                // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                  // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          cmd_mux_001_src_valid;                                                           // cmd_mux_001:src_valid -> modular_sgdma_dispatcher_0_Descriptor_Slave_cmd_width_adapter:in_valid
	wire  [126:0] cmd_mux_001_src_data;                                                            // cmd_mux_001:src_data -> modular_sgdma_dispatcher_0_Descriptor_Slave_cmd_width_adapter:in_data
	wire          cmd_mux_001_src_ready;                                                           // modular_sgdma_dispatcher_0_Descriptor_Slave_cmd_width_adapter:in_ready -> cmd_mux_001:src_ready
	wire    [2:0] cmd_mux_001_src_channel;                                                         // cmd_mux_001:src_channel -> modular_sgdma_dispatcher_0_Descriptor_Slave_cmd_width_adapter:in_channel
	wire          cmd_mux_001_src_startofpacket;                                                   // cmd_mux_001:src_startofpacket -> modular_sgdma_dispatcher_0_Descriptor_Slave_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                     // cmd_mux_001:src_endofpacket -> modular_sgdma_dispatcher_0_Descriptor_Slave_cmd_width_adapter:in_endofpacket
	wire          modular_sgdma_dispatcher_0_descriptor_slave_cmd_width_adapter_src_valid;         // modular_sgdma_dispatcher_0_Descriptor_Slave_cmd_width_adapter:out_valid -> modular_sgdma_dispatcher_0_Descriptor_Slave_agent:cp_valid
	wire  [342:0] modular_sgdma_dispatcher_0_descriptor_slave_cmd_width_adapter_src_data;          // modular_sgdma_dispatcher_0_Descriptor_Slave_cmd_width_adapter:out_data -> modular_sgdma_dispatcher_0_Descriptor_Slave_agent:cp_data
	wire          modular_sgdma_dispatcher_0_descriptor_slave_cmd_width_adapter_src_ready;         // modular_sgdma_dispatcher_0_Descriptor_Slave_agent:cp_ready -> modular_sgdma_dispatcher_0_Descriptor_Slave_cmd_width_adapter:out_ready
	wire    [2:0] modular_sgdma_dispatcher_0_descriptor_slave_cmd_width_adapter_src_channel;       // modular_sgdma_dispatcher_0_Descriptor_Slave_cmd_width_adapter:out_channel -> modular_sgdma_dispatcher_0_Descriptor_Slave_agent:cp_channel
	wire          modular_sgdma_dispatcher_0_descriptor_slave_cmd_width_adapter_src_startofpacket; // modular_sgdma_dispatcher_0_Descriptor_Slave_cmd_width_adapter:out_startofpacket -> modular_sgdma_dispatcher_0_Descriptor_Slave_agent:cp_startofpacket
	wire          modular_sgdma_dispatcher_0_descriptor_slave_cmd_width_adapter_src_endofpacket;   // modular_sgdma_dispatcher_0_Descriptor_Slave_cmd_width_adapter:out_endofpacket -> modular_sgdma_dispatcher_0_Descriptor_Slave_agent:cp_endofpacket
	wire          router_001_src_valid;                                                            // router_001:src_valid -> modular_sgdma_dispatcher_0_CSR_rsp_width_adapter:in_valid
	wire   [90:0] router_001_src_data;                                                             // router_001:src_data -> modular_sgdma_dispatcher_0_CSR_rsp_width_adapter:in_data
	wire          router_001_src_ready;                                                            // modular_sgdma_dispatcher_0_CSR_rsp_width_adapter:in_ready -> router_001:src_ready
	wire    [2:0] router_001_src_channel;                                                          // router_001:src_channel -> modular_sgdma_dispatcher_0_CSR_rsp_width_adapter:in_channel
	wire          router_001_src_startofpacket;                                                    // router_001:src_startofpacket -> modular_sgdma_dispatcher_0_CSR_rsp_width_adapter:in_startofpacket
	wire          router_001_src_endofpacket;                                                      // router_001:src_endofpacket -> modular_sgdma_dispatcher_0_CSR_rsp_width_adapter:in_endofpacket
	wire          modular_sgdma_dispatcher_0_csr_rsp_width_adapter_src_valid;                      // modular_sgdma_dispatcher_0_CSR_rsp_width_adapter:out_valid -> rsp_demux:sink_valid
	wire  [126:0] modular_sgdma_dispatcher_0_csr_rsp_width_adapter_src_data;                       // modular_sgdma_dispatcher_0_CSR_rsp_width_adapter:out_data -> rsp_demux:sink_data
	wire          modular_sgdma_dispatcher_0_csr_rsp_width_adapter_src_ready;                      // rsp_demux:sink_ready -> modular_sgdma_dispatcher_0_CSR_rsp_width_adapter:out_ready
	wire    [2:0] modular_sgdma_dispatcher_0_csr_rsp_width_adapter_src_channel;                    // modular_sgdma_dispatcher_0_CSR_rsp_width_adapter:out_channel -> rsp_demux:sink_channel
	wire          modular_sgdma_dispatcher_0_csr_rsp_width_adapter_src_startofpacket;              // modular_sgdma_dispatcher_0_CSR_rsp_width_adapter:out_startofpacket -> rsp_demux:sink_startofpacket
	wire          modular_sgdma_dispatcher_0_csr_rsp_width_adapter_src_endofpacket;                // modular_sgdma_dispatcher_0_CSR_rsp_width_adapter:out_endofpacket -> rsp_demux:sink_endofpacket
	wire          router_002_src_valid;                                                            // router_002:src_valid -> modular_sgdma_dispatcher_0_Descriptor_Slave_rsp_width_adapter:in_valid
	wire  [342:0] router_002_src_data;                                                             // router_002:src_data -> modular_sgdma_dispatcher_0_Descriptor_Slave_rsp_width_adapter:in_data
	wire          router_002_src_ready;                                                            // modular_sgdma_dispatcher_0_Descriptor_Slave_rsp_width_adapter:in_ready -> router_002:src_ready
	wire    [2:0] router_002_src_channel;                                                          // router_002:src_channel -> modular_sgdma_dispatcher_0_Descriptor_Slave_rsp_width_adapter:in_channel
	wire          router_002_src_startofpacket;                                                    // router_002:src_startofpacket -> modular_sgdma_dispatcher_0_Descriptor_Slave_rsp_width_adapter:in_startofpacket
	wire          router_002_src_endofpacket;                                                      // router_002:src_endofpacket -> modular_sgdma_dispatcher_0_Descriptor_Slave_rsp_width_adapter:in_endofpacket
	wire          modular_sgdma_dispatcher_0_descriptor_slave_rsp_width_adapter_src_valid;         // modular_sgdma_dispatcher_0_Descriptor_Slave_rsp_width_adapter:out_valid -> rsp_demux_001:sink_valid
	wire  [126:0] modular_sgdma_dispatcher_0_descriptor_slave_rsp_width_adapter_src_data;          // modular_sgdma_dispatcher_0_Descriptor_Slave_rsp_width_adapter:out_data -> rsp_demux_001:sink_data
	wire          modular_sgdma_dispatcher_0_descriptor_slave_rsp_width_adapter_src_ready;         // rsp_demux_001:sink_ready -> modular_sgdma_dispatcher_0_Descriptor_Slave_rsp_width_adapter:out_ready
	wire    [2:0] modular_sgdma_dispatcher_0_descriptor_slave_rsp_width_adapter_src_channel;       // modular_sgdma_dispatcher_0_Descriptor_Slave_rsp_width_adapter:out_channel -> rsp_demux_001:sink_channel
	wire          modular_sgdma_dispatcher_0_descriptor_slave_rsp_width_adapter_src_startofpacket; // modular_sgdma_dispatcher_0_Descriptor_Slave_rsp_width_adapter:out_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          modular_sgdma_dispatcher_0_descriptor_slave_rsp_width_adapter_src_endofpacket;   // modular_sgdma_dispatcher_0_Descriptor_Slave_rsp_width_adapter:out_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          cmd_mux_src_valid;                                                               // cmd_mux:src_valid -> modular_sgdma_dispatcher_0_CSR_cmd_width_adapter:in_valid
	wire  [126:0] cmd_mux_src_data;                                                                // cmd_mux:src_data -> modular_sgdma_dispatcher_0_CSR_cmd_width_adapter:in_data
	wire          cmd_mux_src_ready;                                                               // modular_sgdma_dispatcher_0_CSR_cmd_width_adapter:in_ready -> cmd_mux:src_ready
	wire    [2:0] cmd_mux_src_channel;                                                             // cmd_mux:src_channel -> modular_sgdma_dispatcher_0_CSR_cmd_width_adapter:in_channel
	wire          cmd_mux_src_startofpacket;                                                       // cmd_mux:src_startofpacket -> modular_sgdma_dispatcher_0_CSR_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_src_endofpacket;                                                         // cmd_mux:src_endofpacket -> modular_sgdma_dispatcher_0_CSR_cmd_width_adapter:in_endofpacket
	wire          modular_sgdma_dispatcher_0_csr_cmd_width_adapter_src_valid;                      // modular_sgdma_dispatcher_0_CSR_cmd_width_adapter:out_valid -> modular_sgdma_dispatcher_0_CSR_burst_adapter:sink0_valid
	wire   [90:0] modular_sgdma_dispatcher_0_csr_cmd_width_adapter_src_data;                       // modular_sgdma_dispatcher_0_CSR_cmd_width_adapter:out_data -> modular_sgdma_dispatcher_0_CSR_burst_adapter:sink0_data
	wire          modular_sgdma_dispatcher_0_csr_cmd_width_adapter_src_ready;                      // modular_sgdma_dispatcher_0_CSR_burst_adapter:sink0_ready -> modular_sgdma_dispatcher_0_CSR_cmd_width_adapter:out_ready
	wire    [2:0] modular_sgdma_dispatcher_0_csr_cmd_width_adapter_src_channel;                    // modular_sgdma_dispatcher_0_CSR_cmd_width_adapter:out_channel -> modular_sgdma_dispatcher_0_CSR_burst_adapter:sink0_channel
	wire          modular_sgdma_dispatcher_0_csr_cmd_width_adapter_src_startofpacket;              // modular_sgdma_dispatcher_0_CSR_cmd_width_adapter:out_startofpacket -> modular_sgdma_dispatcher_0_CSR_burst_adapter:sink0_startofpacket
	wire          modular_sgdma_dispatcher_0_csr_cmd_width_adapter_src_endofpacket;                // modular_sgdma_dispatcher_0_CSR_cmd_width_adapter:out_endofpacket -> modular_sgdma_dispatcher_0_CSR_burst_adapter:sink0_endofpacket
	wire    [2:0] csr_m0_limiter_cmd_valid_data;                                                   // csr_m0_limiter:cmd_src_valid -> cmd_demux:sink_valid

	msgdma_bbb_altera_merlin_master_translator_191_g7h47bq #(
		.AV_ADDRESS_W                (7),
		.AV_DATA_W                   (64),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (8),
		.UAV_ADDRESS_W               (7),
		.UAV_BURSTCOUNT_W            (4),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (8),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (0),
		.WAITREQUEST_ALLOWANCE       (0)
	) csr_m0_translator (
		.clk                    (clk_clk_clk),                                               //   input,   width = 1,                       clk.clk
		.reset                  (csr_reset_reset_bridge_in_reset_reset),                     //   input,   width = 1,                     reset.reset
		.uav_address            (csr_m0_translator_avalon_universal_master_0_address),       //  output,   width = 7, avalon_universal_master_0.address
		.uav_burstcount         (csr_m0_translator_avalon_universal_master_0_burstcount),    //  output,   width = 4,                          .burstcount
		.uav_read               (csr_m0_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (csr_m0_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (csr_m0_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (csr_m0_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (csr_m0_translator_avalon_universal_master_0_byteenable),    //  output,   width = 8,                          .byteenable
		.uav_readdata           (csr_m0_translator_avalon_universal_master_0_readdata),      //   input,  width = 64,                          .readdata
		.uav_writedata          (csr_m0_translator_avalon_universal_master_0_writedata),     //  output,  width = 64,                          .writedata
		.uav_lock               (csr_m0_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (csr_m0_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (csr_m0_address),                                            //   input,   width = 7,      avalon_anti_master_0.address
		.av_waitrequest         (csr_m0_waitrequest),                                        //  output,   width = 1,                          .waitrequest
		.av_burstcount          (csr_m0_burstcount),                                         //   input,   width = 1,                          .burstcount
		.av_byteenable          (csr_m0_byteenable),                                         //   input,   width = 8,                          .byteenable
		.av_read                (csr_m0_read),                                               //   input,   width = 1,                          .read
		.av_readdata            (csr_m0_readdata),                                           //  output,  width = 64,                          .readdata
		.av_readdatavalid       (csr_m0_readdatavalid),                                      //  output,   width = 1,                          .readdatavalid
		.av_write               (csr_m0_write),                                              //   input,   width = 1,                          .write
		.av_writedata           (csr_m0_writedata),                                          //   input,  width = 64,                          .writedata
		.av_debugaccess         (csr_m0_debugaccess),                                        //   input,   width = 1,                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                      // (terminated),                                        
		.av_begintransfer       (1'b0),                                                      // (terminated),                                        
		.av_chipselect          (1'b0),                                                      // (terminated),                                        
		.av_lock                (1'b0),                                                      // (terminated),                                        
		.uav_clken              (),                                                          // (terminated),                                        
		.av_clken               (1'b1),                                                      // (terminated),                                        
		.uav_response           (2'b00),                                                     // (terminated),                                        
		.av_response            (),                                                          // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                      // (terminated),                                        
		.av_writeresponsevalid  ()                                                           // (terminated),                                        
	);

	msgdma_bbb_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (7),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) modular_sgdma_dispatcher_0_csr_translator (
		.clk                    (clk_clk_clk),                                           //   input,   width = 1,                      clk.clk
		.reset                  (csr_reset_reset_bridge_in_reset_reset),                 //   input,   width = 1,                    reset.reset
		.uav_address            (modular_sgdma_dispatcher_0_csr_agent_m0_address),       //   input,   width = 7, avalon_universal_slave_0.address
		.uav_burstcount         (modular_sgdma_dispatcher_0_csr_agent_m0_burstcount),    //   input,   width = 3,                         .burstcount
		.uav_read               (modular_sgdma_dispatcher_0_csr_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (modular_sgdma_dispatcher_0_csr_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (modular_sgdma_dispatcher_0_csr_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (modular_sgdma_dispatcher_0_csr_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (modular_sgdma_dispatcher_0_csr_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (modular_sgdma_dispatcher_0_csr_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (modular_sgdma_dispatcher_0_csr_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (modular_sgdma_dispatcher_0_csr_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (modular_sgdma_dispatcher_0_csr_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (modular_sgdma_dispatcher_0_CSR_address),                //  output,   width = 3,      avalon_anti_slave_0.address
		.av_write               (modular_sgdma_dispatcher_0_CSR_write),                  //  output,   width = 1,                         .write
		.av_read                (modular_sgdma_dispatcher_0_CSR_read),                   //  output,   width = 1,                         .read
		.av_readdata            (modular_sgdma_dispatcher_0_CSR_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (modular_sgdma_dispatcher_0_CSR_writedata),              //  output,  width = 32,                         .writedata
		.av_byteenable          (modular_sgdma_dispatcher_0_CSR_byteenable),             //  output,   width = 4,                         .byteenable
		.av_begintransfer       (),                                                      // (terminated),                                       
		.av_beginbursttransfer  (),                                                      // (terminated),                                       
		.av_burstcount          (),                                                      // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                  // (terminated),                                       
		.av_waitrequest         (1'b0),                                                  // (terminated),                                       
		.av_writebyteenable     (),                                                      // (terminated),                                       
		.av_lock                (),                                                      // (terminated),                                       
		.av_chipselect          (),                                                      // (terminated),                                       
		.av_clken               (),                                                      // (terminated),                                       
		.uav_clken              (1'b0),                                                  // (terminated),                                       
		.av_debugaccess         (),                                                      // (terminated),                                       
		.av_outputenable        (),                                                      // (terminated),                                       
		.uav_response           (),                                                      // (terminated),                                       
		.av_response            (2'b00),                                                 // (terminated),                                       
		.uav_writeresponsevalid (),                                                      // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                   // (terminated),                                       
	);

	msgdma_bbb_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (256),
		.UAV_DATA_W                     (256),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (32),
		.UAV_BYTEENABLE_W               (32),
		.UAV_ADDRESS_W                  (7),
		.UAV_BURSTCOUNT_W               (6),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (32),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) modular_sgdma_dispatcher_0_descriptor_slave_translator (
		.clk                    (clk_clk_clk),                                                                                                                                                                                                                                                           //   input,    width = 1,                      clk.clk
		.reset                  (csr_reset_reset_bridge_in_reset_reset),                                                                                                                                                                                                                                 //   input,    width = 1,                    reset.reset
		.uav_address            (modular_sgdma_dispatcher_0_descriptor_slave_agent_m0_address),                                                                                                                                                                                                          //   input,    width = 7, avalon_universal_slave_0.address
		.uav_burstcount         (modular_sgdma_dispatcher_0_descriptor_slave_agent_m0_burstcount),                                                                                                                                                                                                       //   input,    width = 6,                         .burstcount
		.uav_read               (modular_sgdma_dispatcher_0_descriptor_slave_agent_m0_read),                                                                                                                                                                                                             //   input,    width = 1,                         .read
		.uav_write              (modular_sgdma_dispatcher_0_descriptor_slave_agent_m0_write),                                                                                                                                                                                                            //   input,    width = 1,                         .write
		.uav_waitrequest        (modular_sgdma_dispatcher_0_descriptor_slave_agent_m0_waitrequest),                                                                                                                                                                                                      //  output,    width = 1,                         .waitrequest
		.uav_readdatavalid      (modular_sgdma_dispatcher_0_descriptor_slave_agent_m0_readdatavalid),                                                                                                                                                                                                    //  output,    width = 1,                         .readdatavalid
		.uav_byteenable         (modular_sgdma_dispatcher_0_descriptor_slave_agent_m0_byteenable),                                                                                                                                                                                                       //   input,   width = 32,                         .byteenable
		.uav_readdata           (modular_sgdma_dispatcher_0_descriptor_slave_agent_m0_readdata),                                                                                                                                                                                                         //  output,  width = 256,                         .readdata
		.uav_writedata          (modular_sgdma_dispatcher_0_descriptor_slave_agent_m0_writedata),                                                                                                                                                                                                        //   input,  width = 256,                         .writedata
		.uav_lock               (modular_sgdma_dispatcher_0_descriptor_slave_agent_m0_lock),                                                                                                                                                                                                             //   input,    width = 1,                         .lock
		.uav_debugaccess        (modular_sgdma_dispatcher_0_descriptor_slave_agent_m0_debugaccess),                                                                                                                                                                                                      //   input,    width = 1,                         .debugaccess
		.av_write               (modular_sgdma_dispatcher_0_Descriptor_Slave_write),                                                                                                                                                                                                                     //  output,    width = 1,      avalon_anti_slave_0.write
		.av_writedata           (modular_sgdma_dispatcher_0_Descriptor_Slave_writedata),                                                                                                                                                                                                                 //  output,  width = 256,                         .writedata
		.av_byteenable          (modular_sgdma_dispatcher_0_Descriptor_Slave_byteenable),                                                                                                                                                                                                                //  output,   width = 32,                         .byteenable
		.av_waitrequest         (modular_sgdma_dispatcher_0_Descriptor_Slave_waitrequest),                                                                                                                                                                                                               //   input,    width = 1,                         .waitrequest
		.av_address             (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_read                (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_readdata            (256'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011011110101011011101111010101101), // (terminated),                                        
		.av_begintransfer       (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_beginbursttransfer  (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_burstcount          (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_readdatavalid       (1'b0),                                                                                                                                                                                                                                                                  // (terminated),                                        
		.av_writebyteenable     (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_lock                (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_chipselect          (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_clken               (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.uav_clken              (1'b0),                                                                                                                                                                                                                                                                  // (terminated),                                        
		.av_debugaccess         (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_outputenable        (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.uav_response           (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_response            (2'b00),                                                                                                                                                                                                                                                                 // (terminated),                                        
		.uav_writeresponsevalid (),                                                                                                                                                                                                                                                                      // (terminated),                                        
		.av_writeresponsevalid  (1'b0)                                                                                                                                                                                                                                                                   // (terminated),                                        
	);

	msgdma_bbb_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (64),
		.UAV_DATA_W                     (64),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (8),
		.UAV_BYTEENABLE_W               (8),
		.UAV_ADDRESS_W                  (7),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (8),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_translator (
		.clk                    (clk_clk_clk),                                                         //   input,   width = 1,                      clk.clk
		.reset                  (csr_reset_reset_bridge_in_reset_reset),                               //   input,   width = 1,                    reset.reset
		.uav_address            (msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_address),       //   input,   width = 7, avalon_universal_slave_0.address
		.uav_burstcount         (msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_burstcount),    //   input,   width = 4,                         .burstcount
		.uav_read               (msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_byteenable),    //   input,   width = 8,                         .byteenable
		.uav_readdata           (msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_readdata),      //  output,  width = 64,                         .readdata
		.uav_writedata          (msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_writedata),     //   input,  width = 64,                         .writedata
		.uav_lock               (msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_address),                //  output,   width = 3,      avalon_anti_slave_0.address
		.av_write               (msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_write),                  //  output,   width = 1,                         .write
		.av_read                (msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_read),                   //  output,   width = 1,                         .read
		.av_readdata            (msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_readdata),               //   input,  width = 64,                         .readdata
		.av_writedata           (msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_writedata),              //  output,  width = 64,                         .writedata
		.av_begintransfer       (),                                                                    // (terminated),                                       
		.av_beginbursttransfer  (),                                                                    // (terminated),                                       
		.av_burstcount          (),                                                                    // (terminated),                                       
		.av_byteenable          (),                                                                    // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                                // (terminated),                                       
		.av_waitrequest         (1'b0),                                                                // (terminated),                                       
		.av_writebyteenable     (),                                                                    // (terminated),                                       
		.av_lock                (),                                                                    // (terminated),                                       
		.av_chipselect          (),                                                                    // (terminated),                                       
		.av_clken               (),                                                                    // (terminated),                                       
		.uav_clken              (1'b0),                                                                // (terminated),                                       
		.av_debugaccess         (),                                                                    // (terminated),                                       
		.av_outputenable        (),                                                                    // (terminated),                                       
		.uav_response           (),                                                                    // (terminated),                                       
		.av_response            (2'b00),                                                               // (terminated),                                       
		.uav_writeresponsevalid (),                                                                    // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                                 // (terminated),                                       
	);

	msgdma_bbb_altera_merlin_master_agent_191_mpbm6tq #(
		.PKT_WUNIQUE               (126),
		.PKT_DOMAIN_H              (125),
		.PKT_DOMAIN_L              (124),
		.PKT_SNOOP_H               (123),
		.PKT_SNOOP_L               (120),
		.PKT_BARRIER_H             (119),
		.PKT_BARRIER_L             (118),
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_QOS_H                 (100),
		.PKT_QOS_L                 (100),
		.PKT_DATA_SIDEBAND_H       (98),
		.PKT_DATA_SIDEBAND_L       (98),
		.PKT_ADDR_SIDEBAND_H       (97),
		.PKT_ADDR_SIDEBAND_L       (97),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_CACHE_H               (112),
		.PKT_CACHE_L               (109),
		.PKT_THREAD_ID_H           (105),
		.PKT_THREAD_ID_L           (105),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_EXCLUSIVE       (84),
		.PKT_TRANS_LOCK            (83),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (91),
		.PKT_BYTE_CNT_H            (90),
		.PKT_BYTE_CNT_L            (85),
		.PKT_ADDR_H                (78),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (79),
		.PKT_TRANS_POSTED          (80),
		.PKT_TRANS_WRITE           (81),
		.PKT_TRANS_READ            (82),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (104),
		.PKT_DEST_ID_L             (103),
		.ST_DATA_W                 (127),
		.ST_CHANNEL_W              (3),
		.AV_BURSTCOUNT_W           (4),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (0)
	) csr_m0_agent (
		.clk                   (clk_clk_clk),                                               //   input,    width = 1,       clk.clk
		.reset                 (csr_reset_reset_bridge_in_reset_reset),                     //   input,    width = 1, clk_reset.reset
		.av_address            (csr_m0_translator_avalon_universal_master_0_address),       //   input,    width = 7,        av.address
		.av_write              (csr_m0_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (csr_m0_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (csr_m0_translator_avalon_universal_master_0_writedata),     //   input,   width = 64,          .writedata
		.av_readdata           (csr_m0_translator_avalon_universal_master_0_readdata),      //  output,   width = 64,          .readdata
		.av_waitrequest        (csr_m0_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (csr_m0_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (csr_m0_translator_avalon_universal_master_0_byteenable),    //   input,    width = 8,          .byteenable
		.av_burstcount         (csr_m0_translator_avalon_universal_master_0_burstcount),    //   input,    width = 4,          .burstcount
		.av_debugaccess        (csr_m0_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (csr_m0_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (csr_m0_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (csr_m0_agent_cp_data),                                      //  output,  width = 127,          .data
		.cp_startofpacket      (csr_m0_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (csr_m0_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (csr_m0_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (csr_m0_limiter_rsp_src_valid),                              //   input,    width = 1,        rp.valid
		.rp_data               (csr_m0_limiter_rsp_src_data),                               //   input,  width = 127,          .data
		.rp_channel            (csr_m0_limiter_rsp_src_channel),                            //   input,    width = 3,          .channel
		.rp_startofpacket      (csr_m0_limiter_rsp_src_startofpacket),                      //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (csr_m0_limiter_rsp_src_endofpacket),                        //   input,    width = 1,          .endofpacket
		.rp_ready              (csr_m0_limiter_rsp_src_ready),                              //  output,    width = 1,          .ready
		.av_response           (),                                                          // (terminated),                         
		.av_writeresponsevalid ()                                                           // (terminated),                         
	);

	msgdma_bbb_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (81),
		.PKT_ORI_BURST_SIZE_L      (79),
		.PKT_RESPONSE_STATUS_H     (78),
		.PKT_RESPONSE_STATUS_L     (77),
		.PKT_BURST_SIZE_H          (58),
		.PKT_BURST_SIZE_L          (56),
		.PKT_TRANS_LOCK            (47),
		.PKT_BEGIN_BURST           (63),
		.PKT_PROTECTION_H          (72),
		.PKT_PROTECTION_L          (70),
		.PKT_BURSTWRAP_H           (55),
		.PKT_BURSTWRAP_L           (55),
		.PKT_BYTE_CNT_H            (54),
		.PKT_BYTE_CNT_L            (49),
		.PKT_ADDR_H                (42),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (43),
		.PKT_TRANS_POSTED          (44),
		.PKT_TRANS_WRITE           (45),
		.PKT_TRANS_READ            (46),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (66),
		.PKT_SRC_ID_L              (65),
		.PKT_DEST_ID_H             (68),
		.PKT_DEST_ID_L             (67),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (3),
		.ST_DATA_W                 (91),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) modular_sgdma_dispatcher_0_csr_agent (
		.clk                     (clk_clk_clk),                                                        //   input,   width = 1,             clk.clk
		.reset                   (csr_reset_reset_bridge_in_reset_reset),                              //   input,   width = 1,       clk_reset.reset
		.m0_address              (modular_sgdma_dispatcher_0_csr_agent_m0_address),                    //  output,   width = 7,              m0.address
		.m0_burstcount           (modular_sgdma_dispatcher_0_csr_agent_m0_burstcount),                 //  output,   width = 3,                .burstcount
		.m0_byteenable           (modular_sgdma_dispatcher_0_csr_agent_m0_byteenable),                 //  output,   width = 4,                .byteenable
		.m0_debugaccess          (modular_sgdma_dispatcher_0_csr_agent_m0_debugaccess),                //  output,   width = 1,                .debugaccess
		.m0_lock                 (modular_sgdma_dispatcher_0_csr_agent_m0_lock),                       //  output,   width = 1,                .lock
		.m0_readdata             (modular_sgdma_dispatcher_0_csr_agent_m0_readdata),                   //   input,  width = 32,                .readdata
		.m0_readdatavalid        (modular_sgdma_dispatcher_0_csr_agent_m0_readdatavalid),              //   input,   width = 1,                .readdatavalid
		.m0_read                 (modular_sgdma_dispatcher_0_csr_agent_m0_read),                       //  output,   width = 1,                .read
		.m0_waitrequest          (modular_sgdma_dispatcher_0_csr_agent_m0_waitrequest),                //   input,   width = 1,                .waitrequest
		.m0_writedata            (modular_sgdma_dispatcher_0_csr_agent_m0_writedata),                  //  output,  width = 32,                .writedata
		.m0_write                (modular_sgdma_dispatcher_0_csr_agent_m0_write),                      //  output,   width = 1,                .write
		.rp_endofpacket          (modular_sgdma_dispatcher_0_csr_agent_rp_endofpacket),                //  output,   width = 1,              rp.endofpacket
		.rp_ready                (modular_sgdma_dispatcher_0_csr_agent_rp_ready),                      //   input,   width = 1,                .ready
		.rp_valid                (modular_sgdma_dispatcher_0_csr_agent_rp_valid),                      //  output,   width = 1,                .valid
		.rp_data                 (modular_sgdma_dispatcher_0_csr_agent_rp_data),                       //  output,  width = 91,                .data
		.rp_startofpacket        (modular_sgdma_dispatcher_0_csr_agent_rp_startofpacket),              //  output,   width = 1,                .startofpacket
		.cp_ready                (modular_sgdma_dispatcher_0_csr_burst_adapter_source0_ready),         //  output,   width = 1,              cp.ready
		.cp_valid                (modular_sgdma_dispatcher_0_csr_burst_adapter_source0_valid),         //   input,   width = 1,                .valid
		.cp_data                 (modular_sgdma_dispatcher_0_csr_burst_adapter_source0_data),          //   input,  width = 91,                .data
		.cp_startofpacket        (modular_sgdma_dispatcher_0_csr_burst_adapter_source0_startofpacket), //   input,   width = 1,                .startofpacket
		.cp_endofpacket          (modular_sgdma_dispatcher_0_csr_burst_adapter_source0_endofpacket),   //   input,   width = 1,                .endofpacket
		.cp_channel              (modular_sgdma_dispatcher_0_csr_burst_adapter_source0_channel),       //   input,   width = 3,                .channel
		.rf_sink_ready           (modular_sgdma_dispatcher_0_csr_agent_rsp_fifo_out_ready),            //  output,   width = 1,         rf_sink.ready
		.rf_sink_valid           (modular_sgdma_dispatcher_0_csr_agent_rsp_fifo_out_valid),            //   input,   width = 1,                .valid
		.rf_sink_startofpacket   (modular_sgdma_dispatcher_0_csr_agent_rsp_fifo_out_startofpacket),    //   input,   width = 1,                .startofpacket
		.rf_sink_endofpacket     (modular_sgdma_dispatcher_0_csr_agent_rsp_fifo_out_endofpacket),      //   input,   width = 1,                .endofpacket
		.rf_sink_data            (modular_sgdma_dispatcher_0_csr_agent_rsp_fifo_out_data),             //   input,  width = 92,                .data
		.rf_source_ready         (modular_sgdma_dispatcher_0_csr_agent_rf_source_ready),               //   input,   width = 1,       rf_source.ready
		.rf_source_valid         (modular_sgdma_dispatcher_0_csr_agent_rf_source_valid),               //  output,   width = 1,                .valid
		.rf_source_startofpacket (modular_sgdma_dispatcher_0_csr_agent_rf_source_startofpacket),       //  output,   width = 1,                .startofpacket
		.rf_source_endofpacket   (modular_sgdma_dispatcher_0_csr_agent_rf_source_endofpacket),         //  output,   width = 1,                .endofpacket
		.rf_source_data          (modular_sgdma_dispatcher_0_csr_agent_rf_source_data),                //  output,  width = 92,                .data
		.rdata_fifo_sink_ready   (modular_sgdma_dispatcher_0_csr_agent_rdata_fifo_src_ready),          //  output,   width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (modular_sgdma_dispatcher_0_csr_agent_rdata_fifo_src_valid),          //   input,   width = 1,                .valid
		.rdata_fifo_sink_data    (modular_sgdma_dispatcher_0_csr_agent_rdata_fifo_src_data),           //   input,  width = 34,                .data
		.rdata_fifo_src_ready    (modular_sgdma_dispatcher_0_csr_agent_rdata_fifo_src_ready),          //   input,   width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (modular_sgdma_dispatcher_0_csr_agent_rdata_fifo_src_valid),          //  output,   width = 1,                .valid
		.rdata_fifo_src_data     (modular_sgdma_dispatcher_0_csr_agent_rdata_fifo_src_data),           //  output,  width = 34,                .data
		.m0_response             (2'b00),                                                              // (terminated),                              
		.m0_writeresponsevalid   (1'b0),                                                               // (terminated),                              
		.rdata_fifo_sink_error   (1'b0)                                                                // (terminated),                              
	);

	msgdma_bbb_altera_avalon_sc_fifo_191_e5eqkcq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (92),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) modular_sgdma_dispatcher_0_csr_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                                     //   input,   width = 1,       clk.clk
		.reset             (csr_reset_reset_bridge_in_reset_reset),                           //   input,   width = 1, clk_reset.reset
		.in_data           (modular_sgdma_dispatcher_0_csr_agent_rf_source_data),             //   input,  width = 92,        in.data
		.in_valid          (modular_sgdma_dispatcher_0_csr_agent_rf_source_valid),            //   input,   width = 1,          .valid
		.in_ready          (modular_sgdma_dispatcher_0_csr_agent_rf_source_ready),            //  output,   width = 1,          .ready
		.in_startofpacket  (modular_sgdma_dispatcher_0_csr_agent_rf_source_startofpacket),    //   input,   width = 1,          .startofpacket
		.in_endofpacket    (modular_sgdma_dispatcher_0_csr_agent_rf_source_endofpacket),      //   input,   width = 1,          .endofpacket
		.out_data          (modular_sgdma_dispatcher_0_csr_agent_rsp_fifo_out_data),          //  output,  width = 92,       out.data
		.out_valid         (modular_sgdma_dispatcher_0_csr_agent_rsp_fifo_out_valid),         //  output,   width = 1,          .valid
		.out_ready         (modular_sgdma_dispatcher_0_csr_agent_rsp_fifo_out_ready),         //   input,   width = 1,          .ready
		.out_startofpacket (modular_sgdma_dispatcher_0_csr_agent_rsp_fifo_out_startofpacket), //  output,   width = 1,          .startofpacket
		.out_endofpacket   (modular_sgdma_dispatcher_0_csr_agent_rsp_fifo_out_endofpacket),   //  output,   width = 1,          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated),                        
		.csr_read          (1'b0),                                                            // (terminated),                        
		.csr_write         (1'b0),                                                            // (terminated),                        
		.csr_readdata      (),                                                                // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated),                        
		.almost_full_data  (),                                                                // (terminated),                        
		.almost_empty_data (),                                                                // (terminated),                        
		.in_empty          (1'b0),                                                            // (terminated),                        
		.out_empty         (),                                                                // (terminated),                        
		.in_error          (1'b0),                                                            // (terminated),                        
		.out_error         (),                                                                // (terminated),                        
		.in_channel        (1'b0),                                                            // (terminated),                        
		.out_channel       ()                                                                 // (terminated),                        
	);

	msgdma_bbb_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (333),
		.PKT_ORI_BURST_SIZE_L      (331),
		.PKT_RESPONSE_STATUS_H     (330),
		.PKT_RESPONSE_STATUS_L     (329),
		.PKT_BURST_SIZE_H          (310),
		.PKT_BURST_SIZE_L          (308),
		.PKT_TRANS_LOCK            (299),
		.PKT_BEGIN_BURST           (315),
		.PKT_PROTECTION_H          (324),
		.PKT_PROTECTION_L          (322),
		.PKT_BURSTWRAP_H           (307),
		.PKT_BURSTWRAP_L           (307),
		.PKT_BYTE_CNT_H            (306),
		.PKT_BYTE_CNT_L            (301),
		.PKT_ADDR_H                (294),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (295),
		.PKT_TRANS_POSTED          (296),
		.PKT_TRANS_WRITE           (297),
		.PKT_TRANS_READ            (298),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (318),
		.PKT_SRC_ID_L              (317),
		.PKT_DEST_ID_H             (320),
		.PKT_DEST_ID_L             (319),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (3),
		.ST_DATA_W                 (343),
		.AVS_BURSTCOUNT_W          (6),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) modular_sgdma_dispatcher_0_descriptor_slave_agent (
		.clk                     (clk_clk_clk),                                                                     //   input,    width = 1,             clk.clk
		.reset                   (csr_reset_reset_bridge_in_reset_reset),                                           //   input,    width = 1,       clk_reset.reset
		.m0_address              (modular_sgdma_dispatcher_0_descriptor_slave_agent_m0_address),                    //  output,    width = 7,              m0.address
		.m0_burstcount           (modular_sgdma_dispatcher_0_descriptor_slave_agent_m0_burstcount),                 //  output,    width = 6,                .burstcount
		.m0_byteenable           (modular_sgdma_dispatcher_0_descriptor_slave_agent_m0_byteenable),                 //  output,   width = 32,                .byteenable
		.m0_debugaccess          (modular_sgdma_dispatcher_0_descriptor_slave_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (modular_sgdma_dispatcher_0_descriptor_slave_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (modular_sgdma_dispatcher_0_descriptor_slave_agent_m0_readdata),                   //   input,  width = 256,                .readdata
		.m0_readdatavalid        (modular_sgdma_dispatcher_0_descriptor_slave_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (modular_sgdma_dispatcher_0_descriptor_slave_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (modular_sgdma_dispatcher_0_descriptor_slave_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (modular_sgdma_dispatcher_0_descriptor_slave_agent_m0_writedata),                  //  output,  width = 256,                .writedata
		.m0_write                (modular_sgdma_dispatcher_0_descriptor_slave_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (modular_sgdma_dispatcher_0_descriptor_slave_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (modular_sgdma_dispatcher_0_descriptor_slave_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (modular_sgdma_dispatcher_0_descriptor_slave_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (modular_sgdma_dispatcher_0_descriptor_slave_agent_rp_data),                       //  output,  width = 343,                .data
		.rp_startofpacket        (modular_sgdma_dispatcher_0_descriptor_slave_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (modular_sgdma_dispatcher_0_descriptor_slave_cmd_width_adapter_src_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (modular_sgdma_dispatcher_0_descriptor_slave_cmd_width_adapter_src_valid),         //   input,    width = 1,                .valid
		.cp_data                 (modular_sgdma_dispatcher_0_descriptor_slave_cmd_width_adapter_src_data),          //   input,  width = 343,                .data
		.cp_startofpacket        (modular_sgdma_dispatcher_0_descriptor_slave_cmd_width_adapter_src_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (modular_sgdma_dispatcher_0_descriptor_slave_cmd_width_adapter_src_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (modular_sgdma_dispatcher_0_descriptor_slave_cmd_width_adapter_src_channel),       //   input,    width = 3,                .channel
		.rf_sink_ready           (modular_sgdma_dispatcher_0_descriptor_slave_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (modular_sgdma_dispatcher_0_descriptor_slave_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (modular_sgdma_dispatcher_0_descriptor_slave_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (modular_sgdma_dispatcher_0_descriptor_slave_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (modular_sgdma_dispatcher_0_descriptor_slave_agent_rsp_fifo_out_data),             //   input,  width = 344,                .data
		.rf_source_ready         (modular_sgdma_dispatcher_0_descriptor_slave_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (modular_sgdma_dispatcher_0_descriptor_slave_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (modular_sgdma_dispatcher_0_descriptor_slave_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (modular_sgdma_dispatcher_0_descriptor_slave_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (modular_sgdma_dispatcher_0_descriptor_slave_agent_rf_source_data),                //  output,  width = 344,                .data
		.rdata_fifo_sink_ready   (modular_sgdma_dispatcher_0_descriptor_slave_agent_rdata_fifo_src_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (modular_sgdma_dispatcher_0_descriptor_slave_agent_rdata_fifo_src_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (modular_sgdma_dispatcher_0_descriptor_slave_agent_rdata_fifo_src_data),           //   input,  width = 258,                .data
		.rdata_fifo_src_ready    (modular_sgdma_dispatcher_0_descriptor_slave_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (modular_sgdma_dispatcher_0_descriptor_slave_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (modular_sgdma_dispatcher_0_descriptor_slave_agent_rdata_fifo_src_data),           //  output,  width = 258,                .data
		.m0_response             (2'b00),                                                                           // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                            // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                             // (terminated),                               
	);

	msgdma_bbb_altera_avalon_sc_fifo_191_e5eqkcq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (344),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) modular_sgdma_dispatcher_0_descriptor_slave_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                                                  //   input,    width = 1,       clk.clk
		.reset             (csr_reset_reset_bridge_in_reset_reset),                                        //   input,    width = 1, clk_reset.reset
		.in_data           (modular_sgdma_dispatcher_0_descriptor_slave_agent_rf_source_data),             //   input,  width = 344,        in.data
		.in_valid          (modular_sgdma_dispatcher_0_descriptor_slave_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (modular_sgdma_dispatcher_0_descriptor_slave_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (modular_sgdma_dispatcher_0_descriptor_slave_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (modular_sgdma_dispatcher_0_descriptor_slave_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (modular_sgdma_dispatcher_0_descriptor_slave_agent_rsp_fifo_out_data),          //  output,  width = 344,       out.data
		.out_valid         (modular_sgdma_dispatcher_0_descriptor_slave_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (modular_sgdma_dispatcher_0_descriptor_slave_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (modular_sgdma_dispatcher_0_descriptor_slave_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (modular_sgdma_dispatcher_0_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                        // (terminated),                         
		.csr_read          (1'b0),                                                                         // (terminated),                         
		.csr_write         (1'b0),                                                                         // (terminated),                         
		.csr_readdata      (),                                                                             // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                         // (terminated),                         
		.almost_full_data  (),                                                                             // (terminated),                         
		.almost_empty_data (),                                                                             // (terminated),                         
		.in_empty          (1'b0),                                                                         // (terminated),                         
		.out_empty         (),                                                                             // (terminated),                         
		.in_error          (1'b0),                                                                         // (terminated),                         
		.out_error         (),                                                                             // (terminated),                         
		.in_channel        (1'b0),                                                                         // (terminated),                         
		.out_channel       ()                                                                              // (terminated),                         
	);

	msgdma_bbb_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (83),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (91),
		.PKT_BYTE_CNT_H            (90),
		.PKT_BYTE_CNT_L            (85),
		.PKT_ADDR_H                (78),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (79),
		.PKT_TRANS_POSTED          (80),
		.PKT_TRANS_WRITE           (81),
		.PKT_TRANS_READ            (82),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (104),
		.PKT_DEST_ID_L             (103),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (3),
		.ST_DATA_W                 (127),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent (
		.clk                     (clk_clk_clk),                                                                   //   input,    width = 1,             clk.clk
		.reset                   (csr_reset_reset_bridge_in_reset_reset),                                         //   input,    width = 1,       clk_reset.reset
		.m0_address              (msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_address),                 //  output,    width = 7,              m0.address
		.m0_burstcount           (msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_burstcount),              //  output,    width = 4,                .burstcount
		.m0_byteenable           (msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_byteenable),              //  output,    width = 8,                .byteenable
		.m0_debugaccess          (msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_readdata),                //   input,   width = 64,                .readdata
		.m0_readdatavalid        (msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_writedata),               //  output,   width = 64,                .writedata
		.m0_write                (msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_rp_data),                    //  output,  width = 127,                .data
		.rp_startofpacket        (msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                                         //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                                         //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_002_src_data),                                                          //   input,  width = 127,                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                                                 //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                                                   //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                                       //   input,    width = 3,                .channel
		.rf_sink_ready           (msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo_out_data),          //   input,  width = 128,                .data
		.rf_source_ready         (msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_rf_source_data),             //  output,  width = 128,                .data
		.rdata_fifo_sink_ready   (msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_rdata_fifo_src_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_rdata_fifo_src_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_rdata_fifo_src_data),        //   input,   width = 66,                .data
		.rdata_fifo_src_ready    (msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_rdata_fifo_src_data),        //  output,   width = 66,                .data
		.m0_response             (2'b00),                                                                         // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                          // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                           // (terminated),                               
	);

	msgdma_bbb_altera_avalon_sc_fifo_191_e5eqkcq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (128),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                                                   //   input,    width = 1,       clk.clk
		.reset             (csr_reset_reset_bridge_in_reset_reset),                                         //   input,    width = 1, clk_reset.reset
		.in_data           (msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_rf_source_data),             //   input,  width = 128,        in.data
		.in_valid          (msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo_out_data),          //  output,  width = 128,       out.data
		.out_valid         (msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                         // (terminated),                         
		.csr_read          (1'b0),                                                                          // (terminated),                         
		.csr_write         (1'b0),                                                                          // (terminated),                         
		.csr_readdata      (),                                                                              // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                          // (terminated),                         
		.almost_full_data  (),                                                                              // (terminated),                         
		.almost_empty_data (),                                                                              // (terminated),                         
		.in_empty          (1'b0),                                                                          // (terminated),                         
		.out_empty         (),                                                                              // (terminated),                         
		.in_error          (1'b0),                                                                          // (terminated),                         
		.out_error         (),                                                                              // (terminated),                         
		.in_channel        (1'b0),                                                                          // (terminated),                         
		.out_channel       ()                                                                               // (terminated),                         
	);

	msgdma_bbb_altera_merlin_router_191_7nsl54q router (
		.sink_ready         (csr_m0_agent_cp_ready),                 //  output,    width = 1,      sink.ready
		.sink_valid         (csr_m0_agent_cp_valid),                 //   input,    width = 1,          .valid
		.sink_data          (csr_m0_agent_cp_data),                  //   input,  width = 127,          .data
		.sink_startofpacket (csr_m0_agent_cp_startofpacket),         //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (csr_m0_agent_cp_endofpacket),           //   input,    width = 1,          .endofpacket
		.clk                (clk_clk_clk),                           //   input,    width = 1,       clk.clk
		.reset              (csr_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_src_ready),                      //   input,    width = 1,       src.ready
		.src_valid          (router_src_valid),                      //  output,    width = 1,          .valid
		.src_data           (router_src_data),                       //  output,  width = 127,          .data
		.src_channel        (router_src_channel),                    //  output,    width = 3,          .channel
		.src_startofpacket  (router_src_startofpacket),              //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                 //  output,    width = 1,          .endofpacket
	);

	msgdma_bbb_altera_merlin_router_191_bjgub5i router_001 (
		.sink_ready         (modular_sgdma_dispatcher_0_csr_agent_rp_ready),         //  output,   width = 1,      sink.ready
		.sink_valid         (modular_sgdma_dispatcher_0_csr_agent_rp_valid),         //   input,   width = 1,          .valid
		.sink_data          (modular_sgdma_dispatcher_0_csr_agent_rp_data),          //   input,  width = 91,          .data
		.sink_startofpacket (modular_sgdma_dispatcher_0_csr_agent_rp_startofpacket), //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (modular_sgdma_dispatcher_0_csr_agent_rp_endofpacket),   //   input,   width = 1,          .endofpacket
		.clk                (clk_clk_clk),                                           //   input,   width = 1,       clk.clk
		.reset              (csr_reset_reset_bridge_in_reset_reset),                 //   input,   width = 1, clk_reset.reset
		.src_ready          (router_001_src_ready),                                  //   input,   width = 1,       src.ready
		.src_valid          (router_001_src_valid),                                  //  output,   width = 1,          .valid
		.src_data           (router_001_src_data),                                   //  output,  width = 91,          .data
		.src_channel        (router_001_src_channel),                                //  output,   width = 3,          .channel
		.src_startofpacket  (router_001_src_startofpacket),                          //  output,   width = 1,          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                             //  output,   width = 1,          .endofpacket
	);

	msgdma_bbb_altera_merlin_router_191_k5ic25a router_002 (
		.sink_ready         (modular_sgdma_dispatcher_0_descriptor_slave_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (modular_sgdma_dispatcher_0_descriptor_slave_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (modular_sgdma_dispatcher_0_descriptor_slave_agent_rp_data),          //   input,  width = 343,          .data
		.sink_startofpacket (modular_sgdma_dispatcher_0_descriptor_slave_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (modular_sgdma_dispatcher_0_descriptor_slave_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clk_clk_clk),                                                        //   input,    width = 1,       clk.clk
		.reset              (csr_reset_reset_bridge_in_reset_reset),                              //   input,    width = 1, clk_reset.reset
		.src_ready          (router_002_src_ready),                                               //   input,    width = 1,       src.ready
		.src_valid          (router_002_src_valid),                                               //  output,    width = 1,          .valid
		.src_data           (router_002_src_data),                                                //  output,  width = 343,          .data
		.src_channel        (router_002_src_channel),                                             //  output,    width = 3,          .channel
		.src_startofpacket  (router_002_src_startofpacket),                                       //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                          //  output,    width = 1,          .endofpacket
	);

	msgdma_bbb_altera_merlin_router_191_qypc7ni router_003 (
		.sink_ready         (msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_rp_data),          //   input,  width = 127,          .data
		.sink_startofpacket (msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (msgdma_bbb_afu_id_avmm_slave_0_afu_cfg_slave_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clk_clk_clk),                                                         //   input,    width = 1,       clk.clk
		.reset              (csr_reset_reset_bridge_in_reset_reset),                               //   input,    width = 1, clk_reset.reset
		.src_ready          (router_003_src_ready),                                                //   input,    width = 1,       src.ready
		.src_valid          (router_003_src_valid),                                                //  output,    width = 1,          .valid
		.src_data           (router_003_src_data),                                                 //  output,  width = 127,          .data
		.src_channel        (router_003_src_channel),                                              //  output,    width = 3,          .channel
		.src_startofpacket  (router_003_src_startofpacket),                                        //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                           //  output,    width = 1,          .endofpacket
	);

	msgdma_bbb_altera_merlin_traffic_limiter_191_kcba44q #(
		.SYNC_RESET                (0),
		.PKT_DEST_ID_H             (104),
		.PKT_DEST_ID_L             (103),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (101),
		.PKT_BYTE_CNT_H            (90),
		.PKT_BYTE_CNT_L            (85),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_TRANS_POSTED          (80),
		.PKT_TRANS_WRITE           (81),
		.MAX_OUTSTANDING_RESPONSES (4),
		.PIPELINED                 (0),
		.ST_DATA_W                 (127),
		.ST_CHANNEL_W              (3),
		.VALID_WIDTH               (3),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) csr_m0_limiter (
		.clk                    (clk_clk_clk),                           //   input,    width = 1,       clk.clk
		.reset                  (csr_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                      //  output,    width = 1,  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                      //   input,    width = 1,          .valid
		.cmd_sink_data          (router_src_data),                       //   input,  width = 127,          .data
		.cmd_sink_channel       (router_src_channel),                    //   input,    width = 3,          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),              //   input,    width = 1,          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                //   input,    width = 1,          .endofpacket
		.cmd_src_ready          (csr_m0_limiter_cmd_src_ready),          //   input,    width = 1,   cmd_src.ready
		.cmd_src_data           (csr_m0_limiter_cmd_src_data),           //  output,  width = 127,          .data
		.cmd_src_channel        (csr_m0_limiter_cmd_src_channel),        //  output,    width = 3,          .channel
		.cmd_src_startofpacket  (csr_m0_limiter_cmd_src_startofpacket),  //  output,    width = 1,          .startofpacket
		.cmd_src_endofpacket    (csr_m0_limiter_cmd_src_endofpacket),    //  output,    width = 1,          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                     //  output,    width = 1,  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                     //   input,    width = 1,          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                   //   input,    width = 3,          .channel
		.rsp_sink_data          (rsp_mux_src_data),                      //   input,  width = 127,          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),             //   input,    width = 1,          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),               //   input,    width = 1,          .endofpacket
		.rsp_src_ready          (csr_m0_limiter_rsp_src_ready),          //   input,    width = 1,   rsp_src.ready
		.rsp_src_valid          (csr_m0_limiter_rsp_src_valid),          //  output,    width = 1,          .valid
		.rsp_src_data           (csr_m0_limiter_rsp_src_data),           //  output,  width = 127,          .data
		.rsp_src_channel        (csr_m0_limiter_rsp_src_channel),        //  output,    width = 3,          .channel
		.rsp_src_startofpacket  (csr_m0_limiter_rsp_src_startofpacket),  //  output,    width = 1,          .startofpacket
		.rsp_src_endofpacket    (csr_m0_limiter_rsp_src_endofpacket),    //  output,    width = 1,          .endofpacket
		.cmd_src_valid          (csr_m0_limiter_cmd_valid_data)          //  output,    width = 3, cmd_valid.data
	);

	msgdma_bbb_altera_merlin_burst_adapter_191_swp6qdq #(
		.PKT_ADDR_H                (42),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (63),
		.PKT_BYTE_CNT_H            (54),
		.PKT_BYTE_CNT_L            (49),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (58),
		.PKT_BURST_SIZE_L          (56),
		.PKT_BURST_TYPE_H          (60),
		.PKT_BURST_TYPE_L          (59),
		.PKT_BURSTWRAP_H           (55),
		.PKT_BURSTWRAP_L           (55),
		.PKT_TRANS_COMPRESSED_READ (43),
		.PKT_TRANS_WRITE           (45),
		.PKT_TRANS_READ            (46),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (91),
		.ST_CHANNEL_W              (3),
		.OUT_BYTE_CNT_H            (51),
		.OUT_BURSTWRAP_H           (55),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) modular_sgdma_dispatcher_0_csr_burst_adapter (
		.clk                   (clk_clk_clk),                                                        //   input,   width = 1,       cr0.clk
		.reset                 (csr_reset_reset_bridge_in_reset_reset),                              //   input,   width = 1, cr0_reset.reset
		.sink0_valid           (modular_sgdma_dispatcher_0_csr_cmd_width_adapter_src_valid),         //   input,   width = 1,     sink0.valid
		.sink0_data            (modular_sgdma_dispatcher_0_csr_cmd_width_adapter_src_data),          //   input,  width = 91,          .data
		.sink0_channel         (modular_sgdma_dispatcher_0_csr_cmd_width_adapter_src_channel),       //   input,   width = 3,          .channel
		.sink0_startofpacket   (modular_sgdma_dispatcher_0_csr_cmd_width_adapter_src_startofpacket), //   input,   width = 1,          .startofpacket
		.sink0_endofpacket     (modular_sgdma_dispatcher_0_csr_cmd_width_adapter_src_endofpacket),   //   input,   width = 1,          .endofpacket
		.sink0_ready           (modular_sgdma_dispatcher_0_csr_cmd_width_adapter_src_ready),         //  output,   width = 1,          .ready
		.source0_valid         (modular_sgdma_dispatcher_0_csr_burst_adapter_source0_valid),         //  output,   width = 1,   source0.valid
		.source0_data          (modular_sgdma_dispatcher_0_csr_burst_adapter_source0_data),          //  output,  width = 91,          .data
		.source0_channel       (modular_sgdma_dispatcher_0_csr_burst_adapter_source0_channel),       //  output,   width = 3,          .channel
		.source0_startofpacket (modular_sgdma_dispatcher_0_csr_burst_adapter_source0_startofpacket), //  output,   width = 1,          .startofpacket
		.source0_endofpacket   (modular_sgdma_dispatcher_0_csr_burst_adapter_source0_endofpacket),   //  output,   width = 1,          .endofpacket
		.source0_ready         (modular_sgdma_dispatcher_0_csr_burst_adapter_source0_ready)          //   input,   width = 1,          .ready
	);

	msgdma_bbb_altera_merlin_demultiplexer_191_ukvrogq cmd_demux (
		.clk                (clk_clk_clk),                           //   input,    width = 1,        clk.clk
		.reset              (csr_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  clk_reset.reset
		.sink_ready         (csr_m0_limiter_cmd_src_ready),          //  output,    width = 1,       sink.ready
		.sink_channel       (csr_m0_limiter_cmd_src_channel),        //   input,    width = 3,           .channel
		.sink_data          (csr_m0_limiter_cmd_src_data),           //   input,  width = 127,           .data
		.sink_startofpacket (csr_m0_limiter_cmd_src_startofpacket),  //   input,    width = 1,           .startofpacket
		.sink_endofpacket   (csr_m0_limiter_cmd_src_endofpacket),    //   input,    width = 1,           .endofpacket
		.sink_valid         (csr_m0_limiter_cmd_valid_data),         //   input,    width = 3, sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                  //   input,    width = 1,       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                  //  output,    width = 1,           .valid
		.src0_data          (cmd_demux_src0_data),                   //  output,  width = 127,           .data
		.src0_channel       (cmd_demux_src0_channel),                //  output,    width = 3,           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),          //  output,    width = 1,           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),            //  output,    width = 1,           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                  //   input,    width = 1,       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                  //  output,    width = 1,           .valid
		.src1_data          (cmd_demux_src1_data),                   //  output,  width = 127,           .data
		.src1_channel       (cmd_demux_src1_channel),                //  output,    width = 3,           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),          //  output,    width = 1,           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),            //  output,    width = 1,           .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                  //   input,    width = 1,       src2.ready
		.src2_valid         (cmd_demux_src2_valid),                  //  output,    width = 1,           .valid
		.src2_data          (cmd_demux_src2_data),                   //  output,  width = 127,           .data
		.src2_channel       (cmd_demux_src2_channel),                //  output,    width = 3,           .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),          //  output,    width = 1,           .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket)             //  output,    width = 1,           .endofpacket
	);

	msgdma_bbb_altera_merlin_multiplexer_191_37uvtri cmd_mux (
		.clk                 (clk_clk_clk),                           //   input,    width = 1,       clk.clk
		.reset               (csr_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                     //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_src_valid),                     //  output,    width = 1,          .valid
		.src_data            (cmd_mux_src_data),                      //  output,  width = 127,          .data
		.src_channel         (cmd_mux_src_channel),                   //  output,    width = 3,          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),             //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),               //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                  //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                  //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src0_channel),                //   input,    width = 3,          .channel
		.sink0_data          (cmd_demux_src0_data),                   //   input,  width = 127,          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),          //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)             //   input,    width = 1,          .endofpacket
	);

	msgdma_bbb_altera_merlin_multiplexer_191_37uvtri cmd_mux_001 (
		.clk                 (clk_clk_clk),                           //   input,    width = 1,       clk.clk
		.reset               (csr_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                 //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_001_src_valid),                 //  output,    width = 1,          .valid
		.src_data            (cmd_mux_001_src_data),                  //  output,  width = 127,          .data
		.src_channel         (cmd_mux_001_src_channel),               //  output,    width = 3,          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),         //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),           //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                  //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                  //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src1_channel),                //   input,    width = 3,          .channel
		.sink0_data          (cmd_demux_src1_data),                   //   input,  width = 127,          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),          //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)             //   input,    width = 1,          .endofpacket
	);

	msgdma_bbb_altera_merlin_multiplexer_191_37uvtri cmd_mux_002 (
		.clk                 (clk_clk_clk),                           //   input,    width = 1,       clk.clk
		.reset               (csr_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                 //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_002_src_valid),                 //  output,    width = 1,          .valid
		.src_data            (cmd_mux_002_src_data),                  //  output,  width = 127,          .data
		.src_channel         (cmd_mux_002_src_channel),               //  output,    width = 3,          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),         //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),           //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                  //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                  //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src2_channel),                //   input,    width = 3,          .channel
		.sink0_data          (cmd_demux_src2_data),                   //   input,  width = 127,          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),          //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket)             //   input,    width = 1,          .endofpacket
	);

	msgdma_bbb_altera_merlin_demultiplexer_191_vtbwn6q rsp_demux (
		.clk                (clk_clk_clk),                                                        //   input,    width = 1,       clk.clk
		.reset              (csr_reset_reset_bridge_in_reset_reset),                              //   input,    width = 1, clk_reset.reset
		.sink_ready         (modular_sgdma_dispatcher_0_csr_rsp_width_adapter_src_ready),         //  output,    width = 1,      sink.ready
		.sink_channel       (modular_sgdma_dispatcher_0_csr_rsp_width_adapter_src_channel),       //   input,    width = 3,          .channel
		.sink_data          (modular_sgdma_dispatcher_0_csr_rsp_width_adapter_src_data),          //   input,  width = 127,          .data
		.sink_startofpacket (modular_sgdma_dispatcher_0_csr_rsp_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (modular_sgdma_dispatcher_0_csr_rsp_width_adapter_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.sink_valid         (modular_sgdma_dispatcher_0_csr_rsp_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_src0_ready),                                               //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                               //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_src0_data),                                                //  output,  width = 127,          .data
		.src0_channel       (rsp_demux_src0_channel),                                             //  output,    width = 3,          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                       //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                                          //  output,    width = 1,          .endofpacket
	);

	msgdma_bbb_altera_merlin_demultiplexer_191_vtbwn6q rsp_demux_001 (
		.clk                (clk_clk_clk),                                                                     //   input,    width = 1,       clk.clk
		.reset              (csr_reset_reset_bridge_in_reset_reset),                                           //   input,    width = 1, clk_reset.reset
		.sink_ready         (modular_sgdma_dispatcher_0_descriptor_slave_rsp_width_adapter_src_ready),         //  output,    width = 1,      sink.ready
		.sink_channel       (modular_sgdma_dispatcher_0_descriptor_slave_rsp_width_adapter_src_channel),       //   input,    width = 3,          .channel
		.sink_data          (modular_sgdma_dispatcher_0_descriptor_slave_rsp_width_adapter_src_data),          //   input,  width = 127,          .data
		.sink_startofpacket (modular_sgdma_dispatcher_0_descriptor_slave_rsp_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (modular_sgdma_dispatcher_0_descriptor_slave_rsp_width_adapter_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.sink_valid         (modular_sgdma_dispatcher_0_descriptor_slave_rsp_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                                        //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                                        //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_001_src0_data),                                                         //  output,  width = 127,          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                                      //  output,    width = 3,          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                                                //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                                                   //  output,    width = 1,          .endofpacket
	);

	msgdma_bbb_altera_merlin_demultiplexer_191_vtbwn6q rsp_demux_002 (
		.clk                (clk_clk_clk),                           //   input,    width = 1,       clk.clk
		.reset              (csr_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_003_src_ready),                  //  output,    width = 1,      sink.ready
		.sink_channel       (router_003_src_channel),                //   input,    width = 3,          .channel
		.sink_data          (router_003_src_data),                   //   input,  width = 127,          .data
		.sink_startofpacket (router_003_src_startofpacket),          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),            //   input,    width = 1,          .endofpacket
		.sink_valid         (router_003_src_valid),                  //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_002_src0_ready),              //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),              //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_002_src0_data),               //  output,  width = 127,          .data
		.src0_channel       (rsp_demux_002_src0_channel),            //  output,    width = 3,          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),      //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)         //  output,    width = 1,          .endofpacket
	);

	msgdma_bbb_altera_merlin_multiplexer_191_3dzcbwq rsp_mux (
		.clk                 (clk_clk_clk),                           //   input,    width = 1,       clk.clk
		.reset               (csr_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                     //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_src_valid),                     //  output,    width = 1,          .valid
		.src_data            (rsp_mux_src_data),                      //  output,  width = 127,          .data
		.src_channel         (rsp_mux_src_channel),                   //  output,    width = 3,          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),             //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),               //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                  //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                  //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_src0_channel),                //   input,    width = 3,          .channel
		.sink0_data          (rsp_demux_src0_data),                   //   input,  width = 127,          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),          //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),            //   input,    width = 1,          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),              //  output,    width = 1,     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),              //   input,    width = 1,          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),            //   input,    width = 3,          .channel
		.sink1_data          (rsp_demux_001_src0_data),               //   input,  width = 127,          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),      //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),        //   input,    width = 1,          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),              //  output,    width = 1,     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),              //   input,    width = 1,          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),            //   input,    width = 3,          .channel
		.sink2_data          (rsp_demux_002_src0_data),               //   input,  width = 127,          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),      //   input,    width = 1,          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket)         //   input,    width = 1,          .endofpacket
	);

	msgdma_bbb_altera_merlin_width_adapter_191_xe36m3y #(
		.IN_PKT_ADDR_H                 (78),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (90),
		.IN_PKT_BYTE_CNT_L             (85),
		.IN_PKT_TRANS_COMPRESSED_READ  (79),
		.IN_PKT_TRANS_WRITE            (81),
		.IN_PKT_BURSTWRAP_H            (91),
		.IN_PKT_BURSTWRAP_L            (91),
		.IN_PKT_BURST_SIZE_H           (94),
		.IN_PKT_BURST_SIZE_L           (92),
		.IN_PKT_RESPONSE_STATUS_H      (114),
		.IN_PKT_RESPONSE_STATUS_L      (113),
		.IN_PKT_TRANS_EXCLUSIVE        (84),
		.IN_PKT_BURST_TYPE_H           (96),
		.IN_PKT_BURST_TYPE_L           (95),
		.IN_PKT_ORI_BURST_SIZE_L       (115),
		.IN_PKT_ORI_BURST_SIZE_H       (117),
		.IN_ST_DATA_W                  (127),
		.OUT_PKT_ADDR_H                (294),
		.OUT_PKT_ADDR_L                (288),
		.OUT_PKT_DATA_H                (255),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (287),
		.OUT_PKT_BYTEEN_L              (256),
		.OUT_PKT_BYTE_CNT_H            (306),
		.OUT_PKT_BYTE_CNT_L            (301),
		.OUT_PKT_TRANS_COMPRESSED_READ (295),
		.OUT_PKT_BURST_SIZE_H          (310),
		.OUT_PKT_BURST_SIZE_L          (308),
		.OUT_PKT_RESPONSE_STATUS_H     (330),
		.OUT_PKT_RESPONSE_STATUS_L     (329),
		.OUT_PKT_TRANS_EXCLUSIVE       (300),
		.OUT_PKT_BURST_TYPE_H          (312),
		.OUT_PKT_BURST_TYPE_L          (311),
		.OUT_PKT_ORI_BURST_SIZE_L      (331),
		.OUT_PKT_ORI_BURST_SIZE_H      (333),
		.OUT_ST_DATA_W                 (343),
		.ST_CHANNEL_W                  (3),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) modular_sgdma_dispatcher_0_descriptor_slave_cmd_width_adapter (
		.clk                  (clk_clk_clk),                                                                     //   input,    width = 1,       clk.clk
		.reset                (csr_reset_reset_bridge_in_reset_reset),                                           //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_mux_001_src_valid),                                                           //   input,    width = 1,      sink.valid
		.in_channel           (cmd_mux_001_src_channel),                                                         //   input,    width = 3,          .channel
		.in_startofpacket     (cmd_mux_001_src_startofpacket),                                                   //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_mux_001_src_endofpacket),                                                     //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_mux_001_src_ready),                                                           //  output,    width = 1,          .ready
		.in_data              (cmd_mux_001_src_data),                                                            //   input,  width = 127,          .data
		.out_endofpacket      (modular_sgdma_dispatcher_0_descriptor_slave_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (modular_sgdma_dispatcher_0_descriptor_slave_cmd_width_adapter_src_data),          //  output,  width = 343,          .data
		.out_channel          (modular_sgdma_dispatcher_0_descriptor_slave_cmd_width_adapter_src_channel),       //  output,    width = 3,          .channel
		.out_valid            (modular_sgdma_dispatcher_0_descriptor_slave_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (modular_sgdma_dispatcher_0_descriptor_slave_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (modular_sgdma_dispatcher_0_descriptor_slave_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                           // (terminated),                         
	);

	msgdma_bbb_altera_merlin_width_adapter_191_tiejfvy #(
		.IN_PKT_ADDR_H                 (42),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (54),
		.IN_PKT_BYTE_CNT_L             (49),
		.IN_PKT_TRANS_COMPRESSED_READ  (43),
		.IN_PKT_TRANS_WRITE            (45),
		.IN_PKT_BURSTWRAP_H            (55),
		.IN_PKT_BURSTWRAP_L            (55),
		.IN_PKT_BURST_SIZE_H           (58),
		.IN_PKT_BURST_SIZE_L           (56),
		.IN_PKT_RESPONSE_STATUS_H      (78),
		.IN_PKT_RESPONSE_STATUS_L      (77),
		.IN_PKT_TRANS_EXCLUSIVE        (48),
		.IN_PKT_BURST_TYPE_H           (60),
		.IN_PKT_BURST_TYPE_L           (59),
		.IN_PKT_ORI_BURST_SIZE_L       (79),
		.IN_PKT_ORI_BURST_SIZE_H       (81),
		.IN_ST_DATA_W                  (91),
		.OUT_PKT_ADDR_H                (78),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (90),
		.OUT_PKT_BYTE_CNT_L            (85),
		.OUT_PKT_TRANS_COMPRESSED_READ (79),
		.OUT_PKT_BURST_SIZE_H          (94),
		.OUT_PKT_BURST_SIZE_L          (92),
		.OUT_PKT_RESPONSE_STATUS_H     (114),
		.OUT_PKT_RESPONSE_STATUS_L     (113),
		.OUT_PKT_TRANS_EXCLUSIVE       (84),
		.OUT_PKT_BURST_TYPE_H          (96),
		.OUT_PKT_BURST_TYPE_L          (95),
		.OUT_PKT_ORI_BURST_SIZE_L      (115),
		.OUT_PKT_ORI_BURST_SIZE_H      (117),
		.OUT_ST_DATA_W                 (127),
		.ST_CHANNEL_W                  (3),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) modular_sgdma_dispatcher_0_csr_rsp_width_adapter (
		.clk                  (clk_clk_clk),                                                        //   input,    width = 1,       clk.clk
		.reset                (csr_reset_reset_bridge_in_reset_reset),                              //   input,    width = 1, clk_reset.reset
		.in_valid             (router_001_src_valid),                                               //   input,    width = 1,      sink.valid
		.in_channel           (router_001_src_channel),                                             //   input,    width = 3,          .channel
		.in_startofpacket     (router_001_src_startofpacket),                                       //   input,    width = 1,          .startofpacket
		.in_endofpacket       (router_001_src_endofpacket),                                         //   input,    width = 1,          .endofpacket
		.in_ready             (router_001_src_ready),                                               //  output,    width = 1,          .ready
		.in_data              (router_001_src_data),                                                //   input,   width = 91,          .data
		.out_endofpacket      (modular_sgdma_dispatcher_0_csr_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (modular_sgdma_dispatcher_0_csr_rsp_width_adapter_src_data),          //  output,  width = 127,          .data
		.out_channel          (modular_sgdma_dispatcher_0_csr_rsp_width_adapter_src_channel),       //  output,    width = 3,          .channel
		.out_valid            (modular_sgdma_dispatcher_0_csr_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (modular_sgdma_dispatcher_0_csr_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (modular_sgdma_dispatcher_0_csr_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                              // (terminated),                         
	);

	msgdma_bbb_altera_merlin_width_adapter_191_zq7vway #(
		.IN_PKT_ADDR_H                 (294),
		.IN_PKT_ADDR_L                 (288),
		.IN_PKT_DATA_H                 (255),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (287),
		.IN_PKT_BYTEEN_L               (256),
		.IN_PKT_BYTE_CNT_H             (306),
		.IN_PKT_BYTE_CNT_L             (301),
		.IN_PKT_TRANS_COMPRESSED_READ  (295),
		.IN_PKT_TRANS_WRITE            (297),
		.IN_PKT_BURSTWRAP_H            (307),
		.IN_PKT_BURSTWRAP_L            (307),
		.IN_PKT_BURST_SIZE_H           (310),
		.IN_PKT_BURST_SIZE_L           (308),
		.IN_PKT_RESPONSE_STATUS_H      (330),
		.IN_PKT_RESPONSE_STATUS_L      (329),
		.IN_PKT_TRANS_EXCLUSIVE        (300),
		.IN_PKT_BURST_TYPE_H           (312),
		.IN_PKT_BURST_TYPE_L           (311),
		.IN_PKT_ORI_BURST_SIZE_L       (331),
		.IN_PKT_ORI_BURST_SIZE_H       (333),
		.IN_ST_DATA_W                  (343),
		.OUT_PKT_ADDR_H                (78),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (90),
		.OUT_PKT_BYTE_CNT_L            (85),
		.OUT_PKT_TRANS_COMPRESSED_READ (79),
		.OUT_PKT_BURST_SIZE_H          (94),
		.OUT_PKT_BURST_SIZE_L          (92),
		.OUT_PKT_RESPONSE_STATUS_H     (114),
		.OUT_PKT_RESPONSE_STATUS_L     (113),
		.OUT_PKT_TRANS_EXCLUSIVE       (84),
		.OUT_PKT_BURST_TYPE_H          (96),
		.OUT_PKT_BURST_TYPE_L          (95),
		.OUT_PKT_ORI_BURST_SIZE_L      (115),
		.OUT_PKT_ORI_BURST_SIZE_H      (117),
		.OUT_ST_DATA_W                 (127),
		.ST_CHANNEL_W                  (3),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) modular_sgdma_dispatcher_0_descriptor_slave_rsp_width_adapter (
		.clk                  (clk_clk_clk),                                                                     //   input,    width = 1,       clk.clk
		.reset                (csr_reset_reset_bridge_in_reset_reset),                                           //   input,    width = 1, clk_reset.reset
		.in_valid             (router_002_src_valid),                                                            //   input,    width = 1,      sink.valid
		.in_channel           (router_002_src_channel),                                                          //   input,    width = 3,          .channel
		.in_startofpacket     (router_002_src_startofpacket),                                                    //   input,    width = 1,          .startofpacket
		.in_endofpacket       (router_002_src_endofpacket),                                                      //   input,    width = 1,          .endofpacket
		.in_ready             (router_002_src_ready),                                                            //  output,    width = 1,          .ready
		.in_data              (router_002_src_data),                                                             //   input,  width = 343,          .data
		.out_endofpacket      (modular_sgdma_dispatcher_0_descriptor_slave_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (modular_sgdma_dispatcher_0_descriptor_slave_rsp_width_adapter_src_data),          //  output,  width = 127,          .data
		.out_channel          (modular_sgdma_dispatcher_0_descriptor_slave_rsp_width_adapter_src_channel),       //  output,    width = 3,          .channel
		.out_valid            (modular_sgdma_dispatcher_0_descriptor_slave_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (modular_sgdma_dispatcher_0_descriptor_slave_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (modular_sgdma_dispatcher_0_descriptor_slave_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                           // (terminated),                         
	);

	msgdma_bbb_altera_merlin_width_adapter_191_rngqqti #(
		.IN_PKT_ADDR_H                 (78),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (90),
		.IN_PKT_BYTE_CNT_L             (85),
		.IN_PKT_TRANS_COMPRESSED_READ  (79),
		.IN_PKT_TRANS_WRITE            (81),
		.IN_PKT_BURSTWRAP_H            (91),
		.IN_PKT_BURSTWRAP_L            (91),
		.IN_PKT_BURST_SIZE_H           (94),
		.IN_PKT_BURST_SIZE_L           (92),
		.IN_PKT_RESPONSE_STATUS_H      (114),
		.IN_PKT_RESPONSE_STATUS_L      (113),
		.IN_PKT_TRANS_EXCLUSIVE        (84),
		.IN_PKT_BURST_TYPE_H           (96),
		.IN_PKT_BURST_TYPE_L           (95),
		.IN_PKT_ORI_BURST_SIZE_L       (115),
		.IN_PKT_ORI_BURST_SIZE_H       (117),
		.IN_ST_DATA_W                  (127),
		.OUT_PKT_ADDR_H                (42),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (54),
		.OUT_PKT_BYTE_CNT_L            (49),
		.OUT_PKT_TRANS_COMPRESSED_READ (43),
		.OUT_PKT_BURST_SIZE_H          (58),
		.OUT_PKT_BURST_SIZE_L          (56),
		.OUT_PKT_RESPONSE_STATUS_H     (78),
		.OUT_PKT_RESPONSE_STATUS_L     (77),
		.OUT_PKT_TRANS_EXCLUSIVE       (48),
		.OUT_PKT_BURST_TYPE_H          (60),
		.OUT_PKT_BURST_TYPE_L          (59),
		.OUT_PKT_ORI_BURST_SIZE_L      (79),
		.OUT_PKT_ORI_BURST_SIZE_H      (81),
		.OUT_ST_DATA_W                 (91),
		.ST_CHANNEL_W                  (3),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) modular_sgdma_dispatcher_0_csr_cmd_width_adapter (
		.clk                  (clk_clk_clk),                                                        //   input,    width = 1,       clk.clk
		.reset                (csr_reset_reset_bridge_in_reset_reset),                              //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_mux_src_valid),                                                  //   input,    width = 1,      sink.valid
		.in_channel           (cmd_mux_src_channel),                                                //   input,    width = 3,          .channel
		.in_startofpacket     (cmd_mux_src_startofpacket),                                          //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_mux_src_endofpacket),                                            //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_mux_src_ready),                                                  //  output,    width = 1,          .ready
		.in_data              (cmd_mux_src_data),                                                   //   input,  width = 127,          .data
		.out_endofpacket      (modular_sgdma_dispatcher_0_csr_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (modular_sgdma_dispatcher_0_csr_cmd_width_adapter_src_data),          //  output,   width = 91,          .data
		.out_channel          (modular_sgdma_dispatcher_0_csr_cmd_width_adapter_src_channel),       //  output,    width = 3,          .channel
		.out_valid            (modular_sgdma_dispatcher_0_csr_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (modular_sgdma_dispatcher_0_csr_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (modular_sgdma_dispatcher_0_csr_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                              // (terminated),                         
	);

endmodule
