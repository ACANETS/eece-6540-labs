// board_kernel_interface_altera_mm_interconnect_191_petfoby.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 19.2 57

`timescale 1 ps / 1 ps
module board_kernel_interface_altera_mm_interconnect_191_petfoby (
		input  wire [13:0] ctrl_m0_address,                                      //                                  ctrl_m0.address
		output wire        ctrl_m0_waitrequest,                                  //                                         .waitrequest
		input  wire [0:0]  ctrl_m0_burstcount,                                   //                                         .burstcount
		input  wire [3:0]  ctrl_m0_byteenable,                                   //                                         .byteenable
		input  wire        ctrl_m0_read,                                         //                                         .read
		output wire [31:0] ctrl_m0_readdata,                                     //                                         .readdata
		output wire        ctrl_m0_readdatavalid,                                //                                         .readdatavalid
		input  wire        ctrl_m0_write,                                        //                                         .write
		input  wire [31:0] ctrl_m0_writedata,                                    //                                         .writedata
		input  wire        ctrl_m0_debugaccess,                                  //                                         .debugaccess
		output wire [8:0]  address_span_extender_0_windowed_slave_address,       //   address_span_extender_0_windowed_slave.address
		output wire        address_span_extender_0_windowed_slave_write,         //                                         .write
		output wire        address_span_extender_0_windowed_slave_read,          //                                         .read
		input  wire [63:0] address_span_extender_0_windowed_slave_readdata,      //                                         .readdata
		output wire [63:0] address_span_extender_0_windowed_slave_writedata,     //                                         .writedata
		output wire [0:0]  address_span_extender_0_windowed_slave_burstcount,    //                                         .burstcount
		output wire [7:0]  address_span_extender_0_windowed_slave_byteenable,    //                                         .byteenable
		input  wire        address_span_extender_0_windowed_slave_readdatavalid, //                                         .readdatavalid
		input  wire        address_span_extender_0_windowed_slave_waitrequest,   //                                         .waitrequest
		output wire        address_span_extender_0_cntl_write,                   //             address_span_extender_0_cntl.write
		output wire        address_span_extender_0_cntl_read,                    //                                         .read
		input  wire [63:0] address_span_extender_0_cntl_readdata,                //                                         .readdata
		output wire [63:0] address_span_extender_0_cntl_writedata,               //                                         .writedata
		output wire [7:0]  address_span_extender_0_cntl_byteenable,              //                                         .byteenable
		output wire        sw_reset_s_write,                                     //                               sw_reset_s.write
		output wire        sw_reset_s_read,                                      //                                         .read
		input  wire [63:0] sw_reset_s_readdata,                                  //                                         .readdata
		output wire [63:0] sw_reset_s_writedata,                                 //                                         .writedata
		output wire [7:0]  sw_reset_s_byteenable,                                //                                         .byteenable
		input  wire        sw_reset_s_waitrequest,                               //                                         .waitrequest
		output wire        mem_org_mode0_s_write,                                //                          mem_org_mode0_s.write
		output wire        mem_org_mode0_s_read,                                 //                                         .read
		input  wire [31:0] mem_org_mode0_s_readdata,                             //                                         .readdata
		output wire [31:0] mem_org_mode0_s_writedata,                            //                                         .writedata
		input  wire        mem_org_mode0_s_waitrequest,                          //                                         .waitrequest
		output wire        version_id_0_s_read,                                  //                           version_id_0_s.read
		input  wire [31:0] version_id_0_s_readdata,                              //                                         .readdata
		input  wire        ctrl_reset_reset_bridge_in_reset_reset,               //         ctrl_reset_reset_bridge_in_reset.reset
		input  wire        sw_reset_clk_reset_reset_bridge_in_reset_reset,       // sw_reset_clk_reset_reset_bridge_in_reset.reset
		input  wire        clk_reset_clk_clk                                     //                            clk_reset_clk.clk
	);

	wire          ctrl_m0_translator_avalon_universal_master_0_waitrequest;                   // ctrl_m0_agent:av_waitrequest -> ctrl_m0_translator:uav_waitrequest
	wire   [31:0] ctrl_m0_translator_avalon_universal_master_0_readdata;                      // ctrl_m0_agent:av_readdata -> ctrl_m0_translator:uav_readdata
	wire          ctrl_m0_translator_avalon_universal_master_0_debugaccess;                   // ctrl_m0_translator:uav_debugaccess -> ctrl_m0_agent:av_debugaccess
	wire   [13:0] ctrl_m0_translator_avalon_universal_master_0_address;                       // ctrl_m0_translator:uav_address -> ctrl_m0_agent:av_address
	wire          ctrl_m0_translator_avalon_universal_master_0_read;                          // ctrl_m0_translator:uav_read -> ctrl_m0_agent:av_read
	wire    [3:0] ctrl_m0_translator_avalon_universal_master_0_byteenable;                    // ctrl_m0_translator:uav_byteenable -> ctrl_m0_agent:av_byteenable
	wire          ctrl_m0_translator_avalon_universal_master_0_readdatavalid;                 // ctrl_m0_agent:av_readdatavalid -> ctrl_m0_translator:uav_readdatavalid
	wire          ctrl_m0_translator_avalon_universal_master_0_lock;                          // ctrl_m0_translator:uav_lock -> ctrl_m0_agent:av_lock
	wire          ctrl_m0_translator_avalon_universal_master_0_write;                         // ctrl_m0_translator:uav_write -> ctrl_m0_agent:av_write
	wire   [31:0] ctrl_m0_translator_avalon_universal_master_0_writedata;                     // ctrl_m0_translator:uav_writedata -> ctrl_m0_agent:av_writedata
	wire    [2:0] ctrl_m0_translator_avalon_universal_master_0_burstcount;                    // ctrl_m0_translator:uav_burstcount -> ctrl_m0_agent:av_burstcount
	wire   [63:0] address_span_extender_0_windowed_slave_agent_m0_readdata;                   // address_span_extender_0_windowed_slave_translator:uav_readdata -> address_span_extender_0_windowed_slave_agent:m0_readdata
	wire          address_span_extender_0_windowed_slave_agent_m0_waitrequest;                // address_span_extender_0_windowed_slave_translator:uav_waitrequest -> address_span_extender_0_windowed_slave_agent:m0_waitrequest
	wire          address_span_extender_0_windowed_slave_agent_m0_debugaccess;                // address_span_extender_0_windowed_slave_agent:m0_debugaccess -> address_span_extender_0_windowed_slave_translator:uav_debugaccess
	wire   [13:0] address_span_extender_0_windowed_slave_agent_m0_address;                    // address_span_extender_0_windowed_slave_agent:m0_address -> address_span_extender_0_windowed_slave_translator:uav_address
	wire    [7:0] address_span_extender_0_windowed_slave_agent_m0_byteenable;                 // address_span_extender_0_windowed_slave_agent:m0_byteenable -> address_span_extender_0_windowed_slave_translator:uav_byteenable
	wire          address_span_extender_0_windowed_slave_agent_m0_read;                       // address_span_extender_0_windowed_slave_agent:m0_read -> address_span_extender_0_windowed_slave_translator:uav_read
	wire          address_span_extender_0_windowed_slave_agent_m0_readdatavalid;              // address_span_extender_0_windowed_slave_translator:uav_readdatavalid -> address_span_extender_0_windowed_slave_agent:m0_readdatavalid
	wire          address_span_extender_0_windowed_slave_agent_m0_lock;                       // address_span_extender_0_windowed_slave_agent:m0_lock -> address_span_extender_0_windowed_slave_translator:uav_lock
	wire   [63:0] address_span_extender_0_windowed_slave_agent_m0_writedata;                  // address_span_extender_0_windowed_slave_agent:m0_writedata -> address_span_extender_0_windowed_slave_translator:uav_writedata
	wire          address_span_extender_0_windowed_slave_agent_m0_write;                      // address_span_extender_0_windowed_slave_agent:m0_write -> address_span_extender_0_windowed_slave_translator:uav_write
	wire    [3:0] address_span_extender_0_windowed_slave_agent_m0_burstcount;                 // address_span_extender_0_windowed_slave_agent:m0_burstcount -> address_span_extender_0_windowed_slave_translator:uav_burstcount
	wire          address_span_extender_0_windowed_slave_agent_rf_source_valid;               // address_span_extender_0_windowed_slave_agent:rf_source_valid -> address_span_extender_0_windowed_slave_agent_rsp_fifo:in_valid
	wire  [134:0] address_span_extender_0_windowed_slave_agent_rf_source_data;                // address_span_extender_0_windowed_slave_agent:rf_source_data -> address_span_extender_0_windowed_slave_agent_rsp_fifo:in_data
	wire          address_span_extender_0_windowed_slave_agent_rf_source_ready;               // address_span_extender_0_windowed_slave_agent_rsp_fifo:in_ready -> address_span_extender_0_windowed_slave_agent:rf_source_ready
	wire          address_span_extender_0_windowed_slave_agent_rf_source_startofpacket;       // address_span_extender_0_windowed_slave_agent:rf_source_startofpacket -> address_span_extender_0_windowed_slave_agent_rsp_fifo:in_startofpacket
	wire          address_span_extender_0_windowed_slave_agent_rf_source_endofpacket;         // address_span_extender_0_windowed_slave_agent:rf_source_endofpacket -> address_span_extender_0_windowed_slave_agent_rsp_fifo:in_endofpacket
	wire          address_span_extender_0_windowed_slave_agent_rsp_fifo_out_valid;            // address_span_extender_0_windowed_slave_agent_rsp_fifo:out_valid -> address_span_extender_0_windowed_slave_agent:rf_sink_valid
	wire  [134:0] address_span_extender_0_windowed_slave_agent_rsp_fifo_out_data;             // address_span_extender_0_windowed_slave_agent_rsp_fifo:out_data -> address_span_extender_0_windowed_slave_agent:rf_sink_data
	wire          address_span_extender_0_windowed_slave_agent_rsp_fifo_out_ready;            // address_span_extender_0_windowed_slave_agent:rf_sink_ready -> address_span_extender_0_windowed_slave_agent_rsp_fifo:out_ready
	wire          address_span_extender_0_windowed_slave_agent_rsp_fifo_out_startofpacket;    // address_span_extender_0_windowed_slave_agent_rsp_fifo:out_startofpacket -> address_span_extender_0_windowed_slave_agent:rf_sink_startofpacket
	wire          address_span_extender_0_windowed_slave_agent_rsp_fifo_out_endofpacket;      // address_span_extender_0_windowed_slave_agent_rsp_fifo:out_endofpacket -> address_span_extender_0_windowed_slave_agent:rf_sink_endofpacket
	wire          address_span_extender_0_windowed_slave_agent_rdata_fifo_src_valid;          // address_span_extender_0_windowed_slave_agent:rdata_fifo_src_valid -> address_span_extender_0_windowed_slave_agent:rdata_fifo_sink_valid
	wire   [65:0] address_span_extender_0_windowed_slave_agent_rdata_fifo_src_data;           // address_span_extender_0_windowed_slave_agent:rdata_fifo_src_data -> address_span_extender_0_windowed_slave_agent:rdata_fifo_sink_data
	wire          address_span_extender_0_windowed_slave_agent_rdata_fifo_src_ready;          // address_span_extender_0_windowed_slave_agent:rdata_fifo_sink_ready -> address_span_extender_0_windowed_slave_agent:rdata_fifo_src_ready
	wire   [63:0] address_span_extender_0_cntl_agent_m0_readdata;                             // address_span_extender_0_cntl_translator:uav_readdata -> address_span_extender_0_cntl_agent:m0_readdata
	wire          address_span_extender_0_cntl_agent_m0_waitrequest;                          // address_span_extender_0_cntl_translator:uav_waitrequest -> address_span_extender_0_cntl_agent:m0_waitrequest
	wire          address_span_extender_0_cntl_agent_m0_debugaccess;                          // address_span_extender_0_cntl_agent:m0_debugaccess -> address_span_extender_0_cntl_translator:uav_debugaccess
	wire   [13:0] address_span_extender_0_cntl_agent_m0_address;                              // address_span_extender_0_cntl_agent:m0_address -> address_span_extender_0_cntl_translator:uav_address
	wire    [7:0] address_span_extender_0_cntl_agent_m0_byteenable;                           // address_span_extender_0_cntl_agent:m0_byteenable -> address_span_extender_0_cntl_translator:uav_byteenable
	wire          address_span_extender_0_cntl_agent_m0_read;                                 // address_span_extender_0_cntl_agent:m0_read -> address_span_extender_0_cntl_translator:uav_read
	wire          address_span_extender_0_cntl_agent_m0_readdatavalid;                        // address_span_extender_0_cntl_translator:uav_readdatavalid -> address_span_extender_0_cntl_agent:m0_readdatavalid
	wire          address_span_extender_0_cntl_agent_m0_lock;                                 // address_span_extender_0_cntl_agent:m0_lock -> address_span_extender_0_cntl_translator:uav_lock
	wire   [63:0] address_span_extender_0_cntl_agent_m0_writedata;                            // address_span_extender_0_cntl_agent:m0_writedata -> address_span_extender_0_cntl_translator:uav_writedata
	wire          address_span_extender_0_cntl_agent_m0_write;                                // address_span_extender_0_cntl_agent:m0_write -> address_span_extender_0_cntl_translator:uav_write
	wire    [3:0] address_span_extender_0_cntl_agent_m0_burstcount;                           // address_span_extender_0_cntl_agent:m0_burstcount -> address_span_extender_0_cntl_translator:uav_burstcount
	wire          address_span_extender_0_cntl_agent_rf_source_valid;                         // address_span_extender_0_cntl_agent:rf_source_valid -> address_span_extender_0_cntl_agent_rsp_fifo:in_valid
	wire  [134:0] address_span_extender_0_cntl_agent_rf_source_data;                          // address_span_extender_0_cntl_agent:rf_source_data -> address_span_extender_0_cntl_agent_rsp_fifo:in_data
	wire          address_span_extender_0_cntl_agent_rf_source_ready;                         // address_span_extender_0_cntl_agent_rsp_fifo:in_ready -> address_span_extender_0_cntl_agent:rf_source_ready
	wire          address_span_extender_0_cntl_agent_rf_source_startofpacket;                 // address_span_extender_0_cntl_agent:rf_source_startofpacket -> address_span_extender_0_cntl_agent_rsp_fifo:in_startofpacket
	wire          address_span_extender_0_cntl_agent_rf_source_endofpacket;                   // address_span_extender_0_cntl_agent:rf_source_endofpacket -> address_span_extender_0_cntl_agent_rsp_fifo:in_endofpacket
	wire          address_span_extender_0_cntl_agent_rsp_fifo_out_valid;                      // address_span_extender_0_cntl_agent_rsp_fifo:out_valid -> address_span_extender_0_cntl_agent:rf_sink_valid
	wire  [134:0] address_span_extender_0_cntl_agent_rsp_fifo_out_data;                       // address_span_extender_0_cntl_agent_rsp_fifo:out_data -> address_span_extender_0_cntl_agent:rf_sink_data
	wire          address_span_extender_0_cntl_agent_rsp_fifo_out_ready;                      // address_span_extender_0_cntl_agent:rf_sink_ready -> address_span_extender_0_cntl_agent_rsp_fifo:out_ready
	wire          address_span_extender_0_cntl_agent_rsp_fifo_out_startofpacket;              // address_span_extender_0_cntl_agent_rsp_fifo:out_startofpacket -> address_span_extender_0_cntl_agent:rf_sink_startofpacket
	wire          address_span_extender_0_cntl_agent_rsp_fifo_out_endofpacket;                // address_span_extender_0_cntl_agent_rsp_fifo:out_endofpacket -> address_span_extender_0_cntl_agent:rf_sink_endofpacket
	wire          address_span_extender_0_cntl_agent_rdata_fifo_src_valid;                    // address_span_extender_0_cntl_agent:rdata_fifo_src_valid -> address_span_extender_0_cntl_agent:rdata_fifo_sink_valid
	wire   [65:0] address_span_extender_0_cntl_agent_rdata_fifo_src_data;                     // address_span_extender_0_cntl_agent:rdata_fifo_src_data -> address_span_extender_0_cntl_agent:rdata_fifo_sink_data
	wire          address_span_extender_0_cntl_agent_rdata_fifo_src_ready;                    // address_span_extender_0_cntl_agent:rdata_fifo_sink_ready -> address_span_extender_0_cntl_agent:rdata_fifo_src_ready
	wire   [63:0] sw_reset_s_agent_m0_readdata;                                               // sw_reset_s_translator:uav_readdata -> sw_reset_s_agent:m0_readdata
	wire          sw_reset_s_agent_m0_waitrequest;                                            // sw_reset_s_translator:uav_waitrequest -> sw_reset_s_agent:m0_waitrequest
	wire          sw_reset_s_agent_m0_debugaccess;                                            // sw_reset_s_agent:m0_debugaccess -> sw_reset_s_translator:uav_debugaccess
	wire   [13:0] sw_reset_s_agent_m0_address;                                                // sw_reset_s_agent:m0_address -> sw_reset_s_translator:uav_address
	wire    [7:0] sw_reset_s_agent_m0_byteenable;                                             // sw_reset_s_agent:m0_byteenable -> sw_reset_s_translator:uav_byteenable
	wire          sw_reset_s_agent_m0_read;                                                   // sw_reset_s_agent:m0_read -> sw_reset_s_translator:uav_read
	wire          sw_reset_s_agent_m0_readdatavalid;                                          // sw_reset_s_translator:uav_readdatavalid -> sw_reset_s_agent:m0_readdatavalid
	wire          sw_reset_s_agent_m0_lock;                                                   // sw_reset_s_agent:m0_lock -> sw_reset_s_translator:uav_lock
	wire   [63:0] sw_reset_s_agent_m0_writedata;                                              // sw_reset_s_agent:m0_writedata -> sw_reset_s_translator:uav_writedata
	wire          sw_reset_s_agent_m0_write;                                                  // sw_reset_s_agent:m0_write -> sw_reset_s_translator:uav_write
	wire    [3:0] sw_reset_s_agent_m0_burstcount;                                             // sw_reset_s_agent:m0_burstcount -> sw_reset_s_translator:uav_burstcount
	wire          sw_reset_s_agent_rf_source_valid;                                           // sw_reset_s_agent:rf_source_valid -> sw_reset_s_agent_rsp_fifo:in_valid
	wire  [134:0] sw_reset_s_agent_rf_source_data;                                            // sw_reset_s_agent:rf_source_data -> sw_reset_s_agent_rsp_fifo:in_data
	wire          sw_reset_s_agent_rf_source_ready;                                           // sw_reset_s_agent_rsp_fifo:in_ready -> sw_reset_s_agent:rf_source_ready
	wire          sw_reset_s_agent_rf_source_startofpacket;                                   // sw_reset_s_agent:rf_source_startofpacket -> sw_reset_s_agent_rsp_fifo:in_startofpacket
	wire          sw_reset_s_agent_rf_source_endofpacket;                                     // sw_reset_s_agent:rf_source_endofpacket -> sw_reset_s_agent_rsp_fifo:in_endofpacket
	wire          sw_reset_s_agent_rsp_fifo_out_valid;                                        // sw_reset_s_agent_rsp_fifo:out_valid -> sw_reset_s_agent:rf_sink_valid
	wire  [134:0] sw_reset_s_agent_rsp_fifo_out_data;                                         // sw_reset_s_agent_rsp_fifo:out_data -> sw_reset_s_agent:rf_sink_data
	wire          sw_reset_s_agent_rsp_fifo_out_ready;                                        // sw_reset_s_agent:rf_sink_ready -> sw_reset_s_agent_rsp_fifo:out_ready
	wire          sw_reset_s_agent_rsp_fifo_out_startofpacket;                                // sw_reset_s_agent_rsp_fifo:out_startofpacket -> sw_reset_s_agent:rf_sink_startofpacket
	wire          sw_reset_s_agent_rsp_fifo_out_endofpacket;                                  // sw_reset_s_agent_rsp_fifo:out_endofpacket -> sw_reset_s_agent:rf_sink_endofpacket
	wire          sw_reset_s_agent_rdata_fifo_src_valid;                                      // sw_reset_s_agent:rdata_fifo_src_valid -> sw_reset_s_agent:rdata_fifo_sink_valid
	wire   [65:0] sw_reset_s_agent_rdata_fifo_src_data;                                       // sw_reset_s_agent:rdata_fifo_src_data -> sw_reset_s_agent:rdata_fifo_sink_data
	wire          sw_reset_s_agent_rdata_fifo_src_ready;                                      // sw_reset_s_agent:rdata_fifo_sink_ready -> sw_reset_s_agent:rdata_fifo_src_ready
	wire   [31:0] mem_org_mode0_s_agent_m0_readdata;                                          // mem_org_mode0_s_translator:uav_readdata -> mem_org_mode0_s_agent:m0_readdata
	wire          mem_org_mode0_s_agent_m0_waitrequest;                                       // mem_org_mode0_s_translator:uav_waitrequest -> mem_org_mode0_s_agent:m0_waitrequest
	wire          mem_org_mode0_s_agent_m0_debugaccess;                                       // mem_org_mode0_s_agent:m0_debugaccess -> mem_org_mode0_s_translator:uav_debugaccess
	wire   [13:0] mem_org_mode0_s_agent_m0_address;                                           // mem_org_mode0_s_agent:m0_address -> mem_org_mode0_s_translator:uav_address
	wire    [3:0] mem_org_mode0_s_agent_m0_byteenable;                                        // mem_org_mode0_s_agent:m0_byteenable -> mem_org_mode0_s_translator:uav_byteenable
	wire          mem_org_mode0_s_agent_m0_read;                                              // mem_org_mode0_s_agent:m0_read -> mem_org_mode0_s_translator:uav_read
	wire          mem_org_mode0_s_agent_m0_readdatavalid;                                     // mem_org_mode0_s_translator:uav_readdatavalid -> mem_org_mode0_s_agent:m0_readdatavalid
	wire          mem_org_mode0_s_agent_m0_lock;                                              // mem_org_mode0_s_agent:m0_lock -> mem_org_mode0_s_translator:uav_lock
	wire   [31:0] mem_org_mode0_s_agent_m0_writedata;                                         // mem_org_mode0_s_agent:m0_writedata -> mem_org_mode0_s_translator:uav_writedata
	wire          mem_org_mode0_s_agent_m0_write;                                             // mem_org_mode0_s_agent:m0_write -> mem_org_mode0_s_translator:uav_write
	wire    [2:0] mem_org_mode0_s_agent_m0_burstcount;                                        // mem_org_mode0_s_agent:m0_burstcount -> mem_org_mode0_s_translator:uav_burstcount
	wire          mem_org_mode0_s_agent_rf_source_valid;                                      // mem_org_mode0_s_agent:rf_source_valid -> mem_org_mode0_s_agent_rsp_fifo:in_valid
	wire   [98:0] mem_org_mode0_s_agent_rf_source_data;                                       // mem_org_mode0_s_agent:rf_source_data -> mem_org_mode0_s_agent_rsp_fifo:in_data
	wire          mem_org_mode0_s_agent_rf_source_ready;                                      // mem_org_mode0_s_agent_rsp_fifo:in_ready -> mem_org_mode0_s_agent:rf_source_ready
	wire          mem_org_mode0_s_agent_rf_source_startofpacket;                              // mem_org_mode0_s_agent:rf_source_startofpacket -> mem_org_mode0_s_agent_rsp_fifo:in_startofpacket
	wire          mem_org_mode0_s_agent_rf_source_endofpacket;                                // mem_org_mode0_s_agent:rf_source_endofpacket -> mem_org_mode0_s_agent_rsp_fifo:in_endofpacket
	wire          mem_org_mode0_s_agent_rsp_fifo_out_valid;                                   // mem_org_mode0_s_agent_rsp_fifo:out_valid -> mem_org_mode0_s_agent:rf_sink_valid
	wire   [98:0] mem_org_mode0_s_agent_rsp_fifo_out_data;                                    // mem_org_mode0_s_agent_rsp_fifo:out_data -> mem_org_mode0_s_agent:rf_sink_data
	wire          mem_org_mode0_s_agent_rsp_fifo_out_ready;                                   // mem_org_mode0_s_agent:rf_sink_ready -> mem_org_mode0_s_agent_rsp_fifo:out_ready
	wire          mem_org_mode0_s_agent_rsp_fifo_out_startofpacket;                           // mem_org_mode0_s_agent_rsp_fifo:out_startofpacket -> mem_org_mode0_s_agent:rf_sink_startofpacket
	wire          mem_org_mode0_s_agent_rsp_fifo_out_endofpacket;                             // mem_org_mode0_s_agent_rsp_fifo:out_endofpacket -> mem_org_mode0_s_agent:rf_sink_endofpacket
	wire          mem_org_mode0_s_agent_rdata_fifo_src_valid;                                 // mem_org_mode0_s_agent:rdata_fifo_src_valid -> mem_org_mode0_s_agent:rdata_fifo_sink_valid
	wire   [33:0] mem_org_mode0_s_agent_rdata_fifo_src_data;                                  // mem_org_mode0_s_agent:rdata_fifo_src_data -> mem_org_mode0_s_agent:rdata_fifo_sink_data
	wire          mem_org_mode0_s_agent_rdata_fifo_src_ready;                                 // mem_org_mode0_s_agent:rdata_fifo_sink_ready -> mem_org_mode0_s_agent:rdata_fifo_src_ready
	wire          cmd_mux_003_src_valid;                                                      // cmd_mux_003:src_valid -> mem_org_mode0_s_agent:cp_valid
	wire   [97:0] cmd_mux_003_src_data;                                                       // cmd_mux_003:src_data -> mem_org_mode0_s_agent:cp_data
	wire          cmd_mux_003_src_ready;                                                      // mem_org_mode0_s_agent:cp_ready -> cmd_mux_003:src_ready
	wire    [4:0] cmd_mux_003_src_channel;                                                    // cmd_mux_003:src_channel -> mem_org_mode0_s_agent:cp_channel
	wire          cmd_mux_003_src_startofpacket;                                              // cmd_mux_003:src_startofpacket -> mem_org_mode0_s_agent:cp_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                // cmd_mux_003:src_endofpacket -> mem_org_mode0_s_agent:cp_endofpacket
	wire   [31:0] version_id_0_s_agent_m0_readdata;                                           // version_id_0_s_translator:uav_readdata -> version_id_0_s_agent:m0_readdata
	wire          version_id_0_s_agent_m0_waitrequest;                                        // version_id_0_s_translator:uav_waitrequest -> version_id_0_s_agent:m0_waitrequest
	wire          version_id_0_s_agent_m0_debugaccess;                                        // version_id_0_s_agent:m0_debugaccess -> version_id_0_s_translator:uav_debugaccess
	wire   [13:0] version_id_0_s_agent_m0_address;                                            // version_id_0_s_agent:m0_address -> version_id_0_s_translator:uav_address
	wire    [3:0] version_id_0_s_agent_m0_byteenable;                                         // version_id_0_s_agent:m0_byteenable -> version_id_0_s_translator:uav_byteenable
	wire          version_id_0_s_agent_m0_read;                                               // version_id_0_s_agent:m0_read -> version_id_0_s_translator:uav_read
	wire          version_id_0_s_agent_m0_readdatavalid;                                      // version_id_0_s_translator:uav_readdatavalid -> version_id_0_s_agent:m0_readdatavalid
	wire          version_id_0_s_agent_m0_lock;                                               // version_id_0_s_agent:m0_lock -> version_id_0_s_translator:uav_lock
	wire   [31:0] version_id_0_s_agent_m0_writedata;                                          // version_id_0_s_agent:m0_writedata -> version_id_0_s_translator:uav_writedata
	wire          version_id_0_s_agent_m0_write;                                              // version_id_0_s_agent:m0_write -> version_id_0_s_translator:uav_write
	wire    [2:0] version_id_0_s_agent_m0_burstcount;                                         // version_id_0_s_agent:m0_burstcount -> version_id_0_s_translator:uav_burstcount
	wire          version_id_0_s_agent_rf_source_valid;                                       // version_id_0_s_agent:rf_source_valid -> version_id_0_s_agent_rsp_fifo:in_valid
	wire   [98:0] version_id_0_s_agent_rf_source_data;                                        // version_id_0_s_agent:rf_source_data -> version_id_0_s_agent_rsp_fifo:in_data
	wire          version_id_0_s_agent_rf_source_ready;                                       // version_id_0_s_agent_rsp_fifo:in_ready -> version_id_0_s_agent:rf_source_ready
	wire          version_id_0_s_agent_rf_source_startofpacket;                               // version_id_0_s_agent:rf_source_startofpacket -> version_id_0_s_agent_rsp_fifo:in_startofpacket
	wire          version_id_0_s_agent_rf_source_endofpacket;                                 // version_id_0_s_agent:rf_source_endofpacket -> version_id_0_s_agent_rsp_fifo:in_endofpacket
	wire          version_id_0_s_agent_rsp_fifo_out_valid;                                    // version_id_0_s_agent_rsp_fifo:out_valid -> version_id_0_s_agent:rf_sink_valid
	wire   [98:0] version_id_0_s_agent_rsp_fifo_out_data;                                     // version_id_0_s_agent_rsp_fifo:out_data -> version_id_0_s_agent:rf_sink_data
	wire          version_id_0_s_agent_rsp_fifo_out_ready;                                    // version_id_0_s_agent:rf_sink_ready -> version_id_0_s_agent_rsp_fifo:out_ready
	wire          version_id_0_s_agent_rsp_fifo_out_startofpacket;                            // version_id_0_s_agent_rsp_fifo:out_startofpacket -> version_id_0_s_agent:rf_sink_startofpacket
	wire          version_id_0_s_agent_rsp_fifo_out_endofpacket;                              // version_id_0_s_agent_rsp_fifo:out_endofpacket -> version_id_0_s_agent:rf_sink_endofpacket
	wire          version_id_0_s_agent_rdata_fifo_src_valid;                                  // version_id_0_s_agent:rdata_fifo_src_valid -> version_id_0_s_agent:rdata_fifo_sink_valid
	wire   [33:0] version_id_0_s_agent_rdata_fifo_src_data;                                   // version_id_0_s_agent:rdata_fifo_src_data -> version_id_0_s_agent:rdata_fifo_sink_data
	wire          version_id_0_s_agent_rdata_fifo_src_ready;                                  // version_id_0_s_agent:rdata_fifo_sink_ready -> version_id_0_s_agent:rdata_fifo_src_ready
	wire          cmd_mux_004_src_valid;                                                      // cmd_mux_004:src_valid -> version_id_0_s_agent:cp_valid
	wire   [97:0] cmd_mux_004_src_data;                                                       // cmd_mux_004:src_data -> version_id_0_s_agent:cp_data
	wire          cmd_mux_004_src_ready;                                                      // version_id_0_s_agent:cp_ready -> cmd_mux_004:src_ready
	wire    [4:0] cmd_mux_004_src_channel;                                                    // cmd_mux_004:src_channel -> version_id_0_s_agent:cp_channel
	wire          cmd_mux_004_src_startofpacket;                                              // cmd_mux_004:src_startofpacket -> version_id_0_s_agent:cp_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                // cmd_mux_004:src_endofpacket -> version_id_0_s_agent:cp_endofpacket
	wire          ctrl_m0_agent_cp_valid;                                                     // ctrl_m0_agent:cp_valid -> router:sink_valid
	wire   [97:0] ctrl_m0_agent_cp_data;                                                      // ctrl_m0_agent:cp_data -> router:sink_data
	wire          ctrl_m0_agent_cp_ready;                                                     // router:sink_ready -> ctrl_m0_agent:cp_ready
	wire          ctrl_m0_agent_cp_startofpacket;                                             // ctrl_m0_agent:cp_startofpacket -> router:sink_startofpacket
	wire          ctrl_m0_agent_cp_endofpacket;                                               // ctrl_m0_agent:cp_endofpacket -> router:sink_endofpacket
	wire          address_span_extender_0_windowed_slave_agent_rp_valid;                      // address_span_extender_0_windowed_slave_agent:rp_valid -> router_001:sink_valid
	wire  [133:0] address_span_extender_0_windowed_slave_agent_rp_data;                       // address_span_extender_0_windowed_slave_agent:rp_data -> router_001:sink_data
	wire          address_span_extender_0_windowed_slave_agent_rp_ready;                      // router_001:sink_ready -> address_span_extender_0_windowed_slave_agent:rp_ready
	wire          address_span_extender_0_windowed_slave_agent_rp_startofpacket;              // address_span_extender_0_windowed_slave_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire          address_span_extender_0_windowed_slave_agent_rp_endofpacket;                // address_span_extender_0_windowed_slave_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire          address_span_extender_0_cntl_agent_rp_valid;                                // address_span_extender_0_cntl_agent:rp_valid -> router_002:sink_valid
	wire  [133:0] address_span_extender_0_cntl_agent_rp_data;                                 // address_span_extender_0_cntl_agent:rp_data -> router_002:sink_data
	wire          address_span_extender_0_cntl_agent_rp_ready;                                // router_002:sink_ready -> address_span_extender_0_cntl_agent:rp_ready
	wire          address_span_extender_0_cntl_agent_rp_startofpacket;                        // address_span_extender_0_cntl_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          address_span_extender_0_cntl_agent_rp_endofpacket;                          // address_span_extender_0_cntl_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          sw_reset_s_agent_rp_valid;                                                  // sw_reset_s_agent:rp_valid -> router_003:sink_valid
	wire  [133:0] sw_reset_s_agent_rp_data;                                                   // sw_reset_s_agent:rp_data -> router_003:sink_data
	wire          sw_reset_s_agent_rp_ready;                                                  // router_003:sink_ready -> sw_reset_s_agent:rp_ready
	wire          sw_reset_s_agent_rp_startofpacket;                                          // sw_reset_s_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          sw_reset_s_agent_rp_endofpacket;                                            // sw_reset_s_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          mem_org_mode0_s_agent_rp_valid;                                             // mem_org_mode0_s_agent:rp_valid -> router_004:sink_valid
	wire   [97:0] mem_org_mode0_s_agent_rp_data;                                              // mem_org_mode0_s_agent:rp_data -> router_004:sink_data
	wire          mem_org_mode0_s_agent_rp_ready;                                             // router_004:sink_ready -> mem_org_mode0_s_agent:rp_ready
	wire          mem_org_mode0_s_agent_rp_startofpacket;                                     // mem_org_mode0_s_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          mem_org_mode0_s_agent_rp_endofpacket;                                       // mem_org_mode0_s_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                       // router_004:src_valid -> rsp_demux_003:sink_valid
	wire   [97:0] router_004_src_data;                                                        // router_004:src_data -> rsp_demux_003:sink_data
	wire          router_004_src_ready;                                                       // rsp_demux_003:sink_ready -> router_004:src_ready
	wire    [4:0] router_004_src_channel;                                                     // router_004:src_channel -> rsp_demux_003:sink_channel
	wire          router_004_src_startofpacket;                                               // router_004:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_004_src_endofpacket;                                                 // router_004:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          version_id_0_s_agent_rp_valid;                                              // version_id_0_s_agent:rp_valid -> router_005:sink_valid
	wire   [97:0] version_id_0_s_agent_rp_data;                                               // version_id_0_s_agent:rp_data -> router_005:sink_data
	wire          version_id_0_s_agent_rp_ready;                                              // router_005:sink_ready -> version_id_0_s_agent:rp_ready
	wire          version_id_0_s_agent_rp_startofpacket;                                      // version_id_0_s_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          version_id_0_s_agent_rp_endofpacket;                                        // version_id_0_s_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                       // router_005:src_valid -> rsp_demux_004:sink_valid
	wire   [97:0] router_005_src_data;                                                        // router_005:src_data -> rsp_demux_004:sink_data
	wire          router_005_src_ready;                                                       // rsp_demux_004:sink_ready -> router_005:src_ready
	wire    [4:0] router_005_src_channel;                                                     // router_005:src_channel -> rsp_demux_004:sink_channel
	wire          router_005_src_startofpacket;                                               // router_005:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_005_src_endofpacket;                                                 // router_005:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          router_src_valid;                                                           // router:src_valid -> ctrl_m0_limiter:cmd_sink_valid
	wire   [97:0] router_src_data;                                                            // router:src_data -> ctrl_m0_limiter:cmd_sink_data
	wire          router_src_ready;                                                           // ctrl_m0_limiter:cmd_sink_ready -> router:src_ready
	wire    [4:0] router_src_channel;                                                         // router:src_channel -> ctrl_m0_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                   // router:src_startofpacket -> ctrl_m0_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                     // router:src_endofpacket -> ctrl_m0_limiter:cmd_sink_endofpacket
	wire   [97:0] ctrl_m0_limiter_cmd_src_data;                                               // ctrl_m0_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          ctrl_m0_limiter_cmd_src_ready;                                              // cmd_demux:sink_ready -> ctrl_m0_limiter:cmd_src_ready
	wire    [4:0] ctrl_m0_limiter_cmd_src_channel;                                            // ctrl_m0_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          ctrl_m0_limiter_cmd_src_startofpacket;                                      // ctrl_m0_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          ctrl_m0_limiter_cmd_src_endofpacket;                                        // ctrl_m0_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                          // rsp_mux:src_valid -> ctrl_m0_limiter:rsp_sink_valid
	wire   [97:0] rsp_mux_src_data;                                                           // rsp_mux:src_data -> ctrl_m0_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                          // ctrl_m0_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire    [4:0] rsp_mux_src_channel;                                                        // rsp_mux:src_channel -> ctrl_m0_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                                  // rsp_mux:src_startofpacket -> ctrl_m0_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                                    // rsp_mux:src_endofpacket -> ctrl_m0_limiter:rsp_sink_endofpacket
	wire          ctrl_m0_limiter_rsp_src_valid;                                              // ctrl_m0_limiter:rsp_src_valid -> ctrl_m0_agent:rp_valid
	wire   [97:0] ctrl_m0_limiter_rsp_src_data;                                               // ctrl_m0_limiter:rsp_src_data -> ctrl_m0_agent:rp_data
	wire          ctrl_m0_limiter_rsp_src_ready;                                              // ctrl_m0_agent:rp_ready -> ctrl_m0_limiter:rsp_src_ready
	wire    [4:0] ctrl_m0_limiter_rsp_src_channel;                                            // ctrl_m0_limiter:rsp_src_channel -> ctrl_m0_agent:rp_channel
	wire          ctrl_m0_limiter_rsp_src_startofpacket;                                      // ctrl_m0_limiter:rsp_src_startofpacket -> ctrl_m0_agent:rp_startofpacket
	wire          ctrl_m0_limiter_rsp_src_endofpacket;                                        // ctrl_m0_limiter:rsp_src_endofpacket -> ctrl_m0_agent:rp_endofpacket
	wire          cmd_demux_src0_valid;                                                       // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire   [97:0] cmd_demux_src0_data;                                                        // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                       // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [4:0] cmd_demux_src0_channel;                                                     // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                               // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                 // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                       // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire   [97:0] cmd_demux_src1_data;                                                        // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                       // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire    [4:0] cmd_demux_src1_channel;                                                     // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                               // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                 // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                       // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire   [97:0] cmd_demux_src2_data;                                                        // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                                       // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire    [4:0] cmd_demux_src2_channel;                                                     // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                               // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                 // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                       // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire   [97:0] cmd_demux_src3_data;                                                        // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                                       // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire    [4:0] cmd_demux_src3_channel;                                                     // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                               // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                 // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                       // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire   [97:0] cmd_demux_src4_data;                                                        // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_src4_ready;                                                       // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire    [4:0] cmd_demux_src4_channel;                                                     // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_startofpacket;                                               // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_src4_endofpacket;                                                 // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                                       // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire   [97:0] rsp_demux_src0_data;                                                        // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                       // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [4:0] rsp_demux_src0_channel;                                                     // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                               // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                 // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                   // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire   [97:0] rsp_demux_001_src0_data;                                                    // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                                   // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire    [4:0] rsp_demux_001_src0_channel;                                                 // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                           // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                             // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                   // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire   [97:0] rsp_demux_002_src0_data;                                                    // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                                   // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire    [4:0] rsp_demux_002_src0_channel;                                                 // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                           // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                             // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                   // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire   [97:0] rsp_demux_003_src0_data;                                                    // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                                   // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire    [4:0] rsp_demux_003_src0_channel;                                                 // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                           // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                             // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                                   // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire   [97:0] rsp_demux_004_src0_data;                                                    // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire          rsp_demux_004_src0_ready;                                                   // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire    [4:0] rsp_demux_004_src0_channel;                                                 // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                           // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                             // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          cmd_mux_src_valid;                                                          // cmd_mux:src_valid -> address_span_extender_0_windowed_slave_cmd_width_adapter:in_valid
	wire   [97:0] cmd_mux_src_data;                                                           // cmd_mux:src_data -> address_span_extender_0_windowed_slave_cmd_width_adapter:in_data
	wire          cmd_mux_src_ready;                                                          // address_span_extender_0_windowed_slave_cmd_width_adapter:in_ready -> cmd_mux:src_ready
	wire    [4:0] cmd_mux_src_channel;                                                        // cmd_mux:src_channel -> address_span_extender_0_windowed_slave_cmd_width_adapter:in_channel
	wire          cmd_mux_src_startofpacket;                                                  // cmd_mux:src_startofpacket -> address_span_extender_0_windowed_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_src_endofpacket;                                                    // cmd_mux:src_endofpacket -> address_span_extender_0_windowed_slave_cmd_width_adapter:in_endofpacket
	wire          address_span_extender_0_windowed_slave_cmd_width_adapter_src_valid;         // address_span_extender_0_windowed_slave_cmd_width_adapter:out_valid -> address_span_extender_0_windowed_slave_agent:cp_valid
	wire  [133:0] address_span_extender_0_windowed_slave_cmd_width_adapter_src_data;          // address_span_extender_0_windowed_slave_cmd_width_adapter:out_data -> address_span_extender_0_windowed_slave_agent:cp_data
	wire          address_span_extender_0_windowed_slave_cmd_width_adapter_src_ready;         // address_span_extender_0_windowed_slave_agent:cp_ready -> address_span_extender_0_windowed_slave_cmd_width_adapter:out_ready
	wire    [4:0] address_span_extender_0_windowed_slave_cmd_width_adapter_src_channel;       // address_span_extender_0_windowed_slave_cmd_width_adapter:out_channel -> address_span_extender_0_windowed_slave_agent:cp_channel
	wire          address_span_extender_0_windowed_slave_cmd_width_adapter_src_startofpacket; // address_span_extender_0_windowed_slave_cmd_width_adapter:out_startofpacket -> address_span_extender_0_windowed_slave_agent:cp_startofpacket
	wire          address_span_extender_0_windowed_slave_cmd_width_adapter_src_endofpacket;   // address_span_extender_0_windowed_slave_cmd_width_adapter:out_endofpacket -> address_span_extender_0_windowed_slave_agent:cp_endofpacket
	wire          cmd_mux_001_src_valid;                                                      // cmd_mux_001:src_valid -> address_span_extender_0_cntl_cmd_width_adapter:in_valid
	wire   [97:0] cmd_mux_001_src_data;                                                       // cmd_mux_001:src_data -> address_span_extender_0_cntl_cmd_width_adapter:in_data
	wire          cmd_mux_001_src_ready;                                                      // address_span_extender_0_cntl_cmd_width_adapter:in_ready -> cmd_mux_001:src_ready
	wire    [4:0] cmd_mux_001_src_channel;                                                    // cmd_mux_001:src_channel -> address_span_extender_0_cntl_cmd_width_adapter:in_channel
	wire          cmd_mux_001_src_startofpacket;                                              // cmd_mux_001:src_startofpacket -> address_span_extender_0_cntl_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                // cmd_mux_001:src_endofpacket -> address_span_extender_0_cntl_cmd_width_adapter:in_endofpacket
	wire          address_span_extender_0_cntl_cmd_width_adapter_src_valid;                   // address_span_extender_0_cntl_cmd_width_adapter:out_valid -> address_span_extender_0_cntl_agent:cp_valid
	wire  [133:0] address_span_extender_0_cntl_cmd_width_adapter_src_data;                    // address_span_extender_0_cntl_cmd_width_adapter:out_data -> address_span_extender_0_cntl_agent:cp_data
	wire          address_span_extender_0_cntl_cmd_width_adapter_src_ready;                   // address_span_extender_0_cntl_agent:cp_ready -> address_span_extender_0_cntl_cmd_width_adapter:out_ready
	wire    [4:0] address_span_extender_0_cntl_cmd_width_adapter_src_channel;                 // address_span_extender_0_cntl_cmd_width_adapter:out_channel -> address_span_extender_0_cntl_agent:cp_channel
	wire          address_span_extender_0_cntl_cmd_width_adapter_src_startofpacket;           // address_span_extender_0_cntl_cmd_width_adapter:out_startofpacket -> address_span_extender_0_cntl_agent:cp_startofpacket
	wire          address_span_extender_0_cntl_cmd_width_adapter_src_endofpacket;             // address_span_extender_0_cntl_cmd_width_adapter:out_endofpacket -> address_span_extender_0_cntl_agent:cp_endofpacket
	wire          cmd_mux_002_src_valid;                                                      // cmd_mux_002:src_valid -> sw_reset_s_cmd_width_adapter:in_valid
	wire   [97:0] cmd_mux_002_src_data;                                                       // cmd_mux_002:src_data -> sw_reset_s_cmd_width_adapter:in_data
	wire          cmd_mux_002_src_ready;                                                      // sw_reset_s_cmd_width_adapter:in_ready -> cmd_mux_002:src_ready
	wire    [4:0] cmd_mux_002_src_channel;                                                    // cmd_mux_002:src_channel -> sw_reset_s_cmd_width_adapter:in_channel
	wire          cmd_mux_002_src_startofpacket;                                              // cmd_mux_002:src_startofpacket -> sw_reset_s_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                // cmd_mux_002:src_endofpacket -> sw_reset_s_cmd_width_adapter:in_endofpacket
	wire          sw_reset_s_cmd_width_adapter_src_valid;                                     // sw_reset_s_cmd_width_adapter:out_valid -> sw_reset_s_agent:cp_valid
	wire  [133:0] sw_reset_s_cmd_width_adapter_src_data;                                      // sw_reset_s_cmd_width_adapter:out_data -> sw_reset_s_agent:cp_data
	wire          sw_reset_s_cmd_width_adapter_src_ready;                                     // sw_reset_s_agent:cp_ready -> sw_reset_s_cmd_width_adapter:out_ready
	wire    [4:0] sw_reset_s_cmd_width_adapter_src_channel;                                   // sw_reset_s_cmd_width_adapter:out_channel -> sw_reset_s_agent:cp_channel
	wire          sw_reset_s_cmd_width_adapter_src_startofpacket;                             // sw_reset_s_cmd_width_adapter:out_startofpacket -> sw_reset_s_agent:cp_startofpacket
	wire          sw_reset_s_cmd_width_adapter_src_endofpacket;                               // sw_reset_s_cmd_width_adapter:out_endofpacket -> sw_reset_s_agent:cp_endofpacket
	wire          router_001_src_valid;                                                       // router_001:src_valid -> address_span_extender_0_windowed_slave_rsp_width_adapter:in_valid
	wire  [133:0] router_001_src_data;                                                        // router_001:src_data -> address_span_extender_0_windowed_slave_rsp_width_adapter:in_data
	wire          router_001_src_ready;                                                       // address_span_extender_0_windowed_slave_rsp_width_adapter:in_ready -> router_001:src_ready
	wire    [4:0] router_001_src_channel;                                                     // router_001:src_channel -> address_span_extender_0_windowed_slave_rsp_width_adapter:in_channel
	wire          router_001_src_startofpacket;                                               // router_001:src_startofpacket -> address_span_extender_0_windowed_slave_rsp_width_adapter:in_startofpacket
	wire          router_001_src_endofpacket;                                                 // router_001:src_endofpacket -> address_span_extender_0_windowed_slave_rsp_width_adapter:in_endofpacket
	wire          address_span_extender_0_windowed_slave_rsp_width_adapter_src_valid;         // address_span_extender_0_windowed_slave_rsp_width_adapter:out_valid -> rsp_demux:sink_valid
	wire   [97:0] address_span_extender_0_windowed_slave_rsp_width_adapter_src_data;          // address_span_extender_0_windowed_slave_rsp_width_adapter:out_data -> rsp_demux:sink_data
	wire          address_span_extender_0_windowed_slave_rsp_width_adapter_src_ready;         // rsp_demux:sink_ready -> address_span_extender_0_windowed_slave_rsp_width_adapter:out_ready
	wire    [4:0] address_span_extender_0_windowed_slave_rsp_width_adapter_src_channel;       // address_span_extender_0_windowed_slave_rsp_width_adapter:out_channel -> rsp_demux:sink_channel
	wire          address_span_extender_0_windowed_slave_rsp_width_adapter_src_startofpacket; // address_span_extender_0_windowed_slave_rsp_width_adapter:out_startofpacket -> rsp_demux:sink_startofpacket
	wire          address_span_extender_0_windowed_slave_rsp_width_adapter_src_endofpacket;   // address_span_extender_0_windowed_slave_rsp_width_adapter:out_endofpacket -> rsp_demux:sink_endofpacket
	wire          router_002_src_valid;                                                       // router_002:src_valid -> address_span_extender_0_cntl_rsp_width_adapter:in_valid
	wire  [133:0] router_002_src_data;                                                        // router_002:src_data -> address_span_extender_0_cntl_rsp_width_adapter:in_data
	wire          router_002_src_ready;                                                       // address_span_extender_0_cntl_rsp_width_adapter:in_ready -> router_002:src_ready
	wire    [4:0] router_002_src_channel;                                                     // router_002:src_channel -> address_span_extender_0_cntl_rsp_width_adapter:in_channel
	wire          router_002_src_startofpacket;                                               // router_002:src_startofpacket -> address_span_extender_0_cntl_rsp_width_adapter:in_startofpacket
	wire          router_002_src_endofpacket;                                                 // router_002:src_endofpacket -> address_span_extender_0_cntl_rsp_width_adapter:in_endofpacket
	wire          address_span_extender_0_cntl_rsp_width_adapter_src_valid;                   // address_span_extender_0_cntl_rsp_width_adapter:out_valid -> rsp_demux_001:sink_valid
	wire   [97:0] address_span_extender_0_cntl_rsp_width_adapter_src_data;                    // address_span_extender_0_cntl_rsp_width_adapter:out_data -> rsp_demux_001:sink_data
	wire          address_span_extender_0_cntl_rsp_width_adapter_src_ready;                   // rsp_demux_001:sink_ready -> address_span_extender_0_cntl_rsp_width_adapter:out_ready
	wire    [4:0] address_span_extender_0_cntl_rsp_width_adapter_src_channel;                 // address_span_extender_0_cntl_rsp_width_adapter:out_channel -> rsp_demux_001:sink_channel
	wire          address_span_extender_0_cntl_rsp_width_adapter_src_startofpacket;           // address_span_extender_0_cntl_rsp_width_adapter:out_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          address_span_extender_0_cntl_rsp_width_adapter_src_endofpacket;             // address_span_extender_0_cntl_rsp_width_adapter:out_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          router_003_src_valid;                                                       // router_003:src_valid -> sw_reset_s_rsp_width_adapter:in_valid
	wire  [133:0] router_003_src_data;                                                        // router_003:src_data -> sw_reset_s_rsp_width_adapter:in_data
	wire          router_003_src_ready;                                                       // sw_reset_s_rsp_width_adapter:in_ready -> router_003:src_ready
	wire    [4:0] router_003_src_channel;                                                     // router_003:src_channel -> sw_reset_s_rsp_width_adapter:in_channel
	wire          router_003_src_startofpacket;                                               // router_003:src_startofpacket -> sw_reset_s_rsp_width_adapter:in_startofpacket
	wire          router_003_src_endofpacket;                                                 // router_003:src_endofpacket -> sw_reset_s_rsp_width_adapter:in_endofpacket
	wire          sw_reset_s_rsp_width_adapter_src_valid;                                     // sw_reset_s_rsp_width_adapter:out_valid -> rsp_demux_002:sink_valid
	wire   [97:0] sw_reset_s_rsp_width_adapter_src_data;                                      // sw_reset_s_rsp_width_adapter:out_data -> rsp_demux_002:sink_data
	wire          sw_reset_s_rsp_width_adapter_src_ready;                                     // rsp_demux_002:sink_ready -> sw_reset_s_rsp_width_adapter:out_ready
	wire    [4:0] sw_reset_s_rsp_width_adapter_src_channel;                                   // sw_reset_s_rsp_width_adapter:out_channel -> rsp_demux_002:sink_channel
	wire          sw_reset_s_rsp_width_adapter_src_startofpacket;                             // sw_reset_s_rsp_width_adapter:out_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          sw_reset_s_rsp_width_adapter_src_endofpacket;                               // sw_reset_s_rsp_width_adapter:out_endofpacket -> rsp_demux_002:sink_endofpacket
	wire    [4:0] ctrl_m0_limiter_cmd_valid_data;                                             // ctrl_m0_limiter:cmd_src_valid -> cmd_demux:sink_valid

	board_kernel_interface_altera_merlin_master_translator_191_g7h47bq #(
		.AV_ADDRESS_W                (14),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (14),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (0),
		.WAITREQUEST_ALLOWANCE       (0)
	) ctrl_m0_translator (
		.clk                    (clk_reset_clk_clk),                                          //   input,   width = 1,                       clk.clk
		.reset                  (ctrl_reset_reset_bridge_in_reset_reset),                     //   input,   width = 1,                     reset.reset
		.uav_address            (ctrl_m0_translator_avalon_universal_master_0_address),       //  output,  width = 14, avalon_universal_master_0.address
		.uav_burstcount         (ctrl_m0_translator_avalon_universal_master_0_burstcount),    //  output,   width = 3,                          .burstcount
		.uav_read               (ctrl_m0_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (ctrl_m0_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (ctrl_m0_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (ctrl_m0_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (ctrl_m0_translator_avalon_universal_master_0_byteenable),    //  output,   width = 4,                          .byteenable
		.uav_readdata           (ctrl_m0_translator_avalon_universal_master_0_readdata),      //   input,  width = 32,                          .readdata
		.uav_writedata          (ctrl_m0_translator_avalon_universal_master_0_writedata),     //  output,  width = 32,                          .writedata
		.uav_lock               (ctrl_m0_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (ctrl_m0_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (ctrl_m0_address),                                            //   input,  width = 14,      avalon_anti_master_0.address
		.av_waitrequest         (ctrl_m0_waitrequest),                                        //  output,   width = 1,                          .waitrequest
		.av_burstcount          (ctrl_m0_burstcount),                                         //   input,   width = 1,                          .burstcount
		.av_byteenable          (ctrl_m0_byteenable),                                         //   input,   width = 4,                          .byteenable
		.av_read                (ctrl_m0_read),                                               //   input,   width = 1,                          .read
		.av_readdata            (ctrl_m0_readdata),                                           //  output,  width = 32,                          .readdata
		.av_readdatavalid       (ctrl_m0_readdatavalid),                                      //  output,   width = 1,                          .readdatavalid
		.av_write               (ctrl_m0_write),                                              //   input,   width = 1,                          .write
		.av_writedata           (ctrl_m0_writedata),                                          //   input,  width = 32,                          .writedata
		.av_debugaccess         (ctrl_m0_debugaccess),                                        //   input,   width = 1,                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                       // (terminated),                                        
		.av_begintransfer       (1'b0),                                                       // (terminated),                                        
		.av_chipselect          (1'b0),                                                       // (terminated),                                        
		.av_lock                (1'b0),                                                       // (terminated),                                        
		.uav_clken              (),                                                           // (terminated),                                        
		.av_clken               (1'b1),                                                       // (terminated),                                        
		.uav_response           (2'b00),                                                      // (terminated),                                        
		.av_response            (),                                                           // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                       // (terminated),                                        
		.av_writeresponsevalid  ()                                                            // (terminated),                                        
	);

	board_kernel_interface_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (64),
		.UAV_DATA_W                     (64),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (8),
		.UAV_BYTEENABLE_W               (8),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (8),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) address_span_extender_0_windowed_slave_translator (
		.clk                    (clk_reset_clk_clk),                                             //   input,   width = 1,                      clk.clk
		.reset                  (ctrl_reset_reset_bridge_in_reset_reset),                        //   input,   width = 1,                    reset.reset
		.uav_address            (address_span_extender_0_windowed_slave_agent_m0_address),       //   input,  width = 14, avalon_universal_slave_0.address
		.uav_burstcount         (address_span_extender_0_windowed_slave_agent_m0_burstcount),    //   input,   width = 4,                         .burstcount
		.uav_read               (address_span_extender_0_windowed_slave_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (address_span_extender_0_windowed_slave_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (address_span_extender_0_windowed_slave_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (address_span_extender_0_windowed_slave_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (address_span_extender_0_windowed_slave_agent_m0_byteenable),    //   input,   width = 8,                         .byteenable
		.uav_readdata           (address_span_extender_0_windowed_slave_agent_m0_readdata),      //  output,  width = 64,                         .readdata
		.uav_writedata          (address_span_extender_0_windowed_slave_agent_m0_writedata),     //   input,  width = 64,                         .writedata
		.uav_lock               (address_span_extender_0_windowed_slave_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (address_span_extender_0_windowed_slave_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (address_span_extender_0_windowed_slave_address),                //  output,   width = 9,      avalon_anti_slave_0.address
		.av_write               (address_span_extender_0_windowed_slave_write),                  //  output,   width = 1,                         .write
		.av_read                (address_span_extender_0_windowed_slave_read),                   //  output,   width = 1,                         .read
		.av_readdata            (address_span_extender_0_windowed_slave_readdata),               //   input,  width = 64,                         .readdata
		.av_writedata           (address_span_extender_0_windowed_slave_writedata),              //  output,  width = 64,                         .writedata
		.av_burstcount          (address_span_extender_0_windowed_slave_burstcount),             //  output,   width = 1,                         .burstcount
		.av_byteenable          (address_span_extender_0_windowed_slave_byteenable),             //  output,   width = 8,                         .byteenable
		.av_readdatavalid       (address_span_extender_0_windowed_slave_readdatavalid),          //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (address_span_extender_0_windowed_slave_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_begintransfer       (),                                                              // (terminated),                                       
		.av_beginbursttransfer  (),                                                              // (terminated),                                       
		.av_writebyteenable     (),                                                              // (terminated),                                       
		.av_lock                (),                                                              // (terminated),                                       
		.av_chipselect          (),                                                              // (terminated),                                       
		.av_clken               (),                                                              // (terminated),                                       
		.uav_clken              (1'b0),                                                          // (terminated),                                       
		.av_debugaccess         (),                                                              // (terminated),                                       
		.av_outputenable        (),                                                              // (terminated),                                       
		.uav_response           (),                                                              // (terminated),                                       
		.av_response            (2'b00),                                                         // (terminated),                                       
		.uav_writeresponsevalid (),                                                              // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                           // (terminated),                                       
	);

	board_kernel_interface_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (64),
		.UAV_DATA_W                     (64),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (8),
		.UAV_BYTEENABLE_W               (8),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (8),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) address_span_extender_0_cntl_translator (
		.clk                    (clk_reset_clk_clk),                                   //   input,   width = 1,                      clk.clk
		.reset                  (ctrl_reset_reset_bridge_in_reset_reset),              //   input,   width = 1,                    reset.reset
		.uav_address            (address_span_extender_0_cntl_agent_m0_address),       //   input,  width = 14, avalon_universal_slave_0.address
		.uav_burstcount         (address_span_extender_0_cntl_agent_m0_burstcount),    //   input,   width = 4,                         .burstcount
		.uav_read               (address_span_extender_0_cntl_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (address_span_extender_0_cntl_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (address_span_extender_0_cntl_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (address_span_extender_0_cntl_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (address_span_extender_0_cntl_agent_m0_byteenable),    //   input,   width = 8,                         .byteenable
		.uav_readdata           (address_span_extender_0_cntl_agent_m0_readdata),      //  output,  width = 64,                         .readdata
		.uav_writedata          (address_span_extender_0_cntl_agent_m0_writedata),     //   input,  width = 64,                         .writedata
		.uav_lock               (address_span_extender_0_cntl_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (address_span_extender_0_cntl_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_write               (address_span_extender_0_cntl_write),                  //  output,   width = 1,      avalon_anti_slave_0.write
		.av_read                (address_span_extender_0_cntl_read),                   //  output,   width = 1,                         .read
		.av_readdata            (address_span_extender_0_cntl_readdata),               //   input,  width = 64,                         .readdata
		.av_writedata           (address_span_extender_0_cntl_writedata),              //  output,  width = 64,                         .writedata
		.av_byteenable          (address_span_extender_0_cntl_byteenable),             //  output,   width = 8,                         .byteenable
		.av_address             (),                                                    // (terminated),                                       
		.av_begintransfer       (),                                                    // (terminated),                                       
		.av_beginbursttransfer  (),                                                    // (terminated),                                       
		.av_burstcount          (),                                                    // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                // (terminated),                                       
		.av_waitrequest         (1'b0),                                                // (terminated),                                       
		.av_writebyteenable     (),                                                    // (terminated),                                       
		.av_lock                (),                                                    // (terminated),                                       
		.av_chipselect          (),                                                    // (terminated),                                       
		.av_clken               (),                                                    // (terminated),                                       
		.uav_clken              (1'b0),                                                // (terminated),                                       
		.av_debugaccess         (),                                                    // (terminated),                                       
		.av_outputenable        (),                                                    // (terminated),                                       
		.uav_response           (),                                                    // (terminated),                                       
		.av_response            (2'b00),                                               // (terminated),                                       
		.uav_writeresponsevalid (),                                                    // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                 // (terminated),                                       
	);

	board_kernel_interface_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (64),
		.UAV_DATA_W                     (64),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (8),
		.UAV_BYTEENABLE_W               (8),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (8),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) sw_reset_s_translator (
		.clk                    (clk_reset_clk_clk),                              //   input,   width = 1,                      clk.clk
		.reset                  (sw_reset_clk_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (sw_reset_s_agent_m0_address),                    //   input,  width = 14, avalon_universal_slave_0.address
		.uav_burstcount         (sw_reset_s_agent_m0_burstcount),                 //   input,   width = 4,                         .burstcount
		.uav_read               (sw_reset_s_agent_m0_read),                       //   input,   width = 1,                         .read
		.uav_write              (sw_reset_s_agent_m0_write),                      //   input,   width = 1,                         .write
		.uav_waitrequest        (sw_reset_s_agent_m0_waitrequest),                //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (sw_reset_s_agent_m0_readdatavalid),              //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (sw_reset_s_agent_m0_byteenable),                 //   input,   width = 8,                         .byteenable
		.uav_readdata           (sw_reset_s_agent_m0_readdata),                   //  output,  width = 64,                         .readdata
		.uav_writedata          (sw_reset_s_agent_m0_writedata),                  //   input,  width = 64,                         .writedata
		.uav_lock               (sw_reset_s_agent_m0_lock),                       //   input,   width = 1,                         .lock
		.uav_debugaccess        (sw_reset_s_agent_m0_debugaccess),                //   input,   width = 1,                         .debugaccess
		.av_write               (sw_reset_s_write),                               //  output,   width = 1,      avalon_anti_slave_0.write
		.av_read                (sw_reset_s_read),                                //  output,   width = 1,                         .read
		.av_readdata            (sw_reset_s_readdata),                            //   input,  width = 64,                         .readdata
		.av_writedata           (sw_reset_s_writedata),                           //  output,  width = 64,                         .writedata
		.av_byteenable          (sw_reset_s_byteenable),                          //  output,   width = 8,                         .byteenable
		.av_waitrequest         (sw_reset_s_waitrequest),                         //   input,   width = 1,                         .waitrequest
		.av_address             (),                                               // (terminated),                                       
		.av_begintransfer       (),                                               // (terminated),                                       
		.av_beginbursttransfer  (),                                               // (terminated),                                       
		.av_burstcount          (),                                               // (terminated),                                       
		.av_readdatavalid       (1'b0),                                           // (terminated),                                       
		.av_writebyteenable     (),                                               // (terminated),                                       
		.av_lock                (),                                               // (terminated),                                       
		.av_chipselect          (),                                               // (terminated),                                       
		.av_clken               (),                                               // (terminated),                                       
		.uav_clken              (1'b0),                                           // (terminated),                                       
		.av_debugaccess         (),                                               // (terminated),                                       
		.av_outputenable        (),                                               // (terminated),                                       
		.uav_response           (),                                               // (terminated),                                       
		.av_response            (2'b00),                                          // (terminated),                                       
		.uav_writeresponsevalid (),                                               // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                            // (terminated),                                       
	);

	board_kernel_interface_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) mem_org_mode0_s_translator (
		.clk                    (clk_reset_clk_clk),                      //   input,   width = 1,                      clk.clk
		.reset                  (ctrl_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (mem_org_mode0_s_agent_m0_address),       //   input,  width = 14, avalon_universal_slave_0.address
		.uav_burstcount         (mem_org_mode0_s_agent_m0_burstcount),    //   input,   width = 3,                         .burstcount
		.uav_read               (mem_org_mode0_s_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (mem_org_mode0_s_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (mem_org_mode0_s_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (mem_org_mode0_s_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (mem_org_mode0_s_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (mem_org_mode0_s_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (mem_org_mode0_s_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (mem_org_mode0_s_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (mem_org_mode0_s_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_write               (mem_org_mode0_s_write),                  //  output,   width = 1,      avalon_anti_slave_0.write
		.av_read                (mem_org_mode0_s_read),                   //  output,   width = 1,                         .read
		.av_readdata            (mem_org_mode0_s_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (mem_org_mode0_s_writedata),              //  output,  width = 32,                         .writedata
		.av_waitrequest         (mem_org_mode0_s_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_address             (),                                       // (terminated),                                       
		.av_begintransfer       (),                                       // (terminated),                                       
		.av_beginbursttransfer  (),                                       // (terminated),                                       
		.av_burstcount          (),                                       // (terminated),                                       
		.av_byteenable          (),                                       // (terminated),                                       
		.av_readdatavalid       (1'b0),                                   // (terminated),                                       
		.av_writebyteenable     (),                                       // (terminated),                                       
		.av_lock                (),                                       // (terminated),                                       
		.av_chipselect          (),                                       // (terminated),                                       
		.av_clken               (),                                       // (terminated),                                       
		.uav_clken              (1'b0),                                   // (terminated),                                       
		.av_debugaccess         (),                                       // (terminated),                                       
		.av_outputenable        (),                                       // (terminated),                                       
		.uav_response           (),                                       // (terminated),                                       
		.av_response            (2'b00),                                  // (terminated),                                       
		.uav_writeresponsevalid (),                                       // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                    // (terminated),                                       
	);

	board_kernel_interface_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) version_id_0_s_translator (
		.clk                    (clk_reset_clk_clk),                      //   input,   width = 1,                      clk.clk
		.reset                  (ctrl_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (version_id_0_s_agent_m0_address),        //   input,  width = 14, avalon_universal_slave_0.address
		.uav_burstcount         (version_id_0_s_agent_m0_burstcount),     //   input,   width = 3,                         .burstcount
		.uav_read               (version_id_0_s_agent_m0_read),           //   input,   width = 1,                         .read
		.uav_write              (version_id_0_s_agent_m0_write),          //   input,   width = 1,                         .write
		.uav_waitrequest        (version_id_0_s_agent_m0_waitrequest),    //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (version_id_0_s_agent_m0_readdatavalid),  //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (version_id_0_s_agent_m0_byteenable),     //   input,   width = 4,                         .byteenable
		.uav_readdata           (version_id_0_s_agent_m0_readdata),       //  output,  width = 32,                         .readdata
		.uav_writedata          (version_id_0_s_agent_m0_writedata),      //   input,  width = 32,                         .writedata
		.uav_lock               (version_id_0_s_agent_m0_lock),           //   input,   width = 1,                         .lock
		.uav_debugaccess        (version_id_0_s_agent_m0_debugaccess),    //   input,   width = 1,                         .debugaccess
		.av_read                (version_id_0_s_read),                    //  output,   width = 1,      avalon_anti_slave_0.read
		.av_readdata            (version_id_0_s_readdata),                //   input,  width = 32,                         .readdata
		.av_address             (),                                       // (terminated),                                       
		.av_write               (),                                       // (terminated),                                       
		.av_writedata           (),                                       // (terminated),                                       
		.av_begintransfer       (),                                       // (terminated),                                       
		.av_beginbursttransfer  (),                                       // (terminated),                                       
		.av_burstcount          (),                                       // (terminated),                                       
		.av_byteenable          (),                                       // (terminated),                                       
		.av_readdatavalid       (1'b0),                                   // (terminated),                                       
		.av_waitrequest         (1'b0),                                   // (terminated),                                       
		.av_writebyteenable     (),                                       // (terminated),                                       
		.av_lock                (),                                       // (terminated),                                       
		.av_chipselect          (),                                       // (terminated),                                       
		.av_clken               (),                                       // (terminated),                                       
		.uav_clken              (1'b0),                                   // (terminated),                                       
		.av_debugaccess         (),                                       // (terminated),                                       
		.av_outputenable        (),                                       // (terminated),                                       
		.uav_response           (),                                       // (terminated),                                       
		.av_response            (2'b00),                                  // (terminated),                                       
		.uav_writeresponsevalid (),                                       // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                    // (terminated),                                       
	);

	board_kernel_interface_altera_merlin_master_agent_191_mpbm6tq #(
		.PKT_WUNIQUE               (97),
		.PKT_DOMAIN_H              (96),
		.PKT_DOMAIN_L              (95),
		.PKT_SNOOP_H               (94),
		.PKT_SNOOP_L               (91),
		.PKT_BARRIER_H             (90),
		.PKT_BARRIER_L             (89),
		.PKT_ORI_BURST_SIZE_H      (88),
		.PKT_ORI_BURST_SIZE_L      (86),
		.PKT_RESPONSE_STATUS_H     (85),
		.PKT_RESPONSE_STATUS_L     (84),
		.PKT_QOS_H                 (69),
		.PKT_QOS_L                 (69),
		.PKT_DATA_SIDEBAND_H       (67),
		.PKT_DATA_SIDEBAND_L       (67),
		.PKT_ADDR_SIDEBAND_H       (66),
		.PKT_ADDR_SIDEBAND_L       (66),
		.PKT_BURST_TYPE_H          (65),
		.PKT_BURST_TYPE_L          (64),
		.PKT_CACHE_H               (83),
		.PKT_CACHE_L               (80),
		.PKT_THREAD_ID_H           (76),
		.PKT_THREAD_ID_L           (76),
		.PKT_BURST_SIZE_H          (63),
		.PKT_BURST_SIZE_L          (61),
		.PKT_TRANS_EXCLUSIVE       (55),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (68),
		.PKT_PROTECTION_H          (79),
		.PKT_PROTECTION_L          (77),
		.PKT_BURSTWRAP_H           (60),
		.PKT_BURSTWRAP_L           (60),
		.PKT_BYTE_CNT_H            (59),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (72),
		.PKT_SRC_ID_L              (70),
		.PKT_DEST_ID_H             (75),
		.PKT_DEST_ID_L             (73),
		.ST_DATA_W                 (98),
		.ST_CHANNEL_W              (5),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (0)
	) ctrl_m0_agent (
		.clk                   (clk_reset_clk_clk),                                          //   input,   width = 1,       clk.clk
		.reset                 (ctrl_reset_reset_bridge_in_reset_reset),                     //   input,   width = 1, clk_reset.reset
		.av_address            (ctrl_m0_translator_avalon_universal_master_0_address),       //   input,  width = 14,        av.address
		.av_write              (ctrl_m0_translator_avalon_universal_master_0_write),         //   input,   width = 1,          .write
		.av_read               (ctrl_m0_translator_avalon_universal_master_0_read),          //   input,   width = 1,          .read
		.av_writedata          (ctrl_m0_translator_avalon_universal_master_0_writedata),     //   input,  width = 32,          .writedata
		.av_readdata           (ctrl_m0_translator_avalon_universal_master_0_readdata),      //  output,  width = 32,          .readdata
		.av_waitrequest        (ctrl_m0_translator_avalon_universal_master_0_waitrequest),   //  output,   width = 1,          .waitrequest
		.av_readdatavalid      (ctrl_m0_translator_avalon_universal_master_0_readdatavalid), //  output,   width = 1,          .readdatavalid
		.av_byteenable         (ctrl_m0_translator_avalon_universal_master_0_byteenable),    //   input,   width = 4,          .byteenable
		.av_burstcount         (ctrl_m0_translator_avalon_universal_master_0_burstcount),    //   input,   width = 3,          .burstcount
		.av_debugaccess        (ctrl_m0_translator_avalon_universal_master_0_debugaccess),   //   input,   width = 1,          .debugaccess
		.av_lock               (ctrl_m0_translator_avalon_universal_master_0_lock),          //   input,   width = 1,          .lock
		.cp_valid              (ctrl_m0_agent_cp_valid),                                     //  output,   width = 1,        cp.valid
		.cp_data               (ctrl_m0_agent_cp_data),                                      //  output,  width = 98,          .data
		.cp_startofpacket      (ctrl_m0_agent_cp_startofpacket),                             //  output,   width = 1,          .startofpacket
		.cp_endofpacket        (ctrl_m0_agent_cp_endofpacket),                               //  output,   width = 1,          .endofpacket
		.cp_ready              (ctrl_m0_agent_cp_ready),                                     //   input,   width = 1,          .ready
		.rp_valid              (ctrl_m0_limiter_rsp_src_valid),                              //   input,   width = 1,        rp.valid
		.rp_data               (ctrl_m0_limiter_rsp_src_data),                               //   input,  width = 98,          .data
		.rp_channel            (ctrl_m0_limiter_rsp_src_channel),                            //   input,   width = 5,          .channel
		.rp_startofpacket      (ctrl_m0_limiter_rsp_src_startofpacket),                      //   input,   width = 1,          .startofpacket
		.rp_endofpacket        (ctrl_m0_limiter_rsp_src_endofpacket),                        //   input,   width = 1,          .endofpacket
		.rp_ready              (ctrl_m0_limiter_rsp_src_ready),                              //  output,   width = 1,          .ready
		.av_response           (),                                                           // (terminated),                        
		.av_writeresponsevalid ()                                                            // (terminated),                        
	);

	board_kernel_interface_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_BURST_SIZE_H          (99),
		.PKT_BURST_SIZE_L          (97),
		.PKT_TRANS_LOCK            (90),
		.PKT_BEGIN_BURST           (104),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURSTWRAP_H           (96),
		.PKT_BURSTWRAP_L           (96),
		.PKT_BYTE_CNT_H            (95),
		.PKT_BYTE_CNT_L            (92),
		.PKT_ADDR_H                (85),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (86),
		.PKT_TRANS_POSTED          (87),
		.PKT_TRANS_WRITE           (88),
		.PKT_TRANS_READ            (89),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (108),
		.PKT_SRC_ID_L              (106),
		.PKT_DEST_ID_H             (111),
		.PKT_DEST_ID_L             (109),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (134),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) address_span_extender_0_windowed_slave_agent (
		.clk                     (clk_reset_clk_clk),                                                          //   input,    width = 1,             clk.clk
		.reset                   (ctrl_reset_reset_bridge_in_reset_reset),                                     //   input,    width = 1,       clk_reset.reset
		.m0_address              (address_span_extender_0_windowed_slave_agent_m0_address),                    //  output,   width = 14,              m0.address
		.m0_burstcount           (address_span_extender_0_windowed_slave_agent_m0_burstcount),                 //  output,    width = 4,                .burstcount
		.m0_byteenable           (address_span_extender_0_windowed_slave_agent_m0_byteenable),                 //  output,    width = 8,                .byteenable
		.m0_debugaccess          (address_span_extender_0_windowed_slave_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (address_span_extender_0_windowed_slave_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (address_span_extender_0_windowed_slave_agent_m0_readdata),                   //   input,   width = 64,                .readdata
		.m0_readdatavalid        (address_span_extender_0_windowed_slave_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (address_span_extender_0_windowed_slave_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (address_span_extender_0_windowed_slave_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (address_span_extender_0_windowed_slave_agent_m0_writedata),                  //  output,   width = 64,                .writedata
		.m0_write                (address_span_extender_0_windowed_slave_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (address_span_extender_0_windowed_slave_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (address_span_extender_0_windowed_slave_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (address_span_extender_0_windowed_slave_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (address_span_extender_0_windowed_slave_agent_rp_data),                       //  output,  width = 134,                .data
		.rp_startofpacket        (address_span_extender_0_windowed_slave_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (address_span_extender_0_windowed_slave_cmd_width_adapter_src_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (address_span_extender_0_windowed_slave_cmd_width_adapter_src_valid),         //   input,    width = 1,                .valid
		.cp_data                 (address_span_extender_0_windowed_slave_cmd_width_adapter_src_data),          //   input,  width = 134,                .data
		.cp_startofpacket        (address_span_extender_0_windowed_slave_cmd_width_adapter_src_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (address_span_extender_0_windowed_slave_cmd_width_adapter_src_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (address_span_extender_0_windowed_slave_cmd_width_adapter_src_channel),       //   input,    width = 5,                .channel
		.rf_sink_ready           (address_span_extender_0_windowed_slave_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (address_span_extender_0_windowed_slave_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (address_span_extender_0_windowed_slave_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (address_span_extender_0_windowed_slave_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (address_span_extender_0_windowed_slave_agent_rsp_fifo_out_data),             //   input,  width = 135,                .data
		.rf_source_ready         (address_span_extender_0_windowed_slave_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (address_span_extender_0_windowed_slave_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (address_span_extender_0_windowed_slave_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (address_span_extender_0_windowed_slave_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (address_span_extender_0_windowed_slave_agent_rf_source_data),                //  output,  width = 135,                .data
		.rdata_fifo_sink_ready   (address_span_extender_0_windowed_slave_agent_rdata_fifo_src_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (address_span_extender_0_windowed_slave_agent_rdata_fifo_src_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (address_span_extender_0_windowed_slave_agent_rdata_fifo_src_data),           //   input,   width = 66,                .data
		.rdata_fifo_src_ready    (address_span_extender_0_windowed_slave_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (address_span_extender_0_windowed_slave_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (address_span_extender_0_windowed_slave_agent_rdata_fifo_src_data),           //  output,   width = 66,                .data
		.m0_response             (2'b00),                                                                      // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                       // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                        // (terminated),                               
	);

	board_kernel_interface_altera_avalon_sc_fifo_191_e5eqkcq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (135),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) address_span_extender_0_windowed_slave_agent_rsp_fifo (
		.clk               (clk_reset_clk_clk),                                                       //   input,    width = 1,       clk.clk
		.reset             (ctrl_reset_reset_bridge_in_reset_reset),                                  //   input,    width = 1, clk_reset.reset
		.in_data           (address_span_extender_0_windowed_slave_agent_rf_source_data),             //   input,  width = 135,        in.data
		.in_valid          (address_span_extender_0_windowed_slave_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (address_span_extender_0_windowed_slave_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (address_span_extender_0_windowed_slave_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (address_span_extender_0_windowed_slave_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (address_span_extender_0_windowed_slave_agent_rsp_fifo_out_data),          //  output,  width = 135,       out.data
		.out_valid         (address_span_extender_0_windowed_slave_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (address_span_extender_0_windowed_slave_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (address_span_extender_0_windowed_slave_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (address_span_extender_0_windowed_slave_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                   // (terminated),                         
		.csr_read          (1'b0),                                                                    // (terminated),                         
		.csr_write         (1'b0),                                                                    // (terminated),                         
		.csr_readdata      (),                                                                        // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                    // (terminated),                         
		.almost_full_data  (),                                                                        // (terminated),                         
		.almost_empty_data (),                                                                        // (terminated),                         
		.in_empty          (1'b0),                                                                    // (terminated),                         
		.out_empty         (),                                                                        // (terminated),                         
		.in_error          (1'b0),                                                                    // (terminated),                         
		.out_error         (),                                                                        // (terminated),                         
		.in_channel        (1'b0),                                                                    // (terminated),                         
		.out_channel       ()                                                                         // (terminated),                         
	);

	board_kernel_interface_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_BURST_SIZE_H          (99),
		.PKT_BURST_SIZE_L          (97),
		.PKT_TRANS_LOCK            (90),
		.PKT_BEGIN_BURST           (104),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURSTWRAP_H           (96),
		.PKT_BURSTWRAP_L           (96),
		.PKT_BYTE_CNT_H            (95),
		.PKT_BYTE_CNT_L            (92),
		.PKT_ADDR_H                (85),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (86),
		.PKT_TRANS_POSTED          (87),
		.PKT_TRANS_WRITE           (88),
		.PKT_TRANS_READ            (89),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (108),
		.PKT_SRC_ID_L              (106),
		.PKT_DEST_ID_H             (111),
		.PKT_DEST_ID_L             (109),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (134),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) address_span_extender_0_cntl_agent (
		.clk                     (clk_reset_clk_clk),                                                //   input,    width = 1,             clk.clk
		.reset                   (ctrl_reset_reset_bridge_in_reset_reset),                           //   input,    width = 1,       clk_reset.reset
		.m0_address              (address_span_extender_0_cntl_agent_m0_address),                    //  output,   width = 14,              m0.address
		.m0_burstcount           (address_span_extender_0_cntl_agent_m0_burstcount),                 //  output,    width = 4,                .burstcount
		.m0_byteenable           (address_span_extender_0_cntl_agent_m0_byteenable),                 //  output,    width = 8,                .byteenable
		.m0_debugaccess          (address_span_extender_0_cntl_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (address_span_extender_0_cntl_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (address_span_extender_0_cntl_agent_m0_readdata),                   //   input,   width = 64,                .readdata
		.m0_readdatavalid        (address_span_extender_0_cntl_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (address_span_extender_0_cntl_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (address_span_extender_0_cntl_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (address_span_extender_0_cntl_agent_m0_writedata),                  //  output,   width = 64,                .writedata
		.m0_write                (address_span_extender_0_cntl_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (address_span_extender_0_cntl_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (address_span_extender_0_cntl_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (address_span_extender_0_cntl_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (address_span_extender_0_cntl_agent_rp_data),                       //  output,  width = 134,                .data
		.rp_startofpacket        (address_span_extender_0_cntl_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (address_span_extender_0_cntl_cmd_width_adapter_src_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (address_span_extender_0_cntl_cmd_width_adapter_src_valid),         //   input,    width = 1,                .valid
		.cp_data                 (address_span_extender_0_cntl_cmd_width_adapter_src_data),          //   input,  width = 134,                .data
		.cp_startofpacket        (address_span_extender_0_cntl_cmd_width_adapter_src_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (address_span_extender_0_cntl_cmd_width_adapter_src_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (address_span_extender_0_cntl_cmd_width_adapter_src_channel),       //   input,    width = 5,                .channel
		.rf_sink_ready           (address_span_extender_0_cntl_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (address_span_extender_0_cntl_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (address_span_extender_0_cntl_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (address_span_extender_0_cntl_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (address_span_extender_0_cntl_agent_rsp_fifo_out_data),             //   input,  width = 135,                .data
		.rf_source_ready         (address_span_extender_0_cntl_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (address_span_extender_0_cntl_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (address_span_extender_0_cntl_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (address_span_extender_0_cntl_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (address_span_extender_0_cntl_agent_rf_source_data),                //  output,  width = 135,                .data
		.rdata_fifo_sink_ready   (address_span_extender_0_cntl_agent_rdata_fifo_src_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (address_span_extender_0_cntl_agent_rdata_fifo_src_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (address_span_extender_0_cntl_agent_rdata_fifo_src_data),           //   input,   width = 66,                .data
		.rdata_fifo_src_ready    (address_span_extender_0_cntl_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (address_span_extender_0_cntl_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (address_span_extender_0_cntl_agent_rdata_fifo_src_data),           //  output,   width = 66,                .data
		.m0_response             (2'b00),                                                            // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                             // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                              // (terminated),                               
	);

	board_kernel_interface_altera_avalon_sc_fifo_191_e5eqkcq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (135),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) address_span_extender_0_cntl_agent_rsp_fifo (
		.clk               (clk_reset_clk_clk),                                             //   input,    width = 1,       clk.clk
		.reset             (ctrl_reset_reset_bridge_in_reset_reset),                        //   input,    width = 1, clk_reset.reset
		.in_data           (address_span_extender_0_cntl_agent_rf_source_data),             //   input,  width = 135,        in.data
		.in_valid          (address_span_extender_0_cntl_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (address_span_extender_0_cntl_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (address_span_extender_0_cntl_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (address_span_extender_0_cntl_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (address_span_extender_0_cntl_agent_rsp_fifo_out_data),          //  output,  width = 135,       out.data
		.out_valid         (address_span_extender_0_cntl_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (address_span_extender_0_cntl_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (address_span_extender_0_cntl_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (address_span_extender_0_cntl_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                         // (terminated),                         
		.csr_read          (1'b0),                                                          // (terminated),                         
		.csr_write         (1'b0),                                                          // (terminated),                         
		.csr_readdata      (),                                                              // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated),                         
		.almost_full_data  (),                                                              // (terminated),                         
		.almost_empty_data (),                                                              // (terminated),                         
		.in_empty          (1'b0),                                                          // (terminated),                         
		.out_empty         (),                                                              // (terminated),                         
		.in_error          (1'b0),                                                          // (terminated),                         
		.out_error         (),                                                              // (terminated),                         
		.in_channel        (1'b0),                                                          // (terminated),                         
		.out_channel       ()                                                               // (terminated),                         
	);

	board_kernel_interface_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_BURST_SIZE_H          (99),
		.PKT_BURST_SIZE_L          (97),
		.PKT_TRANS_LOCK            (90),
		.PKT_BEGIN_BURST           (104),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURSTWRAP_H           (96),
		.PKT_BURSTWRAP_L           (96),
		.PKT_BYTE_CNT_H            (95),
		.PKT_BYTE_CNT_L            (92),
		.PKT_ADDR_H                (85),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (86),
		.PKT_TRANS_POSTED          (87),
		.PKT_TRANS_WRITE           (88),
		.PKT_TRANS_READ            (89),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (108),
		.PKT_SRC_ID_L              (106),
		.PKT_DEST_ID_H             (111),
		.PKT_DEST_ID_L             (109),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (134),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) sw_reset_s_agent (
		.clk                     (clk_reset_clk_clk),                              //   input,    width = 1,             clk.clk
		.reset                   (sw_reset_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (sw_reset_s_agent_m0_address),                    //  output,   width = 14,              m0.address
		.m0_burstcount           (sw_reset_s_agent_m0_burstcount),                 //  output,    width = 4,                .burstcount
		.m0_byteenable           (sw_reset_s_agent_m0_byteenable),                 //  output,    width = 8,                .byteenable
		.m0_debugaccess          (sw_reset_s_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (sw_reset_s_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (sw_reset_s_agent_m0_readdata),                   //   input,   width = 64,                .readdata
		.m0_readdatavalid        (sw_reset_s_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (sw_reset_s_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (sw_reset_s_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (sw_reset_s_agent_m0_writedata),                  //  output,   width = 64,                .writedata
		.m0_write                (sw_reset_s_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (sw_reset_s_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (sw_reset_s_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (sw_reset_s_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (sw_reset_s_agent_rp_data),                       //  output,  width = 134,                .data
		.rp_startofpacket        (sw_reset_s_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (sw_reset_s_cmd_width_adapter_src_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (sw_reset_s_cmd_width_adapter_src_valid),         //   input,    width = 1,                .valid
		.cp_data                 (sw_reset_s_cmd_width_adapter_src_data),          //   input,  width = 134,                .data
		.cp_startofpacket        (sw_reset_s_cmd_width_adapter_src_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (sw_reset_s_cmd_width_adapter_src_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (sw_reset_s_cmd_width_adapter_src_channel),       //   input,    width = 5,                .channel
		.rf_sink_ready           (sw_reset_s_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (sw_reset_s_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (sw_reset_s_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (sw_reset_s_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (sw_reset_s_agent_rsp_fifo_out_data),             //   input,  width = 135,                .data
		.rf_source_ready         (sw_reset_s_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (sw_reset_s_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (sw_reset_s_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (sw_reset_s_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (sw_reset_s_agent_rf_source_data),                //  output,  width = 135,                .data
		.rdata_fifo_sink_ready   (sw_reset_s_agent_rdata_fifo_src_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (sw_reset_s_agent_rdata_fifo_src_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (sw_reset_s_agent_rdata_fifo_src_data),           //   input,   width = 66,                .data
		.rdata_fifo_src_ready    (sw_reset_s_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sw_reset_s_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (sw_reset_s_agent_rdata_fifo_src_data),           //  output,   width = 66,                .data
		.m0_response             (2'b00),                                          // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                           // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                            // (terminated),                               
	);

	board_kernel_interface_altera_avalon_sc_fifo_191_e5eqkcq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (135),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) sw_reset_s_agent_rsp_fifo (
		.clk               (clk_reset_clk_clk),                              //   input,    width = 1,       clk.clk
		.reset             (sw_reset_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (sw_reset_s_agent_rf_source_data),                //   input,  width = 135,        in.data
		.in_valid          (sw_reset_s_agent_rf_source_valid),               //   input,    width = 1,          .valid
		.in_ready          (sw_reset_s_agent_rf_source_ready),               //  output,    width = 1,          .ready
		.in_startofpacket  (sw_reset_s_agent_rf_source_startofpacket),       //   input,    width = 1,          .startofpacket
		.in_endofpacket    (sw_reset_s_agent_rf_source_endofpacket),         //   input,    width = 1,          .endofpacket
		.out_data          (sw_reset_s_agent_rsp_fifo_out_data),             //  output,  width = 135,       out.data
		.out_valid         (sw_reset_s_agent_rsp_fifo_out_valid),            //  output,    width = 1,          .valid
		.out_ready         (sw_reset_s_agent_rsp_fifo_out_ready),            //   input,    width = 1,          .ready
		.out_startofpacket (sw_reset_s_agent_rsp_fifo_out_startofpacket),    //  output,    width = 1,          .startofpacket
		.out_endofpacket   (sw_reset_s_agent_rsp_fifo_out_endofpacket),      //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                          // (terminated),                         
		.csr_read          (1'b0),                                           // (terminated),                         
		.csr_write         (1'b0),                                           // (terminated),                         
		.csr_readdata      (),                                               // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated),                         
		.almost_full_data  (),                                               // (terminated),                         
		.almost_empty_data (),                                               // (terminated),                         
		.in_empty          (1'b0),                                           // (terminated),                         
		.out_empty         (),                                               // (terminated),                         
		.in_error          (1'b0),                                           // (terminated),                         
		.out_error         (),                                               // (terminated),                         
		.in_channel        (1'b0),                                           // (terminated),                         
		.out_channel       ()                                                // (terminated),                         
	);

	board_kernel_interface_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (88),
		.PKT_ORI_BURST_SIZE_L      (86),
		.PKT_RESPONSE_STATUS_H     (85),
		.PKT_RESPONSE_STATUS_L     (84),
		.PKT_BURST_SIZE_H          (63),
		.PKT_BURST_SIZE_L          (61),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (68),
		.PKT_PROTECTION_H          (79),
		.PKT_PROTECTION_L          (77),
		.PKT_BURSTWRAP_H           (60),
		.PKT_BURSTWRAP_L           (60),
		.PKT_BYTE_CNT_H            (59),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (72),
		.PKT_SRC_ID_L              (70),
		.PKT_DEST_ID_H             (75),
		.PKT_DEST_ID_L             (73),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (98),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) mem_org_mode0_s_agent (
		.clk                     (clk_reset_clk_clk),                                //   input,   width = 1,             clk.clk
		.reset                   (ctrl_reset_reset_bridge_in_reset_reset),           //   input,   width = 1,       clk_reset.reset
		.m0_address              (mem_org_mode0_s_agent_m0_address),                 //  output,  width = 14,              m0.address
		.m0_burstcount           (mem_org_mode0_s_agent_m0_burstcount),              //  output,   width = 3,                .burstcount
		.m0_byteenable           (mem_org_mode0_s_agent_m0_byteenable),              //  output,   width = 4,                .byteenable
		.m0_debugaccess          (mem_org_mode0_s_agent_m0_debugaccess),             //  output,   width = 1,                .debugaccess
		.m0_lock                 (mem_org_mode0_s_agent_m0_lock),                    //  output,   width = 1,                .lock
		.m0_readdata             (mem_org_mode0_s_agent_m0_readdata),                //   input,  width = 32,                .readdata
		.m0_readdatavalid        (mem_org_mode0_s_agent_m0_readdatavalid),           //   input,   width = 1,                .readdatavalid
		.m0_read                 (mem_org_mode0_s_agent_m0_read),                    //  output,   width = 1,                .read
		.m0_waitrequest          (mem_org_mode0_s_agent_m0_waitrequest),             //   input,   width = 1,                .waitrequest
		.m0_writedata            (mem_org_mode0_s_agent_m0_writedata),               //  output,  width = 32,                .writedata
		.m0_write                (mem_org_mode0_s_agent_m0_write),                   //  output,   width = 1,                .write
		.rp_endofpacket          (mem_org_mode0_s_agent_rp_endofpacket),             //  output,   width = 1,              rp.endofpacket
		.rp_ready                (mem_org_mode0_s_agent_rp_ready),                   //   input,   width = 1,                .ready
		.rp_valid                (mem_org_mode0_s_agent_rp_valid),                   //  output,   width = 1,                .valid
		.rp_data                 (mem_org_mode0_s_agent_rp_data),                    //  output,  width = 98,                .data
		.rp_startofpacket        (mem_org_mode0_s_agent_rp_startofpacket),           //  output,   width = 1,                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                            //  output,   width = 1,              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                            //   input,   width = 1,                .valid
		.cp_data                 (cmd_mux_003_src_data),                             //   input,  width = 98,                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                    //   input,   width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                      //   input,   width = 1,                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                          //   input,   width = 5,                .channel
		.rf_sink_ready           (mem_org_mode0_s_agent_rsp_fifo_out_ready),         //  output,   width = 1,         rf_sink.ready
		.rf_sink_valid           (mem_org_mode0_s_agent_rsp_fifo_out_valid),         //   input,   width = 1,                .valid
		.rf_sink_startofpacket   (mem_org_mode0_s_agent_rsp_fifo_out_startofpacket), //   input,   width = 1,                .startofpacket
		.rf_sink_endofpacket     (mem_org_mode0_s_agent_rsp_fifo_out_endofpacket),   //   input,   width = 1,                .endofpacket
		.rf_sink_data            (mem_org_mode0_s_agent_rsp_fifo_out_data),          //   input,  width = 99,                .data
		.rf_source_ready         (mem_org_mode0_s_agent_rf_source_ready),            //   input,   width = 1,       rf_source.ready
		.rf_source_valid         (mem_org_mode0_s_agent_rf_source_valid),            //  output,   width = 1,                .valid
		.rf_source_startofpacket (mem_org_mode0_s_agent_rf_source_startofpacket),    //  output,   width = 1,                .startofpacket
		.rf_source_endofpacket   (mem_org_mode0_s_agent_rf_source_endofpacket),      //  output,   width = 1,                .endofpacket
		.rf_source_data          (mem_org_mode0_s_agent_rf_source_data),             //  output,  width = 99,                .data
		.rdata_fifo_sink_ready   (mem_org_mode0_s_agent_rdata_fifo_src_ready),       //  output,   width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (mem_org_mode0_s_agent_rdata_fifo_src_valid),       //   input,   width = 1,                .valid
		.rdata_fifo_sink_data    (mem_org_mode0_s_agent_rdata_fifo_src_data),        //   input,  width = 34,                .data
		.rdata_fifo_src_ready    (mem_org_mode0_s_agent_rdata_fifo_src_ready),       //   input,   width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mem_org_mode0_s_agent_rdata_fifo_src_valid),       //  output,   width = 1,                .valid
		.rdata_fifo_src_data     (mem_org_mode0_s_agent_rdata_fifo_src_data),        //  output,  width = 34,                .data
		.m0_response             (2'b00),                                            // (terminated),                              
		.m0_writeresponsevalid   (1'b0),                                             // (terminated),                              
		.rdata_fifo_sink_error   (1'b0)                                              // (terminated),                              
	);

	board_kernel_interface_altera_avalon_sc_fifo_191_e5eqkcq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (99),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) mem_org_mode0_s_agent_rsp_fifo (
		.clk               (clk_reset_clk_clk),                                //   input,   width = 1,       clk.clk
		.reset             (ctrl_reset_reset_bridge_in_reset_reset),           //   input,   width = 1, clk_reset.reset
		.in_data           (mem_org_mode0_s_agent_rf_source_data),             //   input,  width = 99,        in.data
		.in_valid          (mem_org_mode0_s_agent_rf_source_valid),            //   input,   width = 1,          .valid
		.in_ready          (mem_org_mode0_s_agent_rf_source_ready),            //  output,   width = 1,          .ready
		.in_startofpacket  (mem_org_mode0_s_agent_rf_source_startofpacket),    //   input,   width = 1,          .startofpacket
		.in_endofpacket    (mem_org_mode0_s_agent_rf_source_endofpacket),      //   input,   width = 1,          .endofpacket
		.out_data          (mem_org_mode0_s_agent_rsp_fifo_out_data),          //  output,  width = 99,       out.data
		.out_valid         (mem_org_mode0_s_agent_rsp_fifo_out_valid),         //  output,   width = 1,          .valid
		.out_ready         (mem_org_mode0_s_agent_rsp_fifo_out_ready),         //   input,   width = 1,          .ready
		.out_startofpacket (mem_org_mode0_s_agent_rsp_fifo_out_startofpacket), //  output,   width = 1,          .startofpacket
		.out_endofpacket   (mem_org_mode0_s_agent_rsp_fifo_out_endofpacket),   //  output,   width = 1,          .endofpacket
		.csr_address       (2'b00),                                            // (terminated),                        
		.csr_read          (1'b0),                                             // (terminated),                        
		.csr_write         (1'b0),                                             // (terminated),                        
		.csr_readdata      (),                                                 // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated),                        
		.almost_full_data  (),                                                 // (terminated),                        
		.almost_empty_data (),                                                 // (terminated),                        
		.in_empty          (1'b0),                                             // (terminated),                        
		.out_empty         (),                                                 // (terminated),                        
		.in_error          (1'b0),                                             // (terminated),                        
		.out_error         (),                                                 // (terminated),                        
		.in_channel        (1'b0),                                             // (terminated),                        
		.out_channel       ()                                                  // (terminated),                        
	);

	board_kernel_interface_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (88),
		.PKT_ORI_BURST_SIZE_L      (86),
		.PKT_RESPONSE_STATUS_H     (85),
		.PKT_RESPONSE_STATUS_L     (84),
		.PKT_BURST_SIZE_H          (63),
		.PKT_BURST_SIZE_L          (61),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (68),
		.PKT_PROTECTION_H          (79),
		.PKT_PROTECTION_L          (77),
		.PKT_BURSTWRAP_H           (60),
		.PKT_BURSTWRAP_L           (60),
		.PKT_BYTE_CNT_H            (59),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (72),
		.PKT_SRC_ID_L              (70),
		.PKT_DEST_ID_H             (75),
		.PKT_DEST_ID_L             (73),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (98),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) version_id_0_s_agent (
		.clk                     (clk_reset_clk_clk),                               //   input,   width = 1,             clk.clk
		.reset                   (ctrl_reset_reset_bridge_in_reset_reset),          //   input,   width = 1,       clk_reset.reset
		.m0_address              (version_id_0_s_agent_m0_address),                 //  output,  width = 14,              m0.address
		.m0_burstcount           (version_id_0_s_agent_m0_burstcount),              //  output,   width = 3,                .burstcount
		.m0_byteenable           (version_id_0_s_agent_m0_byteenable),              //  output,   width = 4,                .byteenable
		.m0_debugaccess          (version_id_0_s_agent_m0_debugaccess),             //  output,   width = 1,                .debugaccess
		.m0_lock                 (version_id_0_s_agent_m0_lock),                    //  output,   width = 1,                .lock
		.m0_readdata             (version_id_0_s_agent_m0_readdata),                //   input,  width = 32,                .readdata
		.m0_readdatavalid        (version_id_0_s_agent_m0_readdatavalid),           //   input,   width = 1,                .readdatavalid
		.m0_read                 (version_id_0_s_agent_m0_read),                    //  output,   width = 1,                .read
		.m0_waitrequest          (version_id_0_s_agent_m0_waitrequest),             //   input,   width = 1,                .waitrequest
		.m0_writedata            (version_id_0_s_agent_m0_writedata),               //  output,  width = 32,                .writedata
		.m0_write                (version_id_0_s_agent_m0_write),                   //  output,   width = 1,                .write
		.rp_endofpacket          (version_id_0_s_agent_rp_endofpacket),             //  output,   width = 1,              rp.endofpacket
		.rp_ready                (version_id_0_s_agent_rp_ready),                   //   input,   width = 1,                .ready
		.rp_valid                (version_id_0_s_agent_rp_valid),                   //  output,   width = 1,                .valid
		.rp_data                 (version_id_0_s_agent_rp_data),                    //  output,  width = 98,                .data
		.rp_startofpacket        (version_id_0_s_agent_rp_startofpacket),           //  output,   width = 1,                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                           //  output,   width = 1,              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                           //   input,   width = 1,                .valid
		.cp_data                 (cmd_mux_004_src_data),                            //   input,  width = 98,                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                   //   input,   width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                     //   input,   width = 1,                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                         //   input,   width = 5,                .channel
		.rf_sink_ready           (version_id_0_s_agent_rsp_fifo_out_ready),         //  output,   width = 1,         rf_sink.ready
		.rf_sink_valid           (version_id_0_s_agent_rsp_fifo_out_valid),         //   input,   width = 1,                .valid
		.rf_sink_startofpacket   (version_id_0_s_agent_rsp_fifo_out_startofpacket), //   input,   width = 1,                .startofpacket
		.rf_sink_endofpacket     (version_id_0_s_agent_rsp_fifo_out_endofpacket),   //   input,   width = 1,                .endofpacket
		.rf_sink_data            (version_id_0_s_agent_rsp_fifo_out_data),          //   input,  width = 99,                .data
		.rf_source_ready         (version_id_0_s_agent_rf_source_ready),            //   input,   width = 1,       rf_source.ready
		.rf_source_valid         (version_id_0_s_agent_rf_source_valid),            //  output,   width = 1,                .valid
		.rf_source_startofpacket (version_id_0_s_agent_rf_source_startofpacket),    //  output,   width = 1,                .startofpacket
		.rf_source_endofpacket   (version_id_0_s_agent_rf_source_endofpacket),      //  output,   width = 1,                .endofpacket
		.rf_source_data          (version_id_0_s_agent_rf_source_data),             //  output,  width = 99,                .data
		.rdata_fifo_sink_ready   (version_id_0_s_agent_rdata_fifo_src_ready),       //  output,   width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (version_id_0_s_agent_rdata_fifo_src_valid),       //   input,   width = 1,                .valid
		.rdata_fifo_sink_data    (version_id_0_s_agent_rdata_fifo_src_data),        //   input,  width = 34,                .data
		.rdata_fifo_src_ready    (version_id_0_s_agent_rdata_fifo_src_ready),       //   input,   width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (version_id_0_s_agent_rdata_fifo_src_valid),       //  output,   width = 1,                .valid
		.rdata_fifo_src_data     (version_id_0_s_agent_rdata_fifo_src_data),        //  output,  width = 34,                .data
		.m0_response             (2'b00),                                           // (terminated),                              
		.m0_writeresponsevalid   (1'b0),                                            // (terminated),                              
		.rdata_fifo_sink_error   (1'b0)                                             // (terminated),                              
	);

	board_kernel_interface_altera_avalon_sc_fifo_191_e5eqkcq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (99),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) version_id_0_s_agent_rsp_fifo (
		.clk               (clk_reset_clk_clk),                               //   input,   width = 1,       clk.clk
		.reset             (ctrl_reset_reset_bridge_in_reset_reset),          //   input,   width = 1, clk_reset.reset
		.in_data           (version_id_0_s_agent_rf_source_data),             //   input,  width = 99,        in.data
		.in_valid          (version_id_0_s_agent_rf_source_valid),            //   input,   width = 1,          .valid
		.in_ready          (version_id_0_s_agent_rf_source_ready),            //  output,   width = 1,          .ready
		.in_startofpacket  (version_id_0_s_agent_rf_source_startofpacket),    //   input,   width = 1,          .startofpacket
		.in_endofpacket    (version_id_0_s_agent_rf_source_endofpacket),      //   input,   width = 1,          .endofpacket
		.out_data          (version_id_0_s_agent_rsp_fifo_out_data),          //  output,  width = 99,       out.data
		.out_valid         (version_id_0_s_agent_rsp_fifo_out_valid),         //  output,   width = 1,          .valid
		.out_ready         (version_id_0_s_agent_rsp_fifo_out_ready),         //   input,   width = 1,          .ready
		.out_startofpacket (version_id_0_s_agent_rsp_fifo_out_startofpacket), //  output,   width = 1,          .startofpacket
		.out_endofpacket   (version_id_0_s_agent_rsp_fifo_out_endofpacket),   //  output,   width = 1,          .endofpacket
		.csr_address       (2'b00),                                           // (terminated),                        
		.csr_read          (1'b0),                                            // (terminated),                        
		.csr_write         (1'b0),                                            // (terminated),                        
		.csr_readdata      (),                                                // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated),                        
		.almost_full_data  (),                                                // (terminated),                        
		.almost_empty_data (),                                                // (terminated),                        
		.in_empty          (1'b0),                                            // (terminated),                        
		.out_empty         (),                                                // (terminated),                        
		.in_error          (1'b0),                                            // (terminated),                        
		.out_error         (),                                                // (terminated),                        
		.in_channel        (1'b0),                                            // (terminated),                        
		.out_channel       ()                                                 // (terminated),                        
	);

	board_kernel_interface_altera_merlin_router_191_3sutxdi router (
		.sink_ready         (ctrl_m0_agent_cp_ready),                 //  output,   width = 1,      sink.ready
		.sink_valid         (ctrl_m0_agent_cp_valid),                 //   input,   width = 1,          .valid
		.sink_data          (ctrl_m0_agent_cp_data),                  //   input,  width = 98,          .data
		.sink_startofpacket (ctrl_m0_agent_cp_startofpacket),         //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (ctrl_m0_agent_cp_endofpacket),           //   input,   width = 1,          .endofpacket
		.clk                (clk_reset_clk_clk),                      //   input,   width = 1,       clk.clk
		.reset              (ctrl_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.src_ready          (router_src_ready),                       //   input,   width = 1,       src.ready
		.src_valid          (router_src_valid),                       //  output,   width = 1,          .valid
		.src_data           (router_src_data),                        //  output,  width = 98,          .data
		.src_channel        (router_src_channel),                     //  output,   width = 5,          .channel
		.src_startofpacket  (router_src_startofpacket),               //  output,   width = 1,          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                  //  output,   width = 1,          .endofpacket
	);

	board_kernel_interface_altera_merlin_router_191_7xefbqi router_001 (
		.sink_ready         (address_span_extender_0_windowed_slave_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (address_span_extender_0_windowed_slave_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (address_span_extender_0_windowed_slave_agent_rp_data),          //   input,  width = 134,          .data
		.sink_startofpacket (address_span_extender_0_windowed_slave_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (address_span_extender_0_windowed_slave_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clk_reset_clk_clk),                                             //   input,    width = 1,       clk.clk
		.reset              (ctrl_reset_reset_bridge_in_reset_reset),                        //   input,    width = 1, clk_reset.reset
		.src_ready          (router_001_src_ready),                                          //   input,    width = 1,       src.ready
		.src_valid          (router_001_src_valid),                                          //  output,    width = 1,          .valid
		.src_data           (router_001_src_data),                                           //  output,  width = 134,          .data
		.src_channel        (router_001_src_channel),                                        //  output,    width = 5,          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                  //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                     //  output,    width = 1,          .endofpacket
	);

	board_kernel_interface_altera_merlin_router_191_7xefbqi router_002 (
		.sink_ready         (address_span_extender_0_cntl_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (address_span_extender_0_cntl_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (address_span_extender_0_cntl_agent_rp_data),          //   input,  width = 134,          .data
		.sink_startofpacket (address_span_extender_0_cntl_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (address_span_extender_0_cntl_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (clk_reset_clk_clk),                                   //   input,    width = 1,       clk.clk
		.reset              (ctrl_reset_reset_bridge_in_reset_reset),              //   input,    width = 1, clk_reset.reset
		.src_ready          (router_002_src_ready),                                //   input,    width = 1,       src.ready
		.src_valid          (router_002_src_valid),                                //  output,    width = 1,          .valid
		.src_data           (router_002_src_data),                                 //  output,  width = 134,          .data
		.src_channel        (router_002_src_channel),                              //  output,    width = 5,          .channel
		.src_startofpacket  (router_002_src_startofpacket),                        //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                           //  output,    width = 1,          .endofpacket
	);

	board_kernel_interface_altera_merlin_router_191_7xefbqi router_003 (
		.sink_ready         (sw_reset_s_agent_rp_ready),                      //  output,    width = 1,      sink.ready
		.sink_valid         (sw_reset_s_agent_rp_valid),                      //   input,    width = 1,          .valid
		.sink_data          (sw_reset_s_agent_rp_data),                       //   input,  width = 134,          .data
		.sink_startofpacket (sw_reset_s_agent_rp_startofpacket),              //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (sw_reset_s_agent_rp_endofpacket),                //   input,    width = 1,          .endofpacket
		.clk                (clk_reset_clk_clk),                              //   input,    width = 1,       clk.clk
		.reset              (sw_reset_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_003_src_ready),                           //   input,    width = 1,       src.ready
		.src_valid          (router_003_src_valid),                           //  output,    width = 1,          .valid
		.src_data           (router_003_src_data),                            //  output,  width = 134,          .data
		.src_channel        (router_003_src_channel),                         //  output,    width = 5,          .channel
		.src_startofpacket  (router_003_src_startofpacket),                   //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                      //  output,    width = 1,          .endofpacket
	);

	board_kernel_interface_altera_merlin_router_191_mfamhai router_004 (
		.sink_ready         (mem_org_mode0_s_agent_rp_ready),         //  output,   width = 1,      sink.ready
		.sink_valid         (mem_org_mode0_s_agent_rp_valid),         //   input,   width = 1,          .valid
		.sink_data          (mem_org_mode0_s_agent_rp_data),          //   input,  width = 98,          .data
		.sink_startofpacket (mem_org_mode0_s_agent_rp_startofpacket), //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (mem_org_mode0_s_agent_rp_endofpacket),   //   input,   width = 1,          .endofpacket
		.clk                (clk_reset_clk_clk),                      //   input,   width = 1,       clk.clk
		.reset              (ctrl_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.src_ready          (router_004_src_ready),                   //   input,   width = 1,       src.ready
		.src_valid          (router_004_src_valid),                   //  output,   width = 1,          .valid
		.src_data           (router_004_src_data),                    //  output,  width = 98,          .data
		.src_channel        (router_004_src_channel),                 //  output,   width = 5,          .channel
		.src_startofpacket  (router_004_src_startofpacket),           //  output,   width = 1,          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)              //  output,   width = 1,          .endofpacket
	);

	board_kernel_interface_altera_merlin_router_191_mfamhai router_005 (
		.sink_ready         (version_id_0_s_agent_rp_ready),          //  output,   width = 1,      sink.ready
		.sink_valid         (version_id_0_s_agent_rp_valid),          //   input,   width = 1,          .valid
		.sink_data          (version_id_0_s_agent_rp_data),           //   input,  width = 98,          .data
		.sink_startofpacket (version_id_0_s_agent_rp_startofpacket),  //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (version_id_0_s_agent_rp_endofpacket),    //   input,   width = 1,          .endofpacket
		.clk                (clk_reset_clk_clk),                      //   input,   width = 1,       clk.clk
		.reset              (ctrl_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.src_ready          (router_005_src_ready),                   //   input,   width = 1,       src.ready
		.src_valid          (router_005_src_valid),                   //  output,   width = 1,          .valid
		.src_data           (router_005_src_data),                    //  output,  width = 98,          .data
		.src_channel        (router_005_src_channel),                 //  output,   width = 5,          .channel
		.src_startofpacket  (router_005_src_startofpacket),           //  output,   width = 1,          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)              //  output,   width = 1,          .endofpacket
	);

	board_kernel_interface_altera_merlin_traffic_limiter_191_kcba44q #(
		.SYNC_RESET                (0),
		.PKT_DEST_ID_H             (75),
		.PKT_DEST_ID_L             (73),
		.PKT_SRC_ID_H              (72),
		.PKT_SRC_ID_L              (70),
		.PKT_BYTE_CNT_H            (59),
		.PKT_BYTE_CNT_L            (56),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.MAX_OUTSTANDING_RESPONSES (2),
		.PIPELINED                 (0),
		.ST_DATA_W                 (98),
		.ST_CHANNEL_W              (5),
		.VALID_WIDTH               (5),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) ctrl_m0_limiter (
		.clk                    (clk_reset_clk_clk),                      //   input,   width = 1,       clk.clk
		.reset                  (ctrl_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                       //  output,   width = 1,  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                       //   input,   width = 1,          .valid
		.cmd_sink_data          (router_src_data),                        //   input,  width = 98,          .data
		.cmd_sink_channel       (router_src_channel),                     //   input,   width = 5,          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),               //   input,   width = 1,          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                 //   input,   width = 1,          .endofpacket
		.cmd_src_ready          (ctrl_m0_limiter_cmd_src_ready),          //   input,   width = 1,   cmd_src.ready
		.cmd_src_data           (ctrl_m0_limiter_cmd_src_data),           //  output,  width = 98,          .data
		.cmd_src_channel        (ctrl_m0_limiter_cmd_src_channel),        //  output,   width = 5,          .channel
		.cmd_src_startofpacket  (ctrl_m0_limiter_cmd_src_startofpacket),  //  output,   width = 1,          .startofpacket
		.cmd_src_endofpacket    (ctrl_m0_limiter_cmd_src_endofpacket),    //  output,   width = 1,          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                      //  output,   width = 1,  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                      //   input,   width = 1,          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                    //   input,   width = 5,          .channel
		.rsp_sink_data          (rsp_mux_src_data),                       //   input,  width = 98,          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),              //   input,   width = 1,          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                //   input,   width = 1,          .endofpacket
		.rsp_src_ready          (ctrl_m0_limiter_rsp_src_ready),          //   input,   width = 1,   rsp_src.ready
		.rsp_src_valid          (ctrl_m0_limiter_rsp_src_valid),          //  output,   width = 1,          .valid
		.rsp_src_data           (ctrl_m0_limiter_rsp_src_data),           //  output,  width = 98,          .data
		.rsp_src_channel        (ctrl_m0_limiter_rsp_src_channel),        //  output,   width = 5,          .channel
		.rsp_src_startofpacket  (ctrl_m0_limiter_rsp_src_startofpacket),  //  output,   width = 1,          .startofpacket
		.rsp_src_endofpacket    (ctrl_m0_limiter_rsp_src_endofpacket),    //  output,   width = 1,          .endofpacket
		.cmd_src_valid          (ctrl_m0_limiter_cmd_valid_data)          //  output,   width = 5, cmd_valid.data
	);

	board_kernel_interface_altera_merlin_demultiplexer_191_mcgcnfa cmd_demux (
		.clk                (clk_reset_clk_clk),                      //   input,   width = 1,        clk.clk
		.reset              (ctrl_reset_reset_bridge_in_reset_reset), //   input,   width = 1,  clk_reset.reset
		.sink_ready         (ctrl_m0_limiter_cmd_src_ready),          //  output,   width = 1,       sink.ready
		.sink_channel       (ctrl_m0_limiter_cmd_src_channel),        //   input,   width = 5,           .channel
		.sink_data          (ctrl_m0_limiter_cmd_src_data),           //   input,  width = 98,           .data
		.sink_startofpacket (ctrl_m0_limiter_cmd_src_startofpacket),  //   input,   width = 1,           .startofpacket
		.sink_endofpacket   (ctrl_m0_limiter_cmd_src_endofpacket),    //   input,   width = 1,           .endofpacket
		.sink_valid         (ctrl_m0_limiter_cmd_valid_data),         //   input,   width = 5, sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                   //   input,   width = 1,       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                   //  output,   width = 1,           .valid
		.src0_data          (cmd_demux_src0_data),                    //  output,  width = 98,           .data
		.src0_channel       (cmd_demux_src0_channel),                 //  output,   width = 5,           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),           //  output,   width = 1,           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),             //  output,   width = 1,           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                   //   input,   width = 1,       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                   //  output,   width = 1,           .valid
		.src1_data          (cmd_demux_src1_data),                    //  output,  width = 98,           .data
		.src1_channel       (cmd_demux_src1_channel),                 //  output,   width = 5,           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),           //  output,   width = 1,           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),             //  output,   width = 1,           .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                   //   input,   width = 1,       src2.ready
		.src2_valid         (cmd_demux_src2_valid),                   //  output,   width = 1,           .valid
		.src2_data          (cmd_demux_src2_data),                    //  output,  width = 98,           .data
		.src2_channel       (cmd_demux_src2_channel),                 //  output,   width = 5,           .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),           //  output,   width = 1,           .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),             //  output,   width = 1,           .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                   //   input,   width = 1,       src3.ready
		.src3_valid         (cmd_demux_src3_valid),                   //  output,   width = 1,           .valid
		.src3_data          (cmd_demux_src3_data),                    //  output,  width = 98,           .data
		.src3_channel       (cmd_demux_src3_channel),                 //  output,   width = 5,           .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),           //  output,   width = 1,           .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket),             //  output,   width = 1,           .endofpacket
		.src4_ready         (cmd_demux_src4_ready),                   //   input,   width = 1,       src4.ready
		.src4_valid         (cmd_demux_src4_valid),                   //  output,   width = 1,           .valid
		.src4_data          (cmd_demux_src4_data),                    //  output,  width = 98,           .data
		.src4_channel       (cmd_demux_src4_channel),                 //  output,   width = 5,           .channel
		.src4_startofpacket (cmd_demux_src4_startofpacket),           //  output,   width = 1,           .startofpacket
		.src4_endofpacket   (cmd_demux_src4_endofpacket)              //  output,   width = 1,           .endofpacket
	);

	board_kernel_interface_altera_merlin_multiplexer_191_o5dcrxq cmd_mux (
		.clk                 (clk_reset_clk_clk),                      //   input,   width = 1,       clk.clk
		.reset               (ctrl_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                      //   input,   width = 1,       src.ready
		.src_valid           (cmd_mux_src_valid),                      //  output,   width = 1,          .valid
		.src_data            (cmd_mux_src_data),                       //  output,  width = 98,          .data
		.src_channel         (cmd_mux_src_channel),                    //  output,   width = 5,          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),              //  output,   width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                //  output,   width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                   //  output,   width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                   //   input,   width = 1,          .valid
		.sink0_channel       (cmd_demux_src0_channel),                 //   input,   width = 5,          .channel
		.sink0_data          (cmd_demux_src0_data),                    //   input,  width = 98,          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),           //   input,   width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)              //   input,   width = 1,          .endofpacket
	);

	board_kernel_interface_altera_merlin_multiplexer_191_o5dcrxq cmd_mux_001 (
		.clk                 (clk_reset_clk_clk),                      //   input,   width = 1,       clk.clk
		.reset               (ctrl_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                  //   input,   width = 1,       src.ready
		.src_valid           (cmd_mux_001_src_valid),                  //  output,   width = 1,          .valid
		.src_data            (cmd_mux_001_src_data),                   //  output,  width = 98,          .data
		.src_channel         (cmd_mux_001_src_channel),                //  output,   width = 5,          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),          //  output,   width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),            //  output,   width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                   //  output,   width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                   //   input,   width = 1,          .valid
		.sink0_channel       (cmd_demux_src1_channel),                 //   input,   width = 5,          .channel
		.sink0_data          (cmd_demux_src1_data),                    //   input,  width = 98,          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),           //   input,   width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)              //   input,   width = 1,          .endofpacket
	);

	board_kernel_interface_altera_merlin_multiplexer_191_o5dcrxq cmd_mux_002 (
		.clk                 (clk_reset_clk_clk),                              //   input,   width = 1,       clk.clk
		.reset               (sw_reset_clk_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                          //   input,   width = 1,       src.ready
		.src_valid           (cmd_mux_002_src_valid),                          //  output,   width = 1,          .valid
		.src_data            (cmd_mux_002_src_data),                           //  output,  width = 98,          .data
		.src_channel         (cmd_mux_002_src_channel),                        //  output,   width = 5,          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                  //  output,   width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                    //  output,   width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                           //  output,   width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                           //   input,   width = 1,          .valid
		.sink0_channel       (cmd_demux_src2_channel),                         //   input,   width = 5,          .channel
		.sink0_data          (cmd_demux_src2_data),                            //   input,  width = 98,          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                   //   input,   width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket)                      //   input,   width = 1,          .endofpacket
	);

	board_kernel_interface_altera_merlin_multiplexer_191_o5dcrxq cmd_mux_003 (
		.clk                 (clk_reset_clk_clk),                      //   input,   width = 1,       clk.clk
		.reset               (ctrl_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                  //   input,   width = 1,       src.ready
		.src_valid           (cmd_mux_003_src_valid),                  //  output,   width = 1,          .valid
		.src_data            (cmd_mux_003_src_data),                   //  output,  width = 98,          .data
		.src_channel         (cmd_mux_003_src_channel),                //  output,   width = 5,          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),          //  output,   width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),            //  output,   width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                   //  output,   width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                   //   input,   width = 1,          .valid
		.sink0_channel       (cmd_demux_src3_channel),                 //   input,   width = 5,          .channel
		.sink0_data          (cmd_demux_src3_data),                    //   input,  width = 98,          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),           //   input,   width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket)              //   input,   width = 1,          .endofpacket
	);

	board_kernel_interface_altera_merlin_multiplexer_191_o5dcrxq cmd_mux_004 (
		.clk                 (clk_reset_clk_clk),                      //   input,   width = 1,       clk.clk
		.reset               (ctrl_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                  //   input,   width = 1,       src.ready
		.src_valid           (cmd_mux_004_src_valid),                  //  output,   width = 1,          .valid
		.src_data            (cmd_mux_004_src_data),                   //  output,  width = 98,          .data
		.src_channel         (cmd_mux_004_src_channel),                //  output,   width = 5,          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),          //  output,   width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),            //  output,   width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                   //  output,   width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                   //   input,   width = 1,          .valid
		.sink0_channel       (cmd_demux_src4_channel),                 //   input,   width = 5,          .channel
		.sink0_data          (cmd_demux_src4_data),                    //   input,  width = 98,          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),           //   input,   width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket)              //   input,   width = 1,          .endofpacket
	);

	board_kernel_interface_altera_merlin_demultiplexer_191_focz7mi rsp_demux (
		.clk                (clk_reset_clk_clk),                                                          //   input,   width = 1,       clk.clk
		.reset              (ctrl_reset_reset_bridge_in_reset_reset),                                     //   input,   width = 1, clk_reset.reset
		.sink_ready         (address_span_extender_0_windowed_slave_rsp_width_adapter_src_ready),         //  output,   width = 1,      sink.ready
		.sink_channel       (address_span_extender_0_windowed_slave_rsp_width_adapter_src_channel),       //   input,   width = 5,          .channel
		.sink_data          (address_span_extender_0_windowed_slave_rsp_width_adapter_src_data),          //   input,  width = 98,          .data
		.sink_startofpacket (address_span_extender_0_windowed_slave_rsp_width_adapter_src_startofpacket), //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (address_span_extender_0_windowed_slave_rsp_width_adapter_src_endofpacket),   //   input,   width = 1,          .endofpacket
		.sink_valid         (address_span_extender_0_windowed_slave_rsp_width_adapter_src_valid),         //   input,   width = 1,          .valid
		.src0_ready         (rsp_demux_src0_ready),                                                       //   input,   width = 1,      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                                       //  output,   width = 1,          .valid
		.src0_data          (rsp_demux_src0_data),                                                        //  output,  width = 98,          .data
		.src0_channel       (rsp_demux_src0_channel),                                                     //  output,   width = 5,          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                               //  output,   width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                                                  //  output,   width = 1,          .endofpacket
	);

	board_kernel_interface_altera_merlin_demultiplexer_191_focz7mi rsp_demux_001 (
		.clk                (clk_reset_clk_clk),                                                //   input,   width = 1,       clk.clk
		.reset              (ctrl_reset_reset_bridge_in_reset_reset),                           //   input,   width = 1, clk_reset.reset
		.sink_ready         (address_span_extender_0_cntl_rsp_width_adapter_src_ready),         //  output,   width = 1,      sink.ready
		.sink_channel       (address_span_extender_0_cntl_rsp_width_adapter_src_channel),       //   input,   width = 5,          .channel
		.sink_data          (address_span_extender_0_cntl_rsp_width_adapter_src_data),          //   input,  width = 98,          .data
		.sink_startofpacket (address_span_extender_0_cntl_rsp_width_adapter_src_startofpacket), //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (address_span_extender_0_cntl_rsp_width_adapter_src_endofpacket),   //   input,   width = 1,          .endofpacket
		.sink_valid         (address_span_extender_0_cntl_rsp_width_adapter_src_valid),         //   input,   width = 1,          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                         //   input,   width = 1,      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                         //  output,   width = 1,          .valid
		.src0_data          (rsp_demux_001_src0_data),                                          //  output,  width = 98,          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                       //  output,   width = 5,          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                                 //  output,   width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                                    //  output,   width = 1,          .endofpacket
	);

	board_kernel_interface_altera_merlin_demultiplexer_191_focz7mi rsp_demux_002 (
		.clk                (clk_reset_clk_clk),                              //   input,   width = 1,       clk.clk
		.reset              (sw_reset_clk_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.sink_ready         (sw_reset_s_rsp_width_adapter_src_ready),         //  output,   width = 1,      sink.ready
		.sink_channel       (sw_reset_s_rsp_width_adapter_src_channel),       //   input,   width = 5,          .channel
		.sink_data          (sw_reset_s_rsp_width_adapter_src_data),          //   input,  width = 98,          .data
		.sink_startofpacket (sw_reset_s_rsp_width_adapter_src_startofpacket), //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (sw_reset_s_rsp_width_adapter_src_endofpacket),   //   input,   width = 1,          .endofpacket
		.sink_valid         (sw_reset_s_rsp_width_adapter_src_valid),         //   input,   width = 1,          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                       //   input,   width = 1,      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                       //  output,   width = 1,          .valid
		.src0_data          (rsp_demux_002_src0_data),                        //  output,  width = 98,          .data
		.src0_channel       (rsp_demux_002_src0_channel),                     //  output,   width = 5,          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),               //  output,   width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                  //  output,   width = 1,          .endofpacket
	);

	board_kernel_interface_altera_merlin_demultiplexer_191_focz7mi rsp_demux_003 (
		.clk                (clk_reset_clk_clk),                      //   input,   width = 1,       clk.clk
		.reset              (ctrl_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.sink_ready         (router_004_src_ready),                   //  output,   width = 1,      sink.ready
		.sink_channel       (router_004_src_channel),                 //   input,   width = 5,          .channel
		.sink_data          (router_004_src_data),                    //   input,  width = 98,          .data
		.sink_startofpacket (router_004_src_startofpacket),           //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),             //   input,   width = 1,          .endofpacket
		.sink_valid         (router_004_src_valid),                   //   input,   width = 1,          .valid
		.src0_ready         (rsp_demux_003_src0_ready),               //   input,   width = 1,      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),               //  output,   width = 1,          .valid
		.src0_data          (rsp_demux_003_src0_data),                //  output,  width = 98,          .data
		.src0_channel       (rsp_demux_003_src0_channel),             //  output,   width = 5,          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),       //  output,   width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)          //  output,   width = 1,          .endofpacket
	);

	board_kernel_interface_altera_merlin_demultiplexer_191_focz7mi rsp_demux_004 (
		.clk                (clk_reset_clk_clk),                      //   input,   width = 1,       clk.clk
		.reset              (ctrl_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.sink_ready         (router_005_src_ready),                   //  output,   width = 1,      sink.ready
		.sink_channel       (router_005_src_channel),                 //   input,   width = 5,          .channel
		.sink_data          (router_005_src_data),                    //   input,  width = 98,          .data
		.sink_startofpacket (router_005_src_startofpacket),           //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),             //   input,   width = 1,          .endofpacket
		.sink_valid         (router_005_src_valid),                   //   input,   width = 1,          .valid
		.src0_ready         (rsp_demux_004_src0_ready),               //   input,   width = 1,      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),               //  output,   width = 1,          .valid
		.src0_data          (rsp_demux_004_src0_data),                //  output,  width = 98,          .data
		.src0_channel       (rsp_demux_004_src0_channel),             //  output,   width = 5,          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),       //  output,   width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)          //  output,   width = 1,          .endofpacket
	);

	board_kernel_interface_altera_merlin_multiplexer_191_zthfvwy rsp_mux (
		.clk                 (clk_reset_clk_clk),                      //   input,   width = 1,       clk.clk
		.reset               (ctrl_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                      //   input,   width = 1,       src.ready
		.src_valid           (rsp_mux_src_valid),                      //  output,   width = 1,          .valid
		.src_data            (rsp_mux_src_data),                       //  output,  width = 98,          .data
		.src_channel         (rsp_mux_src_channel),                    //  output,   width = 5,          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),              //  output,   width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                //  output,   width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                   //  output,   width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                   //   input,   width = 1,          .valid
		.sink0_channel       (rsp_demux_src0_channel),                 //   input,   width = 5,          .channel
		.sink0_data          (rsp_demux_src0_data),                    //   input,  width = 98,          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),           //   input,   width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),             //   input,   width = 1,          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),               //  output,   width = 1,     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),               //   input,   width = 1,          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),             //   input,   width = 5,          .channel
		.sink1_data          (rsp_demux_001_src0_data),                //   input,  width = 98,          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),       //   input,   width = 1,          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),         //   input,   width = 1,          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),               //  output,   width = 1,     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),               //   input,   width = 1,          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),             //   input,   width = 5,          .channel
		.sink2_data          (rsp_demux_002_src0_data),                //   input,  width = 98,          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),       //   input,   width = 1,          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket),         //   input,   width = 1,          .endofpacket
		.sink3_ready         (rsp_demux_003_src0_ready),               //  output,   width = 1,     sink3.ready
		.sink3_valid         (rsp_demux_003_src0_valid),               //   input,   width = 1,          .valid
		.sink3_channel       (rsp_demux_003_src0_channel),             //   input,   width = 5,          .channel
		.sink3_data          (rsp_demux_003_src0_data),                //   input,  width = 98,          .data
		.sink3_startofpacket (rsp_demux_003_src0_startofpacket),       //   input,   width = 1,          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src0_endofpacket),         //   input,   width = 1,          .endofpacket
		.sink4_ready         (rsp_demux_004_src0_ready),               //  output,   width = 1,     sink4.ready
		.sink4_valid         (rsp_demux_004_src0_valid),               //   input,   width = 1,          .valid
		.sink4_channel       (rsp_demux_004_src0_channel),             //   input,   width = 5,          .channel
		.sink4_data          (rsp_demux_004_src0_data),                //   input,  width = 98,          .data
		.sink4_startofpacket (rsp_demux_004_src0_startofpacket),       //   input,   width = 1,          .startofpacket
		.sink4_endofpacket   (rsp_demux_004_src0_endofpacket)          //   input,   width = 1,          .endofpacket
	);

	board_kernel_interface_altera_merlin_width_adapter_191_kfrsp6q #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (59),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (60),
		.IN_PKT_BURSTWRAP_L            (60),
		.IN_PKT_BURST_SIZE_H           (63),
		.IN_PKT_BURST_SIZE_L           (61),
		.IN_PKT_RESPONSE_STATUS_H      (85),
		.IN_PKT_RESPONSE_STATUS_L      (84),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (65),
		.IN_PKT_BURST_TYPE_L           (64),
		.IN_PKT_ORI_BURST_SIZE_L       (86),
		.IN_PKT_ORI_BURST_SIZE_H       (88),
		.IN_ST_DATA_W                  (98),
		.OUT_PKT_ADDR_H                (85),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (95),
		.OUT_PKT_BYTE_CNT_L            (92),
		.OUT_PKT_TRANS_COMPRESSED_READ (86),
		.OUT_PKT_BURST_SIZE_H          (99),
		.OUT_PKT_BURST_SIZE_L          (97),
		.OUT_PKT_RESPONSE_STATUS_H     (121),
		.OUT_PKT_RESPONSE_STATUS_L     (120),
		.OUT_PKT_TRANS_EXCLUSIVE       (91),
		.OUT_PKT_BURST_TYPE_H          (101),
		.OUT_PKT_BURST_TYPE_L          (100),
		.OUT_PKT_ORI_BURST_SIZE_L      (122),
		.OUT_PKT_ORI_BURST_SIZE_H      (124),
		.OUT_ST_DATA_W                 (134),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) address_span_extender_0_windowed_slave_cmd_width_adapter (
		.clk                  (clk_reset_clk_clk),                                                          //   input,    width = 1,       clk.clk
		.reset                (ctrl_reset_reset_bridge_in_reset_reset),                                     //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_mux_src_valid),                                                          //   input,    width = 1,      sink.valid
		.in_channel           (cmd_mux_src_channel),                                                        //   input,    width = 5,          .channel
		.in_startofpacket     (cmd_mux_src_startofpacket),                                                  //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_mux_src_endofpacket),                                                    //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_mux_src_ready),                                                          //  output,    width = 1,          .ready
		.in_data              (cmd_mux_src_data),                                                           //   input,   width = 98,          .data
		.out_endofpacket      (address_span_extender_0_windowed_slave_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (address_span_extender_0_windowed_slave_cmd_width_adapter_src_data),          //  output,  width = 134,          .data
		.out_channel          (address_span_extender_0_windowed_slave_cmd_width_adapter_src_channel),       //  output,    width = 5,          .channel
		.out_valid            (address_span_extender_0_windowed_slave_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (address_span_extender_0_windowed_slave_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (address_span_extender_0_windowed_slave_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                      // (terminated),                         
	);

	board_kernel_interface_altera_merlin_width_adapter_191_kfrsp6q #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (59),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (60),
		.IN_PKT_BURSTWRAP_L            (60),
		.IN_PKT_BURST_SIZE_H           (63),
		.IN_PKT_BURST_SIZE_L           (61),
		.IN_PKT_RESPONSE_STATUS_H      (85),
		.IN_PKT_RESPONSE_STATUS_L      (84),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (65),
		.IN_PKT_BURST_TYPE_L           (64),
		.IN_PKT_ORI_BURST_SIZE_L       (86),
		.IN_PKT_ORI_BURST_SIZE_H       (88),
		.IN_ST_DATA_W                  (98),
		.OUT_PKT_ADDR_H                (85),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (95),
		.OUT_PKT_BYTE_CNT_L            (92),
		.OUT_PKT_TRANS_COMPRESSED_READ (86),
		.OUT_PKT_BURST_SIZE_H          (99),
		.OUT_PKT_BURST_SIZE_L          (97),
		.OUT_PKT_RESPONSE_STATUS_H     (121),
		.OUT_PKT_RESPONSE_STATUS_L     (120),
		.OUT_PKT_TRANS_EXCLUSIVE       (91),
		.OUT_PKT_BURST_TYPE_H          (101),
		.OUT_PKT_BURST_TYPE_L          (100),
		.OUT_PKT_ORI_BURST_SIZE_L      (122),
		.OUT_PKT_ORI_BURST_SIZE_H      (124),
		.OUT_ST_DATA_W                 (134),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) address_span_extender_0_cntl_cmd_width_adapter (
		.clk                  (clk_reset_clk_clk),                                                //   input,    width = 1,       clk.clk
		.reset                (ctrl_reset_reset_bridge_in_reset_reset),                           //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_mux_001_src_valid),                                            //   input,    width = 1,      sink.valid
		.in_channel           (cmd_mux_001_src_channel),                                          //   input,    width = 5,          .channel
		.in_startofpacket     (cmd_mux_001_src_startofpacket),                                    //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_mux_001_src_endofpacket),                                      //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_mux_001_src_ready),                                            //  output,    width = 1,          .ready
		.in_data              (cmd_mux_001_src_data),                                             //   input,   width = 98,          .data
		.out_endofpacket      (address_span_extender_0_cntl_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (address_span_extender_0_cntl_cmd_width_adapter_src_data),          //  output,  width = 134,          .data
		.out_channel          (address_span_extender_0_cntl_cmd_width_adapter_src_channel),       //  output,    width = 5,          .channel
		.out_valid            (address_span_extender_0_cntl_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (address_span_extender_0_cntl_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (address_span_extender_0_cntl_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                            // (terminated),                         
	);

	board_kernel_interface_altera_merlin_width_adapter_191_kfrsp6q #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (59),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (60),
		.IN_PKT_BURSTWRAP_L            (60),
		.IN_PKT_BURST_SIZE_H           (63),
		.IN_PKT_BURST_SIZE_L           (61),
		.IN_PKT_RESPONSE_STATUS_H      (85),
		.IN_PKT_RESPONSE_STATUS_L      (84),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (65),
		.IN_PKT_BURST_TYPE_L           (64),
		.IN_PKT_ORI_BURST_SIZE_L       (86),
		.IN_PKT_ORI_BURST_SIZE_H       (88),
		.IN_ST_DATA_W                  (98),
		.OUT_PKT_ADDR_H                (85),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (95),
		.OUT_PKT_BYTE_CNT_L            (92),
		.OUT_PKT_TRANS_COMPRESSED_READ (86),
		.OUT_PKT_BURST_SIZE_H          (99),
		.OUT_PKT_BURST_SIZE_L          (97),
		.OUT_PKT_RESPONSE_STATUS_H     (121),
		.OUT_PKT_RESPONSE_STATUS_L     (120),
		.OUT_PKT_TRANS_EXCLUSIVE       (91),
		.OUT_PKT_BURST_TYPE_H          (101),
		.OUT_PKT_BURST_TYPE_L          (100),
		.OUT_PKT_ORI_BURST_SIZE_L      (122),
		.OUT_PKT_ORI_BURST_SIZE_H      (124),
		.OUT_ST_DATA_W                 (134),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) sw_reset_s_cmd_width_adapter (
		.clk                  (clk_reset_clk_clk),                              //   input,    width = 1,       clk.clk
		.reset                (sw_reset_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_mux_002_src_valid),                          //   input,    width = 1,      sink.valid
		.in_channel           (cmd_mux_002_src_channel),                        //   input,    width = 5,          .channel
		.in_startofpacket     (cmd_mux_002_src_startofpacket),                  //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_mux_002_src_endofpacket),                    //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_mux_002_src_ready),                          //  output,    width = 1,          .ready
		.in_data              (cmd_mux_002_src_data),                           //   input,   width = 98,          .data
		.out_endofpacket      (sw_reset_s_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (sw_reset_s_cmd_width_adapter_src_data),          //  output,  width = 134,          .data
		.out_channel          (sw_reset_s_cmd_width_adapter_src_channel),       //  output,    width = 5,          .channel
		.out_valid            (sw_reset_s_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (sw_reset_s_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (sw_reset_s_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                          // (terminated),                         
	);

	board_kernel_interface_altera_merlin_width_adapter_191_xrhbsny #(
		.IN_PKT_ADDR_H                 (85),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (95),
		.IN_PKT_BYTE_CNT_L             (92),
		.IN_PKT_TRANS_COMPRESSED_READ  (86),
		.IN_PKT_TRANS_WRITE            (88),
		.IN_PKT_BURSTWRAP_H            (96),
		.IN_PKT_BURSTWRAP_L            (96),
		.IN_PKT_BURST_SIZE_H           (99),
		.IN_PKT_BURST_SIZE_L           (97),
		.IN_PKT_RESPONSE_STATUS_H      (121),
		.IN_PKT_RESPONSE_STATUS_L      (120),
		.IN_PKT_TRANS_EXCLUSIVE        (91),
		.IN_PKT_BURST_TYPE_H           (101),
		.IN_PKT_BURST_TYPE_L           (100),
		.IN_PKT_ORI_BURST_SIZE_L       (122),
		.IN_PKT_ORI_BURST_SIZE_H       (124),
		.IN_ST_DATA_W                  (134),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (59),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (63),
		.OUT_PKT_BURST_SIZE_L          (61),
		.OUT_PKT_RESPONSE_STATUS_H     (85),
		.OUT_PKT_RESPONSE_STATUS_L     (84),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (65),
		.OUT_PKT_BURST_TYPE_L          (64),
		.OUT_PKT_ORI_BURST_SIZE_L      (86),
		.OUT_PKT_ORI_BURST_SIZE_H      (88),
		.OUT_ST_DATA_W                 (98),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) address_span_extender_0_windowed_slave_rsp_width_adapter (
		.clk                  (clk_reset_clk_clk),                                                          //   input,    width = 1,       clk.clk
		.reset                (ctrl_reset_reset_bridge_in_reset_reset),                                     //   input,    width = 1, clk_reset.reset
		.in_valid             (router_001_src_valid),                                                       //   input,    width = 1,      sink.valid
		.in_channel           (router_001_src_channel),                                                     //   input,    width = 5,          .channel
		.in_startofpacket     (router_001_src_startofpacket),                                               //   input,    width = 1,          .startofpacket
		.in_endofpacket       (router_001_src_endofpacket),                                                 //   input,    width = 1,          .endofpacket
		.in_ready             (router_001_src_ready),                                                       //  output,    width = 1,          .ready
		.in_data              (router_001_src_data),                                                        //   input,  width = 134,          .data
		.out_endofpacket      (address_span_extender_0_windowed_slave_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (address_span_extender_0_windowed_slave_rsp_width_adapter_src_data),          //  output,   width = 98,          .data
		.out_channel          (address_span_extender_0_windowed_slave_rsp_width_adapter_src_channel),       //  output,    width = 5,          .channel
		.out_valid            (address_span_extender_0_windowed_slave_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (address_span_extender_0_windowed_slave_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (address_span_extender_0_windowed_slave_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                      // (terminated),                         
	);

	board_kernel_interface_altera_merlin_width_adapter_191_xrhbsny #(
		.IN_PKT_ADDR_H                 (85),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (95),
		.IN_PKT_BYTE_CNT_L             (92),
		.IN_PKT_TRANS_COMPRESSED_READ  (86),
		.IN_PKT_TRANS_WRITE            (88),
		.IN_PKT_BURSTWRAP_H            (96),
		.IN_PKT_BURSTWRAP_L            (96),
		.IN_PKT_BURST_SIZE_H           (99),
		.IN_PKT_BURST_SIZE_L           (97),
		.IN_PKT_RESPONSE_STATUS_H      (121),
		.IN_PKT_RESPONSE_STATUS_L      (120),
		.IN_PKT_TRANS_EXCLUSIVE        (91),
		.IN_PKT_BURST_TYPE_H           (101),
		.IN_PKT_BURST_TYPE_L           (100),
		.IN_PKT_ORI_BURST_SIZE_L       (122),
		.IN_PKT_ORI_BURST_SIZE_H       (124),
		.IN_ST_DATA_W                  (134),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (59),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (63),
		.OUT_PKT_BURST_SIZE_L          (61),
		.OUT_PKT_RESPONSE_STATUS_H     (85),
		.OUT_PKT_RESPONSE_STATUS_L     (84),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (65),
		.OUT_PKT_BURST_TYPE_L          (64),
		.OUT_PKT_ORI_BURST_SIZE_L      (86),
		.OUT_PKT_ORI_BURST_SIZE_H      (88),
		.OUT_ST_DATA_W                 (98),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) address_span_extender_0_cntl_rsp_width_adapter (
		.clk                  (clk_reset_clk_clk),                                                //   input,    width = 1,       clk.clk
		.reset                (ctrl_reset_reset_bridge_in_reset_reset),                           //   input,    width = 1, clk_reset.reset
		.in_valid             (router_002_src_valid),                                             //   input,    width = 1,      sink.valid
		.in_channel           (router_002_src_channel),                                           //   input,    width = 5,          .channel
		.in_startofpacket     (router_002_src_startofpacket),                                     //   input,    width = 1,          .startofpacket
		.in_endofpacket       (router_002_src_endofpacket),                                       //   input,    width = 1,          .endofpacket
		.in_ready             (router_002_src_ready),                                             //  output,    width = 1,          .ready
		.in_data              (router_002_src_data),                                              //   input,  width = 134,          .data
		.out_endofpacket      (address_span_extender_0_cntl_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (address_span_extender_0_cntl_rsp_width_adapter_src_data),          //  output,   width = 98,          .data
		.out_channel          (address_span_extender_0_cntl_rsp_width_adapter_src_channel),       //  output,    width = 5,          .channel
		.out_valid            (address_span_extender_0_cntl_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (address_span_extender_0_cntl_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (address_span_extender_0_cntl_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                            // (terminated),                         
	);

	board_kernel_interface_altera_merlin_width_adapter_191_xrhbsny #(
		.IN_PKT_ADDR_H                 (85),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (95),
		.IN_PKT_BYTE_CNT_L             (92),
		.IN_PKT_TRANS_COMPRESSED_READ  (86),
		.IN_PKT_TRANS_WRITE            (88),
		.IN_PKT_BURSTWRAP_H            (96),
		.IN_PKT_BURSTWRAP_L            (96),
		.IN_PKT_BURST_SIZE_H           (99),
		.IN_PKT_BURST_SIZE_L           (97),
		.IN_PKT_RESPONSE_STATUS_H      (121),
		.IN_PKT_RESPONSE_STATUS_L      (120),
		.IN_PKT_TRANS_EXCLUSIVE        (91),
		.IN_PKT_BURST_TYPE_H           (101),
		.IN_PKT_BURST_TYPE_L           (100),
		.IN_PKT_ORI_BURST_SIZE_L       (122),
		.IN_PKT_ORI_BURST_SIZE_H       (124),
		.IN_ST_DATA_W                  (134),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (59),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (63),
		.OUT_PKT_BURST_SIZE_L          (61),
		.OUT_PKT_RESPONSE_STATUS_H     (85),
		.OUT_PKT_RESPONSE_STATUS_L     (84),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (65),
		.OUT_PKT_BURST_TYPE_L          (64),
		.OUT_PKT_ORI_BURST_SIZE_L      (86),
		.OUT_PKT_ORI_BURST_SIZE_H      (88),
		.OUT_ST_DATA_W                 (98),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) sw_reset_s_rsp_width_adapter (
		.clk                  (clk_reset_clk_clk),                              //   input,    width = 1,       clk.clk
		.reset                (sw_reset_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_valid             (router_003_src_valid),                           //   input,    width = 1,      sink.valid
		.in_channel           (router_003_src_channel),                         //   input,    width = 5,          .channel
		.in_startofpacket     (router_003_src_startofpacket),                   //   input,    width = 1,          .startofpacket
		.in_endofpacket       (router_003_src_endofpacket),                     //   input,    width = 1,          .endofpacket
		.in_ready             (router_003_src_ready),                           //  output,    width = 1,          .ready
		.in_data              (router_003_src_data),                            //   input,  width = 134,          .data
		.out_endofpacket      (sw_reset_s_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (sw_reset_s_rsp_width_adapter_src_data),          //  output,   width = 98,          .data
		.out_channel          (sw_reset_s_rsp_width_adapter_src_channel),       //  output,    width = 5,          .channel
		.out_valid            (sw_reset_s_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (sw_reset_s_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (sw_reset_s_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                          // (terminated),                         
	);

endmodule
