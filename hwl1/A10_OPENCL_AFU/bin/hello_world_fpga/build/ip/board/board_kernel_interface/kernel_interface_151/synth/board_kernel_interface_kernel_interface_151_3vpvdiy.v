// board_kernel_interface_kernel_interface_151_3vpvdiy.v

// This file was auto-generated from acl_kernel_interface_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 19.2 57

`timescale 1 ps / 1 ps
module board_kernel_interface_kernel_interface_151_3vpvdiy (
		input  wire        kernel_cra_waitrequest,        //               kernel_cra.waitrequest
		input  wire [63:0] kernel_cra_readdata,           //                         .readdata
		input  wire        kernel_cra_readdatavalid,      //                         .readdatavalid
		output wire [0:0]  kernel_cra_burstcount,         //                         .burstcount
		output wire [63:0] kernel_cra_writedata,          //                         .writedata
		output wire [29:0] kernel_cra_address,            //                         .address
		output wire        kernel_cra_write,              //                         .write
		output wire        kernel_cra_read,               //                         .read
		output wire [7:0]  kernel_cra_byteenable,         //                         .byteenable
		output wire        kernel_cra_debugaccess,        //                         .debugaccess
		output wire        ctrl_waitrequest,              //                     ctrl.waitrequest
		output wire [31:0] ctrl_readdata,                 //                         .readdata
		output wire        ctrl_readdatavalid,            //                         .readdatavalid
		input  wire [0:0]  ctrl_burstcount,               //                         .burstcount
		input  wire [31:0] ctrl_writedata,                //                         .writedata
		input  wire [13:0] ctrl_address,                  //                         .address
		input  wire        ctrl_write,                    //                         .write
		input  wire        ctrl_read,                     //                         .read
		input  wire [3:0]  ctrl_byteenable,               //                         .byteenable
		input  wire        ctrl_debugaccess,              //                         .debugaccess
		output wire [1:0]  acl_bsp_memorg_host0x018_mode, // acl_bsp_memorg_host0x018.mode
		input  wire        clk_clk,                       //                      clk.clk
		input  wire        reset_reset_n,                 //                    reset.reset_n
		input  wire [0:0]  kernel_irq_from_kernel_irq,    //   kernel_irq_from_kernel.irq
		output wire        kernel_irq_to_host_irq,        //       kernel_irq_to_host.irq
		input  wire        sw_reset_in_reset,             //              sw_reset_in.reset
		input  wire        kernel_clk_clk,                //               kernel_clk.clk
		output wire        kernel_reset_reset_n,          //             kernel_reset.reset_n
		output wire        sw_reset_export_reset_n        //          sw_reset_export.reset_n
	);

	wire         reset_controller_sw_reset_out_reset;                                    // reset_controller_sw:reset_out -> global_routing_reset:s
	wire         address_span_extender_0_expanded_master_waitrequest;                    // mm_interconnect_0:address_span_extender_0_expanded_master_waitrequest -> address_span_extender_0:avm_m0_waitrequest
	wire  [63:0] address_span_extender_0_expanded_master_readdata;                       // mm_interconnect_0:address_span_extender_0_expanded_master_readdata -> address_span_extender_0:avm_m0_readdata
	wire  [29:0] address_span_extender_0_expanded_master_address;                        // address_span_extender_0:avm_m0_address -> mm_interconnect_0:address_span_extender_0_expanded_master_address
	wire         address_span_extender_0_expanded_master_read;                           // address_span_extender_0:avm_m0_read -> mm_interconnect_0:address_span_extender_0_expanded_master_read
	wire   [7:0] address_span_extender_0_expanded_master_byteenable;                     // address_span_extender_0:avm_m0_byteenable -> mm_interconnect_0:address_span_extender_0_expanded_master_byteenable
	wire         address_span_extender_0_expanded_master_readdatavalid;                  // mm_interconnect_0:address_span_extender_0_expanded_master_readdatavalid -> address_span_extender_0:avm_m0_readdatavalid
	wire         address_span_extender_0_expanded_master_write;                          // address_span_extender_0:avm_m0_write -> mm_interconnect_0:address_span_extender_0_expanded_master_write
	wire  [63:0] address_span_extender_0_expanded_master_writedata;                      // address_span_extender_0:avm_m0_writedata -> mm_interconnect_0:address_span_extender_0_expanded_master_writedata
	wire   [0:0] address_span_extender_0_expanded_master_burstcount;                     // address_span_extender_0:avm_m0_burstcount -> mm_interconnect_0:address_span_extender_0_expanded_master_burstcount
	wire  [63:0] mm_interconnect_0_kernel_cra_s0_readdata;                               // kernel_cra:s0_readdata -> mm_interconnect_0:kernel_cra_s0_readdata
	wire         mm_interconnect_0_kernel_cra_s0_waitrequest;                            // kernel_cra:s0_waitrequest -> mm_interconnect_0:kernel_cra_s0_waitrequest
	wire         mm_interconnect_0_kernel_cra_s0_debugaccess;                            // mm_interconnect_0:kernel_cra_s0_debugaccess -> kernel_cra:s0_debugaccess
	wire  [29:0] mm_interconnect_0_kernel_cra_s0_address;                                // mm_interconnect_0:kernel_cra_s0_address -> kernel_cra:s0_address
	wire         mm_interconnect_0_kernel_cra_s0_read;                                   // mm_interconnect_0:kernel_cra_s0_read -> kernel_cra:s0_read
	wire   [7:0] mm_interconnect_0_kernel_cra_s0_byteenable;                             // mm_interconnect_0:kernel_cra_s0_byteenable -> kernel_cra:s0_byteenable
	wire         mm_interconnect_0_kernel_cra_s0_readdatavalid;                          // kernel_cra:s0_readdatavalid -> mm_interconnect_0:kernel_cra_s0_readdatavalid
	wire         mm_interconnect_0_kernel_cra_s0_write;                                  // mm_interconnect_0:kernel_cra_s0_write -> kernel_cra:s0_write
	wire  [63:0] mm_interconnect_0_kernel_cra_s0_writedata;                              // mm_interconnect_0:kernel_cra_s0_writedata -> kernel_cra:s0_writedata
	wire   [0:0] mm_interconnect_0_kernel_cra_s0_burstcount;                             // mm_interconnect_0:kernel_cra_s0_burstcount -> kernel_cra:s0_burstcount
	wire         ctrl_m0_waitrequest;                                                    // mm_interconnect_1:ctrl_m0_waitrequest -> ctrl:m0_waitrequest
	wire  [31:0] ctrl_m0_readdata;                                                       // mm_interconnect_1:ctrl_m0_readdata -> ctrl:m0_readdata
	wire         ctrl_m0_debugaccess;                                                    // ctrl:m0_debugaccess -> mm_interconnect_1:ctrl_m0_debugaccess
	wire  [13:0] ctrl_m0_address;                                                        // ctrl:m0_address -> mm_interconnect_1:ctrl_m0_address
	wire         ctrl_m0_read;                                                           // ctrl:m0_read -> mm_interconnect_1:ctrl_m0_read
	wire   [3:0] ctrl_m0_byteenable;                                                     // ctrl:m0_byteenable -> mm_interconnect_1:ctrl_m0_byteenable
	wire         ctrl_m0_readdatavalid;                                                  // mm_interconnect_1:ctrl_m0_readdatavalid -> ctrl:m0_readdatavalid
	wire  [31:0] ctrl_m0_writedata;                                                      // ctrl:m0_writedata -> mm_interconnect_1:ctrl_m0_writedata
	wire         ctrl_m0_write;                                                          // ctrl:m0_write -> mm_interconnect_1:ctrl_m0_write
	wire   [0:0] ctrl_m0_burstcount;                                                     // ctrl:m0_burstcount -> mm_interconnect_1:ctrl_m0_burstcount
	wire  [63:0] mm_interconnect_1_address_span_extender_0_windowed_slave_readdata;      // address_span_extender_0:avs_s0_readdata -> mm_interconnect_1:address_span_extender_0_windowed_slave_readdata
	wire         mm_interconnect_1_address_span_extender_0_windowed_slave_waitrequest;   // address_span_extender_0:avs_s0_waitrequest -> mm_interconnect_1:address_span_extender_0_windowed_slave_waitrequest
	wire   [8:0] mm_interconnect_1_address_span_extender_0_windowed_slave_address;       // mm_interconnect_1:address_span_extender_0_windowed_slave_address -> address_span_extender_0:avs_s0_address
	wire         mm_interconnect_1_address_span_extender_0_windowed_slave_read;          // mm_interconnect_1:address_span_extender_0_windowed_slave_read -> address_span_extender_0:avs_s0_read
	wire   [7:0] mm_interconnect_1_address_span_extender_0_windowed_slave_byteenable;    // mm_interconnect_1:address_span_extender_0_windowed_slave_byteenable -> address_span_extender_0:avs_s0_byteenable
	wire         mm_interconnect_1_address_span_extender_0_windowed_slave_readdatavalid; // address_span_extender_0:avs_s0_readdatavalid -> mm_interconnect_1:address_span_extender_0_windowed_slave_readdatavalid
	wire         mm_interconnect_1_address_span_extender_0_windowed_slave_write;         // mm_interconnect_1:address_span_extender_0_windowed_slave_write -> address_span_extender_0:avs_s0_write
	wire  [63:0] mm_interconnect_1_address_span_extender_0_windowed_slave_writedata;     // mm_interconnect_1:address_span_extender_0_windowed_slave_writedata -> address_span_extender_0:avs_s0_writedata
	wire   [0:0] mm_interconnect_1_address_span_extender_0_windowed_slave_burstcount;    // mm_interconnect_1:address_span_extender_0_windowed_slave_burstcount -> address_span_extender_0:avs_s0_burstcount
	wire  [63:0] mm_interconnect_1_address_span_extender_0_cntl_readdata;                // address_span_extender_0:avs_cntl_readdata -> mm_interconnect_1:address_span_extender_0_cntl_readdata
	wire         mm_interconnect_1_address_span_extender_0_cntl_read;                    // mm_interconnect_1:address_span_extender_0_cntl_read -> address_span_extender_0:avs_cntl_read
	wire   [7:0] mm_interconnect_1_address_span_extender_0_cntl_byteenable;              // mm_interconnect_1:address_span_extender_0_cntl_byteenable -> address_span_extender_0:avs_cntl_byteenable
	wire         mm_interconnect_1_address_span_extender_0_cntl_write;                   // mm_interconnect_1:address_span_extender_0_cntl_write -> address_span_extender_0:avs_cntl_write
	wire  [63:0] mm_interconnect_1_address_span_extender_0_cntl_writedata;               // mm_interconnect_1:address_span_extender_0_cntl_writedata -> address_span_extender_0:avs_cntl_writedata
	wire  [63:0] mm_interconnect_1_sw_reset_s_readdata;                                  // sw_reset:slave_readdata -> mm_interconnect_1:sw_reset_s_readdata
	wire         mm_interconnect_1_sw_reset_s_waitrequest;                               // sw_reset:slave_waitrequest -> mm_interconnect_1:sw_reset_s_waitrequest
	wire         mm_interconnect_1_sw_reset_s_read;                                      // mm_interconnect_1:sw_reset_s_read -> sw_reset:slave_read
	wire   [7:0] mm_interconnect_1_sw_reset_s_byteenable;                                // mm_interconnect_1:sw_reset_s_byteenable -> sw_reset:slave_byteenable
	wire         mm_interconnect_1_sw_reset_s_write;                                     // mm_interconnect_1:sw_reset_s_write -> sw_reset:slave_write
	wire  [63:0] mm_interconnect_1_sw_reset_s_writedata;                                 // mm_interconnect_1:sw_reset_s_writedata -> sw_reset:slave_writedata
	wire  [31:0] mm_interconnect_1_mem_org_mode0_s_readdata;                             // mem_org_mode0:slave_readdata -> mm_interconnect_1:mem_org_mode0_s_readdata
	wire         mm_interconnect_1_mem_org_mode0_s_waitrequest;                          // mem_org_mode0:slave_waitrequest -> mm_interconnect_1:mem_org_mode0_s_waitrequest
	wire         mm_interconnect_1_mem_org_mode0_s_read;                                 // mm_interconnect_1:mem_org_mode0_s_read -> mem_org_mode0:slave_read
	wire         mm_interconnect_1_mem_org_mode0_s_write;                                // mm_interconnect_1:mem_org_mode0_s_write -> mem_org_mode0:slave_write
	wire  [31:0] mm_interconnect_1_mem_org_mode0_s_writedata;                            // mm_interconnect_1:mem_org_mode0_s_writedata -> mem_org_mode0:slave_writedata
	wire  [31:0] mm_interconnect_1_version_id_0_s_readdata;                              // version_id_0:slave_readdata -> mm_interconnect_1:version_id_0_s_readdata
	wire         mm_interconnect_1_version_id_0_s_read;                                  // mm_interconnect_1:version_id_0_s_read -> version_id_0:slave_read
	wire         rst_controller_reset_out_reset;                                         // rst_controller:reset_out -> [mm_interconnect_1:sw_reset_clk_reset_reset_bridge_in_reset_reset, sw_reset:resetn]

	board_kernel_interface_altera_avalon_mm_bridge_191_x6qdesi #(
		.DATA_WIDTH        (64),
		.SYMBOL_WIDTH      (8),
		.HDL_ADDR_WIDTH    (30),
		.BURSTCOUNT_WIDTH  (1),
		.PIPELINE_COMMAND  (1),
		.PIPELINE_RESPONSE (1),
		.SYNC_RESET        (0)
	) kernel_cra (
		.clk              (kernel_clk_clk),                                //   input,   width = 1,   clk.clk
		.reset            (~kernel_reset_reset_n),                         //   input,   width = 1, reset.reset
		.s0_waitrequest   (mm_interconnect_0_kernel_cra_s0_waitrequest),   //  output,   width = 1,    s0.waitrequest
		.s0_readdata      (mm_interconnect_0_kernel_cra_s0_readdata),      //  output,  width = 64,      .readdata
		.s0_readdatavalid (mm_interconnect_0_kernel_cra_s0_readdatavalid), //  output,   width = 1,      .readdatavalid
		.s0_burstcount    (mm_interconnect_0_kernel_cra_s0_burstcount),    //   input,   width = 1,      .burstcount
		.s0_writedata     (mm_interconnect_0_kernel_cra_s0_writedata),     //   input,  width = 64,      .writedata
		.s0_address       (mm_interconnect_0_kernel_cra_s0_address),       //   input,  width = 30,      .address
		.s0_write         (mm_interconnect_0_kernel_cra_s0_write),         //   input,   width = 1,      .write
		.s0_read          (mm_interconnect_0_kernel_cra_s0_read),          //   input,   width = 1,      .read
		.s0_byteenable    (mm_interconnect_0_kernel_cra_s0_byteenable),    //   input,   width = 8,      .byteenable
		.s0_debugaccess   (mm_interconnect_0_kernel_cra_s0_debugaccess),   //   input,   width = 1,      .debugaccess
		.m0_waitrequest   (kernel_cra_waitrequest),                        //   input,   width = 1,    m0.waitrequest
		.m0_readdata      (kernel_cra_readdata),                           //   input,  width = 64,      .readdata
		.m0_readdatavalid (kernel_cra_readdatavalid),                      //   input,   width = 1,      .readdatavalid
		.m0_burstcount    (kernel_cra_burstcount),                         //  output,   width = 1,      .burstcount
		.m0_writedata     (kernel_cra_writedata),                          //  output,  width = 64,      .writedata
		.m0_address       (kernel_cra_address),                            //  output,  width = 30,      .address
		.m0_write         (kernel_cra_write),                              //  output,   width = 1,      .write
		.m0_read          (kernel_cra_read),                               //  output,   width = 1,      .read
		.m0_byteenable    (kernel_cra_byteenable),                         //  output,   width = 8,      .byteenable
		.m0_debugaccess   (kernel_cra_debugaccess),                        //  output,   width = 1,      .debugaccess
		.s0_response      (),                                              // (terminated),                    
		.m0_response      (2'b00)                                          // (terminated),                    
	);

	board_kernel_interface_altera_address_span_extender_191_z7ox6za #(
		.DATA_WIDTH           (64),
		.BYTEENABLE_WIDTH     (8),
		.MASTER_ADDRESS_WIDTH (30),
		.SLAVE_ADDRESS_WIDTH  (9),
		.SLAVE_ADDRESS_SHIFT  (3),
		.BURSTCOUNT_WIDTH     (1),
		.CNTL_ADDRESS_WIDTH   (1),
		.SUB_WINDOW_COUNT     (1),
		.MASTER_ADDRESS_DEF   (64'b0000000000000000000000000000000000000000000000000000000000000000),
		.SYNC_RESET           (0)
	) address_span_extender_0 (
		.clk                  (clk_clk),                                                                //   input,   width = 1,           clock.clk
		.reset                (~reset_reset_n),                                                         //   input,   width = 1,           reset.reset
		.avs_s0_address       (mm_interconnect_1_address_span_extender_0_windowed_slave_address),       //   input,   width = 9,  windowed_slave.address
		.avs_s0_read          (mm_interconnect_1_address_span_extender_0_windowed_slave_read),          //   input,   width = 1,                .read
		.avs_s0_readdata      (mm_interconnect_1_address_span_extender_0_windowed_slave_readdata),      //  output,  width = 64,                .readdata
		.avs_s0_write         (mm_interconnect_1_address_span_extender_0_windowed_slave_write),         //   input,   width = 1,                .write
		.avs_s0_writedata     (mm_interconnect_1_address_span_extender_0_windowed_slave_writedata),     //   input,  width = 64,                .writedata
		.avs_s0_readdatavalid (mm_interconnect_1_address_span_extender_0_windowed_slave_readdatavalid), //  output,   width = 1,                .readdatavalid
		.avs_s0_waitrequest   (mm_interconnect_1_address_span_extender_0_windowed_slave_waitrequest),   //  output,   width = 1,                .waitrequest
		.avs_s0_byteenable    (mm_interconnect_1_address_span_extender_0_windowed_slave_byteenable),    //   input,   width = 8,                .byteenable
		.avs_s0_burstcount    (mm_interconnect_1_address_span_extender_0_windowed_slave_burstcount),    //   input,   width = 1,                .burstcount
		.avm_m0_address       (address_span_extender_0_expanded_master_address),                        //  output,  width = 30, expanded_master.address
		.avm_m0_read          (address_span_extender_0_expanded_master_read),                           //  output,   width = 1,                .read
		.avm_m0_waitrequest   (address_span_extender_0_expanded_master_waitrequest),                    //   input,   width = 1,                .waitrequest
		.avm_m0_readdata      (address_span_extender_0_expanded_master_readdata),                       //   input,  width = 64,                .readdata
		.avm_m0_write         (address_span_extender_0_expanded_master_write),                          //  output,   width = 1,                .write
		.avm_m0_writedata     (address_span_extender_0_expanded_master_writedata),                      //  output,  width = 64,                .writedata
		.avm_m0_readdatavalid (address_span_extender_0_expanded_master_readdatavalid),                  //   input,   width = 1,                .readdatavalid
		.avm_m0_byteenable    (address_span_extender_0_expanded_master_byteenable),                     //  output,   width = 8,                .byteenable
		.avm_m0_burstcount    (address_span_extender_0_expanded_master_burstcount),                     //  output,   width = 1,                .burstcount
		.avs_cntl_read        (mm_interconnect_1_address_span_extender_0_cntl_read),                    //   input,   width = 1,            cntl.read
		.avs_cntl_readdata    (mm_interconnect_1_address_span_extender_0_cntl_readdata),                //  output,  width = 64,                .readdata
		.avs_cntl_write       (mm_interconnect_1_address_span_extender_0_cntl_write),                   //   input,   width = 1,                .write
		.avs_cntl_writedata   (mm_interconnect_1_address_span_extender_0_cntl_writedata),               //   input,  width = 64,                .writedata
		.avs_cntl_byteenable  (mm_interconnect_1_address_span_extender_0_cntl_byteenable),              //   input,   width = 8,                .byteenable
		.avs_cntl_address     (1'b0)                                                                    // (terminated),                              
	);

	sw_reset #(
		.WIDTH             (64),
		.LOG2_RESET_CYCLES (10)
	) sw_reset (
		.clk               (clk_clk),                                  //   input,   width = 1,       clk.clk
		.resetn            (~rst_controller_reset_out_reset),          //   input,   width = 1, clk_reset.reset_n
		.slave_write       (mm_interconnect_1_sw_reset_s_write),       //   input,   width = 1,         s.write
		.slave_writedata   (mm_interconnect_1_sw_reset_s_writedata),   //   input,  width = 64,          .writedata
		.slave_byteenable  (mm_interconnect_1_sw_reset_s_byteenable),  //   input,   width = 8,          .byteenable
		.slave_read        (mm_interconnect_1_sw_reset_s_read),        //   input,   width = 1,          .read
		.slave_readdata    (mm_interconnect_1_sw_reset_s_readdata),    //  output,  width = 64,          .readdata
		.slave_waitrequest (mm_interconnect_1_sw_reset_s_waitrequest), //  output,   width = 1,          .waitrequest
		.sw_reset_n_out    (sw_reset_export_reset_n)                   //  output,   width = 1,  sw_reset.reset_n
	);

	global_routing global_routing_reset (
		.clk (kernel_clk_clk),                       //   input,  width = 1,          clk.clk
		.s   (~reset_controller_sw_reset_out_reset), //   input,  width = 1,        reset.reset_n
		.g   (kernel_reset_reset_n)                  //  output,  width = 1, global_reset.reset_n
	);

	board_kernel_interface_altera_avalon_mm_bridge_191_x6qdesi #(
		.DATA_WIDTH        (32),
		.SYMBOL_WIDTH      (8),
		.HDL_ADDR_WIDTH    (14),
		.BURSTCOUNT_WIDTH  (1),
		.PIPELINE_COMMAND  (1),
		.PIPELINE_RESPONSE (1),
		.SYNC_RESET        (0)
	) ctrl (
		.clk              (clk_clk),               //   input,   width = 1,   clk.clk
		.reset            (~reset_reset_n),        //   input,   width = 1, reset.reset
		.s0_waitrequest   (ctrl_waitrequest),      //  output,   width = 1,    s0.waitrequest
		.s0_readdata      (ctrl_readdata),         //  output,  width = 32,      .readdata
		.s0_readdatavalid (ctrl_readdatavalid),    //  output,   width = 1,      .readdatavalid
		.s0_burstcount    (ctrl_burstcount),       //   input,   width = 1,      .burstcount
		.s0_writedata     (ctrl_writedata),        //   input,  width = 32,      .writedata
		.s0_address       (ctrl_address),          //   input,  width = 14,      .address
		.s0_write         (ctrl_write),            //   input,   width = 1,      .write
		.s0_read          (ctrl_read),             //   input,   width = 1,      .read
		.s0_byteenable    (ctrl_byteenable),       //   input,   width = 4,      .byteenable
		.s0_debugaccess   (ctrl_debugaccess),      //   input,   width = 1,      .debugaccess
		.m0_waitrequest   (ctrl_m0_waitrequest),   //   input,   width = 1,    m0.waitrequest
		.m0_readdata      (ctrl_m0_readdata),      //   input,  width = 32,      .readdata
		.m0_readdatavalid (ctrl_m0_readdatavalid), //   input,   width = 1,      .readdatavalid
		.m0_burstcount    (ctrl_m0_burstcount),    //  output,   width = 1,      .burstcount
		.m0_writedata     (ctrl_m0_writedata),     //  output,  width = 32,      .writedata
		.m0_address       (ctrl_m0_address),       //  output,  width = 14,      .address
		.m0_write         (ctrl_m0_write),         //  output,   width = 1,      .write
		.m0_read          (ctrl_m0_read),          //  output,   width = 1,      .read
		.m0_byteenable    (ctrl_m0_byteenable),    //  output,   width = 4,      .byteenable
		.m0_debugaccess   (ctrl_m0_debugaccess),   //  output,   width = 1,      .debugaccess
		.s0_response      (),                      // (terminated),                    
		.m0_response      (2'b00)                  // (terminated),                    
	);

	mem_org_mode #(
		.WIDTH (32)
	) mem_org_mode0 (
		.clk                     (clk_clk),                                       //   input,   width = 1,                     clk.clk
		.resetn                  (reset_reset_n),                                 //   input,   width = 1,               clk_reset.reset_n
		.slave_write             (mm_interconnect_1_mem_org_mode0_s_write),       //   input,   width = 1,                       s.write
		.slave_writedata         (mm_interconnect_1_mem_org_mode0_s_writedata),   //   input,  width = 32,                        .writedata
		.slave_read              (mm_interconnect_1_mem_org_mode0_s_read),        //   input,   width = 1,                        .read
		.slave_readdata          (mm_interconnect_1_mem_org_mode0_s_readdata),    //  output,  width = 32,                        .readdata
		.slave_waitrequest       (mm_interconnect_1_mem_org_mode0_s_waitrequest), //  output,   width = 1,                        .waitrequest
		.mem_organization_kernel (),                                              //  output,   width = 2, mem_organization_kernel.mode
		.mem_organization_host   (acl_bsp_memorg_host0x018_mode)                  //  output,   width = 2,   mem_organization_host.mode
	);

	board_kernel_interface_altera_irq_bridge_191_bwtdp3y #(
		.IRQ_WIDTH (1)
	) irq_bridge_0 (
		.clk          (kernel_clk_clk),             //   input,  width = 1,          clk.clk
		.receiver_irq (kernel_irq_from_kernel_irq), //   input,  width = 1, receiver_irq.irq
		.reset        (~kernel_reset_reset_n),      //   input,  width = 1,    clk_reset.reset
		.sender0_irq  (kernel_irq_to_host_irq),     //  output,  width = 1,  sender0_irq.irq
		.sender1_irq  (),                           // (terminated),                          
		.sender2_irq  (),                           // (terminated),                          
		.sender3_irq  (),                           // (terminated),                          
		.sender4_irq  (),                           // (terminated),                          
		.sender5_irq  (),                           // (terminated),                          
		.sender6_irq  (),                           // (terminated),                          
		.sender7_irq  (),                           // (terminated),                          
		.sender8_irq  (),                           // (terminated),                          
		.sender9_irq  (),                           // (terminated),                          
		.sender10_irq (),                           // (terminated),                          
		.sender11_irq (),                           // (terminated),                          
		.sender12_irq (),                           // (terminated),                          
		.sender13_irq (),                           // (terminated),                          
		.sender14_irq (),                           // (terminated),                          
		.sender15_irq (),                           // (terminated),                          
		.sender16_irq (),                           // (terminated),                          
		.sender17_irq (),                           // (terminated),                          
		.sender18_irq (),                           // (terminated),                          
		.sender19_irq (),                           // (terminated),                          
		.sender20_irq (),                           // (terminated),                          
		.sender21_irq (),                           // (terminated),                          
		.sender22_irq (),                           // (terminated),                          
		.sender23_irq (),                           // (terminated),                          
		.sender24_irq (),                           // (terminated),                          
		.sender25_irq (),                           // (terminated),                          
		.sender26_irq (),                           // (terminated),                          
		.sender27_irq (),                           // (terminated),                          
		.sender28_irq (),                           // (terminated),                          
		.sender29_irq (),                           // (terminated),                          
		.sender30_irq (),                           // (terminated),                          
		.sender31_irq ()                            // (terminated),                          
	);

	version_id #(
		.WIDTH      (32),
		.VERSION_ID (-1598029822)
	) version_id_0 (
		.clk            (clk_clk),                                   //   input,   width = 1,       clk.clk
		.resetn         (reset_reset_n),                             //   input,   width = 1, clk_reset.reset_n
		.slave_read     (mm_interconnect_1_version_id_0_s_read),     //   input,   width = 1,         s.read
		.slave_readdata (mm_interconnect_1_version_id_0_s_readdata)  //  output,  width = 32,          .readdata
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (2),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) reset_controller_sw (
		.reset_in0      (~reset_reset_n),                      //   input,  width = 1, reset_in0.reset
		.reset_in1      (~sw_reset_export_reset_n),            //   input,  width = 1, reset_in1.reset
		.clk            (kernel_clk_clk),                      //   input,  width = 1,       clk.clk
		.reset_out      (reset_controller_sw_reset_out_reset), //  output,  width = 1, reset_out.reset
		.reset_req      (),                                    // (terminated),                       
		.reset_req_in0  (1'b0),                                // (terminated),                       
		.reset_req_in1  (1'b0),                                // (terminated),                       
		.reset_in2      (1'b0),                                // (terminated),                       
		.reset_req_in2  (1'b0),                                // (terminated),                       
		.reset_in3      (1'b0),                                // (terminated),                       
		.reset_req_in3  (1'b0),                                // (terminated),                       
		.reset_in4      (1'b0),                                // (terminated),                       
		.reset_req_in4  (1'b0),                                // (terminated),                       
		.reset_in5      (1'b0),                                // (terminated),                       
		.reset_req_in5  (1'b0),                                // (terminated),                       
		.reset_in6      (1'b0),                                // (terminated),                       
		.reset_req_in6  (1'b0),                                // (terminated),                       
		.reset_in7      (1'b0),                                // (terminated),                       
		.reset_req_in7  (1'b0),                                // (terminated),                       
		.reset_in8      (1'b0),                                // (terminated),                       
		.reset_req_in8  (1'b0),                                // (terminated),                       
		.reset_in9      (1'b0),                                // (terminated),                       
		.reset_req_in9  (1'b0),                                // (terminated),                       
		.reset_in10     (1'b0),                                // (terminated),                       
		.reset_req_in10 (1'b0),                                // (terminated),                       
		.reset_in11     (1'b0),                                // (terminated),                       
		.reset_req_in11 (1'b0),                                // (terminated),                       
		.reset_in12     (1'b0),                                // (terminated),                       
		.reset_req_in12 (1'b0),                                // (terminated),                       
		.reset_in13     (1'b0),                                // (terminated),                       
		.reset_req_in13 (1'b0),                                // (terminated),                       
		.reset_in14     (1'b0),                                // (terminated),                       
		.reset_req_in14 (1'b0),                                // (terminated),                       
		.reset_in15     (1'b0),                                // (terminated),                       
		.reset_req_in15 (1'b0)                                 // (terminated),                       
	);

	board_kernel_interface_altera_mm_interconnect_191_3erg6da mm_interconnect_0 (
		.address_span_extender_0_expanded_master_address           (address_span_extender_0_expanded_master_address),       //   input,  width = 30,             address_span_extender_0_expanded_master.address
		.address_span_extender_0_expanded_master_waitrequest       (address_span_extender_0_expanded_master_waitrequest),   //  output,   width = 1,                                                    .waitrequest
		.address_span_extender_0_expanded_master_burstcount        (address_span_extender_0_expanded_master_burstcount),    //   input,   width = 1,                                                    .burstcount
		.address_span_extender_0_expanded_master_byteenable        (address_span_extender_0_expanded_master_byteenable),    //   input,   width = 8,                                                    .byteenable
		.address_span_extender_0_expanded_master_read              (address_span_extender_0_expanded_master_read),          //   input,   width = 1,                                                    .read
		.address_span_extender_0_expanded_master_readdata          (address_span_extender_0_expanded_master_readdata),      //  output,  width = 64,                                                    .readdata
		.address_span_extender_0_expanded_master_readdatavalid     (address_span_extender_0_expanded_master_readdatavalid), //  output,   width = 1,                                                    .readdatavalid
		.address_span_extender_0_expanded_master_write             (address_span_extender_0_expanded_master_write),         //   input,   width = 1,                                                    .write
		.address_span_extender_0_expanded_master_writedata         (address_span_extender_0_expanded_master_writedata),     //   input,  width = 64,                                                    .writedata
		.kernel_cra_s0_address                                     (mm_interconnect_0_kernel_cra_s0_address),               //  output,  width = 30,                                       kernel_cra_s0.address
		.kernel_cra_s0_write                                       (mm_interconnect_0_kernel_cra_s0_write),                 //  output,   width = 1,                                                    .write
		.kernel_cra_s0_read                                        (mm_interconnect_0_kernel_cra_s0_read),                  //  output,   width = 1,                                                    .read
		.kernel_cra_s0_readdata                                    (mm_interconnect_0_kernel_cra_s0_readdata),              //   input,  width = 64,                                                    .readdata
		.kernel_cra_s0_writedata                                   (mm_interconnect_0_kernel_cra_s0_writedata),             //  output,  width = 64,                                                    .writedata
		.kernel_cra_s0_burstcount                                  (mm_interconnect_0_kernel_cra_s0_burstcount),            //  output,   width = 1,                                                    .burstcount
		.kernel_cra_s0_byteenable                                  (mm_interconnect_0_kernel_cra_s0_byteenable),            //  output,   width = 8,                                                    .byteenable
		.kernel_cra_s0_readdatavalid                               (mm_interconnect_0_kernel_cra_s0_readdatavalid),         //   input,   width = 1,                                                    .readdatavalid
		.kernel_cra_s0_waitrequest                                 (mm_interconnect_0_kernel_cra_s0_waitrequest),           //   input,   width = 1,                                                    .waitrequest
		.kernel_cra_s0_debugaccess                                 (mm_interconnect_0_kernel_cra_s0_debugaccess),           //  output,   width = 1,                                                    .debugaccess
		.address_span_extender_0_reset_reset_bridge_in_reset_reset (~reset_reset_n),                                        //   input,   width = 1, address_span_extender_0_reset_reset_bridge_in_reset.reset
		.kernel_cra_reset_reset_bridge_in_reset_reset              (~kernel_reset_reset_n),                                 //   input,   width = 1,              kernel_cra_reset_reset_bridge_in_reset.reset
		.clk_reset_clk_clk                                         (clk_clk),                                               //   input,   width = 1,                                       clk_reset_clk.clk
		.kernel_clk_out_clk_clk                                    (kernel_clk_clk)                                         //   input,   width = 1,                                  kernel_clk_out_clk.clk
	);

	board_kernel_interface_altera_mm_interconnect_191_petfoby mm_interconnect_1 (
		.ctrl_m0_address                                      (ctrl_m0_address),                                                        //   input,  width = 14,                                  ctrl_m0.address
		.ctrl_m0_waitrequest                                  (ctrl_m0_waitrequest),                                                    //  output,   width = 1,                                         .waitrequest
		.ctrl_m0_burstcount                                   (ctrl_m0_burstcount),                                                     //   input,   width = 1,                                         .burstcount
		.ctrl_m0_byteenable                                   (ctrl_m0_byteenable),                                                     //   input,   width = 4,                                         .byteenable
		.ctrl_m0_read                                         (ctrl_m0_read),                                                           //   input,   width = 1,                                         .read
		.ctrl_m0_readdata                                     (ctrl_m0_readdata),                                                       //  output,  width = 32,                                         .readdata
		.ctrl_m0_readdatavalid                                (ctrl_m0_readdatavalid),                                                  //  output,   width = 1,                                         .readdatavalid
		.ctrl_m0_write                                        (ctrl_m0_write),                                                          //   input,   width = 1,                                         .write
		.ctrl_m0_writedata                                    (ctrl_m0_writedata),                                                      //   input,  width = 32,                                         .writedata
		.ctrl_m0_debugaccess                                  (ctrl_m0_debugaccess),                                                    //   input,   width = 1,                                         .debugaccess
		.address_span_extender_0_windowed_slave_address       (mm_interconnect_1_address_span_extender_0_windowed_slave_address),       //  output,   width = 9,   address_span_extender_0_windowed_slave.address
		.address_span_extender_0_windowed_slave_write         (mm_interconnect_1_address_span_extender_0_windowed_slave_write),         //  output,   width = 1,                                         .write
		.address_span_extender_0_windowed_slave_read          (mm_interconnect_1_address_span_extender_0_windowed_slave_read),          //  output,   width = 1,                                         .read
		.address_span_extender_0_windowed_slave_readdata      (mm_interconnect_1_address_span_extender_0_windowed_slave_readdata),      //   input,  width = 64,                                         .readdata
		.address_span_extender_0_windowed_slave_writedata     (mm_interconnect_1_address_span_extender_0_windowed_slave_writedata),     //  output,  width = 64,                                         .writedata
		.address_span_extender_0_windowed_slave_burstcount    (mm_interconnect_1_address_span_extender_0_windowed_slave_burstcount),    //  output,   width = 1,                                         .burstcount
		.address_span_extender_0_windowed_slave_byteenable    (mm_interconnect_1_address_span_extender_0_windowed_slave_byteenable),    //  output,   width = 8,                                         .byteenable
		.address_span_extender_0_windowed_slave_readdatavalid (mm_interconnect_1_address_span_extender_0_windowed_slave_readdatavalid), //   input,   width = 1,                                         .readdatavalid
		.address_span_extender_0_windowed_slave_waitrequest   (mm_interconnect_1_address_span_extender_0_windowed_slave_waitrequest),   //   input,   width = 1,                                         .waitrequest
		.address_span_extender_0_cntl_write                   (mm_interconnect_1_address_span_extender_0_cntl_write),                   //  output,   width = 1,             address_span_extender_0_cntl.write
		.address_span_extender_0_cntl_read                    (mm_interconnect_1_address_span_extender_0_cntl_read),                    //  output,   width = 1,                                         .read
		.address_span_extender_0_cntl_readdata                (mm_interconnect_1_address_span_extender_0_cntl_readdata),                //   input,  width = 64,                                         .readdata
		.address_span_extender_0_cntl_writedata               (mm_interconnect_1_address_span_extender_0_cntl_writedata),               //  output,  width = 64,                                         .writedata
		.address_span_extender_0_cntl_byteenable              (mm_interconnect_1_address_span_extender_0_cntl_byteenable),              //  output,   width = 8,                                         .byteenable
		.sw_reset_s_write                                     (mm_interconnect_1_sw_reset_s_write),                                     //  output,   width = 1,                               sw_reset_s.write
		.sw_reset_s_read                                      (mm_interconnect_1_sw_reset_s_read),                                      //  output,   width = 1,                                         .read
		.sw_reset_s_readdata                                  (mm_interconnect_1_sw_reset_s_readdata),                                  //   input,  width = 64,                                         .readdata
		.sw_reset_s_writedata                                 (mm_interconnect_1_sw_reset_s_writedata),                                 //  output,  width = 64,                                         .writedata
		.sw_reset_s_byteenable                                (mm_interconnect_1_sw_reset_s_byteenable),                                //  output,   width = 8,                                         .byteenable
		.sw_reset_s_waitrequest                               (mm_interconnect_1_sw_reset_s_waitrequest),                               //   input,   width = 1,                                         .waitrequest
		.mem_org_mode0_s_write                                (mm_interconnect_1_mem_org_mode0_s_write),                                //  output,   width = 1,                          mem_org_mode0_s.write
		.mem_org_mode0_s_read                                 (mm_interconnect_1_mem_org_mode0_s_read),                                 //  output,   width = 1,                                         .read
		.mem_org_mode0_s_readdata                             (mm_interconnect_1_mem_org_mode0_s_readdata),                             //   input,  width = 32,                                         .readdata
		.mem_org_mode0_s_writedata                            (mm_interconnect_1_mem_org_mode0_s_writedata),                            //  output,  width = 32,                                         .writedata
		.mem_org_mode0_s_waitrequest                          (mm_interconnect_1_mem_org_mode0_s_waitrequest),                          //   input,   width = 1,                                         .waitrequest
		.version_id_0_s_read                                  (mm_interconnect_1_version_id_0_s_read),                                  //  output,   width = 1,                           version_id_0_s.read
		.version_id_0_s_readdata                              (mm_interconnect_1_version_id_0_s_readdata),                              //   input,  width = 32,                                         .readdata
		.ctrl_reset_reset_bridge_in_reset_reset               (~reset_reset_n),                                                         //   input,   width = 1,         ctrl_reset_reset_bridge_in_reset.reset
		.sw_reset_clk_reset_reset_bridge_in_reset_reset       (rst_controller_reset_out_reset),                                         //   input,   width = 1, sw_reset_clk_reset_reset_bridge_in_reset.reset
		.clk_reset_clk_clk                                    (clk_clk)                                                                 //   input,   width = 1,                            clk_reset_clk.clk
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (2),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (~reset_reset_n),                 //   input,  width = 1, reset_in0.reset
		.reset_in1      (sw_reset_in_reset),              //   input,  width = 1, reset_in1.reset
		.clk            (clk_clk),                        //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_reset_out_reset), //  output,  width = 1, reset_out.reset
		.reset_req      (),                               // (terminated),                       
		.reset_req_in0  (1'b0),                           // (terminated),                       
		.reset_req_in1  (1'b0),                           // (terminated),                       
		.reset_in2      (1'b0),                           // (terminated),                       
		.reset_req_in2  (1'b0),                           // (terminated),                       
		.reset_in3      (1'b0),                           // (terminated),                       
		.reset_req_in3  (1'b0),                           // (terminated),                       
		.reset_in4      (1'b0),                           // (terminated),                       
		.reset_req_in4  (1'b0),                           // (terminated),                       
		.reset_in5      (1'b0),                           // (terminated),                       
		.reset_req_in5  (1'b0),                           // (terminated),                       
		.reset_in6      (1'b0),                           // (terminated),                       
		.reset_req_in6  (1'b0),                           // (terminated),                       
		.reset_in7      (1'b0),                           // (terminated),                       
		.reset_req_in7  (1'b0),                           // (terminated),                       
		.reset_in8      (1'b0),                           // (terminated),                       
		.reset_req_in8  (1'b0),                           // (terminated),                       
		.reset_in9      (1'b0),                           // (terminated),                       
		.reset_req_in9  (1'b0),                           // (terminated),                       
		.reset_in10     (1'b0),                           // (terminated),                       
		.reset_req_in10 (1'b0),                           // (terminated),                       
		.reset_in11     (1'b0),                           // (terminated),                       
		.reset_req_in11 (1'b0),                           // (terminated),                       
		.reset_in12     (1'b0),                           // (terminated),                       
		.reset_req_in12 (1'b0),                           // (terminated),                       
		.reset_in13     (1'b0),                           // (terminated),                       
		.reset_req_in13 (1'b0),                           // (terminated),                       
		.reset_in14     (1'b0),                           // (terminated),                       
		.reset_req_in14 (1'b0),                           // (terminated),                       
		.reset_in15     (1'b0),                           // (terminated),                       
		.reset_req_in15 (1'b0)                            // (terminated),                       
	);

endmodule
