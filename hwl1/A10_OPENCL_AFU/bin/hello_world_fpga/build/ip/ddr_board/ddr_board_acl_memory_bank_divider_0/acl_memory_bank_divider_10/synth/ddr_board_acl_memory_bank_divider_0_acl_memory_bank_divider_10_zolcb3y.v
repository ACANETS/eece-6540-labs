// ddr_board_acl_memory_bank_divider_0_acl_memory_bank_divider_10_zolcb3y.v

// This file was auto-generated from acl_memory_bank_divider_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 19.2 57

`timescale 1 ps / 1 ps
module ddr_board_acl_memory_bank_divider_0_acl_memory_bank_divider_10_zolcb3y (
		input  wire         clk_clk,                  //                 clk.clk
		input  wire         reset_reset_n,            //               reset.reset_n
		output wire [32:0]  acl_bsp_snoop_data,       //       acl_bsp_snoop.data
		output wire         acl_bsp_snoop_valid,      //                    .valid
		input  wire         acl_bsp_snoop_ready,      //                    .ready
		input  wire         kernel_clk_clk,           //          kernel_clk.clk
		input  wire         kernel_reset_reset_n,     //        kernel_reset.reset_n
		input  wire [511:0] s_writedata,              //                   s.writedata
		input  wire         s_read,                   //                    .read
		input  wire         s_write,                  //                    .write
		input  wire [4:0]   s_burstcount,             //                    .burstcount
		input  wire [63:0]  s_byteenable,             //                    .byteenable
		output wire         s_waitrequest,            //                    .waitrequest
		output wire [511:0] s_readdata,               //                    .readdata
		output wire         s_readdatavalid,          //                    .readdatavalid
		input  wire [26:0]  s_address,                //                    .address
		input  wire [1:0]   acl_bsp_memorg_host_mode, // acl_bsp_memorg_host.mode
		output wire [31:0]  bank1_address,            //               bank1.address
		output wire [511:0] bank1_writedata,          //                    .writedata
		output wire         bank1_read,               //                    .read
		output wire         bank1_write,              //                    .write
		output wire [4:0]   bank1_burstcount,         //                    .burstcount
		output wire [63:0]  bank1_byteenable,         //                    .byteenable
		input  wire         bank1_waitrequest,        //                    .waitrequest
		input  wire [511:0] bank1_readdata,           //                    .readdata
		input  wire         bank1_readdatavalid,      //                    .readdatavalid
		output wire [31:0]  bank2_address,            //               bank2.address
		output wire [511:0] bank2_writedata,          //                    .writedata
		output wire         bank2_read,               //                    .read
		output wire         bank2_write,              //                    .write
		output wire [4:0]   bank2_burstcount,         //                    .burstcount
		output wire [63:0]  bank2_byteenable,         //                    .byteenable
		input  wire         bank2_waitrequest,        //                    .waitrequest
		input  wire [511:0] bank2_readdata,           //                    .readdata
		input  wire         bank2_readdatavalid       //                    .readdatavalid
	);

	wire          burst_splitter_master_waitrequest;                           // mm_interconnect_0:burst_splitter_master_waitrequest -> burst_splitter:m_waitrequest_i
	wire  [511:0] burst_splitter_master_readdata;                              // mm_interconnect_0:burst_splitter_master_readdata -> burst_splitter:m_readdata_i
	wire   [26:0] burst_splitter_master_address;                               // burst_splitter:m_addr_o -> mm_interconnect_0:burst_splitter_master_address
	wire          burst_splitter_master_read;                                  // burst_splitter:m_read_o -> mm_interconnect_0:burst_splitter_master_read
	wire   [63:0] burst_splitter_master_byteenable;                            // burst_splitter:m_byteenable_o -> mm_interconnect_0:burst_splitter_master_byteenable
	wire          burst_splitter_master_readdatavalid;                         // mm_interconnect_0:burst_splitter_master_readdatavalid -> burst_splitter:m_readdatavalid_i
	wire  [511:0] burst_splitter_master_writedata;                             // burst_splitter:m_writedata_o -> mm_interconnect_0:burst_splitter_master_writedata
	wire          burst_splitter_master_write;                                 // burst_splitter:m_write_o -> mm_interconnect_0:burst_splitter_master_write
	wire    [4:0] burst_splitter_master_burstcount;                            // burst_splitter:m_burstcount_o -> mm_interconnect_0:burst_splitter_master_burstcount
	wire          mm_interconnect_0_acl_snoop_adapter_0_s1_beginbursttransfer; // mm_interconnect_0:acl_snoop_adapter_0_s1_beginbursttransfer -> acl_snoop_adapter_0:burstbegin
	wire  [511:0] mm_interconnect_0_acl_snoop_adapter_0_s1_readdata;           // acl_snoop_adapter_0:readdata -> mm_interconnect_0:acl_snoop_adapter_0_s1_readdata
	wire          mm_interconnect_0_acl_snoop_adapter_0_s1_waitrequest;        // acl_snoop_adapter_0:waitrequest -> mm_interconnect_0:acl_snoop_adapter_0_s1_waitrequest
	wire   [26:0] mm_interconnect_0_acl_snoop_adapter_0_s1_address;            // mm_interconnect_0:acl_snoop_adapter_0_s1_address -> acl_snoop_adapter_0:address
	wire          mm_interconnect_0_acl_snoop_adapter_0_s1_read;               // mm_interconnect_0:acl_snoop_adapter_0_s1_read -> acl_snoop_adapter_0:read
	wire   [63:0] mm_interconnect_0_acl_snoop_adapter_0_s1_byteenable;         // mm_interconnect_0:acl_snoop_adapter_0_s1_byteenable -> acl_snoop_adapter_0:byteenable
	wire          mm_interconnect_0_acl_snoop_adapter_0_s1_readdatavalid;      // acl_snoop_adapter_0:readdatavalid -> mm_interconnect_0:acl_snoop_adapter_0_s1_readdatavalid
	wire          mm_interconnect_0_acl_snoop_adapter_0_s1_write;              // mm_interconnect_0:acl_snoop_adapter_0_s1_write -> acl_snoop_adapter_0:write
	wire  [511:0] mm_interconnect_0_acl_snoop_adapter_0_s1_writedata;          // mm_interconnect_0:acl_snoop_adapter_0_s1_writedata -> acl_snoop_adapter_0:writedata
	wire    [4:0] mm_interconnect_0_acl_snoop_adapter_0_s1_burstcount;         // mm_interconnect_0:acl_snoop_adapter_0_s1_burstcount -> acl_snoop_adapter_0:burstcount
	wire  [511:0] acl_snoop_adapter_0_m1_readdata;                             // mm_interconnect_1:acl_snoop_adapter_0_m1_readdata -> acl_snoop_adapter_0:export_readdata
	wire          acl_snoop_adapter_0_m1_waitrequest;                          // mm_interconnect_1:acl_snoop_adapter_0_m1_waitrequest -> acl_snoop_adapter_0:export_waitrequest
	wire   [32:0] acl_snoop_adapter_0_m1_address;                              // acl_snoop_adapter_0:export_address -> mm_interconnect_1:acl_snoop_adapter_0_m1_address
	wire          acl_snoop_adapter_0_m1_read;                                 // acl_snoop_adapter_0:export_read -> mm_interconnect_1:acl_snoop_adapter_0_m1_read
	wire   [63:0] acl_snoop_adapter_0_m1_byteenable;                           // acl_snoop_adapter_0:export_byteenable -> mm_interconnect_1:acl_snoop_adapter_0_m1_byteenable
	wire          acl_snoop_adapter_0_m1_readdatavalid;                        // mm_interconnect_1:acl_snoop_adapter_0_m1_readdatavalid -> acl_snoop_adapter_0:export_readdatavalid
	wire          acl_snoop_adapter_0_m1_write;                                // acl_snoop_adapter_0:export_write -> mm_interconnect_1:acl_snoop_adapter_0_m1_write
	wire  [511:0] acl_snoop_adapter_0_m1_writedata;                            // acl_snoop_adapter_0:export_writedata -> mm_interconnect_1:acl_snoop_adapter_0_m1_writedata
	wire    [4:0] acl_snoop_adapter_0_m1_burstcount;                           // acl_snoop_adapter_0:export_burstcount -> mm_interconnect_1:acl_snoop_adapter_0_m1_burstcount
	wire  [511:0] mm_interconnect_1_pipe_stage_presplitter_s0_readdata;        // pipe_stage_presplitter:s0_readdata -> mm_interconnect_1:pipe_stage_presplitter_s0_readdata
	wire          mm_interconnect_1_pipe_stage_presplitter_s0_waitrequest;     // pipe_stage_presplitter:s0_waitrequest -> mm_interconnect_1:pipe_stage_presplitter_s0_waitrequest
	wire          mm_interconnect_1_pipe_stage_presplitter_s0_debugaccess;     // mm_interconnect_1:pipe_stage_presplitter_s0_debugaccess -> pipe_stage_presplitter:s0_debugaccess
	wire   [32:0] mm_interconnect_1_pipe_stage_presplitter_s0_address;         // mm_interconnect_1:pipe_stage_presplitter_s0_address -> pipe_stage_presplitter:s0_address
	wire          mm_interconnect_1_pipe_stage_presplitter_s0_read;            // mm_interconnect_1:pipe_stage_presplitter_s0_read -> pipe_stage_presplitter:s0_read
	wire   [63:0] mm_interconnect_1_pipe_stage_presplitter_s0_byteenable;      // mm_interconnect_1:pipe_stage_presplitter_s0_byteenable -> pipe_stage_presplitter:s0_byteenable
	wire          mm_interconnect_1_pipe_stage_presplitter_s0_readdatavalid;   // pipe_stage_presplitter:s0_readdatavalid -> mm_interconnect_1:pipe_stage_presplitter_s0_readdatavalid
	wire          mm_interconnect_1_pipe_stage_presplitter_s0_write;           // mm_interconnect_1:pipe_stage_presplitter_s0_write -> pipe_stage_presplitter:s0_write
	wire  [511:0] mm_interconnect_1_pipe_stage_presplitter_s0_writedata;       // mm_interconnect_1:pipe_stage_presplitter_s0_writedata -> pipe_stage_presplitter:s0_writedata
	wire    [4:0] mm_interconnect_1_pipe_stage_presplitter_s0_burstcount;      // mm_interconnect_1:pipe_stage_presplitter_s0_burstcount -> pipe_stage_presplitter:s0_burstcount
	wire          pipe_stage_presplitter_m0_waitrequest;                       // mm_interconnect_2:pipe_stage_presplitter_m0_waitrequest -> pipe_stage_presplitter:m0_waitrequest
	wire  [511:0] pipe_stage_presplitter_m0_readdata;                          // mm_interconnect_2:pipe_stage_presplitter_m0_readdata -> pipe_stage_presplitter:m0_readdata
	wire          pipe_stage_presplitter_m0_debugaccess;                       // pipe_stage_presplitter:m0_debugaccess -> mm_interconnect_2:pipe_stage_presplitter_m0_debugaccess
	wire   [32:0] pipe_stage_presplitter_m0_address;                           // pipe_stage_presplitter:m0_address -> mm_interconnect_2:pipe_stage_presplitter_m0_address
	wire          pipe_stage_presplitter_m0_read;                              // pipe_stage_presplitter:m0_read -> mm_interconnect_2:pipe_stage_presplitter_m0_read
	wire   [63:0] pipe_stage_presplitter_m0_byteenable;                        // pipe_stage_presplitter:m0_byteenable -> mm_interconnect_2:pipe_stage_presplitter_m0_byteenable
	wire          pipe_stage_presplitter_m0_readdatavalid;                     // mm_interconnect_2:pipe_stage_presplitter_m0_readdatavalid -> pipe_stage_presplitter:m0_readdatavalid
	wire  [511:0] pipe_stage_presplitter_m0_writedata;                         // pipe_stage_presplitter:m0_writedata -> mm_interconnect_2:pipe_stage_presplitter_m0_writedata
	wire          pipe_stage_presplitter_m0_write;                             // pipe_stage_presplitter:m0_write -> mm_interconnect_2:pipe_stage_presplitter_m0_write
	wire    [4:0] pipe_stage_presplitter_m0_burstcount;                        // pipe_stage_presplitter:m0_burstcount -> mm_interconnect_2:pipe_stage_presplitter_m0_burstcount
	wire  [511:0] mm_interconnect_2_mem_splitter_0_s_readdata;                 // mem_splitter_0:slave_readdata -> mm_interconnect_2:mem_splitter_0_s_readdata
	wire          mm_interconnect_2_mem_splitter_0_s_waitrequest;              // mem_splitter_0:slave_waitrequest -> mm_interconnect_2:mem_splitter_0_s_waitrequest
	wire   [26:0] mm_interconnect_2_mem_splitter_0_s_address;                  // mm_interconnect_2:mem_splitter_0_s_address -> mem_splitter_0:slave_address
	wire          mm_interconnect_2_mem_splitter_0_s_read;                     // mm_interconnect_2:mem_splitter_0_s_read -> mem_splitter_0:slave_read
	wire   [63:0] mm_interconnect_2_mem_splitter_0_s_byteenable;               // mm_interconnect_2:mem_splitter_0_s_byteenable -> mem_splitter_0:slave_byteenable
	wire          mm_interconnect_2_mem_splitter_0_s_readdatavalid;            // mem_splitter_0:slave_readdatavalid -> mm_interconnect_2:mem_splitter_0_s_readdatavalid
	wire          mm_interconnect_2_mem_splitter_0_s_write;                    // mm_interconnect_2:mem_splitter_0_s_write -> mem_splitter_0:slave_write
	wire  [511:0] mm_interconnect_2_mem_splitter_0_s_writedata;                // mm_interconnect_2:mem_splitter_0_s_writedata -> mem_splitter_0:slave_writedata
	wire    [4:0] mm_interconnect_2_mem_splitter_0_s_burstcount;               // mm_interconnect_2:mem_splitter_0_s_burstcount -> mem_splitter_0:slave_burstcount
	wire          rst_controller_reset_out_reset;                              // rst_controller:reset_out -> acl_snoop_adapter_0:kernel_reset

	snoop_adapter #(
		.NUM_BYTES          (64),
		.BYTE_ADDRESS_WIDTH (33),
		.WORD_ADDRESS_WIDTH (27),
		.BURSTCOUNT_WIDTH   (5)
	) acl_snoop_adapter_0 (
		.clk                  (clk_clk),                                                     //   input,    width = 1,          clk.clk
		.reset                (~reset_reset_n),                                              //   input,    width = 1,    clk_reset.reset
		.kernel_clk           (kernel_clk_clk),                                              //   input,    width = 1,   kernel_clk.clk
		.kernel_reset         (rst_controller_reset_out_reset),                              //   input,    width = 1, kernel_reset.reset
		.read                 (mm_interconnect_0_acl_snoop_adapter_0_s1_read),               //   input,    width = 1,           s1.read
		.readdata             (mm_interconnect_0_acl_snoop_adapter_0_s1_readdata),           //  output,  width = 512,             .readdata
		.readdatavalid        (mm_interconnect_0_acl_snoop_adapter_0_s1_readdatavalid),      //  output,    width = 1,             .readdatavalid
		.write                (mm_interconnect_0_acl_snoop_adapter_0_s1_write),              //   input,    width = 1,             .write
		.writedata            (mm_interconnect_0_acl_snoop_adapter_0_s1_writedata),          //   input,  width = 512,             .writedata
		.burstcount           (mm_interconnect_0_acl_snoop_adapter_0_s1_burstcount),         //   input,    width = 5,             .burstcount
		.burstbegin           (mm_interconnect_0_acl_snoop_adapter_0_s1_beginbursttransfer), //   input,    width = 1,             .beginbursttransfer
		.byteenable           (mm_interconnect_0_acl_snoop_adapter_0_s1_byteenable),         //   input,   width = 64,             .byteenable
		.address              (mm_interconnect_0_acl_snoop_adapter_0_s1_address),            //   input,   width = 27,             .address
		.waitrequest          (mm_interconnect_0_acl_snoop_adapter_0_s1_waitrequest),        //  output,    width = 1,             .waitrequest
		.export_address       (acl_snoop_adapter_0_m1_address),                              //  output,   width = 33,           m1.address
		.export_read          (acl_snoop_adapter_0_m1_read),                                 //  output,    width = 1,             .read
		.export_readdata      (acl_snoop_adapter_0_m1_readdata),                             //   input,  width = 512,             .readdata
		.export_readdatavalid (acl_snoop_adapter_0_m1_readdatavalid),                        //   input,    width = 1,             .readdatavalid
		.export_write         (acl_snoop_adapter_0_m1_write),                                //  output,    width = 1,             .write
		.export_writedata     (acl_snoop_adapter_0_m1_writedata),                            //  output,  width = 512,             .writedata
		.export_burstcount    (acl_snoop_adapter_0_m1_burstcount),                           //  output,    width = 5,             .burstcount
		.export_byteenable    (acl_snoop_adapter_0_m1_byteenable),                           //  output,   width = 64,             .byteenable
		.export_waitrequest   (acl_snoop_adapter_0_m1_waitrequest),                          //   input,    width = 1,             .waitrequest
		.snoop_data           (acl_bsp_snoop_data),                                          //  output,   width = 33,        snoop.data
		.snoop_valid          (acl_bsp_snoop_valid),                                         //  output,    width = 1,             .valid
		.snoop_ready          (acl_bsp_snoop_ready)                                          //   input,    width = 1,             .ready
	);

	burst_boundary_splitter #(
		.WIDTH_D          (512),
		.WORD_WIDTH_A     (27),
		.BURSTCOUNT_WIDTH (5),
		.BYTEENABLE_WIDTH (64)
	) burst_splitter (
		.clk               (clk_clk),                             //   input,    width = 1,  clock.clk
		.m_waitrequest_i   (burst_splitter_master_waitrequest),   //   input,    width = 1, master.waitrequest
		.m_readdata_i      (burst_splitter_master_readdata),      //   input,  width = 512,       .readdata
		.m_readdatavalid_i (burst_splitter_master_readdatavalid), //   input,    width = 1,       .readdatavalid
		.m_addr_o          (burst_splitter_master_address),       //  output,   width = 27,       .address
		.m_writedata_o     (burst_splitter_master_writedata),     //  output,  width = 512,       .writedata
		.m_read_o          (burst_splitter_master_read),          //  output,    width = 1,       .read
		.m_write_o         (burst_splitter_master_write),         //  output,    width = 1,       .write
		.m_burstcount_o    (burst_splitter_master_burstcount),    //  output,    width = 5,       .burstcount
		.m_byteenable_o    (burst_splitter_master_byteenable),    //  output,   width = 64,       .byteenable
		.resetn            (reset_reset_n),                       //   input,    width = 1,  reset.reset_n
		.s_writedata_i     (s_writedata),                         //   input,  width = 512,  slave.writedata
		.s_read_i          (s_read),                              //   input,    width = 1,       .read
		.s_write_i         (s_write),                             //   input,    width = 1,       .write
		.s_burstcount_i    (s_burstcount),                        //   input,    width = 5,       .burstcount
		.s_byteenable_i    (s_byteenable),                        //   input,   width = 64,       .byteenable
		.s_waitrequest_o   (s_waitrequest),                       //  output,    width = 1,       .waitrequest
		.s_readdata_o      (s_readdata),                          //  output,  width = 512,       .readdata
		.s_readdatavalid_o (s_readdatavalid),                     //  output,    width = 1,       .readdatavalid
		.s_addr_i          (s_address)                            //   input,   width = 27,       .address
	);

	mem_splitter #(
		.NUM_BANKS         (2),
		.WIDTH_D           (512),
		.M_WIDTH_A         (32),
		.S_WIDTH_A         (27),
		.BURSTCOUNT_WIDTH  (5),
		.BYTEENABLE_WIDTH  (64),
		.MAX_PENDING_READS (64)
	) mem_splitter_0 (
		.mode                (acl_bsp_memorg_host_mode),                         //   input,    width = 2,      mode.mode
		.clk                 (clk_clk),                                          //   input,    width = 1,       clk.clk
		.resetn              (reset_reset_n),                                    //   input,    width = 1, clk_reset.reset_n
		.slave_address       (mm_interconnect_2_mem_splitter_0_s_address),       //   input,   width = 27,         s.address
		.slave_writedata     (mm_interconnect_2_mem_splitter_0_s_writedata),     //   input,  width = 512,          .writedata
		.slave_read          (mm_interconnect_2_mem_splitter_0_s_read),          //   input,    width = 1,          .read
		.slave_write         (mm_interconnect_2_mem_splitter_0_s_write),         //   input,    width = 1,          .write
		.slave_burstcount    (mm_interconnect_2_mem_splitter_0_s_burstcount),    //   input,    width = 5,          .burstcount
		.slave_byteenable    (mm_interconnect_2_mem_splitter_0_s_byteenable),    //   input,   width = 64,          .byteenable
		.slave_waitrequest   (mm_interconnect_2_mem_splitter_0_s_waitrequest),   //  output,    width = 1,          .waitrequest
		.slave_readdata      (mm_interconnect_2_mem_splitter_0_s_readdata),      //  output,  width = 512,          .readdata
		.slave_readdatavalid (mm_interconnect_2_mem_splitter_0_s_readdatavalid), //  output,    width = 1,          .readdatavalid
		.bank1_address       (bank1_address),                                    //  output,   width = 32,     bank1.address
		.bank1_writedata     (bank1_writedata),                                  //  output,  width = 512,          .writedata
		.bank1_read          (bank1_read),                                       //  output,    width = 1,          .read
		.bank1_write         (bank1_write),                                      //  output,    width = 1,          .write
		.bank1_burstcount    (bank1_burstcount),                                 //  output,    width = 5,          .burstcount
		.bank1_byteenable    (bank1_byteenable),                                 //  output,   width = 64,          .byteenable
		.bank1_waitrequest   (bank1_waitrequest),                                //   input,    width = 1,          .waitrequest
		.bank1_readdata      (bank1_readdata),                                   //   input,  width = 512,          .readdata
		.bank1_readdatavalid (bank1_readdatavalid),                              //   input,    width = 1,          .readdatavalid
		.bank2_address       (bank2_address),                                    //  output,   width = 32,     bank2.address
		.bank2_writedata     (bank2_writedata),                                  //  output,  width = 512,          .writedata
		.bank2_read          (bank2_read),                                       //  output,    width = 1,          .read
		.bank2_write         (bank2_write),                                      //  output,    width = 1,          .write
		.bank2_burstcount    (bank2_burstcount),                                 //  output,    width = 5,          .burstcount
		.bank2_byteenable    (bank2_byteenable),                                 //  output,   width = 64,          .byteenable
		.bank2_waitrequest   (bank2_waitrequest),                                //   input,    width = 1,          .waitrequest
		.bank2_readdata      (bank2_readdata),                                   //   input,  width = 512,          .readdata
		.bank2_readdatavalid (bank2_readdatavalid)                               //   input,    width = 1,          .readdatavalid
	);

	ddr_board_acl_memory_bank_divider_0_altera_avalon_mm_bridge_191_45tnyma #(
		.DATA_WIDTH        (512),
		.SYMBOL_WIDTH      (8),
		.HDL_ADDR_WIDTH    (33),
		.BURSTCOUNT_WIDTH  (5),
		.PIPELINE_COMMAND  (1),
		.PIPELINE_RESPONSE (1),
		.SYNC_RESET        (0)
	) pipe_stage_presplitter (
		.clk              (clk_clk),                                                   //   input,    width = 1,   clk.clk
		.reset            (~reset_reset_n),                                            //   input,    width = 1, reset.reset
		.s0_waitrequest   (mm_interconnect_1_pipe_stage_presplitter_s0_waitrequest),   //  output,    width = 1,    s0.waitrequest
		.s0_readdata      (mm_interconnect_1_pipe_stage_presplitter_s0_readdata),      //  output,  width = 512,      .readdata
		.s0_readdatavalid (mm_interconnect_1_pipe_stage_presplitter_s0_readdatavalid), //  output,    width = 1,      .readdatavalid
		.s0_burstcount    (mm_interconnect_1_pipe_stage_presplitter_s0_burstcount),    //   input,    width = 5,      .burstcount
		.s0_writedata     (mm_interconnect_1_pipe_stage_presplitter_s0_writedata),     //   input,  width = 512,      .writedata
		.s0_address       (mm_interconnect_1_pipe_stage_presplitter_s0_address),       //   input,   width = 33,      .address
		.s0_write         (mm_interconnect_1_pipe_stage_presplitter_s0_write),         //   input,    width = 1,      .write
		.s0_read          (mm_interconnect_1_pipe_stage_presplitter_s0_read),          //   input,    width = 1,      .read
		.s0_byteenable    (mm_interconnect_1_pipe_stage_presplitter_s0_byteenable),    //   input,   width = 64,      .byteenable
		.s0_debugaccess   (mm_interconnect_1_pipe_stage_presplitter_s0_debugaccess),   //   input,    width = 1,      .debugaccess
		.m0_waitrequest   (pipe_stage_presplitter_m0_waitrequest),                     //   input,    width = 1,    m0.waitrequest
		.m0_readdata      (pipe_stage_presplitter_m0_readdata),                        //   input,  width = 512,      .readdata
		.m0_readdatavalid (pipe_stage_presplitter_m0_readdatavalid),                   //   input,    width = 1,      .readdatavalid
		.m0_burstcount    (pipe_stage_presplitter_m0_burstcount),                      //  output,    width = 5,      .burstcount
		.m0_writedata     (pipe_stage_presplitter_m0_writedata),                       //  output,  width = 512,      .writedata
		.m0_address       (pipe_stage_presplitter_m0_address),                         //  output,   width = 33,      .address
		.m0_write         (pipe_stage_presplitter_m0_write),                           //  output,    width = 1,      .write
		.m0_read          (pipe_stage_presplitter_m0_read),                            //  output,    width = 1,      .read
		.m0_byteenable    (pipe_stage_presplitter_m0_byteenable),                      //  output,   width = 64,      .byteenable
		.m0_debugaccess   (pipe_stage_presplitter_m0_debugaccess),                     //  output,    width = 1,      .debugaccess
		.s0_response      (),                                                          // (terminated),                     
		.m0_response      (2'b00)                                                      // (terminated),                     
	);

	ddr_board_acl_memory_bank_divider_0_altera_mm_interconnect_191_febuv6y mm_interconnect_0 (
		.burst_splitter_master_address                    (burst_splitter_master_address),                               //   input,   width = 27,                      burst_splitter_master.address
		.burst_splitter_master_waitrequest                (burst_splitter_master_waitrequest),                           //  output,    width = 1,                                           .waitrequest
		.burst_splitter_master_burstcount                 (burst_splitter_master_burstcount),                            //   input,    width = 5,                                           .burstcount
		.burst_splitter_master_byteenable                 (burst_splitter_master_byteenable),                            //   input,   width = 64,                                           .byteenable
		.burst_splitter_master_read                       (burst_splitter_master_read),                                  //   input,    width = 1,                                           .read
		.burst_splitter_master_readdata                   (burst_splitter_master_readdata),                              //  output,  width = 512,                                           .readdata
		.burst_splitter_master_readdatavalid              (burst_splitter_master_readdatavalid),                         //  output,    width = 1,                                           .readdatavalid
		.burst_splitter_master_write                      (burst_splitter_master_write),                                 //   input,    width = 1,                                           .write
		.burst_splitter_master_writedata                  (burst_splitter_master_writedata),                             //   input,  width = 512,                                           .writedata
		.acl_snoop_adapter_0_s1_address                   (mm_interconnect_0_acl_snoop_adapter_0_s1_address),            //  output,   width = 27,                     acl_snoop_adapter_0_s1.address
		.acl_snoop_adapter_0_s1_write                     (mm_interconnect_0_acl_snoop_adapter_0_s1_write),              //  output,    width = 1,                                           .write
		.acl_snoop_adapter_0_s1_read                      (mm_interconnect_0_acl_snoop_adapter_0_s1_read),               //  output,    width = 1,                                           .read
		.acl_snoop_adapter_0_s1_readdata                  (mm_interconnect_0_acl_snoop_adapter_0_s1_readdata),           //   input,  width = 512,                                           .readdata
		.acl_snoop_adapter_0_s1_writedata                 (mm_interconnect_0_acl_snoop_adapter_0_s1_writedata),          //  output,  width = 512,                                           .writedata
		.acl_snoop_adapter_0_s1_beginbursttransfer        (mm_interconnect_0_acl_snoop_adapter_0_s1_beginbursttransfer), //  output,    width = 1,                                           .beginbursttransfer
		.acl_snoop_adapter_0_s1_burstcount                (mm_interconnect_0_acl_snoop_adapter_0_s1_burstcount),         //  output,    width = 5,                                           .burstcount
		.acl_snoop_adapter_0_s1_byteenable                (mm_interconnect_0_acl_snoop_adapter_0_s1_byteenable),         //  output,   width = 64,                                           .byteenable
		.acl_snoop_adapter_0_s1_readdatavalid             (mm_interconnect_0_acl_snoop_adapter_0_s1_readdatavalid),      //   input,    width = 1,                                           .readdatavalid
		.acl_snoop_adapter_0_s1_waitrequest               (mm_interconnect_0_acl_snoop_adapter_0_s1_waitrequest),        //   input,    width = 1,                                           .waitrequest
		.burst_splitter_reset_reset_bridge_in_reset_reset (~reset_reset_n),                                              //   input,    width = 1, burst_splitter_reset_reset_bridge_in_reset.reset
		.clk_clk_clk                                      (clk_clk)                                                      //   input,    width = 1,                                    clk_clk.clk
	);

	ddr_board_acl_memory_bank_divider_0_altera_mm_interconnect_191_yttug3i mm_interconnect_1 (
		.acl_snoop_adapter_0_m1_address                            (acl_snoop_adapter_0_m1_address),                            //   input,   width = 33,                              acl_snoop_adapter_0_m1.address
		.acl_snoop_adapter_0_m1_waitrequest                        (acl_snoop_adapter_0_m1_waitrequest),                        //  output,    width = 1,                                                    .waitrequest
		.acl_snoop_adapter_0_m1_burstcount                         (acl_snoop_adapter_0_m1_burstcount),                         //   input,    width = 5,                                                    .burstcount
		.acl_snoop_adapter_0_m1_byteenable                         (acl_snoop_adapter_0_m1_byteenable),                         //   input,   width = 64,                                                    .byteenable
		.acl_snoop_adapter_0_m1_read                               (acl_snoop_adapter_0_m1_read),                               //   input,    width = 1,                                                    .read
		.acl_snoop_adapter_0_m1_readdata                           (acl_snoop_adapter_0_m1_readdata),                           //  output,  width = 512,                                                    .readdata
		.acl_snoop_adapter_0_m1_readdatavalid                      (acl_snoop_adapter_0_m1_readdatavalid),                      //  output,    width = 1,                                                    .readdatavalid
		.acl_snoop_adapter_0_m1_write                              (acl_snoop_adapter_0_m1_write),                              //   input,    width = 1,                                                    .write
		.acl_snoop_adapter_0_m1_writedata                          (acl_snoop_adapter_0_m1_writedata),                          //   input,  width = 512,                                                    .writedata
		.pipe_stage_presplitter_s0_address                         (mm_interconnect_1_pipe_stage_presplitter_s0_address),       //  output,   width = 33,                           pipe_stage_presplitter_s0.address
		.pipe_stage_presplitter_s0_write                           (mm_interconnect_1_pipe_stage_presplitter_s0_write),         //  output,    width = 1,                                                    .write
		.pipe_stage_presplitter_s0_read                            (mm_interconnect_1_pipe_stage_presplitter_s0_read),          //  output,    width = 1,                                                    .read
		.pipe_stage_presplitter_s0_readdata                        (mm_interconnect_1_pipe_stage_presplitter_s0_readdata),      //   input,  width = 512,                                                    .readdata
		.pipe_stage_presplitter_s0_writedata                       (mm_interconnect_1_pipe_stage_presplitter_s0_writedata),     //  output,  width = 512,                                                    .writedata
		.pipe_stage_presplitter_s0_burstcount                      (mm_interconnect_1_pipe_stage_presplitter_s0_burstcount),    //  output,    width = 5,                                                    .burstcount
		.pipe_stage_presplitter_s0_byteenable                      (mm_interconnect_1_pipe_stage_presplitter_s0_byteenable),    //  output,   width = 64,                                                    .byteenable
		.pipe_stage_presplitter_s0_readdatavalid                   (mm_interconnect_1_pipe_stage_presplitter_s0_readdatavalid), //   input,    width = 1,                                                    .readdatavalid
		.pipe_stage_presplitter_s0_waitrequest                     (mm_interconnect_1_pipe_stage_presplitter_s0_waitrequest),   //   input,    width = 1,                                                    .waitrequest
		.pipe_stage_presplitter_s0_debugaccess                     (mm_interconnect_1_pipe_stage_presplitter_s0_debugaccess),   //  output,    width = 1,                                                    .debugaccess
		.acl_snoop_adapter_0_clk_reset_reset_bridge_in_reset_reset (~reset_reset_n),                                            //   input,    width = 1, acl_snoop_adapter_0_clk_reset_reset_bridge_in_reset.reset
		.clk_clk_clk                                               (clk_clk)                                                    //   input,    width = 1,                                             clk_clk.clk
	);

	ddr_board_acl_memory_bank_divider_0_altera_mm_interconnect_191_vrmkvxa mm_interconnect_2 (
		.pipe_stage_presplitter_m0_address                        (pipe_stage_presplitter_m0_address),                //   input,   width = 33,                          pipe_stage_presplitter_m0.address
		.pipe_stage_presplitter_m0_waitrequest                    (pipe_stage_presplitter_m0_waitrequest),            //  output,    width = 1,                                                   .waitrequest
		.pipe_stage_presplitter_m0_burstcount                     (pipe_stage_presplitter_m0_burstcount),             //   input,    width = 5,                                                   .burstcount
		.pipe_stage_presplitter_m0_byteenable                     (pipe_stage_presplitter_m0_byteenable),             //   input,   width = 64,                                                   .byteenable
		.pipe_stage_presplitter_m0_read                           (pipe_stage_presplitter_m0_read),                   //   input,    width = 1,                                                   .read
		.pipe_stage_presplitter_m0_readdata                       (pipe_stage_presplitter_m0_readdata),               //  output,  width = 512,                                                   .readdata
		.pipe_stage_presplitter_m0_readdatavalid                  (pipe_stage_presplitter_m0_readdatavalid),          //  output,    width = 1,                                                   .readdatavalid
		.pipe_stage_presplitter_m0_write                          (pipe_stage_presplitter_m0_write),                  //   input,    width = 1,                                                   .write
		.pipe_stage_presplitter_m0_writedata                      (pipe_stage_presplitter_m0_writedata),              //   input,  width = 512,                                                   .writedata
		.pipe_stage_presplitter_m0_debugaccess                    (pipe_stage_presplitter_m0_debugaccess),            //   input,    width = 1,                                                   .debugaccess
		.mem_splitter_0_s_address                                 (mm_interconnect_2_mem_splitter_0_s_address),       //  output,   width = 27,                                   mem_splitter_0_s.address
		.mem_splitter_0_s_write                                   (mm_interconnect_2_mem_splitter_0_s_write),         //  output,    width = 1,                                                   .write
		.mem_splitter_0_s_read                                    (mm_interconnect_2_mem_splitter_0_s_read),          //  output,    width = 1,                                                   .read
		.mem_splitter_0_s_readdata                                (mm_interconnect_2_mem_splitter_0_s_readdata),      //   input,  width = 512,                                                   .readdata
		.mem_splitter_0_s_writedata                               (mm_interconnect_2_mem_splitter_0_s_writedata),     //  output,  width = 512,                                                   .writedata
		.mem_splitter_0_s_burstcount                              (mm_interconnect_2_mem_splitter_0_s_burstcount),    //  output,    width = 5,                                                   .burstcount
		.mem_splitter_0_s_byteenable                              (mm_interconnect_2_mem_splitter_0_s_byteenable),    //  output,   width = 64,                                                   .byteenable
		.mem_splitter_0_s_readdatavalid                           (mm_interconnect_2_mem_splitter_0_s_readdatavalid), //   input,    width = 1,                                                   .readdatavalid
		.mem_splitter_0_s_waitrequest                             (mm_interconnect_2_mem_splitter_0_s_waitrequest),   //   input,    width = 1,                                                   .waitrequest
		.pipe_stage_presplitter_reset_reset_bridge_in_reset_reset (~reset_reset_n),                                   //   input,    width = 1, pipe_stage_presplitter_reset_reset_bridge_in_reset.reset
		.clk_clk_clk                                              (clk_clk)                                           //   input,    width = 1,                                            clk_clk.clk
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (~kernel_reset_reset_n),          //   input,  width = 1, reset_in0.reset
		.clk            (kernel_clk_clk),                 //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_reset_out_reset), //  output,  width = 1, reset_out.reset
		.reset_req      (),                               // (terminated),                       
		.reset_req_in0  (1'b0),                           // (terminated),                       
		.reset_in1      (1'b0),                           // (terminated),                       
		.reset_req_in1  (1'b0),                           // (terminated),                       
		.reset_in2      (1'b0),                           // (terminated),                       
		.reset_req_in2  (1'b0),                           // (terminated),                       
		.reset_in3      (1'b0),                           // (terminated),                       
		.reset_req_in3  (1'b0),                           // (terminated),                       
		.reset_in4      (1'b0),                           // (terminated),                       
		.reset_req_in4  (1'b0),                           // (terminated),                       
		.reset_in5      (1'b0),                           // (terminated),                       
		.reset_req_in5  (1'b0),                           // (terminated),                       
		.reset_in6      (1'b0),                           // (terminated),                       
		.reset_req_in6  (1'b0),                           // (terminated),                       
		.reset_in7      (1'b0),                           // (terminated),                       
		.reset_req_in7  (1'b0),                           // (terminated),                       
		.reset_in8      (1'b0),                           // (terminated),                       
		.reset_req_in8  (1'b0),                           // (terminated),                       
		.reset_in9      (1'b0),                           // (terminated),                       
		.reset_req_in9  (1'b0),                           // (terminated),                       
		.reset_in10     (1'b0),                           // (terminated),                       
		.reset_req_in10 (1'b0),                           // (terminated),                       
		.reset_in11     (1'b0),                           // (terminated),                       
		.reset_req_in11 (1'b0),                           // (terminated),                       
		.reset_in12     (1'b0),                           // (terminated),                       
		.reset_req_in12 (1'b0),                           // (terminated),                       
		.reset_in13     (1'b0),                           // (terminated),                       
		.reset_req_in13 (1'b0),                           // (terminated),                       
		.reset_in14     (1'b0),                           // (terminated),                       
		.reset_req_in14 (1'b0),                           // (terminated),                       
		.reset_in15     (1'b0),                           // (terminated),                       
		.reset_req_in15 (1'b0)                            // (terminated),                       
	);

endmodule
