// ddr_board_acl_memory_bank_divider_0_altera_mm_interconnect_191_vrmkvxa.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 19.2 57

`timescale 1 ps / 1 ps
module ddr_board_acl_memory_bank_divider_0_altera_mm_interconnect_191_vrmkvxa (
		input  wire [32:0]  pipe_stage_presplitter_m0_address,                        //                          pipe_stage_presplitter_m0.address
		output wire         pipe_stage_presplitter_m0_waitrequest,                    //                                                   .waitrequest
		input  wire [4:0]   pipe_stage_presplitter_m0_burstcount,                     //                                                   .burstcount
		input  wire [63:0]  pipe_stage_presplitter_m0_byteenable,                     //                                                   .byteenable
		input  wire         pipe_stage_presplitter_m0_read,                           //                                                   .read
		output wire [511:0] pipe_stage_presplitter_m0_readdata,                       //                                                   .readdata
		output wire         pipe_stage_presplitter_m0_readdatavalid,                  //                                                   .readdatavalid
		input  wire         pipe_stage_presplitter_m0_write,                          //                                                   .write
		input  wire [511:0] pipe_stage_presplitter_m0_writedata,                      //                                                   .writedata
		input  wire         pipe_stage_presplitter_m0_debugaccess,                    //                                                   .debugaccess
		output wire [26:0]  mem_splitter_0_s_address,                                 //                                   mem_splitter_0_s.address
		output wire         mem_splitter_0_s_write,                                   //                                                   .write
		output wire         mem_splitter_0_s_read,                                    //                                                   .read
		input  wire [511:0] mem_splitter_0_s_readdata,                                //                                                   .readdata
		output wire [511:0] mem_splitter_0_s_writedata,                               //                                                   .writedata
		output wire [4:0]   mem_splitter_0_s_burstcount,                              //                                                   .burstcount
		output wire [63:0]  mem_splitter_0_s_byteenable,                              //                                                   .byteenable
		input  wire         mem_splitter_0_s_readdatavalid,                           //                                                   .readdatavalid
		input  wire         mem_splitter_0_s_waitrequest,                             //                                                   .waitrequest
		input  wire         pipe_stage_presplitter_reset_reset_bridge_in_reset_reset, // pipe_stage_presplitter_reset_reset_bridge_in_reset.reset
		input  wire         clk_clk_clk                                               //                                            clk_clk.clk
	);

	wire          pipe_stage_presplitter_m0_translator_avalon_universal_master_0_waitrequest;   // mem_splitter_0_s_translator:uav_waitrequest -> pipe_stage_presplitter_m0_translator:uav_waitrequest
	wire  [511:0] pipe_stage_presplitter_m0_translator_avalon_universal_master_0_readdata;      // mem_splitter_0_s_translator:uav_readdata -> pipe_stage_presplitter_m0_translator:uav_readdata
	wire          pipe_stage_presplitter_m0_translator_avalon_universal_master_0_debugaccess;   // pipe_stage_presplitter_m0_translator:uav_debugaccess -> mem_splitter_0_s_translator:uav_debugaccess
	wire   [32:0] pipe_stage_presplitter_m0_translator_avalon_universal_master_0_address;       // pipe_stage_presplitter_m0_translator:uav_address -> mem_splitter_0_s_translator:uav_address
	wire          pipe_stage_presplitter_m0_translator_avalon_universal_master_0_read;          // pipe_stage_presplitter_m0_translator:uav_read -> mem_splitter_0_s_translator:uav_read
	wire   [63:0] pipe_stage_presplitter_m0_translator_avalon_universal_master_0_byteenable;    // pipe_stage_presplitter_m0_translator:uav_byteenable -> mem_splitter_0_s_translator:uav_byteenable
	wire          pipe_stage_presplitter_m0_translator_avalon_universal_master_0_readdatavalid; // mem_splitter_0_s_translator:uav_readdatavalid -> pipe_stage_presplitter_m0_translator:uav_readdatavalid
	wire          pipe_stage_presplitter_m0_translator_avalon_universal_master_0_lock;          // pipe_stage_presplitter_m0_translator:uav_lock -> mem_splitter_0_s_translator:uav_lock
	wire          pipe_stage_presplitter_m0_translator_avalon_universal_master_0_write;         // pipe_stage_presplitter_m0_translator:uav_write -> mem_splitter_0_s_translator:uav_write
	wire  [511:0] pipe_stage_presplitter_m0_translator_avalon_universal_master_0_writedata;     // pipe_stage_presplitter_m0_translator:uav_writedata -> mem_splitter_0_s_translator:uav_writedata
	wire   [10:0] pipe_stage_presplitter_m0_translator_avalon_universal_master_0_burstcount;    // pipe_stage_presplitter_m0_translator:uav_burstcount -> mem_splitter_0_s_translator:uav_burstcount

	ddr_board_acl_memory_bank_divider_0_altera_merlin_master_translator_191_g7h47bq #(
		.AV_ADDRESS_W                (33),
		.AV_DATA_W                   (512),
		.AV_BURSTCOUNT_W             (5),
		.AV_BYTEENABLE_W             (64),
		.UAV_ADDRESS_W               (33),
		.UAV_BURSTCOUNT_W            (11),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (64),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (1),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (0),
		.WAITREQUEST_ALLOWANCE       (0)
	) pipe_stage_presplitter_m0_translator (
		.clk                    (clk_clk_clk),                                                                  //   input,    width = 1,                       clk.clk
		.reset                  (pipe_stage_presplitter_reset_reset_bridge_in_reset_reset),                     //   input,    width = 1,                     reset.reset
		.uav_address            (pipe_stage_presplitter_m0_translator_avalon_universal_master_0_address),       //  output,   width = 33, avalon_universal_master_0.address
		.uav_burstcount         (pipe_stage_presplitter_m0_translator_avalon_universal_master_0_burstcount),    //  output,   width = 11,                          .burstcount
		.uav_read               (pipe_stage_presplitter_m0_translator_avalon_universal_master_0_read),          //  output,    width = 1,                          .read
		.uav_write              (pipe_stage_presplitter_m0_translator_avalon_universal_master_0_write),         //  output,    width = 1,                          .write
		.uav_waitrequest        (pipe_stage_presplitter_m0_translator_avalon_universal_master_0_waitrequest),   //   input,    width = 1,                          .waitrequest
		.uav_readdatavalid      (pipe_stage_presplitter_m0_translator_avalon_universal_master_0_readdatavalid), //   input,    width = 1,                          .readdatavalid
		.uav_byteenable         (pipe_stage_presplitter_m0_translator_avalon_universal_master_0_byteenable),    //  output,   width = 64,                          .byteenable
		.uav_readdata           (pipe_stage_presplitter_m0_translator_avalon_universal_master_0_readdata),      //   input,  width = 512,                          .readdata
		.uav_writedata          (pipe_stage_presplitter_m0_translator_avalon_universal_master_0_writedata),     //  output,  width = 512,                          .writedata
		.uav_lock               (pipe_stage_presplitter_m0_translator_avalon_universal_master_0_lock),          //  output,    width = 1,                          .lock
		.uav_debugaccess        (pipe_stage_presplitter_m0_translator_avalon_universal_master_0_debugaccess),   //  output,    width = 1,                          .debugaccess
		.av_address             (pipe_stage_presplitter_m0_address),                                            //   input,   width = 33,      avalon_anti_master_0.address
		.av_waitrequest         (pipe_stage_presplitter_m0_waitrequest),                                        //  output,    width = 1,                          .waitrequest
		.av_burstcount          (pipe_stage_presplitter_m0_burstcount),                                         //   input,    width = 5,                          .burstcount
		.av_byteenable          (pipe_stage_presplitter_m0_byteenable),                                         //   input,   width = 64,                          .byteenable
		.av_read                (pipe_stage_presplitter_m0_read),                                               //   input,    width = 1,                          .read
		.av_readdata            (pipe_stage_presplitter_m0_readdata),                                           //  output,  width = 512,                          .readdata
		.av_readdatavalid       (pipe_stage_presplitter_m0_readdatavalid),                                      //  output,    width = 1,                          .readdatavalid
		.av_write               (pipe_stage_presplitter_m0_write),                                              //   input,    width = 1,                          .write
		.av_writedata           (pipe_stage_presplitter_m0_writedata),                                          //   input,  width = 512,                          .writedata
		.av_debugaccess         (pipe_stage_presplitter_m0_debugaccess),                                        //   input,    width = 1,                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                         // (terminated),                                         
		.av_begintransfer       (1'b0),                                                                         // (terminated),                                         
		.av_chipselect          (1'b0),                                                                         // (terminated),                                         
		.av_lock                (1'b0),                                                                         // (terminated),                                         
		.uav_clken              (),                                                                             // (terminated),                                         
		.av_clken               (1'b1),                                                                         // (terminated),                                         
		.uav_response           (2'b00),                                                                        // (terminated),                                         
		.av_response            (),                                                                             // (terminated),                                         
		.uav_writeresponsevalid (1'b0),                                                                         // (terminated),                                         
		.av_writeresponsevalid  ()                                                                              // (terminated),                                         
	);

	ddr_board_acl_memory_bank_divider_0_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (27),
		.AV_DATA_W                      (512),
		.UAV_DATA_W                     (512),
		.AV_BURSTCOUNT_W                (5),
		.AV_BYTEENABLE_W                (64),
		.UAV_BYTEENABLE_W               (64),
		.UAV_ADDRESS_W                  (33),
		.UAV_BURSTCOUNT_W               (11),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (64),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) mem_splitter_0_s_translator (
		.clk                    (clk_clk_clk),                                                                  //   input,    width = 1,                      clk.clk
		.reset                  (pipe_stage_presplitter_reset_reset_bridge_in_reset_reset),                     //   input,    width = 1,                    reset.reset
		.uav_address            (pipe_stage_presplitter_m0_translator_avalon_universal_master_0_address),       //   input,   width = 33, avalon_universal_slave_0.address
		.uav_burstcount         (pipe_stage_presplitter_m0_translator_avalon_universal_master_0_burstcount),    //   input,   width = 11,                         .burstcount
		.uav_read               (pipe_stage_presplitter_m0_translator_avalon_universal_master_0_read),          //   input,    width = 1,                         .read
		.uav_write              (pipe_stage_presplitter_m0_translator_avalon_universal_master_0_write),         //   input,    width = 1,                         .write
		.uav_waitrequest        (pipe_stage_presplitter_m0_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,                         .waitrequest
		.uav_readdatavalid      (pipe_stage_presplitter_m0_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,                         .readdatavalid
		.uav_byteenable         (pipe_stage_presplitter_m0_translator_avalon_universal_master_0_byteenable),    //   input,   width = 64,                         .byteenable
		.uav_readdata           (pipe_stage_presplitter_m0_translator_avalon_universal_master_0_readdata),      //  output,  width = 512,                         .readdata
		.uav_writedata          (pipe_stage_presplitter_m0_translator_avalon_universal_master_0_writedata),     //   input,  width = 512,                         .writedata
		.uav_lock               (pipe_stage_presplitter_m0_translator_avalon_universal_master_0_lock),          //   input,    width = 1,                         .lock
		.uav_debugaccess        (pipe_stage_presplitter_m0_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,                         .debugaccess
		.av_address             (mem_splitter_0_s_address),                                                     //  output,   width = 27,      avalon_anti_slave_0.address
		.av_write               (mem_splitter_0_s_write),                                                       //  output,    width = 1,                         .write
		.av_read                (mem_splitter_0_s_read),                                                        //  output,    width = 1,                         .read
		.av_readdata            (mem_splitter_0_s_readdata),                                                    //   input,  width = 512,                         .readdata
		.av_writedata           (mem_splitter_0_s_writedata),                                                   //  output,  width = 512,                         .writedata
		.av_burstcount          (mem_splitter_0_s_burstcount),                                                  //  output,    width = 5,                         .burstcount
		.av_byteenable          (mem_splitter_0_s_byteenable),                                                  //  output,   width = 64,                         .byteenable
		.av_readdatavalid       (mem_splitter_0_s_readdatavalid),                                               //   input,    width = 1,                         .readdatavalid
		.av_waitrequest         (mem_splitter_0_s_waitrequest),                                                 //   input,    width = 1,                         .waitrequest
		.av_begintransfer       (),                                                                             // (terminated),                                        
		.av_beginbursttransfer  (),                                                                             // (terminated),                                        
		.av_writebyteenable     (),                                                                             // (terminated),                                        
		.av_lock                (),                                                                             // (terminated),                                        
		.av_chipselect          (),                                                                             // (terminated),                                        
		.av_clken               (),                                                                             // (terminated),                                        
		.uav_clken              (1'b0),                                                                         // (terminated),                                        
		.av_debugaccess         (),                                                                             // (terminated),                                        
		.av_outputenable        (),                                                                             // (terminated),                                        
		.uav_response           (),                                                                             // (terminated),                                        
		.av_response            (2'b00),                                                                        // (terminated),                                        
		.uav_writeresponsevalid (),                                                                             // (terminated),                                        
		.av_writeresponsevalid  (1'b0)                                                                          // (terminated),                                        
	);

endmodule
