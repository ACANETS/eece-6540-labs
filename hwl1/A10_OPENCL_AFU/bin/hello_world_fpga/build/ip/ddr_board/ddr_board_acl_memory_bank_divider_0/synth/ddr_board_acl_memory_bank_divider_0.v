// ddr_board_acl_memory_bank_divider_0.v

// Generated using ACDS version 19.2 57

`timescale 1 ps / 1 ps
module ddr_board_acl_memory_bank_divider_0 (
		input  wire         clk_clk,                  //                 clk.clk
		input  wire         reset_reset_n,            //               reset.reset_n
		output wire [32:0]  acl_bsp_snoop_data,       //       acl_bsp_snoop.data
		output wire         acl_bsp_snoop_valid,      //                    .valid
		input  wire         acl_bsp_snoop_ready,      //                    .ready
		input  wire         kernel_clk_clk,           //          kernel_clk.clk
		input  wire         kernel_reset_reset_n,     //        kernel_reset.reset_n
		input  wire [511:0] s_writedata,              //                   s.writedata
		input  wire         s_read,                   //                    .read
		input  wire         s_write,                  //                    .write
		input  wire [4:0]   s_burstcount,             //                    .burstcount
		input  wire [63:0]  s_byteenable,             //                    .byteenable
		output wire         s_waitrequest,            //                    .waitrequest
		output wire [511:0] s_readdata,               //                    .readdata
		output wire         s_readdatavalid,          //                    .readdatavalid
		input  wire [26:0]  s_address,                //                    .address
		input  wire [1:0]   acl_bsp_memorg_host_mode, // acl_bsp_memorg_host.mode
		output wire [31:0]  bank1_address,            //               bank1.address
		output wire [511:0] bank1_writedata,          //                    .writedata
		output wire         bank1_read,               //                    .read
		output wire         bank1_write,              //                    .write
		output wire [4:0]   bank1_burstcount,         //                    .burstcount
		output wire [63:0]  bank1_byteenable,         //                    .byteenable
		input  wire         bank1_waitrequest,        //                    .waitrequest
		input  wire [511:0] bank1_readdata,           //                    .readdata
		input  wire         bank1_readdatavalid,      //                    .readdatavalid
		output wire [31:0]  bank2_address,            //               bank2.address
		output wire [511:0] bank2_writedata,          //                    .writedata
		output wire         bank2_read,               //                    .read
		output wire         bank2_write,              //                    .write
		output wire [4:0]   bank2_burstcount,         //                    .burstcount
		output wire [63:0]  bank2_byteenable,         //                    .byteenable
		input  wire         bank2_waitrequest,        //                    .waitrequest
		input  wire [511:0] bank2_readdata,           //                    .readdata
		input  wire         bank2_readdatavalid       //                    .readdatavalid
	);

	ddr_board_acl_memory_bank_divider_0_acl_memory_bank_divider_10_zolcb3y ddr_board_acl_memory_bank_divider_0 (
		.clk_clk                  (clk_clk),                  //   input,    width = 1,                 clk.clk
		.reset_reset_n            (reset_reset_n),            //   input,    width = 1,               reset.reset_n
		.acl_bsp_snoop_data       (acl_bsp_snoop_data),       //  output,   width = 33,       acl_bsp_snoop.data
		.acl_bsp_snoop_valid      (acl_bsp_snoop_valid),      //  output,    width = 1,                    .valid
		.acl_bsp_snoop_ready      (acl_bsp_snoop_ready),      //   input,    width = 1,                    .ready
		.kernel_clk_clk           (kernel_clk_clk),           //   input,    width = 1,          kernel_clk.clk
		.kernel_reset_reset_n     (kernel_reset_reset_n),     //   input,    width = 1,        kernel_reset.reset_n
		.s_writedata              (s_writedata),              //   input,  width = 512,                   s.writedata
		.s_read                   (s_read),                   //   input,    width = 1,                    .read
		.s_write                  (s_write),                  //   input,    width = 1,                    .write
		.s_burstcount             (s_burstcount),             //   input,    width = 5,                    .burstcount
		.s_byteenable             (s_byteenable),             //   input,   width = 64,                    .byteenable
		.s_waitrequest            (s_waitrequest),            //  output,    width = 1,                    .waitrequest
		.s_readdata               (s_readdata),               //  output,  width = 512,                    .readdata
		.s_readdatavalid          (s_readdatavalid),          //  output,    width = 1,                    .readdatavalid
		.s_address                (s_address),                //   input,   width = 27,                    .address
		.acl_bsp_memorg_host_mode (acl_bsp_memorg_host_mode), //   input,    width = 2, acl_bsp_memorg_host.mode
		.bank1_address            (bank1_address),            //  output,   width = 32,               bank1.address
		.bank1_writedata          (bank1_writedata),          //  output,  width = 512,                    .writedata
		.bank1_read               (bank1_read),               //  output,    width = 1,                    .read
		.bank1_write              (bank1_write),              //  output,    width = 1,                    .write
		.bank1_burstcount         (bank1_burstcount),         //  output,    width = 5,                    .burstcount
		.bank1_byteenable         (bank1_byteenable),         //  output,   width = 64,                    .byteenable
		.bank1_waitrequest        (bank1_waitrequest),        //   input,    width = 1,                    .waitrequest
		.bank1_readdata           (bank1_readdata),           //   input,  width = 512,                    .readdata
		.bank1_readdatavalid      (bank1_readdatavalid),      //   input,    width = 1,                    .readdatavalid
		.bank2_address            (bank2_address),            //  output,   width = 32,               bank2.address
		.bank2_writedata          (bank2_writedata),          //  output,  width = 512,                    .writedata
		.bank2_read               (bank2_read),               //  output,    width = 1,                    .read
		.bank2_write              (bank2_write),              //  output,    width = 1,                    .write
		.bank2_burstcount         (bank2_burstcount),         //  output,    width = 5,                    .burstcount
		.bank2_byteenable         (bank2_byteenable),         //  output,   width = 64,                    .byteenable
		.bank2_waitrequest        (bank2_waitrequest),        //   input,    width = 1,                    .waitrequest
		.bank2_readdata           (bank2_readdata),           //   input,  width = 512,                    .readdata
		.bank2_readdatavalid      (bank2_readdatavalid)       //   input,    width = 1,                    .readdatavalid
	);

endmodule
